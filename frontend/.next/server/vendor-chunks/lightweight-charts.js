"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lightweight-charts";
exports.ids = ["vendor-chunks/lightweight-charts"];
exports.modules = {

/***/ "(ssr)/../node_modules/lightweight-charts/dist/lightweight-charts.development.mjs":
/*!**********************************************************************************!*\
  !*** ../node_modules/lightweight-charts/dist/lightweight-charts.development.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorType: () => (/* binding */ ColorType),\n/* harmony export */   CrosshairMode: () => (/* binding */ CrosshairMode),\n/* harmony export */   LastPriceAnimationMode: () => (/* binding */ LastPriceAnimationMode),\n/* harmony export */   LineStyle: () => (/* binding */ LineStyle),\n/* harmony export */   LineType: () => (/* binding */ LineType),\n/* harmony export */   MismatchDirection: () => (/* binding */ MismatchDirection),\n/* harmony export */   PriceLineSource: () => (/* binding */ PriceLineSource),\n/* harmony export */   PriceScaleMode: () => (/* binding */ PriceScaleMode),\n/* harmony export */   TickMarkType: () => (/* binding */ TickMarkType),\n/* harmony export */   TrackingModeExitMode: () => (/* binding */ TrackingModeExitMode),\n/* harmony export */   createChart: () => (/* binding */ createChart),\n/* harmony export */   createChartEx: () => (/* binding */ createChartEx),\n/* harmony export */   customSeriesDefaultOptions: () => (/* binding */ customSeriesDefaultOptions),\n/* harmony export */   defaultHorzScaleBehavior: () => (/* binding */ defaultHorzScaleBehavior),\n/* harmony export */   isBusinessDay: () => (/* binding */ isBusinessDay),\n/* harmony export */   isUTCTimestamp: () => (/* binding */ isUTCTimestamp),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var fancy_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fancy-canvas */ \"(ssr)/../node_modules/fancy-canvas/index.mjs\");\n/*!\n * @license\n * TradingView Lightweight Chartsâ„¢ v4.2.3\n * Copyright (c) 2025 TradingView, Inc.\n * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0\n */ \nconst candlestickStyleDefaults = {\n    upColor: \"#26a69a\",\n    downColor: \"#ef5350\",\n    wickVisible: true,\n    borderVisible: true,\n    borderColor: \"#378658\",\n    borderUpColor: \"#26a69a\",\n    borderDownColor: \"#ef5350\",\n    wickColor: \"#737375\",\n    wickUpColor: \"#26a69a\",\n    wickDownColor: \"#ef5350\"\n};\nconst barStyleDefaults = {\n    upColor: \"#26a69a\",\n    downColor: \"#ef5350\",\n    openVisible: true,\n    thinBars: true\n};\nconst lineStyleDefaults = {\n    color: \"#2196f3\",\n    lineStyle: 0 /* LineStyle.Solid */ ,\n    lineWidth: 3,\n    lineType: 0 /* LineType.Simple */ ,\n    lineVisible: true,\n    crosshairMarkerVisible: true,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: \"\",\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: \"\",\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */ ,\n    pointMarkersVisible: false\n};\nconst areaStyleDefaults = {\n    topColor: \"rgba( 46, 220, 135, 0.4)\",\n    bottomColor: \"rgba( 40, 221, 100, 0)\",\n    invertFilledArea: false,\n    lineColor: \"#33D778\",\n    lineStyle: 0 /* LineStyle.Solid */ ,\n    lineWidth: 3,\n    lineType: 0 /* LineType.Simple */ ,\n    lineVisible: true,\n    crosshairMarkerVisible: true,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: \"\",\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: \"\",\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */ ,\n    pointMarkersVisible: false\n};\nconst baselineStyleDefaults = {\n    baseValue: {\n        type: \"price\",\n        price: 0\n    },\n    topFillColor1: \"rgba(38, 166, 154, 0.28)\",\n    topFillColor2: \"rgba(38, 166, 154, 0.05)\",\n    topLineColor: \"rgba(38, 166, 154, 1)\",\n    bottomFillColor1: \"rgba(239, 83, 80, 0.05)\",\n    bottomFillColor2: \"rgba(239, 83, 80, 0.28)\",\n    bottomLineColor: \"rgba(239, 83, 80, 1)\",\n    lineWidth: 3,\n    lineStyle: 0 /* LineStyle.Solid */ ,\n    lineType: 0 /* LineType.Simple */ ,\n    lineVisible: true,\n    crosshairMarkerVisible: true,\n    crosshairMarkerRadius: 4,\n    crosshairMarkerBorderColor: \"\",\n    crosshairMarkerBorderWidth: 2,\n    crosshairMarkerBackgroundColor: \"\",\n    lastPriceAnimation: 0 /* LastPriceAnimationMode.Disabled */ ,\n    pointMarkersVisible: false\n};\nconst histogramStyleDefaults = {\n    color: \"#26a69a\",\n    base: 0\n};\nconst customStyleDefaults = {\n    color: \"#2196f3\"\n};\nconst seriesOptionsDefaults = {\n    title: \"\",\n    visible: true,\n    lastValueVisible: true,\n    priceLineVisible: true,\n    priceLineSource: 0 /* PriceLineSource.LastBar */ ,\n    priceLineWidth: 1,\n    priceLineColor: \"\",\n    priceLineStyle: 2 /* LineStyle.Dashed */ ,\n    baseLineVisible: true,\n    baseLineWidth: 1,\n    baseLineColor: \"#B2B5BE\",\n    baseLineStyle: 0 /* LineStyle.Solid */ ,\n    priceFormat: {\n        type: \"price\",\n        precision: 2,\n        minMove: 0.01\n    }\n};\n/**\n * Represents the possible line types.\n */ var LineType;\n(function(LineType) {\n    /**\n     * A line.\n     */ LineType[LineType[\"Simple\"] = 0] = \"Simple\";\n    /**\n     * A stepped line.\n     */ LineType[LineType[\"WithSteps\"] = 1] = \"WithSteps\";\n    /**\n     * A curved line.\n     */ LineType[LineType[\"Curved\"] = 2] = \"Curved\";\n})(LineType || (LineType = {}));\n/**\n * Represents the possible line styles.\n */ var LineStyle;\n(function(LineStyle) {\n    /**\n     * A solid line.\n     */ LineStyle[LineStyle[\"Solid\"] = 0] = \"Solid\";\n    /**\n     * A dotted line.\n     */ LineStyle[LineStyle[\"Dotted\"] = 1] = \"Dotted\";\n    /**\n     * A dashed line.\n     */ LineStyle[LineStyle[\"Dashed\"] = 2] = \"Dashed\";\n    /**\n     * A dashed line with bigger dashes.\n     */ LineStyle[LineStyle[\"LargeDashed\"] = 3] = \"LargeDashed\";\n    /**\n     * A dotted line with more space between dots.\n     */ LineStyle[LineStyle[\"SparseDotted\"] = 4] = \"SparseDotted\";\n})(LineStyle || (LineStyle = {}));\nfunction setLineStyle(ctx, style) {\n    const dashPatterns = {\n        [0 /* LineStyle.Solid */ ]: [],\n        [1 /* LineStyle.Dotted */ ]: [\n            ctx.lineWidth,\n            ctx.lineWidth\n        ],\n        [2 /* LineStyle.Dashed */ ]: [\n            2 * ctx.lineWidth,\n            2 * ctx.lineWidth\n        ],\n        [3 /* LineStyle.LargeDashed */ ]: [\n            6 * ctx.lineWidth,\n            6 * ctx.lineWidth\n        ],\n        [4 /* LineStyle.SparseDotted */ ]: [\n            ctx.lineWidth,\n            4 * ctx.lineWidth\n        ]\n    };\n    const dashPattern = dashPatterns[style];\n    ctx.setLineDash(dashPattern);\n}\nfunction drawHorizontalLine(ctx, y, left, right) {\n    ctx.beginPath();\n    const correction = ctx.lineWidth % 2 ? 0.5 : 0;\n    ctx.moveTo(left, y + correction);\n    ctx.lineTo(right, y + correction);\n    ctx.stroke();\n}\nfunction drawVerticalLine(ctx, x, top, bottom) {\n    ctx.beginPath();\n    const correction = ctx.lineWidth % 2 ? 0.5 : 0;\n    ctx.moveTo(x + correction, top);\n    ctx.lineTo(x + correction, bottom);\n    ctx.stroke();\n}\nfunction strokeInPixel(ctx, drawFunction) {\n    ctx.save();\n    if (ctx.lineWidth % 2) {\n        ctx.translate(0.5, 0.5);\n    }\n    drawFunction();\n    ctx.restore();\n}\n/**\n * Checks an assertion. Throws if the assertion is failed.\n *\n * @param condition - Result of the assertion evaluation\n * @param message - Text to include in the exception message\n */ function assert(condition, message) {\n    if (!condition) {\n        throw new Error(\"Assertion failed\" + (message ? \": \" + message : \"\"));\n    }\n}\nfunction ensureDefined(value) {\n    if (value === undefined) {\n        throw new Error(\"Value is undefined\");\n    }\n    return value;\n}\nfunction ensureNotNull(value) {\n    if (value === null) {\n        throw new Error(\"Value is null\");\n    }\n    return value;\n}\nfunction ensure(value) {\n    return ensureNotNull(ensureDefined(value));\n}\n/**\n * Compile time check for never\n */ function ensureNever(value) {}\n/**\n * Note this object should be explicitly marked as public so that dts-bundle-generator does not mangle the property names.\n *\n * @public\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\n */ const namedColorRgbHexStrings = {\n    // The order of properties in this Record is not important for the internal logic.\n    // It's just GZIPped better when props follows this order.\n    // Please add new colors to the end of the record.\n    khaki: \"#f0e68c\",\n    azure: \"#f0ffff\",\n    aliceblue: \"#f0f8ff\",\n    ghostwhite: \"#f8f8ff\",\n    gold: \"#ffd700\",\n    goldenrod: \"#daa520\",\n    gainsboro: \"#dcdcdc\",\n    gray: \"#808080\",\n    green: \"#008000\",\n    honeydew: \"#f0fff0\",\n    floralwhite: \"#fffaf0\",\n    lightblue: \"#add8e6\",\n    lightcoral: \"#f08080\",\n    lemonchiffon: \"#fffacd\",\n    hotpink: \"#ff69b4\",\n    lightyellow: \"#ffffe0\",\n    greenyellow: \"#adff2f\",\n    lightgoldenrodyellow: \"#fafad2\",\n    limegreen: \"#32cd32\",\n    linen: \"#faf0e6\",\n    lightcyan: \"#e0ffff\",\n    magenta: \"#f0f\",\n    maroon: \"#800000\",\n    olive: \"#808000\",\n    orange: \"#ffa500\",\n    oldlace: \"#fdf5e6\",\n    mediumblue: \"#0000cd\",\n    transparent: \"#0000\",\n    lime: \"#0f0\",\n    lightpink: \"#ffb6c1\",\n    mistyrose: \"#ffe4e1\",\n    moccasin: \"#ffe4b5\",\n    midnightblue: \"#191970\",\n    orchid: \"#da70d6\",\n    mediumorchid: \"#ba55d3\",\n    mediumturquoise: \"#48d1cc\",\n    orangered: \"#ff4500\",\n    royalblue: \"#4169e1\",\n    powderblue: \"#b0e0e6\",\n    red: \"#f00\",\n    coral: \"#ff7f50\",\n    turquoise: \"#40e0d0\",\n    white: \"#fff\",\n    whitesmoke: \"#f5f5f5\",\n    wheat: \"#f5deb3\",\n    teal: \"#008080\",\n    steelblue: \"#4682b4\",\n    bisque: \"#ffe4c4\",\n    aquamarine: \"#7fffd4\",\n    aqua: \"#0ff\",\n    sienna: \"#a0522d\",\n    silver: \"#c0c0c0\",\n    springgreen: \"#00ff7f\",\n    antiquewhite: \"#faebd7\",\n    burlywood: \"#deb887\",\n    brown: \"#a52a2a\",\n    beige: \"#f5f5dc\",\n    chocolate: \"#d2691e\",\n    chartreuse: \"#7fff00\",\n    cornflowerblue: \"#6495ed\",\n    cornsilk: \"#fff8dc\",\n    crimson: \"#dc143c\",\n    cadetblue: \"#5f9ea0\",\n    tomato: \"#ff6347\",\n    fuchsia: \"#f0f\",\n    blue: \"#00f\",\n    salmon: \"#fa8072\",\n    blanchedalmond: \"#ffebcd\",\n    slateblue: \"#6a5acd\",\n    slategray: \"#708090\",\n    thistle: \"#d8bfd8\",\n    tan: \"#d2b48c\",\n    cyan: \"#0ff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgoldenrod: \"#b8860b\",\n    darkgray: \"#a9a9a9\",\n    blueviolet: \"#8a2be2\",\n    black: \"#000\",\n    darkmagenta: \"#8b008b\",\n    darkslateblue: \"#483d8b\",\n    darkkhaki: \"#bdb76b\",\n    darkorchid: \"#9932cc\",\n    darkorange: \"#ff8c00\",\n    darkgreen: \"#006400\",\n    darkred: \"#8b0000\",\n    dodgerblue: \"#1e90ff\",\n    darkslategray: \"#2f4f4f\",\n    dimgray: \"#696969\",\n    deepskyblue: \"#00bfff\",\n    firebrick: \"#b22222\",\n    forestgreen: \"#228b22\",\n    indigo: \"#4b0082\",\n    ivory: \"#fffff0\",\n    lavenderblush: \"#fff0f5\",\n    feldspar: \"#d19275\",\n    indianred: \"#cd5c5c\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightskyblue: \"#87cefa\",\n    lightslategray: \"#789\",\n    lightslateblue: \"#8470ff\",\n    snow: \"#fffafa\",\n    lightseagreen: \"#20b2aa\",\n    lightsalmon: \"#ffa07a\",\n    darksalmon: \"#e9967a\",\n    darkviolet: \"#9400d3\",\n    mediumpurple: \"#9370d8\",\n    mediumaquamarine: \"#66cdaa\",\n    skyblue: \"#87ceeb\",\n    lavender: \"#e6e6fa\",\n    lightsteelblue: \"#b0c4de\",\n    mediumvioletred: \"#c71585\",\n    mintcream: \"#f5fffa\",\n    navajowhite: \"#ffdead\",\n    navy: \"#000080\",\n    olivedrab: \"#6b8e23\",\n    palevioletred: \"#d87093\",\n    violetred: \"#d02090\",\n    yellow: \"#ff0\",\n    yellowgreen: \"#9acd32\",\n    lawngreen: \"#7cfc00\",\n    pink: \"#ffc0cb\",\n    paleturquoise: \"#afeeee\",\n    palegoldenrod: \"#eee8aa\",\n    darkolivegreen: \"#556b2f\",\n    darkseagreen: \"#8fbc8f\",\n    darkturquoise: \"#00ced1\",\n    peachpuff: \"#ffdab9\",\n    deeppink: \"#ff1493\",\n    violet: \"#ee82ee\",\n    palegreen: \"#98fb98\",\n    mediumseagreen: \"#3cb371\",\n    peru: \"#cd853f\",\n    saddlebrown: \"#8b4513\",\n    sandybrown: \"#f4a460\",\n    rosybrown: \"#bc8f8f\",\n    purple: \"#800080\",\n    seagreen: \"#2e8b57\",\n    seashell: \"#fff5ee\",\n    papayawhip: \"#ffefd5\",\n    mediumslateblue: \"#7b68ee\",\n    plum: \"#dda0dd\",\n    mediumspringgreen: \"#00fa9a\"\n};\nfunction normalizeRgbComponent(component) {\n    if (component < 0) {\n        return 0;\n    }\n    if (component > 255) {\n        return 255;\n    }\n    // NaN values are treated as 0\n    return Math.round(component) || 0;\n}\nfunction normalizeAlphaComponent(component) {\n    if (component <= 0 || component > 1) {\n        return Math.min(Math.max(component, 0), 1);\n    }\n    // limit the precision of all numbers to at most 4 digits in fractional part\n    return Math.round(component * 10000) / 10000;\n}\n/**\n * @example\n * #fb0\n * @example\n * #f0f\n * @example\n * #f0fa\n */ const shortHexRe = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;\n/**\n * @example\n * #00ff00\n * @example\n * #336699\n * @example\n * #336699FA\n */ const hexRe = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;\n/**\n * @example\n * rgb(123, 234, 45)\n * @example\n * rgb(255,234,245)\n */ const rgbRe = /^rgb\\(\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*\\)$/;\n/**\n * @example\n * rgba(123, 234, 45, 1)\n * @example\n * rgba(255,234,245,0.1)\n */ const rgbaRe = /^rgba\\(\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d{1,10})\\s*,\\s*(-?\\d*\\.?\\d+)\\s*\\)$/;\nfunction colorStringToRgba(colorString) {\n    colorString = colorString.toLowerCase();\n    // eslint-disable-next-line no-restricted-syntax\n    if (colorString in namedColorRgbHexStrings) {\n        colorString = namedColorRgbHexStrings[colorString];\n    }\n    {\n        const matches = rgbaRe.exec(colorString) || rgbRe.exec(colorString);\n        if (matches) {\n            return [\n                normalizeRgbComponent(parseInt(matches[1], 10)),\n                normalizeRgbComponent(parseInt(matches[2], 10)),\n                normalizeRgbComponent(parseInt(matches[3], 10)),\n                normalizeAlphaComponent(matches.length < 5 ? 1 : parseFloat(matches[4]))\n            ];\n        }\n    }\n    {\n        const matches = hexRe.exec(colorString);\n        if (matches) {\n            return [\n                normalizeRgbComponent(parseInt(matches[1], 16)),\n                normalizeRgbComponent(parseInt(matches[2], 16)),\n                normalizeRgbComponent(parseInt(matches[3], 16)),\n                1\n            ];\n        }\n    }\n    {\n        const matches = shortHexRe.exec(colorString);\n        if (matches) {\n            return [\n                normalizeRgbComponent(parseInt(matches[1], 16) * 0x11),\n                normalizeRgbComponent(parseInt(matches[2], 16) * 0x11),\n                normalizeRgbComponent(parseInt(matches[3], 16) * 0x11),\n                1\n            ];\n        }\n    }\n    throw new Error(`Cannot parse color: ${colorString}`);\n}\nfunction rgbaToGrayscale(rgbValue) {\n    // Originally, the NTSC RGB to YUV formula\n    // perfected by @eugene-korobko's black magic\n    const redComponentGrayscaleWeight = 0.199;\n    const greenComponentGrayscaleWeight = 0.687;\n    const blueComponentGrayscaleWeight = 0.114;\n    return redComponentGrayscaleWeight * rgbValue[0] + greenComponentGrayscaleWeight * rgbValue[1] + blueComponentGrayscaleWeight * rgbValue[2];\n}\nfunction applyAlpha(color, alpha) {\n    // special case optimization\n    if (color === \"transparent\") {\n        return color;\n    }\n    const originRgba = colorStringToRgba(color);\n    const originAlpha = originRgba[3];\n    return `rgba(${originRgba[0]}, ${originRgba[1]}, ${originRgba[2]}, ${alpha * originAlpha})`;\n}\nfunction generateContrastColors(backgroundColor) {\n    const rgb = colorStringToRgba(backgroundColor);\n    return {\n        _internal_background: `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`,\n        _internal_foreground: rgbaToGrayscale(rgb) > 160 ? \"black\" : \"white\"\n    };\n}\nfunction colorStringToGrayscale(backgroundColor) {\n    return rgbaToGrayscale(colorStringToRgba(backgroundColor));\n}\nfunction gradientColorAtPercent(topColor, bottomColor, percent) {\n    const [topR, topG, topB, topA] = colorStringToRgba(topColor);\n    const [bottomR, bottomG, bottomB, bottomA] = colorStringToRgba(bottomColor);\n    const resultRgba = [\n        normalizeRgbComponent(topR + percent * (bottomR - topR)),\n        normalizeRgbComponent(topG + percent * (bottomG - topG)),\n        normalizeRgbComponent(topB + percent * (bottomB - topB)),\n        normalizeAlphaComponent(topA + percent * (bottomA - topA))\n    ];\n    return `rgba(${resultRgba[0]}, ${resultRgba[1]}, ${resultRgba[2]}, ${resultRgba[3]})`;\n}\nclass Delegate {\n    constructor(){\n        this._private__listeners = [];\n    }\n    _internal_subscribe(callback, linkedObject, singleshot) {\n        const listener = {\n            _internal_callback: callback,\n            _internal_linkedObject: linkedObject,\n            _internal_singleshot: singleshot === true\n        };\n        this._private__listeners.push(listener);\n    }\n    _internal_unsubscribe(callback) {\n        const index = this._private__listeners.findIndex((listener)=>callback === listener._internal_callback);\n        if (index > -1) {\n            this._private__listeners.splice(index, 1);\n        }\n    }\n    _internal_unsubscribeAll(linkedObject) {\n        this._private__listeners = this._private__listeners.filter((listener)=>listener._internal_linkedObject !== linkedObject);\n    }\n    _internal_fire(param1, param2, param3) {\n        const listenersSnapshot = [\n            ...this._private__listeners\n        ];\n        this._private__listeners = this._private__listeners.filter((listener)=>!listener._internal_singleshot);\n        listenersSnapshot.forEach((listener)=>listener._internal_callback(param1, param2, param3));\n    }\n    _internal_hasListeners() {\n        return this._private__listeners.length > 0;\n    }\n    _internal_destroy() {\n        this._private__listeners = [];\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction merge(dst, ...sources) {\n    for (const src of sources){\n        // eslint-disable-next-line no-restricted-syntax\n        for(const i in src){\n            if (src[i] === undefined || !Object.prototype.hasOwnProperty.call(src, i) || [\n                \"__proto__\",\n                \"constructor\",\n                \"prototype\"\n            ].includes(i)) {\n                continue;\n            }\n            if (\"object\" !== typeof src[i] || dst[i] === undefined || Array.isArray(src[i])) {\n                dst[i] = src[i];\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                merge(dst[i], src[i]);\n            }\n        }\n    }\n    return dst;\n}\nfunction isNumber(value) {\n    return typeof value === \"number\" && isFinite(value);\n}\nfunction isInteger(value) {\n    return typeof value === \"number\" && value % 1 === 0;\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\nfunction isBoolean(value) {\n    return typeof value === \"boolean\";\n}\nfunction clone(object) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const o = object;\n    if (!o || \"object\" !== typeof o) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return o;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let c;\n    if (Array.isArray(o)) {\n        c = [];\n    } else {\n        c = {};\n    }\n    let p;\n    let v;\n    // eslint-disable-next-line no-restricted-syntax\n    for(p in o){\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,no-prototype-builtins\n        if (o.hasOwnProperty(p)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            v = o[p];\n            if (v && \"object\" === typeof v) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                c[p] = clone(v);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                c[p] = v;\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return c;\n}\nfunction notNull(t) {\n    return t !== null;\n}\nfunction undefinedIfNull(t) {\n    return t === null ? undefined : t;\n}\n/**\n * Default font family.\n * Must be used to generate font string when font is not specified.\n */ const defaultFontFamily = `-apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif`;\n/**\n * Generates a font string, which can be used to set in canvas' font property.\n * If no family provided, {@link defaultFontFamily} will be used.\n *\n * @param size - Font size in pixels.\n * @param family - Optional font family.\n * @param style - Optional font style.\n * @returns The font string.\n */ function makeFont(size, family, style) {\n    if (style !== undefined) {\n        style = `${style} `;\n    } else {\n        style = \"\";\n    }\n    if (family === undefined) {\n        family = defaultFontFamily;\n    }\n    return `${style}${size}px ${family}`;\n}\nclass PriceAxisRendererOptionsProvider {\n    constructor(chartModel){\n        this._private__rendererOptions = {\n            _internal_borderSize: 1 /* RendererConstants.BorderSize */ ,\n            _internal_tickLength: 5 /* RendererConstants.TickLength */ ,\n            _internal_fontSize: NaN,\n            _internal_font: \"\",\n            _internal_fontFamily: \"\",\n            _internal_color: \"\",\n            _internal_paneBackgroundColor: \"\",\n            _internal_paddingBottom: 0,\n            _internal_paddingInner: 0,\n            _internal_paddingOuter: 0,\n            _internal_paddingTop: 0,\n            _internal_baselineOffset: 0\n        };\n        this._private__chartModel = chartModel;\n    }\n    _internal_options() {\n        const rendererOptions = this._private__rendererOptions;\n        const currentFontSize = this._private__fontSize();\n        const currentFontFamily = this._private__fontFamily();\n        if (rendererOptions._internal_fontSize !== currentFontSize || rendererOptions._internal_fontFamily !== currentFontFamily) {\n            rendererOptions._internal_fontSize = currentFontSize;\n            rendererOptions._internal_fontFamily = currentFontFamily;\n            rendererOptions._internal_font = makeFont(currentFontSize, currentFontFamily);\n            rendererOptions._internal_paddingTop = 2.5 / 12 * currentFontSize; // 2.5 px for 12px font\n            rendererOptions._internal_paddingBottom = rendererOptions._internal_paddingTop;\n            rendererOptions._internal_paddingInner = currentFontSize / 12 * rendererOptions._internal_tickLength;\n            rendererOptions._internal_paddingOuter = currentFontSize / 12 * rendererOptions._internal_tickLength;\n            rendererOptions._internal_baselineOffset = 0;\n        }\n        rendererOptions._internal_color = this._private__textColor();\n        rendererOptions._internal_paneBackgroundColor = this._private__paneBackgroundColor();\n        return this._private__rendererOptions;\n    }\n    _private__textColor() {\n        return this._private__chartModel._internal_options().layout.textColor;\n    }\n    _private__paneBackgroundColor() {\n        return this._private__chartModel._internal_backgroundTopColor();\n    }\n    _private__fontSize() {\n        return this._private__chartModel._internal_options().layout.fontSize;\n    }\n    _private__fontFamily() {\n        return this._private__chartModel._internal_options().layout.fontFamily;\n    }\n}\nclass CompositeRenderer {\n    constructor(){\n        this._private__renderers = [];\n    }\n    _internal_setRenderers(renderers) {\n        this._private__renderers = renderers;\n    }\n    _internal_draw(target, isHovered, hitTestData) {\n        this._private__renderers.forEach((r)=>{\n            r._internal_draw(target, isHovered, hitTestData);\n        });\n    }\n}\nclass BitmapCoordinatesPaneRenderer {\n    _internal_draw(target, isHovered, hitTestData) {\n        target.useBitmapCoordinateSpace((scope)=>this._internal__drawImpl(scope, isHovered, hitTestData));\n    }\n}\nclass PaneRendererMarks extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._internal__data = null;\n    }\n    _internal_setData(data) {\n        this._internal__data = data;\n    }\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\n        if (this._internal__data === null || this._internal__data._internal_visibleRange === null) {\n            return;\n        }\n        const visibleRange = this._internal__data._internal_visibleRange;\n        const data = this._internal__data;\n        const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n        const correction = tickWidth % 2 / 2;\n        const draw = (radiusMedia)=>{\n            ctx.beginPath();\n            for(let i = visibleRange.to - 1; i >= visibleRange.from; --i){\n                const point = data._internal_items[i];\n                const centerX = Math.round(point._internal_x * horizontalPixelRatio) + correction; // correct x coordinate only\n                const centerY = point._internal_y * verticalPixelRatio;\n                const radius = radiusMedia * verticalPixelRatio + correction;\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n            }\n            ctx.fill();\n        };\n        if (data._internal_lineWidth > 0) {\n            ctx.fillStyle = data._internal_backColor;\n            draw(data._internal_radius + data._internal_lineWidth);\n        }\n        ctx.fillStyle = data._internal_lineColor;\n        draw(data._internal_radius);\n    }\n}\nfunction createEmptyMarkerData() {\n    return {\n        _internal_items: [\n            {\n                _internal_x: 0,\n                _internal_y: 0,\n                _internal_time: 0,\n                _internal_price: 0\n            }\n        ],\n        _internal_lineColor: \"\",\n        _internal_backColor: \"\",\n        _internal_radius: 0,\n        _internal_lineWidth: 0,\n        _internal_visibleRange: null\n    };\n}\nconst rangeForSinglePoint = {\n    from: 0,\n    to: 1\n};\nclass CrosshairMarksPaneView {\n    constructor(chartModel, crosshair){\n        this._private__compositeRenderer = new CompositeRenderer();\n        this._private__markersRenderers = [];\n        this._private__markersData = [];\n        this._private__invalidated = true;\n        this._private__chartModel = chartModel;\n        this._private__crosshair = crosshair;\n        this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);\n    }\n    _internal_update(updateType) {\n        const serieses = this._private__chartModel._internal_serieses();\n        if (serieses.length !== this._private__markersRenderers.length) {\n            this._private__markersData = serieses.map(createEmptyMarkerData);\n            this._private__markersRenderers = this._private__markersData.map((data)=>{\n                const res = new PaneRendererMarks();\n                res._internal_setData(data);\n                return res;\n            });\n            this._private__compositeRenderer._internal_setRenderers(this._private__markersRenderers);\n        }\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n        }\n        return this._private__compositeRenderer;\n    }\n    _private__updateImpl() {\n        const forceHidden = this._private__crosshair._internal_options().mode === 2 /* CrosshairMode.Hidden */ ;\n        const serieses = this._private__chartModel._internal_serieses();\n        const timePointIndex = this._private__crosshair._internal_appliedIndex();\n        const timeScale = this._private__chartModel._internal_timeScale();\n        serieses.forEach((s, index)=>{\n            var _a;\n            const data = this._private__markersData[index];\n            const seriesData = s._internal_markerDataAtIndex(timePointIndex);\n            if (forceHidden || seriesData === null || !s._internal_visible()) {\n                data._internal_visibleRange = null;\n                return;\n            }\n            const firstValue = ensureNotNull(s._internal_firstValue());\n            data._internal_lineColor = seriesData._internal_backgroundColor;\n            data._internal_radius = seriesData._internal_radius;\n            data._internal_lineWidth = seriesData._internal_borderWidth;\n            data._internal_items[0]._internal_price = seriesData._internal_price;\n            data._internal_items[0]._internal_y = s._internal_priceScale()._internal_priceToCoordinate(seriesData._internal_price, firstValue._internal_value);\n            data._internal_backColor = (_a = seriesData._internal_borderColor) !== null && _a !== void 0 ? _a : this._private__chartModel._internal_backgroundColorAtYPercentFromTop(data._internal_items[0]._internal_y / s._internal_priceScale()._internal_height());\n            data._internal_items[0]._internal_time = timePointIndex;\n            data._internal_items[0]._internal_x = timeScale._internal_indexToCoordinate(timePointIndex);\n            data._internal_visibleRange = rangeForSinglePoint;\n        });\n    }\n}\nclass CrosshairRenderer extends BitmapCoordinatesPaneRenderer {\n    constructor(data){\n        super();\n        this._private__data = data;\n    }\n    _internal__drawImpl({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\n        if (this._private__data === null) {\n            return;\n        }\n        const vertLinesVisible = this._private__data._internal_vertLine._internal_visible;\n        const horzLinesVisible = this._private__data._internal_horzLine._internal_visible;\n        if (!vertLinesVisible && !horzLinesVisible) {\n            return;\n        }\n        const x = Math.round(this._private__data._internal_x * horizontalPixelRatio);\n        const y = Math.round(this._private__data._internal_y * verticalPixelRatio);\n        ctx.lineCap = \"butt\";\n        if (vertLinesVisible && x >= 0) {\n            ctx.lineWidth = Math.floor(this._private__data._internal_vertLine._internal_lineWidth * horizontalPixelRatio);\n            ctx.strokeStyle = this._private__data._internal_vertLine._internal_color;\n            ctx.fillStyle = this._private__data._internal_vertLine._internal_color;\n            setLineStyle(ctx, this._private__data._internal_vertLine._internal_lineStyle);\n            drawVerticalLine(ctx, x, 0, bitmapSize.height);\n        }\n        if (horzLinesVisible && y >= 0) {\n            ctx.lineWidth = Math.floor(this._private__data._internal_horzLine._internal_lineWidth * verticalPixelRatio);\n            ctx.strokeStyle = this._private__data._internal_horzLine._internal_color;\n            ctx.fillStyle = this._private__data._internal_horzLine._internal_color;\n            setLineStyle(ctx, this._private__data._internal_horzLine._internal_lineStyle);\n            drawHorizontalLine(ctx, y, 0, bitmapSize.width);\n        }\n    }\n}\nclass CrosshairPaneView {\n    constructor(source){\n        this._private__invalidated = true;\n        this._private__rendererData = {\n            _internal_vertLine: {\n                _internal_lineWidth: 1,\n                _internal_lineStyle: 0,\n                _internal_color: \"\",\n                _internal_visible: false\n            },\n            _internal_horzLine: {\n                _internal_lineWidth: 1,\n                _internal_lineStyle: 0,\n                _internal_color: \"\",\n                _internal_visible: false\n            },\n            _internal_x: 0,\n            _internal_y: 0\n        };\n        this._private__renderer = new CrosshairRenderer(this._private__rendererData);\n        this._private__source = source;\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n        }\n        return this._private__renderer;\n    }\n    _private__updateImpl() {\n        const visible = this._private__source._internal_visible();\n        const pane = ensureNotNull(this._private__source._internal_pane());\n        const crosshairOptions = pane._internal_model()._internal_options().crosshair;\n        const data = this._private__rendererData;\n        if (crosshairOptions.mode === 2 /* CrosshairMode.Hidden */ ) {\n            data._internal_horzLine._internal_visible = false;\n            data._internal_vertLine._internal_visible = false;\n            return;\n        }\n        data._internal_horzLine._internal_visible = visible && this._private__source._internal_horzLineVisible(pane);\n        data._internal_vertLine._internal_visible = visible && this._private__source._internal_vertLineVisible();\n        data._internal_horzLine._internal_lineWidth = crosshairOptions.horzLine.width;\n        data._internal_horzLine._internal_lineStyle = crosshairOptions.horzLine.style;\n        data._internal_horzLine._internal_color = crosshairOptions.horzLine.color;\n        data._internal_vertLine._internal_lineWidth = crosshairOptions.vertLine.width;\n        data._internal_vertLine._internal_lineStyle = crosshairOptions.vertLine.style;\n        data._internal_vertLine._internal_color = crosshairOptions.vertLine.color;\n        data._internal_x = this._private__source._internal_appliedX();\n        data._internal_y = this._private__source._internal_appliedY();\n    }\n}\n/**\n * Fills rectangle's inner border (so, all the filled area is limited by the [x, x + width]*[y, y + height] region)\n * ```\n * (x, y)\n * O***********************|*****\n * |        border         |  ^\n * |   *****************   |  |\n * |   |               |   |  |\n * | b |               | b |  h\n * | o |               | o |  e\n * | r |               | r |  i\n * | d |               | d |  g\n * | e |               | e |  h\n * | r |               | r |  t\n * |   |               |   |  |\n * |   *****************   |  |\n * |        border         |  v\n * |***********************|*****\n * |                       |\n * |<------- width ------->|\n * ```\n *\n * @param ctx - Context to draw on\n * @param x - Left side of the target rectangle\n * @param y - Top side of the target rectangle\n * @param width - Width of the target rectangle\n * @param height - Height of the target rectangle\n * @param borderWidth - Width of border to fill, must be less than width and height of the target rectangle\n */ function fillRectInnerBorder(ctx, x, y, width, height, borderWidth) {\n    // horizontal (top and bottom) edges\n    ctx.fillRect(x + borderWidth, y, width - borderWidth * 2, borderWidth);\n    ctx.fillRect(x + borderWidth, y + height - borderWidth, width - borderWidth * 2, borderWidth);\n    // vertical (left and right) edges\n    ctx.fillRect(x, y, borderWidth, height);\n    ctx.fillRect(x + width - borderWidth, y, borderWidth, height);\n}\nfunction clearRect(ctx, x, y, w, h, clearColor) {\n    ctx.save();\n    ctx.globalCompositeOperation = \"copy\";\n    ctx.fillStyle = clearColor;\n    ctx.fillRect(x, y, w, h);\n    ctx.restore();\n}\nfunction changeBorderRadius(borderRadius, offset) {\n    return borderRadius.map((x)=>x === 0 ? x : x + offset);\n}\nfunction drawRoundRect(// eslint:disable-next-line:max-params\nctx, x, y, w, h, radii) {\n    /**\n     * As of May 2023, all of the major browsers now support ctx.roundRect() so we should\n     * be able to switch to the native version soon.\n     */ ctx.beginPath();\n    if (ctx.roundRect) {\n        ctx.roundRect(x, y, w, h, radii);\n        return;\n    }\n    /*\n     * Deprecate the rest in v5.\n     */ ctx.lineTo(x + w - radii[1], y);\n    if (radii[1] !== 0) {\n        ctx.arcTo(x + w, y, x + w, y + radii[1], radii[1]);\n    }\n    ctx.lineTo(x + w, y + h - radii[2]);\n    if (radii[2] !== 0) {\n        ctx.arcTo(x + w, y + h, x + w - radii[2], y + h, radii[2]);\n    }\n    ctx.lineTo(x + radii[3], y + h);\n    if (radii[3] !== 0) {\n        ctx.arcTo(x, y + h, x, y + h - radii[3], radii[3]);\n    }\n    ctx.lineTo(x, y + radii[0]);\n    if (radii[0] !== 0) {\n        ctx.arcTo(x, y, x + radii[0], y, radii[0]);\n    }\n}\n/**\n * Draws a rounded rect with a border.\n *\n * This function assumes that the colors will be solid, without\n * any alpha. (This allows us to fix a rendering artefact.)\n *\n * @param outerBorderRadius - The radius of the border (outer edge)\n */ // eslint-disable-next-line max-params\nfunction drawRoundRectWithBorder(ctx, left, top, width, height, backgroundColor, borderWidth = 0, outerBorderRadius = [\n    0,\n    0,\n    0,\n    0\n], borderColor = \"\") {\n    ctx.save();\n    if (!borderWidth || !borderColor || borderColor === backgroundColor) {\n        drawRoundRect(ctx, left, top, width, height, outerBorderRadius);\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n        return;\n    }\n    const halfBorderWidth = borderWidth / 2;\n    const radii = changeBorderRadius(outerBorderRadius, -halfBorderWidth);\n    drawRoundRect(ctx, left + halfBorderWidth, top + halfBorderWidth, width - borderWidth, height - borderWidth, radii);\n    if (backgroundColor !== \"transparent\") {\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n    }\n    if (borderColor !== \"transparent\") {\n        ctx.lineWidth = borderWidth;\n        ctx.strokeStyle = borderColor;\n        ctx.closePath();\n        ctx.stroke();\n    }\n    ctx.restore();\n}\n// eslint-disable-next-line max-params\nfunction clearRectWithGradient(ctx, x, y, w, h, topColor, bottomColor) {\n    ctx.save();\n    ctx.globalCompositeOperation = \"copy\";\n    const gradient = ctx.createLinearGradient(0, 0, 0, h);\n    gradient.addColorStop(0, topColor);\n    gradient.addColorStop(1, bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(x, y, w, h);\n    ctx.restore();\n}\nclass PriceAxisViewRenderer {\n    constructor(data, commonData){\n        this._internal_setData(data, commonData);\n    }\n    _internal_setData(data, commonData) {\n        this._private__data = data;\n        this._private__commonData = commonData;\n    }\n    _internal_height(rendererOptions, useSecondLine) {\n        if (!this._private__data._internal_visible) {\n            return 0;\n        }\n        return rendererOptions._internal_fontSize + rendererOptions._internal_paddingTop + rendererOptions._internal_paddingBottom;\n    }\n    _internal_draw(target, rendererOptions, textWidthCache, align) {\n        if (!this._private__data._internal_visible || this._private__data._internal_text.length === 0) {\n            return;\n        }\n        const textColor = this._private__data._internal_color;\n        const backgroundColor = this._private__commonData._internal_background;\n        const geometry = target.useBitmapCoordinateSpace((scope)=>{\n            const ctx = scope.context;\n            ctx.font = rendererOptions._internal_font;\n            const geom = this._private__calculateGeometry(scope, rendererOptions, textWidthCache, align);\n            const gb = geom._internal_bitmap;\n            /*\n             draw label. backgroundColor will always be a solid color (no alpha) [see generateContrastColors in color.ts].\n             Therefore we can draw the rounded label using simplified code (drawRoundRectWithBorder) that doesn't need to ensure the background and the border don't overlap.\n            */ if (geom._internal_alignRight) {\n                drawRoundRectWithBorder(ctx, gb._internal_xOutside, gb._internal_yTop, gb._internal_totalWidth, gb._internal_totalHeight, backgroundColor, gb._internal_horzBorder, [\n                    gb._internal_radius,\n                    0,\n                    0,\n                    gb._internal_radius\n                ], backgroundColor);\n            } else {\n                drawRoundRectWithBorder(ctx, gb._internal_xInside, gb._internal_yTop, gb._internal_totalWidth, gb._internal_totalHeight, backgroundColor, gb._internal_horzBorder, [\n                    0,\n                    gb._internal_radius,\n                    gb._internal_radius,\n                    0\n                ], backgroundColor);\n            }\n            // draw tick\n            if (this._private__data._internal_tickVisible) {\n                ctx.fillStyle = textColor;\n                ctx.fillRect(gb._internal_xInside, gb._internal_yMid, gb._internal_xTick - gb._internal_xInside, gb._internal_tickHeight);\n            }\n            // draw separator\n            if (this._private__data._internal_borderVisible) {\n                ctx.fillStyle = rendererOptions._internal_paneBackgroundColor;\n                ctx.fillRect(geom._internal_alignRight ? gb._internal_right - gb._internal_horzBorder : 0, gb._internal_yTop, gb._internal_horzBorder, gb._internal_yBottom - gb._internal_yTop);\n            }\n            return geom;\n        });\n        target.useMediaCoordinateSpace(({ context: ctx })=>{\n            const gm = geometry._internal_media;\n            ctx.font = rendererOptions._internal_font;\n            ctx.textAlign = geometry._internal_alignRight ? \"right\" : \"left\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = textColor;\n            ctx.fillText(this._private__data._internal_text, gm._internal_xText, (gm._internal_yTop + gm._internal_yBottom) / 2 + gm._internal_textMidCorrection);\n        });\n    }\n    _private__calculateGeometry(scope, rendererOptions, textWidthCache, align) {\n        var _a;\n        const { context: ctx, bitmapSize, mediaSize, horizontalPixelRatio, verticalPixelRatio } = scope;\n        const tickSize = this._private__data._internal_tickVisible || !this._private__data._internal_moveTextToInvisibleTick ? rendererOptions._internal_tickLength : 0;\n        const horzBorder = this._private__data._internal_separatorVisible ? rendererOptions._internal_borderSize : 0;\n        const paddingTop = rendererOptions._internal_paddingTop + this._private__commonData._internal_additionalPaddingTop;\n        const paddingBottom = rendererOptions._internal_paddingBottom + this._private__commonData._internal_additionalPaddingBottom;\n        const paddingInner = rendererOptions._internal_paddingInner;\n        const paddingOuter = rendererOptions._internal_paddingOuter;\n        const text = this._private__data._internal_text;\n        const actualTextHeight = rendererOptions._internal_fontSize;\n        const textMidCorrection = textWidthCache._internal_yMidCorrection(ctx, text);\n        const textWidth = Math.ceil(textWidthCache._internal_measureText(ctx, text));\n        const totalHeight = actualTextHeight + paddingTop + paddingBottom;\n        const totalWidth = rendererOptions._internal_borderSize + paddingInner + paddingOuter + textWidth + tickSize;\n        const tickHeightBitmap = Math.max(1, Math.floor(verticalPixelRatio));\n        let totalHeightBitmap = Math.round(totalHeight * verticalPixelRatio);\n        if (totalHeightBitmap % 2 !== tickHeightBitmap % 2) {\n            totalHeightBitmap += 1;\n        }\n        const horzBorderBitmap = horzBorder > 0 ? Math.max(1, Math.floor(horzBorder * horizontalPixelRatio)) : 0;\n        const totalWidthBitmap = Math.round(totalWidth * horizontalPixelRatio);\n        // tick overlaps scale border\n        const tickSizeBitmap = Math.round(tickSize * horizontalPixelRatio);\n        const yMid = (_a = this._private__commonData._internal_fixedCoordinate) !== null && _a !== void 0 ? _a : this._private__commonData._internal_coordinate;\n        const yMidBitmap = Math.round(yMid * verticalPixelRatio) - Math.floor(verticalPixelRatio * 0.5);\n        const yTopBitmap = Math.floor(yMidBitmap + tickHeightBitmap / 2 - totalHeightBitmap / 2);\n        const yBottomBitmap = yTopBitmap + totalHeightBitmap;\n        const alignRight = align === \"right\";\n        const xInside = alignRight ? mediaSize.width - horzBorder : horzBorder;\n        const xInsideBitmap = alignRight ? bitmapSize.width - horzBorderBitmap : horzBorderBitmap;\n        let xOutsideBitmap;\n        let xTickBitmap;\n        let xText;\n        if (alignRight) {\n            // 2               1\n            //\n            //              6  5\n            //\n            // 3               4\n            xOutsideBitmap = xInsideBitmap - totalWidthBitmap;\n            xTickBitmap = xInsideBitmap - tickSizeBitmap;\n            xText = xInside - tickSize - paddingInner - horzBorder;\n        } else {\n            // 1               2\n            //\n            // 6  5\n            //\n            // 4               3\n            xOutsideBitmap = xInsideBitmap + totalWidthBitmap;\n            xTickBitmap = xInsideBitmap + tickSizeBitmap;\n            xText = xInside + tickSize + paddingInner;\n        }\n        return {\n            _internal_alignRight: alignRight,\n            _internal_bitmap: {\n                _internal_yTop: yTopBitmap,\n                _internal_yMid: yMidBitmap,\n                _internal_yBottom: yBottomBitmap,\n                _internal_totalWidth: totalWidthBitmap,\n                _internal_totalHeight: totalHeightBitmap,\n                // TODO: it is better to have different horizontal and vertical radii\n                _internal_radius: 2 * horizontalPixelRatio,\n                _internal_horzBorder: horzBorderBitmap,\n                _internal_xOutside: xOutsideBitmap,\n                _internal_xInside: xInsideBitmap,\n                _internal_xTick: xTickBitmap,\n                _internal_tickHeight: tickHeightBitmap,\n                _internal_right: bitmapSize.width\n            },\n            _internal_media: {\n                _internal_yTop: yTopBitmap / verticalPixelRatio,\n                _internal_yBottom: yBottomBitmap / verticalPixelRatio,\n                _internal_xText: xText,\n                _internal_textMidCorrection: textMidCorrection\n            }\n        };\n    }\n}\nclass PriceAxisView {\n    constructor(ctor){\n        this._private__commonRendererData = {\n            _internal_coordinate: 0,\n            _internal_background: \"#000\",\n            _internal_additionalPaddingBottom: 0,\n            _internal_additionalPaddingTop: 0\n        };\n        this._private__axisRendererData = {\n            _internal_text: \"\",\n            _internal_visible: false,\n            _internal_tickVisible: true,\n            _internal_moveTextToInvisibleTick: false,\n            _internal_borderColor: \"\",\n            _internal_color: \"#FFF\",\n            _internal_borderVisible: false,\n            _internal_separatorVisible: false\n        };\n        this._private__paneRendererData = {\n            _internal_text: \"\",\n            _internal_visible: false,\n            _internal_tickVisible: false,\n            _internal_moveTextToInvisibleTick: true,\n            _internal_borderColor: \"\",\n            _internal_color: \"#FFF\",\n            _internal_borderVisible: true,\n            _internal_separatorVisible: true\n        };\n        this._private__invalidated = true;\n        this._private__axisRenderer = new (ctor || PriceAxisViewRenderer)(this._private__axisRendererData, this._private__commonRendererData);\n        this._private__paneRenderer = new (ctor || PriceAxisViewRenderer)(this._private__paneRendererData, this._private__commonRendererData);\n    }\n    _internal_text() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__axisRendererData._internal_text;\n    }\n    _internal_coordinate() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__commonRendererData._internal_coordinate;\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_height(rendererOptions, useSecondLine = false) {\n        return Math.max(this._private__axisRenderer._internal_height(rendererOptions, useSecondLine), this._private__paneRenderer._internal_height(rendererOptions, useSecondLine));\n    }\n    _internal_getFixedCoordinate() {\n        return this._private__commonRendererData._internal_fixedCoordinate || 0;\n    }\n    _internal_setFixedCoordinate(value) {\n        this._private__commonRendererData._internal_fixedCoordinate = value;\n    }\n    _internal_isVisible() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__axisRendererData._internal_visible || this._private__paneRendererData._internal_visible;\n    }\n    _internal_isAxisLabelVisible() {\n        this._private__updateRendererDataIfNeeded();\n        return this._private__axisRendererData._internal_visible;\n    }\n    _internal_renderer(priceScale) {\n        this._private__updateRendererDataIfNeeded();\n        // force update tickVisible state from price scale options\n        // because we don't have and we can't have price axis in other methods\n        // (like paneRenderer or any other who call _updateRendererDataIfNeeded)\n        this._private__axisRendererData._internal_tickVisible = this._private__axisRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;\n        this._private__paneRendererData._internal_tickVisible = this._private__paneRendererData._internal_tickVisible && priceScale._internal_options().ticksVisible;\n        this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);\n        this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);\n        return this._private__axisRenderer;\n    }\n    _internal_paneRenderer() {\n        this._private__updateRendererDataIfNeeded();\n        this._private__axisRenderer._internal_setData(this._private__axisRendererData, this._private__commonRendererData);\n        this._private__paneRenderer._internal_setData(this._private__paneRendererData, this._private__commonRendererData);\n        return this._private__paneRenderer;\n    }\n    _private__updateRendererDataIfNeeded() {\n        if (this._private__invalidated) {\n            this._private__axisRendererData._internal_tickVisible = true;\n            this._private__paneRendererData._internal_tickVisible = false;\n            this._internal__updateRendererData(this._private__axisRendererData, this._private__paneRendererData, this._private__commonRendererData);\n        }\n    }\n}\nclass CrosshairPriceAxisView extends PriceAxisView {\n    constructor(source, priceScale, valueProvider){\n        super();\n        this._private__source = source;\n        this._private__priceScale = priceScale;\n        this._private__valueProvider = valueProvider;\n    }\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\n        axisRendererData._internal_visible = false;\n        if (this._private__source._internal_options().mode === 2 /* CrosshairMode.Hidden */ ) {\n            return;\n        }\n        const options = this._private__source._internal_options().horzLine;\n        if (!options.labelVisible) {\n            return;\n        }\n        const firstValue = this._private__priceScale._internal_firstValue();\n        if (!this._private__source._internal_visible() || this._private__priceScale._internal_isEmpty() || firstValue === null) {\n            return;\n        }\n        const colors = generateContrastColors(options.labelBackgroundColor);\n        commonRendererData._internal_background = colors._internal_background;\n        axisRendererData._internal_color = colors._internal_foreground;\n        const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();\n        commonRendererData._internal_additionalPaddingTop = additionalPadding;\n        commonRendererData._internal_additionalPaddingBottom = additionalPadding;\n        const value = this._private__valueProvider(this._private__priceScale);\n        commonRendererData._internal_coordinate = value._internal_coordinate;\n        axisRendererData._internal_text = this._private__priceScale._internal_formatPrice(value._internal_price, firstValue);\n        axisRendererData._internal_visible = true;\n    }\n}\nconst optimizationReplacementRe = /[1-9]/g;\nconst radius$1 = 2;\nclass TimeAxisViewRenderer {\n    constructor(){\n        this._private__data = null;\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_draw(target, rendererOptions) {\n        if (this._private__data === null || this._private__data._internal_visible === false || this._private__data._internal_text.length === 0) {\n            return;\n        }\n        const textWidth = target.useMediaCoordinateSpace(({ context: ctx })=>{\n            ctx.font = rendererOptions._internal_font;\n            return Math.round(rendererOptions._internal_widthCache._internal_measureText(ctx, ensureNotNull(this._private__data)._internal_text, optimizationReplacementRe));\n        });\n        if (textWidth <= 0) {\n            return;\n        }\n        const horzMargin = rendererOptions._internal_paddingHorizontal;\n        const labelWidth = textWidth + 2 * horzMargin;\n        const labelWidthHalf = labelWidth / 2;\n        const timeScaleWidth = this._private__data._internal_width;\n        let coordinate = this._private__data._internal_coordinate;\n        let x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        if (x1 < 0) {\n            coordinate = coordinate + Math.abs(0 - x1);\n            x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        } else if (x1 + labelWidth > timeScaleWidth) {\n            coordinate = coordinate - Math.abs(timeScaleWidth - (x1 + labelWidth));\n            x1 = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        }\n        const x2 = x1 + labelWidth;\n        const y1 = 0;\n        const y2 = Math.ceil(y1 + rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingTop + rendererOptions._internal_fontSize + rendererOptions._internal_paddingBottom);\n        target.useBitmapCoordinateSpace(({ context: ctx, horizontalPixelRatio, verticalPixelRatio })=>{\n            const data = ensureNotNull(this._private__data);\n            ctx.fillStyle = data._internal_background;\n            const x1scaled = Math.round(x1 * horizontalPixelRatio);\n            const y1scaled = Math.round(y1 * verticalPixelRatio);\n            const x2scaled = Math.round(x2 * horizontalPixelRatio);\n            const y2scaled = Math.round(y2 * verticalPixelRatio);\n            const radiusScaled = Math.round(radius$1 * horizontalPixelRatio);\n            ctx.beginPath();\n            ctx.moveTo(x1scaled, y1scaled);\n            ctx.lineTo(x1scaled, y2scaled - radiusScaled);\n            ctx.arcTo(x1scaled, y2scaled, x1scaled + radiusScaled, y2scaled, radiusScaled);\n            ctx.lineTo(x2scaled - radiusScaled, y2scaled);\n            ctx.arcTo(x2scaled, y2scaled, x2scaled, y2scaled - radiusScaled, radiusScaled);\n            ctx.lineTo(x2scaled, y1scaled);\n            ctx.fill();\n            if (data._internal_tickVisible) {\n                const tickX = Math.round(data._internal_coordinate * horizontalPixelRatio);\n                const tickTop = y1scaled;\n                const tickBottom = Math.round((tickTop + rendererOptions._internal_tickLength) * verticalPixelRatio);\n                ctx.fillStyle = data._internal_color;\n                const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n                const tickOffset = Math.floor(horizontalPixelRatio * 0.5);\n                ctx.fillRect(tickX - tickOffset, tickTop, tickWidth, tickBottom - tickTop);\n            }\n        });\n        target.useMediaCoordinateSpace(({ context: ctx })=>{\n            const data = ensureNotNull(this._private__data);\n            const yText = y1 + rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingTop + rendererOptions._internal_fontSize / 2;\n            ctx.font = rendererOptions._internal_font;\n            ctx.textAlign = \"left\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = data._internal_color;\n            const textYCorrection = rendererOptions._internal_widthCache._internal_yMidCorrection(ctx, \"Apr0\");\n            ctx.translate(x1 + horzMargin, yText + textYCorrection);\n            ctx.fillText(data._internal_text, 0, 0);\n        });\n    }\n}\nclass CrosshairTimeAxisView {\n    constructor(crosshair, model, valueProvider){\n        this._private__invalidated = true;\n        this._private__renderer = new TimeAxisViewRenderer();\n        this._private__rendererData = {\n            _internal_visible: false,\n            _internal_background: \"#4c525e\",\n            _internal_color: \"white\",\n            _internal_text: \"\",\n            _internal_width: 0,\n            _internal_coordinate: NaN,\n            _internal_tickVisible: true\n        };\n        this._private__crosshair = crosshair;\n        this._private__model = model;\n        this._private__valueProvider = valueProvider;\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n        }\n        this._private__renderer._internal_setData(this._private__rendererData);\n        return this._private__renderer;\n    }\n    _private__updateImpl() {\n        const data = this._private__rendererData;\n        data._internal_visible = false;\n        if (this._private__crosshair._internal_options().mode === 2 /* CrosshairMode.Hidden */ ) {\n            return;\n        }\n        const options = this._private__crosshair._internal_options().vertLine;\n        if (!options.labelVisible) {\n            return;\n        }\n        const timeScale = this._private__model._internal_timeScale();\n        if (timeScale._internal_isEmpty()) {\n            return;\n        }\n        data._internal_width = timeScale._internal_width();\n        const value = this._private__valueProvider();\n        if (value === null) {\n            return;\n        }\n        data._internal_coordinate = value._internal_coordinate;\n        const currentTime = timeScale._internal_indexToTimeScalePoint(this._private__crosshair._internal_appliedIndex());\n        data._internal_text = timeScale._internal_formatDateTime(ensureNotNull(currentTime));\n        data._internal_visible = true;\n        const colors = generateContrastColors(options.labelBackgroundColor);\n        data._internal_background = colors._internal_background;\n        data._internal_color = colors._internal_foreground;\n        data._internal_tickVisible = timeScale._internal_options().ticksVisible;\n    }\n}\nclass DataSource {\n    constructor(){\n        this._internal__priceScale = null;\n        this._private__zorder = 0;\n    }\n    _internal_zorder() {\n        return this._private__zorder;\n    }\n    _internal_setZorder(zorder) {\n        this._private__zorder = zorder;\n    }\n    _internal_priceScale() {\n        return this._internal__priceScale;\n    }\n    _internal_setPriceScale(priceScale) {\n        this._internal__priceScale = priceScale;\n    }\n    _internal_labelPaneViews(pane) {\n        return [];\n    }\n    _internal_timeAxisViews() {\n        return [];\n    }\n    _internal_visible() {\n        return true;\n    }\n}\n/**\n * Represents the crosshair mode.\n */ var CrosshairMode;\n(function(CrosshairMode) {\n    /**\n     * This mode allows crosshair to move freely on the chart.\n     */ CrosshairMode[CrosshairMode[\"Normal\"] = 0] = \"Normal\";\n    /**\n     * This mode sticks crosshair's horizontal line to the price value of a single-value series or to the close price of OHLC-based series.\n     */ CrosshairMode[CrosshairMode[\"Magnet\"] = 1] = \"Magnet\";\n    /**\n     * This mode disables rendering of the crosshair.\n     */ CrosshairMode[CrosshairMode[\"Hidden\"] = 2] = \"Hidden\";\n})(CrosshairMode || (CrosshairMode = {}));\nclass Crosshair extends DataSource {\n    constructor(model, options){\n        super();\n        this._private__pane = null;\n        this._private__price = NaN;\n        this._private__index = 0;\n        this._private__visible = true;\n        this._private__priceAxisViews = new Map();\n        this._private__subscribed = false;\n        this._private__x = NaN;\n        this._private__y = NaN;\n        this._private__originX = NaN;\n        this._private__originY = NaN;\n        this._private__model = model;\n        this._private__options = options;\n        this._private__markersPaneView = new CrosshairMarksPaneView(model, this);\n        const valuePriceProvider = (rawPriceProvider, rawCoordinateProvider)=>{\n            return (priceScale)=>{\n                const coordinate = rawCoordinateProvider();\n                const rawPrice = rawPriceProvider();\n                if (priceScale === ensureNotNull(this._private__pane)._internal_defaultPriceScale()) {\n                    // price must be defined\n                    return {\n                        _internal_price: rawPrice,\n                        _internal_coordinate: coordinate\n                    };\n                } else {\n                    // always convert from coordinate\n                    const firstValue = ensureNotNull(priceScale._internal_firstValue());\n                    const price = priceScale._internal_coordinateToPrice(coordinate, firstValue);\n                    return {\n                        _internal_price: price,\n                        _internal_coordinate: coordinate\n                    };\n                }\n            };\n        };\n        const valueTimeProvider = (rawIndexProvider, rawCoordinateProvider)=>{\n            return ()=>{\n                const time = this._private__model._internal_timeScale()._internal_indexToTime(rawIndexProvider());\n                const coordinate = rawCoordinateProvider();\n                if (!time || !Number.isFinite(coordinate)) {\n                    return null;\n                }\n                return {\n                    _internal_time: time,\n                    _internal_coordinate: coordinate\n                };\n            };\n        };\n        // for current position always return both price and coordinate\n        this._private__currentPosPriceProvider = valuePriceProvider(()=>this._private__price, ()=>this._private__y);\n        const currentPosTimeProvider = valueTimeProvider(()=>this._private__index, ()=>this._internal_appliedX());\n        this._private__timeAxisView = new CrosshairTimeAxisView(this, model, currentPosTimeProvider);\n        this._private__paneView = new CrosshairPaneView(this);\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_saveOriginCoord(x, y) {\n        this._private__originX = x;\n        this._private__originY = y;\n    }\n    _internal_clearOriginCoord() {\n        this._private__originX = NaN;\n        this._private__originY = NaN;\n    }\n    _internal_originCoordX() {\n        return this._private__originX;\n    }\n    _internal_originCoordY() {\n        return this._private__originY;\n    }\n    _internal_setPosition(index, price, pane) {\n        if (!this._private__subscribed) {\n            this._private__subscribed = true;\n        }\n        this._private__visible = true;\n        this._private__tryToUpdateViews(index, price, pane);\n    }\n    _internal_appliedIndex() {\n        return this._private__index;\n    }\n    _internal_appliedX() {\n        return this._private__x;\n    }\n    _internal_appliedY() {\n        return this._private__y;\n    }\n    _internal_visible() {\n        return this._private__visible;\n    }\n    _internal_clearPosition() {\n        this._private__visible = false;\n        this._private__setIndexToLastSeriesBarIndex();\n        this._private__price = NaN;\n        this._private__x = NaN;\n        this._private__y = NaN;\n        this._private__pane = null;\n        this._internal_clearOriginCoord();\n    }\n    _internal_paneViews(pane) {\n        return this._private__pane !== null ? [\n            this._private__paneView,\n            this._private__markersPaneView\n        ] : [];\n    }\n    _internal_horzLineVisible(pane) {\n        return pane === this._private__pane && this._private__options.horzLine.visible;\n    }\n    _internal_vertLineVisible() {\n        return this._private__options.vertLine.visible;\n    }\n    _internal_priceAxisViews(pane, priceScale) {\n        if (!this._private__visible || this._private__pane !== pane) {\n            this._private__priceAxisViews.clear();\n        }\n        const views = [];\n        if (this._private__pane === pane) {\n            views.push(this._private__createPriceAxisViewOnDemand(this._private__priceAxisViews, priceScale, this._private__currentPosPriceProvider));\n        }\n        return views;\n    }\n    _internal_timeAxisViews() {\n        return this._private__visible ? [\n            this._private__timeAxisView\n        ] : [];\n    }\n    _internal_pane() {\n        return this._private__pane;\n    }\n    _internal_updateAllViews() {\n        this._private__paneView._internal_update();\n        this._private__priceAxisViews.forEach((value)=>value._internal_update());\n        this._private__timeAxisView._internal_update();\n        this._private__markersPaneView._internal_update();\n    }\n    _private__priceScaleByPane(pane) {\n        if (pane && !pane._internal_defaultPriceScale()._internal_isEmpty()) {\n            return pane._internal_defaultPriceScale();\n        }\n        return null;\n    }\n    _private__tryToUpdateViews(index, price, pane) {\n        if (this._private__tryToUpdateData(index, price, pane)) {\n            this._internal_updateAllViews();\n        }\n    }\n    _private__tryToUpdateData(newIndex, newPrice, newPane) {\n        const oldX = this._private__x;\n        const oldY = this._private__y;\n        const oldPrice = this._private__price;\n        const oldIndex = this._private__index;\n        const oldPane = this._private__pane;\n        const priceScale = this._private__priceScaleByPane(newPane);\n        this._private__index = newIndex;\n        this._private__x = isNaN(newIndex) ? NaN : this._private__model._internal_timeScale()._internal_indexToCoordinate(newIndex);\n        this._private__pane = newPane;\n        const firstValue = priceScale !== null ? priceScale._internal_firstValue() : null;\n        if (priceScale !== null && firstValue !== null) {\n            this._private__price = newPrice;\n            this._private__y = priceScale._internal_priceToCoordinate(newPrice, firstValue);\n        } else {\n            this._private__price = NaN;\n            this._private__y = NaN;\n        }\n        return oldX !== this._private__x || oldY !== this._private__y || oldIndex !== this._private__index || oldPrice !== this._private__price || oldPane !== this._private__pane;\n    }\n    _private__setIndexToLastSeriesBarIndex() {\n        const lastIndexes = this._private__model._internal_serieses().map((s)=>s._internal_bars()._internal_lastIndex()).filter(notNull);\n        const lastBarIndex = lastIndexes.length === 0 ? null : Math.max(...lastIndexes);\n        this._private__index = lastBarIndex !== null ? lastBarIndex : NaN;\n    }\n    _private__createPriceAxisViewOnDemand(map, priceScale, valueProvider) {\n        let view = map.get(priceScale);\n        if (view === undefined) {\n            view = new CrosshairPriceAxisView(this, priceScale, valueProvider);\n            map.set(priceScale, view);\n        }\n        return view;\n    }\n}\nfunction isDefaultPriceScale(priceScaleId) {\n    return priceScaleId === \"left\" /* DefaultPriceScaleId.Left */  || priceScaleId === \"right\" /* DefaultPriceScaleId.Right */ ;\n}\nfunction mergePaneInvalidation(beforeValue, newValue) {\n    if (beforeValue === undefined) {\n        return newValue;\n    }\n    const level = Math.max(beforeValue._internal_level, newValue._internal_level);\n    const autoScale = beforeValue._internal_autoScale || newValue._internal_autoScale;\n    return {\n        _internal_level: level,\n        _internal_autoScale: autoScale\n    };\n}\nclass InvalidateMask {\n    constructor(globalLevel){\n        this._private__invalidatedPanes = new Map();\n        this._private__timeScaleInvalidations = [];\n        this._private__globalLevel = globalLevel;\n    }\n    _internal_invalidatePane(paneIndex, invalidation) {\n        const prevValue = this._private__invalidatedPanes.get(paneIndex);\n        const newValue = mergePaneInvalidation(prevValue, invalidation);\n        this._private__invalidatedPanes.set(paneIndex, newValue);\n    }\n    _internal_fullInvalidation() {\n        return this._private__globalLevel;\n    }\n    _internal_invalidateForPane(paneIndex) {\n        const paneInvalidation = this._private__invalidatedPanes.get(paneIndex);\n        if (paneInvalidation === undefined) {\n            return {\n                _internal_level: this._private__globalLevel\n            };\n        }\n        return {\n            _internal_level: Math.max(this._private__globalLevel, paneInvalidation._internal_level),\n            _internal_autoScale: paneInvalidation._internal_autoScale\n        };\n    }\n    _internal_setFitContent() {\n        this._internal_stopTimeScaleAnimation();\n        // modifies both bar spacing and right offset\n        this._private__timeScaleInvalidations = [\n            {\n                _internal_type: 0 /* TimeScaleInvalidationType.FitContent */ \n            }\n        ];\n    }\n    _internal_applyRange(range) {\n        this._internal_stopTimeScaleAnimation();\n        // modifies both bar spacing and right offset\n        this._private__timeScaleInvalidations = [\n            {\n                _internal_type: 1 /* TimeScaleInvalidationType.ApplyRange */ ,\n                _internal_value: range\n            }\n        ];\n    }\n    _internal_setTimeScaleAnimation(animation) {\n        this._private__removeTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 5 /* TimeScaleInvalidationType.Animation */ ,\n            _internal_value: animation\n        });\n    }\n    _internal_stopTimeScaleAnimation() {\n        this._private__removeTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 6 /* TimeScaleInvalidationType.StopAnimation */ \n        });\n    }\n    _internal_resetTimeScale() {\n        this._internal_stopTimeScaleAnimation();\n        // modifies both bar spacing and right offset\n        this._private__timeScaleInvalidations = [\n            {\n                _internal_type: 4 /* TimeScaleInvalidationType.Reset */ \n            }\n        ];\n    }\n    _internal_setBarSpacing(barSpacing) {\n        this._internal_stopTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 2 /* TimeScaleInvalidationType.ApplyBarSpacing */ ,\n            _internal_value: barSpacing\n        });\n    }\n    _internal_setRightOffset(offset) {\n        this._internal_stopTimeScaleAnimation();\n        this._private__timeScaleInvalidations.push({\n            _internal_type: 3 /* TimeScaleInvalidationType.ApplyRightOffset */ ,\n            _internal_value: offset\n        });\n    }\n    _internal_timeScaleInvalidations() {\n        return this._private__timeScaleInvalidations;\n    }\n    _internal_merge(other) {\n        for (const tsInvalidation of other._private__timeScaleInvalidations){\n            this._private__applyTimeScaleInvalidation(tsInvalidation);\n        }\n        this._private__globalLevel = Math.max(this._private__globalLevel, other._private__globalLevel);\n        other._private__invalidatedPanes.forEach((invalidation, index)=>{\n            this._internal_invalidatePane(index, invalidation);\n        });\n    }\n    static _internal_light() {\n        return new InvalidateMask(2 /* InvalidationLevel.Light */ );\n    }\n    static _internal_full() {\n        return new InvalidateMask(3 /* InvalidationLevel.Full */ );\n    }\n    _private__applyTimeScaleInvalidation(invalidation) {\n        switch(invalidation._internal_type){\n            case 0 /* TimeScaleInvalidationType.FitContent */ :\n                this._internal_setFitContent();\n                break;\n            case 1 /* TimeScaleInvalidationType.ApplyRange */ :\n                this._internal_applyRange(invalidation._internal_value);\n                break;\n            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */ :\n                this._internal_setBarSpacing(invalidation._internal_value);\n                break;\n            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */ :\n                this._internal_setRightOffset(invalidation._internal_value);\n                break;\n            case 4 /* TimeScaleInvalidationType.Reset */ :\n                this._internal_resetTimeScale();\n                break;\n            case 5 /* TimeScaleInvalidationType.Animation */ :\n                this._internal_setTimeScaleAnimation(invalidation._internal_value);\n                break;\n            case 6 /* TimeScaleInvalidationType.StopAnimation */ :\n                this._private__removeTimeScaleAnimation();\n        }\n    }\n    _private__removeTimeScaleAnimation() {\n        const index = this._private__timeScaleInvalidations.findIndex((inv)=>inv._internal_type === 5 /* TimeScaleInvalidationType.Animation */ );\n        if (index !== -1) {\n            this._private__timeScaleInvalidations.splice(index, 1);\n        }\n    }\n}\nconst formatterOptions = {\n    _internal_decimalSign: \".\",\n    _internal_decimalSignFractional: \"'\"\n};\n/**\n * @param value - The number of convert.\n * @param length - The length. Must be between 0 and 16 inclusive.\n */ function numberToStringWithLeadingZero(value, length) {\n    if (!isNumber(value)) {\n        return \"n/a\";\n    }\n    if (!isInteger(length)) {\n        throw new TypeError(\"invalid length\");\n    }\n    if (length < 0 || length > 16) {\n        throw new TypeError(\"invalid length\");\n    }\n    if (length === 0) {\n        return value.toString();\n    }\n    const dummyString = \"0000000000000000\";\n    return (dummyString + value.toString()).slice(-length);\n}\nclass PriceFormatter {\n    constructor(priceScale, minMove){\n        if (!minMove) {\n            minMove = 1;\n        }\n        if (!isNumber(priceScale) || !isInteger(priceScale)) {\n            priceScale = 100;\n        }\n        if (priceScale < 0) {\n            throw new TypeError(\"invalid base\");\n        }\n        this._private__priceScale = priceScale;\n        this._private__minMove = minMove;\n        this._private__calculateDecimal();\n    }\n    format(price) {\n        // \\u2212 is unicode's minus sign https://www.fileformat.info/info/unicode/char/2212/index.htm\n        // we should use it because it has the same width as plus sign +\n        const sign = price < 0 ? \"âˆ’\" : \"\";\n        price = Math.abs(price);\n        return sign + this._private__formatAsDecimal(price);\n    }\n    _private__calculateDecimal() {\n        // check if this._base is power of 10\n        // for double fractional _fractionalLength if for the main fractional only\n        this._internal__fractionalLength = 0;\n        if (this._private__priceScale > 0 && this._private__minMove > 0) {\n            let base = this._private__priceScale;\n            while(base > 1){\n                base /= 10;\n                this._internal__fractionalLength++;\n            }\n        }\n    }\n    _private__formatAsDecimal(price) {\n        const base = this._private__priceScale / this._private__minMove;\n        let intPart = Math.floor(price);\n        let fracString = \"\";\n        const fracLength = this._internal__fractionalLength !== undefined ? this._internal__fractionalLength : NaN;\n        if (base > 1) {\n            let fracPart = +(Math.round(price * base) - intPart * base).toFixed(this._internal__fractionalLength);\n            if (fracPart >= base) {\n                fracPart -= base;\n                intPart += 1;\n            }\n            fracString = formatterOptions._internal_decimalSign + numberToStringWithLeadingZero(+fracPart.toFixed(this._internal__fractionalLength) * this._private__minMove, fracLength);\n        } else {\n            // should round int part to min move\n            intPart = Math.round(intPart * base) / base;\n            // if min move > 1, fractional part is always = 0\n            if (fracLength > 0) {\n                fracString = formatterOptions._internal_decimalSign + numberToStringWithLeadingZero(0, fracLength);\n            }\n        }\n        return intPart.toFixed(0) + fracString;\n    }\n}\nclass PercentageFormatter extends PriceFormatter {\n    constructor(priceScale = 100){\n        super(priceScale);\n    }\n    format(price) {\n        return `${super.format(price)}%`;\n    }\n}\nclass VolumeFormatter {\n    constructor(precision){\n        this._private__precision = precision;\n    }\n    format(vol) {\n        let sign = \"\";\n        if (vol < 0) {\n            sign = \"-\";\n            vol = -vol;\n        }\n        if (vol < 995) {\n            return sign + this._private__formatNumber(vol);\n        } else if (vol < 999995) {\n            return sign + this._private__formatNumber(vol / 1000) + \"K\";\n        } else if (vol < 999999995) {\n            vol = 1000 * Math.round(vol / 1000);\n            return sign + this._private__formatNumber(vol / 1000000) + \"M\";\n        } else {\n            vol = 1000000 * Math.round(vol / 1000000);\n            return sign + this._private__formatNumber(vol / 1000000000) + \"B\";\n        }\n    }\n    _private__formatNumber(value) {\n        let res;\n        const priceScale = Math.pow(10, this._private__precision);\n        value = Math.round(value * priceScale) / priceScale;\n        if (value >= 1e-15 && value < 1) {\n            res = value.toFixed(this._private__precision).replace(/\\.?0+$/, \"\"); // regex removes trailing zeroes\n        } else {\n            res = String(value);\n        }\n        return res.replace(/(\\.[1-9]*)0+$/, (e, p1)=>p1);\n    }\n}\n// eslint-disable-next-line max-params, complexity\nfunction walkLine(renderingScope, items, lineType, visibleRange, barWidth, // the values returned by styleGetter are compared using the operator !==,\n// so if styleGetter returns objects, then styleGetter should return the same object for equal styles\nstyleGetter, finishStyledArea) {\n    if (items.length === 0 || visibleRange.from >= items.length || visibleRange.to <= 0) {\n        return;\n    }\n    const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n    const firstItem = items[visibleRange.from];\n    let currentStyle = styleGetter(renderingScope, firstItem);\n    let currentStyleFirstItem = firstItem;\n    if (visibleRange.to - visibleRange.from < 2) {\n        const halfBarWidth = barWidth / 2;\n        ctx.beginPath();\n        const item1 = {\n            _internal_x: firstItem._internal_x - halfBarWidth,\n            _internal_y: firstItem._internal_y\n        };\n        const item2 = {\n            _internal_x: firstItem._internal_x + halfBarWidth,\n            _internal_y: firstItem._internal_y\n        };\n        ctx.moveTo(item1._internal_x * horizontalPixelRatio, item1._internal_y * verticalPixelRatio);\n        ctx.lineTo(item2._internal_x * horizontalPixelRatio, item2._internal_y * verticalPixelRatio);\n        finishStyledArea(renderingScope, currentStyle, item1, item2);\n    } else {\n        const changeStyle = (newStyle, currentItem)=>{\n            finishStyledArea(renderingScope, currentStyle, currentStyleFirstItem, currentItem);\n            ctx.beginPath();\n            currentStyle = newStyle;\n            currentStyleFirstItem = currentItem;\n        };\n        let currentItem = currentStyleFirstItem;\n        ctx.beginPath();\n        ctx.moveTo(firstItem._internal_x * horizontalPixelRatio, firstItem._internal_y * verticalPixelRatio);\n        for(let i = visibleRange.from + 1; i < visibleRange.to; ++i){\n            currentItem = items[i];\n            const itemStyle = styleGetter(renderingScope, currentItem);\n            switch(lineType){\n                case 0 /* LineType.Simple */ :\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n                    break;\n                case 1 /* LineType.WithSteps */ :\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, items[i - 1]._internal_y * verticalPixelRatio);\n                    if (itemStyle !== currentStyle) {\n                        changeStyle(itemStyle, currentItem);\n                        ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, items[i - 1]._internal_y * verticalPixelRatio);\n                    }\n                    ctx.lineTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n                    break;\n                case 2 /* LineType.Curved */ :\n                    {\n                        const [cp1, cp2] = getControlPoints(items, i - 1, i);\n                        ctx.bezierCurveTo(cp1._internal_x * horizontalPixelRatio, cp1._internal_y * verticalPixelRatio, cp2._internal_x * horizontalPixelRatio, cp2._internal_y * verticalPixelRatio, currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n                        break;\n                    }\n            }\n            if (lineType !== 1 /* LineType.WithSteps */  && itemStyle !== currentStyle) {\n                changeStyle(itemStyle, currentItem);\n                ctx.moveTo(currentItem._internal_x * horizontalPixelRatio, currentItem._internal_y * verticalPixelRatio);\n            }\n        }\n        if (currentStyleFirstItem !== currentItem || currentStyleFirstItem === currentItem && lineType === 1 /* LineType.WithSteps */ ) {\n            finishStyledArea(renderingScope, currentStyle, currentStyleFirstItem, currentItem);\n        }\n    }\n}\nconst curveTension = 6;\nfunction subtract(p1, p2) {\n    return {\n        _internal_x: p1._internal_x - p2._internal_x,\n        _internal_y: p1._internal_y - p2._internal_y\n    };\n}\nfunction add(p1, p2) {\n    return {\n        _internal_x: p1._internal_x + p2._internal_x,\n        _internal_y: p1._internal_y + p2._internal_y\n    };\n}\nfunction divide(p1, n) {\n    return {\n        _internal_x: p1._internal_x / n,\n        _internal_y: p1._internal_y / n\n    };\n}\n/**\n * @returns Two control points that can be used as arguments to {@link CanvasRenderingContext2D.bezierCurveTo} to draw a curved line between `points[fromPointIndex]` and `points[toPointIndex]`.\n */ function getControlPoints(points, fromPointIndex, toPointIndex) {\n    const beforeFromPointIndex = Math.max(0, fromPointIndex - 1);\n    const afterToPointIndex = Math.min(points.length - 1, toPointIndex + 1);\n    const cp1 = add(points[fromPointIndex], divide(subtract(points[toPointIndex], points[beforeFromPointIndex]), curveTension));\n    const cp2 = subtract(points[toPointIndex], divide(subtract(points[afterToPointIndex], points[fromPointIndex]), curveTension));\n    return [\n        cp1,\n        cp2\n    ];\n}\nfunction finishStyledArea$1(baseLevelCoordinate, scope, style, areaFirstItem, newAreaFirstItem) {\n    const { context, horizontalPixelRatio, verticalPixelRatio } = scope;\n    context.lineTo(newAreaFirstItem._internal_x * horizontalPixelRatio, baseLevelCoordinate * verticalPixelRatio);\n    context.lineTo(areaFirstItem._internal_x * horizontalPixelRatio, baseLevelCoordinate * verticalPixelRatio);\n    context.closePath();\n    context.fillStyle = style;\n    context.fill();\n}\nclass PaneRendererAreaBase extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._internal__data = null;\n    }\n    _internal_setData(data) {\n        this._internal__data = data;\n    }\n    _internal__drawImpl(renderingScope) {\n        var _a;\n        if (this._internal__data === null) {\n            return;\n        }\n        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_lineType: lineType } = this._internal__data;\n        const baseLevelCoordinate = (_a = this._internal__data._internal_baseLevelCoordinate) !== null && _a !== void 0 ? _a : this._internal__data._internal_invertFilledArea ? 0 : renderingScope.mediaSize.height;\n        if (visibleRange === null) {\n            return;\n        }\n        const ctx = renderingScope.context;\n        ctx.lineCap = \"butt\";\n        ctx.lineJoin = \"round\";\n        ctx.lineWidth = lineWidth;\n        setLineStyle(ctx, lineStyle);\n        // walk lines with width=1 to have more accurate gradient's filling\n        ctx.lineWidth = 1;\n        walkLine(renderingScope, items, lineType, visibleRange, barWidth, this._internal__fillStyle.bind(this), finishStyledArea$1.bind(null, baseLevelCoordinate));\n    }\n}\nfunction clamp(value, minVal, maxVal) {\n    return Math.min(Math.max(value, minVal), maxVal);\n}\nfunction isBaseDecimal(value) {\n    if (value < 0) {\n        return false;\n    }\n    for(let current = value; current > 1; current /= 10){\n        if (current % 10 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction greaterOrEqual(x1, x2, epsilon) {\n    return x2 - x1 <= epsilon;\n}\nfunction equal(x1, x2, epsilon) {\n    return Math.abs(x1 - x2) < epsilon;\n}\n// We can't use Math.min(...arr) because that would only support arrays shorter than 65536 items.\nfunction min(arr) {\n    if (arr.length < 1) {\n        throw Error(\"array is empty\");\n    }\n    let minVal = arr[0];\n    for(let i = 1; i < arr.length; ++i){\n        if (arr[i] < minVal) {\n            minVal = arr[i];\n        }\n    }\n    return minVal;\n}\nfunction ceiledEven(x) {\n    const ceiled = Math.ceil(x);\n    return ceiled % 2 !== 0 ? ceiled - 1 : ceiled;\n}\nfunction ceiledOdd(x) {\n    const ceiled = Math.ceil(x);\n    return ceiled % 2 === 0 ? ceiled - 1 : ceiled;\n}\nclass GradientStyleCache {\n    _internal_get(scope, params) {\n        const cachedParams = this._private__params;\n        const { _internal_topColor1: topColor1, _internal_topColor2: topColor2, _internal_bottomColor1: bottomColor1, _internal_bottomColor2: bottomColor2, _internal_bottom: bottom, _internal_baseLevelCoordinate: baseLevelCoordinate } = params;\n        if (this._private__cachedValue === undefined || cachedParams === undefined || cachedParams._internal_topColor1 !== topColor1 || cachedParams._internal_topColor2 !== topColor2 || cachedParams._internal_bottomColor1 !== bottomColor1 || cachedParams._internal_bottomColor2 !== bottomColor2 || cachedParams._internal_baseLevelCoordinate !== baseLevelCoordinate || cachedParams._internal_bottom !== bottom) {\n            const gradient = scope.context.createLinearGradient(0, 0, 0, bottom);\n            gradient.addColorStop(0, topColor1);\n            if (baseLevelCoordinate != null) {\n                const baselinePercent = clamp(baseLevelCoordinate * scope.verticalPixelRatio / bottom, 0, 1);\n                gradient.addColorStop(baselinePercent, topColor2);\n                gradient.addColorStop(baselinePercent, bottomColor1);\n            }\n            gradient.addColorStop(1, bottomColor2);\n            this._private__cachedValue = gradient;\n            this._private__params = params;\n        }\n        return this._private__cachedValue;\n    }\n}\nclass PaneRendererArea extends PaneRendererAreaBase {\n    constructor(){\n        super(...arguments);\n        this._private__fillCache = new GradientStyleCache();\n    }\n    _internal__fillStyle(renderingScope, item) {\n        return this._private__fillCache._internal_get(renderingScope, {\n            _internal_topColor1: item._internal_topColor,\n            _internal_topColor2: \"\",\n            _internal_bottomColor1: \"\",\n            _internal_bottomColor2: item._internal_bottomColor,\n            _internal_bottom: renderingScope.bitmapSize.height\n        });\n    }\n}\nfunction drawSeriesPointMarkers(renderingScope, items, pointMarkersRadius, visibleRange, // the values returned by styleGetter are compared using the operator !==,\n// so if styleGetter returns objects, then styleGetter should return the same object for equal styles\nstyleGetter) {\n    const { horizontalPixelRatio, verticalPixelRatio, context } = renderingScope;\n    let prevStyle = null;\n    const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n    const correction = tickWidth % 2 / 2;\n    const radius = pointMarkersRadius * verticalPixelRatio + correction;\n    for(let i = visibleRange.to - 1; i >= visibleRange.from; --i){\n        const point = items[i];\n        if (point) {\n            const style = styleGetter(renderingScope, point);\n            if (style !== prevStyle) {\n                context.beginPath();\n                if (prevStyle !== null) {\n                    context.fill();\n                }\n                context.fillStyle = style;\n                prevStyle = style;\n            }\n            const centerX = Math.round(point._internal_x * horizontalPixelRatio) + correction; // correct x coordinate only\n            const centerY = point._internal_y * verticalPixelRatio;\n            context.moveTo(centerX, centerY);\n            context.arc(centerX, centerY, radius, 0, Math.PI * 2);\n        }\n    }\n    context.fill();\n}\nfunction finishStyledArea(scope, style) {\n    const ctx = scope.context;\n    ctx.strokeStyle = style;\n    ctx.stroke();\n}\nclass PaneRendererLineBase extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._internal__data = null;\n    }\n    _internal_setData(data) {\n        this._internal__data = data;\n    }\n    _internal__drawImpl(renderingScope) {\n        if (this._internal__data === null) {\n            return;\n        }\n        const { _internal_items: items, _internal_visibleRange: visibleRange, _internal_barWidth: barWidth, _internal_lineType: lineType, _internal_lineWidth: lineWidth, _internal_lineStyle: lineStyle, _internal_pointMarkersRadius: pointMarkersRadius } = this._internal__data;\n        if (visibleRange === null) {\n            return;\n        }\n        const ctx = renderingScope.context;\n        ctx.lineCap = \"butt\";\n        ctx.lineWidth = lineWidth * renderingScope.verticalPixelRatio;\n        setLineStyle(ctx, lineStyle);\n        ctx.lineJoin = \"round\";\n        const styleGetter = this._internal__strokeStyle.bind(this);\n        if (lineType !== undefined) {\n            walkLine(renderingScope, items, lineType, visibleRange, barWidth, styleGetter, finishStyledArea);\n        }\n        if (pointMarkersRadius) {\n            drawSeriesPointMarkers(renderingScope, items, pointMarkersRadius, visibleRange, styleGetter);\n        }\n    }\n}\nclass PaneRendererLine extends PaneRendererLineBase {\n    _internal__strokeStyle(renderingScope, item) {\n        return item._internal_lineColor;\n    }\n}\n/**\n * Binary function that accepts two arguments (the first of the type of array elements, and the second is always val), and returns a value convertible to bool.\n * The value returned indicates whether the first argument is considered to go before the second.\n * The function shall not modify any of its arguments.\n */ function boundCompare(lower, arr, value, compare, start = 0, to = arr.length) {\n    let count = to - start;\n    while(0 < count){\n        const count2 = count >> 1;\n        const mid = start + count2;\n        if (compare(arr[mid], value) === lower) {\n            start = mid + 1;\n            count -= count2 + 1;\n        } else {\n            count = count2;\n        }\n    }\n    return start;\n}\nconst lowerBound = boundCompare.bind(null, true);\nconst upperBound = boundCompare.bind(null, false);\nfunction lowerBoundItemsCompare(item, time) {\n    return item._internal_time < time;\n}\nfunction upperBoundItemsCompare(item, time) {\n    return time < item._internal_time;\n}\nfunction visibleTimedValues(items, range, extendedRange) {\n    const firstBar = range._internal_left();\n    const lastBar = range._internal_right();\n    const from = lowerBound(items, firstBar, lowerBoundItemsCompare);\n    const to = upperBound(items, lastBar, upperBoundItemsCompare);\n    if (!extendedRange) {\n        return {\n            from,\n            to\n        };\n    }\n    let extendedFrom = from;\n    let extendedTo = to;\n    if (from > 0 && from < items.length && items[from]._internal_time >= firstBar) {\n        extendedFrom = from - 1;\n    }\n    if (to > 0 && to < items.length && items[to - 1]._internal_time <= lastBar) {\n        extendedTo = to + 1;\n    }\n    return {\n        from: extendedFrom,\n        to: extendedTo\n    };\n}\nclass SeriesPaneViewBase {\n    constructor(series, model, extendedVisibleRange){\n        this._internal__invalidated = true;\n        this._internal__dataInvalidated = true;\n        this._internal__optionsInvalidated = true;\n        this._internal__items = [];\n        this._internal__itemsVisibleRange = null;\n        this._internal__series = series;\n        this._internal__model = model;\n        this._private__extendedVisibleRange = extendedVisibleRange;\n    }\n    _internal_update(updateType) {\n        this._internal__invalidated = true;\n        if (updateType === \"data\") {\n            this._internal__dataInvalidated = true;\n        }\n        if (updateType === \"options\") {\n            this._internal__optionsInvalidated = true;\n        }\n    }\n    _internal_renderer() {\n        if (!this._internal__series._internal_visible()) {\n            return null;\n        }\n        this._private__makeValid();\n        return this._internal__itemsVisibleRange === null ? null : this._internal__renderer;\n    }\n    _internal__updateOptions() {\n        this._internal__items = this._internal__items.map((item)=>Object.assign(Object.assign({}, item), this._internal__series._internal_barColorer()._internal_barStyle(item._internal_time)));\n    }\n    _internal__clearVisibleRange() {\n        this._internal__itemsVisibleRange = null;\n    }\n    _private__makeValid() {\n        if (this._internal__dataInvalidated) {\n            this._internal__fillRawPoints();\n            this._internal__dataInvalidated = false;\n        }\n        if (this._internal__optionsInvalidated) {\n            this._internal__updateOptions();\n            this._internal__optionsInvalidated = false;\n        }\n        if (this._internal__invalidated) {\n            this._private__makeValidImpl();\n            this._internal__invalidated = false;\n        }\n    }\n    _private__makeValidImpl() {\n        const priceScale = this._internal__series._internal_priceScale();\n        const timeScale = this._internal__model._internal_timeScale();\n        this._internal__clearVisibleRange();\n        if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {\n            return;\n        }\n        const visibleBars = timeScale._internal_visibleStrictRange();\n        if (visibleBars === null) {\n            return;\n        }\n        if (this._internal__series._internal_bars()._internal_size() === 0) {\n            return;\n        }\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return;\n        }\n        this._internal__itemsVisibleRange = visibleTimedValues(this._internal__items, visibleBars, this._private__extendedVisibleRange);\n        this._internal__convertToCoordinates(priceScale, timeScale, firstValue._internal_value);\n        this._internal__prepareRendererData();\n    }\n}\nclass LinePaneViewBase extends SeriesPaneViewBase {\n    constructor(series, model){\n        super(series, model, true);\n    }\n    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\n        priceScale._internal_pointsArrayToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));\n    }\n    _internal__createRawItemBase(time, price) {\n        return {\n            _internal_time: time,\n            _internal_price: price,\n            _internal_x: NaN,\n            _internal_y: NaN\n        };\n    }\n    _internal__fillRawPoints() {\n        const colorer = this._internal__series._internal_barColorer();\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row)=>{\n            const value = row._internal_value[3 /* PlotRowValueIndex.Close */ ];\n            return this._internal__createRawItem(row._internal_index, value, colorer);\n        });\n    }\n}\nclass SeriesAreaPaneView extends LinePaneViewBase {\n    constructor(series, model){\n        super(series, model);\n        this._internal__renderer = new CompositeRenderer();\n        this._private__areaRenderer = new PaneRendererArea();\n        this._private__lineRenderer = new PaneRendererLine();\n        this._internal__renderer._internal_setRenderers([\n            this._private__areaRenderer,\n            this._private__lineRenderer\n        ]);\n    }\n    _internal__createRawItem(time, price, colorer) {\n        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));\n    }\n    _internal__prepareRendererData() {\n        const options = this._internal__series._internal_options();\n        this._private__areaRenderer._internal_setData({\n            _internal_lineType: options.lineType,\n            _internal_items: this._internal__items,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineWidth: options.lineWidth,\n            _internal_baseLevelCoordinate: null,\n            _internal_invertFilledArea: options.invertFilledArea,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing()\n        });\n        this._private__lineRenderer._internal_setData({\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\n            _internal_items: this._internal__items,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineWidth: options.lineWidth,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? options.pointMarkersRadius || options.lineWidth / 2 + 2 : undefined\n        });\n    }\n}\nfunction optimalBarWidth(barSpacing, pixelRatio) {\n    return Math.floor(barSpacing * 0.3 * pixelRatio);\n}\nfunction optimalCandlestickWidth(barSpacing, pixelRatio) {\n    const barSpacingSpecialCaseFrom = 2.5;\n    const barSpacingSpecialCaseTo = 4;\n    const barSpacingSpecialCaseCoeff = 3;\n    if (barSpacing >= barSpacingSpecialCaseFrom && barSpacing <= barSpacingSpecialCaseTo) {\n        return Math.floor(barSpacingSpecialCaseCoeff * pixelRatio);\n    }\n    // coeff should be 1 on small barspacing and go to 0.8 while groing bar spacing\n    const barSpacingReducingCoeff = 0.2;\n    const coeff = 1 - barSpacingReducingCoeff * Math.atan(Math.max(barSpacingSpecialCaseTo, barSpacing) - barSpacingSpecialCaseTo) / (Math.PI * 0.5);\n    const res = Math.floor(barSpacing * coeff * pixelRatio);\n    const scaledBarSpacing = Math.floor(barSpacing * pixelRatio);\n    const optimal = Math.min(res, scaledBarSpacing);\n    return Math.max(Math.floor(pixelRatio), optimal);\n}\nclass PaneRendererBars extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n        this._private__barWidth = 0;\n        this._private__barLineWidth = 0;\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    // eslint-disable-next-line complexity\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\n        if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        this._private__barWidth = this._private__calcBarWidth(horizontalPixelRatio);\n        // grid and crosshair have line width = Math.floor(pixelRatio)\n        // if this value is odd, we have to make bars' width odd\n        // if this value is even, we have to make bars' width even\n        // in order of keeping crosshair-over-bar drawing symmetric\n        if (this._private__barWidth >= 2) {\n            const lineWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n            if (lineWidth % 2 !== this._private__barWidth % 2) {\n                this._private__barWidth--;\n            }\n        }\n        // if scale is compressed, bar could become less than 1 CSS pixel\n        this._private__barLineWidth = this._private__data._internal_thinBars ? Math.min(this._private__barWidth, Math.floor(horizontalPixelRatio)) : this._private__barWidth;\n        let prevColor = null;\n        const drawOpenClose = this._private__barLineWidth <= this._private__barWidth && this._private__data._internal_barSpacing >= Math.floor(1.5 * horizontalPixelRatio);\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; ++i){\n            const bar = this._private__data._internal_bars[i];\n            if (prevColor !== bar._internal_barColor) {\n                ctx.fillStyle = bar._internal_barColor;\n                prevColor = bar._internal_barColor;\n            }\n            const bodyWidthHalf = Math.floor(this._private__barLineWidth * 0.5);\n            const bodyCenter = Math.round(bar._internal_x * horizontalPixelRatio);\n            const bodyLeft = bodyCenter - bodyWidthHalf;\n            const bodyWidth = this._private__barLineWidth;\n            const bodyRight = bodyLeft + bodyWidth - 1;\n            const high = Math.min(bar._internal_highY, bar._internal_lowY);\n            const low = Math.max(bar._internal_highY, bar._internal_lowY);\n            const bodyTop = Math.round(high * verticalPixelRatio) - bodyWidthHalf;\n            const bodyBottom = Math.round(low * verticalPixelRatio) + bodyWidthHalf;\n            const bodyHeight = Math.max(bodyBottom - bodyTop, this._private__barLineWidth);\n            ctx.fillRect(bodyLeft, bodyTop, bodyWidth, bodyHeight);\n            const sideWidth = Math.ceil(this._private__barWidth * 1.5);\n            if (drawOpenClose) {\n                if (this._private__data._internal_openVisible) {\n                    const openLeft = bodyCenter - sideWidth;\n                    let openTop = Math.max(bodyTop, Math.round(bar._internal_openY * verticalPixelRatio) - bodyWidthHalf);\n                    let openBottom = openTop + bodyWidth - 1;\n                    if (openBottom > bodyTop + bodyHeight - 1) {\n                        openBottom = bodyTop + bodyHeight - 1;\n                        openTop = openBottom - bodyWidth + 1;\n                    }\n                    ctx.fillRect(openLeft, openTop, bodyLeft - openLeft, openBottom - openTop + 1);\n                }\n                const closeRight = bodyCenter + sideWidth;\n                let closeTop = Math.max(bodyTop, Math.round(bar._internal_closeY * verticalPixelRatio) - bodyWidthHalf);\n                let closeBottom = closeTop + bodyWidth - 1;\n                if (closeBottom > bodyTop + bodyHeight - 1) {\n                    closeBottom = bodyTop + bodyHeight - 1;\n                    closeTop = closeBottom - bodyWidth + 1;\n                }\n                ctx.fillRect(bodyRight + 1, closeTop, closeRight - bodyRight, closeBottom - closeTop + 1);\n            }\n        }\n    }\n    _private__calcBarWidth(pixelRatio) {\n        const limit = Math.floor(pixelRatio);\n        return Math.max(limit, Math.floor(optimalBarWidth(ensureNotNull(this._private__data)._internal_barSpacing, pixelRatio)));\n    }\n}\nclass BarsPaneViewBase extends SeriesPaneViewBase {\n    constructor(series, model){\n        super(series, model, false);\n    }\n    _internal__convertToCoordinates(priceScale, timeScale, firstValue) {\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\n        priceScale._internal_barPricesToCoordinates(this._internal__items, firstValue, undefinedIfNull(this._internal__itemsVisibleRange));\n    }\n    _internal__createDefaultItem(time, bar, colorer) {\n        return {\n            _internal_time: time,\n            _internal_open: bar._internal_value[0 /* PlotRowValueIndex.Open */ ],\n            _internal_high: bar._internal_value[1 /* PlotRowValueIndex.High */ ],\n            _internal_low: bar._internal_value[2 /* PlotRowValueIndex.Low */ ],\n            _internal_close: bar._internal_value[3 /* PlotRowValueIndex.Close */ ],\n            _internal_x: NaN,\n            _internal_openY: NaN,\n            _internal_highY: NaN,\n            _internal_lowY: NaN,\n            _internal_closeY: NaN\n        };\n    }\n    _internal__fillRawPoints() {\n        const colorer = this._internal__series._internal_barColorer();\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row)=>this._internal__createRawItem(row._internal_index, row, colorer));\n    }\n}\nclass SeriesBarsPaneView extends BarsPaneViewBase {\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererBars();\n    }\n    _internal__createRawItem(time, bar, colorer) {\n        return Object.assign(Object.assign({}, this._internal__createDefaultItem(time, bar, colorer)), colorer._internal_barStyle(time));\n    }\n    _internal__prepareRendererData() {\n        const barStyleProps = this._internal__series._internal_options();\n        this._internal__renderer._internal_setData({\n            _internal_bars: this._internal__items,\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_openVisible: barStyleProps.openVisible,\n            _internal_thinBars: barStyleProps.thinBars,\n            _internal_visibleRange: this._internal__itemsVisibleRange\n        });\n    }\n}\nclass PaneRendererBaselineArea extends PaneRendererAreaBase {\n    constructor(){\n        super(...arguments);\n        this._private__fillCache = new GradientStyleCache();\n    }\n    _internal__fillStyle(renderingScope, item) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const data = this._internal__data;\n        return this._private__fillCache._internal_get(renderingScope, {\n            _internal_topColor1: item._internal_topFillColor1,\n            _internal_topColor2: item._internal_topFillColor2,\n            _internal_bottomColor1: item._internal_bottomFillColor1,\n            _internal_bottomColor2: item._internal_bottomFillColor2,\n            _internal_bottom: renderingScope.bitmapSize.height,\n            _internal_baseLevelCoordinate: data._internal_baseLevelCoordinate\n        });\n    }\n}\nclass PaneRendererBaselineLine extends PaneRendererLineBase {\n    constructor(){\n        super(...arguments);\n        this._private__strokeCache = new GradientStyleCache();\n    }\n    _internal__strokeStyle(renderingScope, item) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const data = this._internal__data;\n        return this._private__strokeCache._internal_get(renderingScope, {\n            _internal_topColor1: item._internal_topLineColor,\n            _internal_topColor2: item._internal_topLineColor,\n            _internal_bottomColor1: item._internal_bottomLineColor,\n            _internal_bottomColor2: item._internal_bottomLineColor,\n            _internal_bottom: renderingScope.bitmapSize.height,\n            _internal_baseLevelCoordinate: data._internal_baseLevelCoordinate\n        });\n    }\n}\nclass SeriesBaselinePaneView extends LinePaneViewBase {\n    constructor(series, model){\n        super(series, model);\n        this._internal__renderer = new CompositeRenderer();\n        this._private__baselineAreaRenderer = new PaneRendererBaselineArea();\n        this._private__baselineLineRenderer = new PaneRendererBaselineLine();\n        this._internal__renderer._internal_setRenderers([\n            this._private__baselineAreaRenderer,\n            this._private__baselineLineRenderer\n        ]);\n    }\n    _internal__createRawItem(time, price, colorer) {\n        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));\n    }\n    _internal__prepareRendererData() {\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return;\n        }\n        const options = this._internal__series._internal_options();\n        const baseLevelCoordinate = this._internal__series._internal_priceScale()._internal_priceToCoordinate(options.baseValue.price, firstValue._internal_value);\n        const barWidth = this._internal__model._internal_timeScale()._internal_barSpacing();\n        this._private__baselineAreaRenderer._internal_setData({\n            _internal_items: this._internal__items,\n            _internal_lineWidth: options.lineWidth,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineType: options.lineType,\n            _internal_baseLevelCoordinate: baseLevelCoordinate,\n            _internal_invertFilledArea: false,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: barWidth\n        });\n        this._private__baselineLineRenderer._internal_setData({\n            _internal_items: this._internal__items,\n            _internal_lineWidth: options.lineWidth,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? options.pointMarkersRadius || options.lineWidth / 2 + 2 : undefined,\n            _internal_baseLevelCoordinate: baseLevelCoordinate,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: barWidth\n        });\n    }\n}\nclass PaneRendererCandlesticks extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n        // scaled with pixelRatio\n        this._private__barWidth = 0;\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal__drawImpl(renderingScope) {\n        if (this._private__data === null || this._private__data._internal_bars.length === 0 || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        const { horizontalPixelRatio } = renderingScope;\n        // now we know pixelRatio and we could calculate barWidth effectively\n        this._private__barWidth = optimalCandlestickWidth(this._private__data._internal_barSpacing, horizontalPixelRatio);\n        // grid and crosshair have line width = Math.floor(pixelRatio)\n        // if this value is odd, we have to make candlesticks' width odd\n        // if this value is even, we have to make candlesticks' width even\n        // in order of keeping crosshair-over-candlesticks drawing symmetric\n        if (this._private__barWidth >= 2) {\n            const wickWidth = Math.floor(horizontalPixelRatio);\n            if (wickWidth % 2 !== this._private__barWidth % 2) {\n                this._private__barWidth--;\n            }\n        }\n        const bars = this._private__data._internal_bars;\n        if (this._private__data._internal_wickVisible) {\n            this._private__drawWicks(renderingScope, bars, this._private__data._internal_visibleRange);\n        }\n        if (this._private__data._internal_borderVisible) {\n            this._private__drawBorder(renderingScope, bars, this._private__data._internal_visibleRange);\n        }\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\n        if (!this._private__data._internal_borderVisible || this._private__barWidth > borderWidth * 2) {\n            this._private__drawCandles(renderingScope, bars, this._private__data._internal_visibleRange);\n        }\n    }\n    _private__drawWicks(renderingScope, bars, visibleRange) {\n        if (this._private__data === null) {\n            return;\n        }\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n        let prevWickColor = \"\";\n        let wickWidth = Math.min(Math.floor(horizontalPixelRatio), Math.floor(this._private__data._internal_barSpacing * horizontalPixelRatio));\n        wickWidth = Math.max(Math.floor(horizontalPixelRatio), Math.min(wickWidth, this._private__barWidth));\n        const wickOffset = Math.floor(wickWidth * 0.5);\n        let prevEdge = null;\n        for(let i = visibleRange.from; i < visibleRange.to; i++){\n            const bar = bars[i];\n            if (bar._internal_barWickColor !== prevWickColor) {\n                ctx.fillStyle = bar._internal_barWickColor;\n                prevWickColor = bar._internal_barWickColor;\n            }\n            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            const high = Math.round(bar._internal_highY * verticalPixelRatio);\n            const low = Math.round(bar._internal_lowY * verticalPixelRatio);\n            const scaledX = Math.round(horizontalPixelRatio * bar._internal_x);\n            let left = scaledX - wickOffset;\n            const right = left + wickWidth - 1;\n            if (prevEdge !== null) {\n                left = Math.max(prevEdge + 1, left);\n                left = Math.min(left, right);\n            }\n            const width = right - left + 1;\n            ctx.fillRect(left, high, width, top - high);\n            ctx.fillRect(left, bottom + 1, width, low - bottom);\n            prevEdge = right;\n        }\n    }\n    _private__calculateBorderWidth(pixelRatio) {\n        let borderWidth = Math.floor(1 /* Constants.BarBorderWidth */  * pixelRatio);\n        if (this._private__barWidth <= 2 * borderWidth) {\n            borderWidth = Math.floor((this._private__barWidth - 1) * 0.5);\n        }\n        const res = Math.max(Math.floor(pixelRatio), borderWidth);\n        if (this._private__barWidth <= res * 2) {\n            // do not draw bodies, restore original value\n            return Math.max(Math.floor(pixelRatio), Math.floor(1 /* Constants.BarBorderWidth */  * pixelRatio));\n        }\n        return res;\n    }\n    _private__drawBorder(renderingScope, bars, visibleRange) {\n        if (this._private__data === null) {\n            return;\n        }\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n        let prevBorderColor = \"\";\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\n        let prevEdge = null;\n        for(let i = visibleRange.from; i < visibleRange.to; i++){\n            const bar = bars[i];\n            if (bar._internal_barBorderColor !== prevBorderColor) {\n                ctx.fillStyle = bar._internal_barBorderColor;\n                prevBorderColor = bar._internal_barBorderColor;\n            }\n            let left = Math.round(bar._internal_x * horizontalPixelRatio) - Math.floor(this._private__barWidth * 0.5);\n            // this is important to calculate right before patching left\n            const right = left + this._private__barWidth - 1;\n            const top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            const bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            if (prevEdge !== null) {\n                left = Math.max(prevEdge + 1, left);\n                left = Math.min(left, right);\n            }\n            if (this._private__data._internal_barSpacing * horizontalPixelRatio > 2 * borderWidth) {\n                fillRectInnerBorder(ctx, left, top, right - left + 1, bottom - top + 1, borderWidth);\n            } else {\n                const width = right - left + 1;\n                ctx.fillRect(left, top, width, bottom - top + 1);\n            }\n            prevEdge = right;\n        }\n    }\n    _private__drawCandles(renderingScope, bars, visibleRange) {\n        if (this._private__data === null) {\n            return;\n        }\n        const { context: ctx, horizontalPixelRatio, verticalPixelRatio } = renderingScope;\n        let prevBarColor = \"\";\n        const borderWidth = this._private__calculateBorderWidth(horizontalPixelRatio);\n        for(let i = visibleRange.from; i < visibleRange.to; i++){\n            const bar = bars[i];\n            let top = Math.round(Math.min(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            let bottom = Math.round(Math.max(bar._internal_openY, bar._internal_closeY) * verticalPixelRatio);\n            let left = Math.round(bar._internal_x * horizontalPixelRatio) - Math.floor(this._private__barWidth * 0.5);\n            let right = left + this._private__barWidth - 1;\n            if (bar._internal_barColor !== prevBarColor) {\n                const barColor = bar._internal_barColor;\n                ctx.fillStyle = barColor;\n                prevBarColor = barColor;\n            }\n            if (this._private__data._internal_borderVisible) {\n                left += borderWidth;\n                top += borderWidth;\n                right -= borderWidth;\n                bottom -= borderWidth;\n            }\n            if (top > bottom) {\n                continue;\n            }\n            ctx.fillRect(left, top, right - left + 1, bottom - top + 1);\n        }\n    }\n}\nclass SeriesCandlesticksPaneView extends BarsPaneViewBase {\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererCandlesticks();\n    }\n    _internal__createRawItem(time, bar, colorer) {\n        return Object.assign(Object.assign({}, this._internal__createDefaultItem(time, bar, colorer)), colorer._internal_barStyle(time));\n    }\n    _internal__prepareRendererData() {\n        const candlestickStyleProps = this._internal__series._internal_options();\n        this._internal__renderer._internal_setData({\n            _internal_bars: this._internal__items,\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_wickVisible: candlestickStyleProps.wickVisible,\n            _internal_borderVisible: candlestickStyleProps.borderVisible,\n            _internal_visibleRange: this._internal__itemsVisibleRange\n        });\n    }\n}\nclass CustomSeriesPaneRendererWrapper {\n    constructor(sourceRenderer, priceScale){\n        this._private__sourceRenderer = sourceRenderer;\n        this._private__priceScale = priceScale;\n    }\n    _internal_draw(target, isHovered, hitTestData) {\n        this._private__sourceRenderer.draw(target, this._private__priceScale, isHovered, hitTestData);\n    }\n}\nclass SeriesCustomPaneView extends SeriesPaneViewBase {\n    constructor(series, model, paneView){\n        super(series, model, false);\n        this._private__paneView = paneView;\n        this._internal__renderer = new CustomSeriesPaneRendererWrapper(this._private__paneView.renderer(), (price)=>{\n            const firstValue = series._internal_firstValue();\n            if (firstValue === null) {\n                return null;\n            }\n            return series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);\n        });\n    }\n    _internal_priceValueBuilder(plotRow) {\n        return this._private__paneView.priceValueBuilder(plotRow);\n    }\n    _internal_isWhitespace(data) {\n        return this._private__paneView.isWhitespace(data);\n    }\n    _internal__fillRawPoints() {\n        const colorer = this._internal__series._internal_barColorer();\n        this._internal__items = this._internal__series._internal_bars()._internal_rows().map((row)=>{\n            return Object.assign(Object.assign({\n                _internal_time: row._internal_index,\n                _internal_x: NaN\n            }, colorer._internal_barStyle(row._internal_index)), {\n                _internal_originalData: row._internal_data\n            });\n        });\n    }\n    _internal__convertToCoordinates(priceScale, timeScale) {\n        timeScale._internal_indexesToCoordinates(this._internal__items, undefinedIfNull(this._internal__itemsVisibleRange));\n    }\n    _internal__prepareRendererData() {\n        this._private__paneView.update({\n            bars: this._internal__items.map(unwrapItemData),\n            barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            visibleRange: this._internal__itemsVisibleRange\n        }, this._internal__series._internal_options());\n    }\n}\nfunction unwrapItemData(item) {\n    return {\n        x: item._internal_x,\n        time: item._internal_time,\n        originalData: item._internal_originalData,\n        barColor: item._internal_barColor\n    };\n}\nconst showSpacingMinimalBarWidth = 1;\nconst alignToMinimalWidthLimit = 4;\nclass PaneRendererHistogram extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n        this._private__precalculatedCache = [];\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n        this._private__precalculatedCache = [];\n    }\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\n        if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        if (!this._private__precalculatedCache.length) {\n            this._private__fillPrecalculatedCache(horizontalPixelRatio);\n        }\n        const tickWidth = Math.max(1, Math.floor(verticalPixelRatio));\n        const histogramBase = Math.round(this._private__data._internal_histogramBase * verticalPixelRatio);\n        const topHistogramBase = histogramBase - Math.floor(tickWidth / 2);\n        const bottomHistogramBase = topHistogramBase + tickWidth;\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const item = this._private__data._internal_items[i];\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n            const y = Math.round(item._internal_y * verticalPixelRatio);\n            ctx.fillStyle = item._internal_barColor;\n            let top;\n            let bottom;\n            if (y <= topHistogramBase) {\n                top = y;\n                bottom = bottomHistogramBase;\n            } else {\n                top = topHistogramBase;\n                bottom = y - Math.floor(tickWidth / 2) + tickWidth;\n            }\n            ctx.fillRect(current._internal_left, top, current._internal_right - current._internal_left + 1, bottom - top);\n        }\n    }\n    // eslint-disable-next-line complexity\n    _private__fillPrecalculatedCache(pixelRatio) {\n        if (this._private__data === null || this._private__data._internal_items.length === 0 || this._private__data._internal_visibleRange === null) {\n            this._private__precalculatedCache = [];\n            return;\n        }\n        const spacing = Math.ceil(this._private__data._internal_barSpacing * pixelRatio) <= showSpacingMinimalBarWidth ? 0 : Math.max(1, Math.floor(pixelRatio));\n        const columnWidth = Math.round(this._private__data._internal_barSpacing * pixelRatio) - spacing;\n        this._private__precalculatedCache = new Array(this._private__data._internal_visibleRange.to - this._private__data._internal_visibleRange.from);\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const item = this._private__data._internal_items[i];\n            // force cast to avoid ensureDefined call\n            const x = Math.round(item._internal_x * pixelRatio);\n            let left;\n            let right;\n            if (columnWidth % 2) {\n                const halfWidth = (columnWidth - 1) / 2;\n                left = x - halfWidth;\n                right = x + halfWidth;\n            } else {\n                // shift pixel to left\n                const halfWidth = columnWidth / 2;\n                left = x - halfWidth;\n                right = x + halfWidth - 1;\n            }\n            this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from] = {\n                _internal_left: left,\n                _internal_right: right,\n                _internal_roundedCenter: x,\n                _internal_center: item._internal_x * pixelRatio,\n                _internal_time: item._internal_time\n            };\n        }\n        // correct positions\n        for(let i = this._private__data._internal_visibleRange.from + 1; i < this._private__data._internal_visibleRange.to; i++){\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n            const prev = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from - 1];\n            if (current._internal_time !== prev._internal_time + 1) {\n                continue;\n            }\n            if (current._internal_left - prev._internal_right !== spacing + 1) {\n                // have to align\n                if (prev._internal_roundedCenter > prev._internal_center) {\n                    // prev wasshifted to left, so add pixel to right\n                    prev._internal_right = current._internal_left - spacing - 1;\n                } else {\n                    // extend current to left\n                    current._internal_left = prev._internal_right + spacing + 1;\n                }\n            }\n        }\n        let minWidth = Math.ceil(this._private__data._internal_barSpacing * pixelRatio);\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n            // this could happen if barspacing < 1\n            if (current._internal_right < current._internal_left) {\n                current._internal_right = current._internal_left;\n            }\n            const width = current._internal_right - current._internal_left + 1;\n            minWidth = Math.min(width, minWidth);\n        }\n        if (spacing > 0 && minWidth < alignToMinimalWidthLimit) {\n            for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n                const current = this._private__precalculatedCache[i - this._private__data._internal_visibleRange.from];\n                const width = current._internal_right - current._internal_left + 1;\n                if (width > minWidth) {\n                    if (current._internal_roundedCenter > current._internal_center) {\n                        current._internal_right -= 1;\n                    } else {\n                        current._internal_left += 1;\n                    }\n                }\n            }\n        }\n    }\n}\nclass SeriesHistogramPaneView extends LinePaneViewBase {\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererHistogram();\n    }\n    _internal__createRawItem(time, price, colorer) {\n        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));\n    }\n    _internal__prepareRendererData() {\n        const data = {\n            _internal_items: this._internal__items,\n            _internal_barSpacing: this._internal__model._internal_timeScale()._internal_barSpacing(),\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_histogramBase: this._internal__series._internal_priceScale()._internal_priceToCoordinate(this._internal__series._internal_options().base, ensureNotNull(this._internal__series._internal_firstValue())._internal_value)\n        };\n        this._internal__renderer._internal_setData(data);\n    }\n}\nclass SeriesLinePaneView extends LinePaneViewBase {\n    constructor(){\n        super(...arguments);\n        this._internal__renderer = new PaneRendererLine();\n    }\n    _internal__createRawItem(time, price, colorer) {\n        return Object.assign(Object.assign({}, this._internal__createRawItemBase(time, price)), colorer._internal_barStyle(time));\n    }\n    _internal__prepareRendererData() {\n        const options = this._internal__series._internal_options();\n        const data = {\n            _internal_items: this._internal__items,\n            _internal_lineStyle: options.lineStyle,\n            _internal_lineType: options.lineVisible ? options.lineType : undefined,\n            _internal_lineWidth: options.lineWidth,\n            _internal_pointMarkersRadius: options.pointMarkersVisible ? options.pointMarkersRadius || options.lineWidth / 2 + 2 : undefined,\n            _internal_visibleRange: this._internal__itemsVisibleRange,\n            _internal_barWidth: this._internal__model._internal_timeScale()._internal_barSpacing()\n        };\n        this._internal__renderer._internal_setData(data);\n    }\n}\nconst defaultReplacementRe = /[2-9]/g;\nclass TextWidthCache {\n    constructor(size = 50){\n        this._private__actualSize = 0;\n        this._private__usageTick = 1;\n        this._private__oldestTick = 1;\n        this._private__tick2Labels = {};\n        this._private__cache = new Map();\n        this._private__maxSize = size;\n    }\n    _internal_reset() {\n        this._private__actualSize = 0;\n        this._private__cache.clear();\n        this._private__usageTick = 1;\n        this._private__oldestTick = 1;\n        this._private__tick2Labels = {};\n    }\n    _internal_measureText(ctx, text, optimizationReplacementRe) {\n        return this._private__getMetrics(ctx, text, optimizationReplacementRe).width;\n    }\n    _internal_yMidCorrection(ctx, text, optimizationReplacementRe) {\n        const metrics = this._private__getMetrics(ctx, text, optimizationReplacementRe);\n        // if actualBoundingBoxAscent/actualBoundingBoxDescent are not supported we use 0 as a fallback\n        return ((metrics.actualBoundingBoxAscent || 0) - (metrics.actualBoundingBoxDescent || 0)) / 2;\n    }\n    _private__getMetrics(ctx, text, optimizationReplacementRe) {\n        const re = optimizationReplacementRe || defaultReplacementRe;\n        const cacheString = String(text).replace(re, \"0\");\n        if (this._private__cache.has(cacheString)) {\n            return ensureDefined(this._private__cache.get(cacheString))._internal_metrics;\n        }\n        if (this._private__actualSize === this._private__maxSize) {\n            const oldestValue = this._private__tick2Labels[this._private__oldestTick];\n            delete this._private__tick2Labels[this._private__oldestTick];\n            this._private__cache.delete(oldestValue);\n            this._private__oldestTick++;\n            this._private__actualSize--;\n        }\n        ctx.save();\n        ctx.textBaseline = \"middle\";\n        const metrics = ctx.measureText(cacheString);\n        ctx.restore();\n        if (metrics.width === 0 && !!text.length) {\n            // measureText can return 0 in FF depending on a canvas size, don't cache it\n            return metrics;\n        }\n        this._private__cache.set(cacheString, {\n            _internal_metrics: metrics,\n            _internal_tick: this._private__usageTick\n        });\n        this._private__tick2Labels[this._private__usageTick] = cacheString;\n        this._private__actualSize++;\n        this._private__usageTick++;\n        return metrics;\n    }\n}\nclass PanePriceAxisViewRenderer {\n    constructor(textWidthCache){\n        this._private__priceAxisViewRenderer = null;\n        this._private__rendererOptions = null;\n        this._private__align = \"right\";\n        this._private__textWidthCache = textWidthCache;\n    }\n    _internal_setParams(priceAxisViewRenderer, rendererOptions, align) {\n        this._private__priceAxisViewRenderer = priceAxisViewRenderer;\n        this._private__rendererOptions = rendererOptions;\n        this._private__align = align;\n    }\n    _internal_draw(target) {\n        if (this._private__rendererOptions === null || this._private__priceAxisViewRenderer === null) {\n            return;\n        }\n        this._private__priceAxisViewRenderer._internal_draw(target, this._private__rendererOptions, this._private__textWidthCache, this._private__align);\n    }\n}\nclass PanePriceAxisView {\n    constructor(priceAxisView, dataSource, chartModel){\n        this._private__priceAxisView = priceAxisView;\n        this._private__textWidthCache = new TextWidthCache(50); // when should we clear cache?\n        this._private__dataSource = dataSource;\n        this._private__chartModel = chartModel;\n        this._private__fontSize = -1;\n        this._private__renderer = new PanePriceAxisViewRenderer(this._private__textWidthCache);\n    }\n    _internal_renderer() {\n        const pane = this._private__chartModel._internal_paneForSource(this._private__dataSource);\n        if (pane === null) {\n            return null;\n        }\n        // this price scale will be used to find label placement only (left, right, none)\n        const priceScale = pane._internal_isOverlay(this._private__dataSource) ? pane._internal_defaultVisiblePriceScale() : this._private__dataSource._internal_priceScale();\n        if (priceScale === null) {\n            return null;\n        }\n        const position = pane._internal_priceScalePosition(priceScale);\n        if (position === \"overlay\") {\n            return null;\n        }\n        const options = this._private__chartModel._internal_priceAxisRendererOptions();\n        if (options._internal_fontSize !== this._private__fontSize) {\n            this._private__fontSize = options._internal_fontSize;\n            this._private__textWidthCache._internal_reset();\n        }\n        this._private__renderer._internal_setParams(this._private__priceAxisView._internal_paneRenderer(), options, position);\n        return this._private__renderer;\n    }\n}\nclass HorizontalLineRenderer extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_hitTest(x, y) {\n        var _a;\n        if (!((_a = this._private__data) === null || _a === void 0 ? void 0 : _a._internal_visible)) {\n            return null;\n        }\n        const { _internal_y: itemY, _internal_lineWidth: lineWidth, _internal_externalId: externalId } = this._private__data;\n        // add a fixed area threshold around line (Y + width) for hit test\n        if (y >= itemY - lineWidth - 7 /* Constants.HitTestThreshold */  && y <= itemY + lineWidth + 7 /* Constants.HitTestThreshold */ ) {\n            return {\n                _internal_hitTestData: this._private__data,\n                _internal_externalId: externalId\n            };\n        }\n        return null;\n    }\n    _internal__drawImpl({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\n        if (this._private__data === null) {\n            return;\n        }\n        if (this._private__data._internal_visible === false) {\n            return;\n        }\n        const y = Math.round(this._private__data._internal_y * verticalPixelRatio);\n        if (y < 0 || y > bitmapSize.height) {\n            return;\n        }\n        ctx.lineCap = \"butt\";\n        ctx.strokeStyle = this._private__data._internal_color;\n        ctx.lineWidth = Math.floor(this._private__data._internal_lineWidth * horizontalPixelRatio);\n        setLineStyle(ctx, this._private__data._internal_lineStyle);\n        drawHorizontalLine(ctx, y, 0, bitmapSize.width);\n    }\n}\nclass SeriesHorizontalLinePaneView {\n    constructor(series){\n        this._internal__lineRendererData = {\n            _internal_y: 0,\n            _internal_color: \"rgba(0, 0, 0, 0)\",\n            _internal_lineWidth: 1,\n            _internal_lineStyle: 0 /* LineStyle.Solid */ ,\n            _internal_visible: false\n        };\n        this._internal__lineRenderer = new HorizontalLineRenderer();\n        this._private__invalidated = true;\n        this._internal__series = series;\n        this._internal__model = series._internal_model();\n        this._internal__lineRenderer._internal_setData(this._internal__lineRendererData);\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (!this._internal__series._internal_visible()) {\n            return null;\n        }\n        if (this._private__invalidated) {\n            this._internal__updateImpl();\n            this._private__invalidated = false;\n        }\n        return this._internal__lineRenderer;\n    }\n}\nclass SeriesHorizontalBaseLinePaneView extends SeriesHorizontalLinePaneView {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(series){\n        super(series);\n    }\n    _internal__updateImpl() {\n        this._internal__lineRendererData._internal_visible = false;\n        const priceScale = this._internal__series._internal_priceScale();\n        const mode = priceScale._internal_mode()._internal_mode;\n        if (mode !== 2 /* PriceScaleMode.Percentage */  && mode !== 3 /* PriceScaleMode.IndexedTo100 */ ) {\n            return;\n        }\n        const seriesOptions = this._internal__series._internal_options();\n        if (!seriesOptions.baseLineVisible || !this._internal__series._internal_visible()) {\n            return;\n        }\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return;\n        }\n        this._internal__lineRendererData._internal_visible = true;\n        this._internal__lineRendererData._internal_y = priceScale._internal_priceToCoordinate(firstValue._internal_value, firstValue._internal_value);\n        this._internal__lineRendererData._internal_color = seriesOptions.baseLineColor;\n        this._internal__lineRendererData._internal_lineWidth = seriesOptions.baseLineWidth;\n        this._internal__lineRendererData._internal_lineStyle = seriesOptions.baseLineStyle;\n    }\n}\nclass SeriesLastPriceAnimationRenderer extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_data() {\n        return this._private__data;\n    }\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }) {\n        const data = this._private__data;\n        if (data === null) {\n            return;\n        }\n        const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n        const correction = tickWidth % 2 / 2;\n        const centerX = Math.round(data._internal_center.x * horizontalPixelRatio) + correction; // correct x coordinate only\n        const centerY = data._internal_center.y * verticalPixelRatio;\n        ctx.fillStyle = data._internal_seriesLineColor;\n        ctx.beginPath();\n        // TODO: it is better to have different horizontal and vertical radii\n        const centerPointRadius = Math.max(2, data._internal_seriesLineWidth * 1.5) * horizontalPixelRatio;\n        ctx.arc(centerX, centerY, centerPointRadius, 0, 2 * Math.PI, false);\n        ctx.fill();\n        ctx.fillStyle = data._internal_fillColor;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, data._internal_radius * horizontalPixelRatio, 0, 2 * Math.PI, false);\n        ctx.fill();\n        ctx.lineWidth = tickWidth;\n        ctx.strokeStyle = data._internal_strokeColor;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, data._internal_radius * horizontalPixelRatio + tickWidth / 2, 0, 2 * Math.PI, false);\n        ctx.stroke();\n    }\n}\nconst animationStagesData = [\n    {\n        _internal_start: 0,\n        _internal_end: 0.25 /* Constants.Stage1Period */ ,\n        _internal_startRadius: 4 /* Constants.Stage1StartCircleRadius */ ,\n        _internal_endRadius: 10 /* Constants.Stage1EndCircleRadius */ ,\n        _internal_startFillAlpha: 0.25 /* Constants.Stage1StartFillAlpha */ ,\n        _internal_endFillAlpha: 0 /* Constants.Stage1EndFillAlpha */ ,\n        _internal_startStrokeAlpha: 0.4 /* Constants.Stage1StartStrokeAlpha */ ,\n        _internal_endStrokeAlpha: 0.8 /* Constants.Stage1EndStrokeAlpha */ \n    },\n    {\n        _internal_start: 0.25 /* Constants.Stage1Period */ ,\n        _internal_end: 0.25 /* Constants.Stage1Period */  + 0.275 /* Constants.Stage2Period */ ,\n        _internal_startRadius: 10 /* Constants.Stage2StartCircleRadius */ ,\n        _internal_endRadius: 14 /* Constants.Stage2EndCircleRadius */ ,\n        _internal_startFillAlpha: 0 /* Constants.Stage2StartFillAlpha */ ,\n        _internal_endFillAlpha: 0 /* Constants.Stage2EndFillAlpha */ ,\n        _internal_startStrokeAlpha: 0.8 /* Constants.Stage2StartStrokeAlpha */ ,\n        _internal_endStrokeAlpha: 0 /* Constants.Stage2EndStrokeAlpha */ \n    },\n    {\n        _internal_start: 0.25 /* Constants.Stage1Period */  + 0.275 /* Constants.Stage2Period */ ,\n        _internal_end: 0.25 /* Constants.Stage1Period */  + 0.275 /* Constants.Stage2Period */  + 0.475 /* Constants.Stage3Period */ ,\n        _internal_startRadius: 14 /* Constants.Stage3StartCircleRadius */ ,\n        _internal_endRadius: 14 /* Constants.Stage3EndCircleRadius */ ,\n        _internal_startFillAlpha: 0 /* Constants.Stage3StartFillAlpha */ ,\n        _internal_endFillAlpha: 0 /* Constants.Stage3EndFillAlpha */ ,\n        _internal_startStrokeAlpha: 0 /* Constants.Stage3StartStrokeAlpha */ ,\n        _internal_endStrokeAlpha: 0 /* Constants.Stage3EndStrokeAlpha */ \n    }\n];\nfunction color(seriesLineColor, stage, startAlpha, endAlpha) {\n    const alpha = startAlpha + (endAlpha - startAlpha) * stage;\n    return applyAlpha(seriesLineColor, alpha);\n}\nfunction radius(stage, startRadius, endRadius) {\n    return startRadius + (endRadius - startRadius) * stage;\n}\nfunction animationData(durationSinceStart, lineColor) {\n    const globalStage = durationSinceStart % 2600 /* Constants.AnimationPeriod */  / 2600 /* Constants.AnimationPeriod */ ;\n    let currentStageData;\n    for (const stageData of animationStagesData){\n        if (globalStage >= stageData._internal_start && globalStage <= stageData._internal_end) {\n            currentStageData = stageData;\n            break;\n        }\n    }\n    assert(currentStageData !== undefined, \"Last price animation internal logic error\");\n    const subStage = (globalStage - currentStageData._internal_start) / (currentStageData._internal_end - currentStageData._internal_start);\n    return {\n        _internal_fillColor: color(lineColor, subStage, currentStageData._internal_startFillAlpha, currentStageData._internal_endFillAlpha),\n        _internal_strokeColor: color(lineColor, subStage, currentStageData._internal_startStrokeAlpha, currentStageData._internal_endStrokeAlpha),\n        _internal_radius: radius(subStage, currentStageData._internal_startRadius, currentStageData._internal_endRadius)\n    };\n}\nclass SeriesLastPriceAnimationPaneView {\n    constructor(series){\n        this._private__renderer = new SeriesLastPriceAnimationRenderer();\n        this._private__invalidated = true;\n        this._private__stageInvalidated = true;\n        this._private__startTime = performance.now();\n        this._private__endTime = this._private__startTime - 1;\n        this._private__series = series;\n    }\n    _internal_onDataCleared() {\n        this._private__endTime = this._private__startTime - 1;\n        this._internal_update();\n    }\n    _internal_onNewRealtimeDataReceived() {\n        this._internal_update();\n        if (this._private__series._internal_options().lastPriceAnimation === 2 /* LastPriceAnimationMode.OnDataUpdate */ ) {\n            const now = performance.now();\n            const timeToAnimationEnd = this._private__endTime - now;\n            if (timeToAnimationEnd > 0) {\n                if (timeToAnimationEnd < 2600 /* Constants.AnimationPeriod */  / 4) {\n                    this._private__endTime += 2600 /* Constants.AnimationPeriod */ ;\n                }\n                return;\n            }\n            this._private__startTime = now;\n            this._private__endTime = now + 2600 /* Constants.AnimationPeriod */ ;\n        }\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_invalidateStage() {\n        this._private__stageInvalidated = true;\n    }\n    _internal_visible() {\n        // center point is always visible if lastPriceAnimation is not LastPriceAnimationMode.Disabled\n        return this._private__series._internal_options().lastPriceAnimation !== 0 /* LastPriceAnimationMode.Disabled */ ;\n    }\n    _internal_animationActive() {\n        switch(this._private__series._internal_options().lastPriceAnimation){\n            case 0 /* LastPriceAnimationMode.Disabled */ :\n                return false;\n            case 1 /* LastPriceAnimationMode.Continuous */ :\n                return true;\n            case 2 /* LastPriceAnimationMode.OnDataUpdate */ :\n                return performance.now() <= this._private__endTime;\n        }\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n            this._private__stageInvalidated = false;\n        } else if (this._private__stageInvalidated) {\n            this._private__updateRendererDataStage();\n            this._private__stageInvalidated = false;\n        }\n        return this._private__renderer;\n    }\n    _private__updateImpl() {\n        this._private__renderer._internal_setData(null);\n        const timeScale = this._private__series._internal_model()._internal_timeScale();\n        const visibleRange = timeScale._internal_visibleStrictRange();\n        const firstValue = this._private__series._internal_firstValue();\n        if (visibleRange === null || firstValue === null) {\n            return;\n        }\n        const lastValue = this._private__series._internal_lastValueData(true);\n        if (lastValue._internal_noData || !visibleRange._internal_contains(lastValue._internal_index)) {\n            return;\n        }\n        const lastValuePoint = {\n            x: timeScale._internal_indexToCoordinate(lastValue._internal_index),\n            y: this._private__series._internal_priceScale()._internal_priceToCoordinate(lastValue._internal_price, firstValue._internal_value)\n        };\n        const seriesLineColor = lastValue._internal_color;\n        const seriesLineWidth = this._private__series._internal_options().lineWidth;\n        const data = animationData(this._private__duration(), seriesLineColor);\n        this._private__renderer._internal_setData({\n            _internal_seriesLineColor: seriesLineColor,\n            _internal_seriesLineWidth: seriesLineWidth,\n            _internal_fillColor: data._internal_fillColor,\n            _internal_strokeColor: data._internal_strokeColor,\n            _internal_radius: data._internal_radius,\n            _internal_center: lastValuePoint\n        });\n    }\n    _private__updateRendererDataStage() {\n        const rendererData = this._private__renderer._internal_data();\n        if (rendererData !== null) {\n            const data = animationData(this._private__duration(), rendererData._internal_seriesLineColor);\n            rendererData._internal_fillColor = data._internal_fillColor;\n            rendererData._internal_strokeColor = data._internal_strokeColor;\n            rendererData._internal_radius = data._internal_radius;\n        }\n    }\n    _private__duration() {\n        return this._internal_animationActive() ? performance.now() - this._private__startTime : 2600 /* Constants.AnimationPeriod */  - 1;\n    }\n}\nfunction size(barSpacing, coeff) {\n    const result = Math.min(Math.max(barSpacing, 12 /* Constants.MinShapeSize */ ), 30 /* Constants.MaxShapeSize */ ) * coeff;\n    return ceiledOdd(result);\n}\nfunction shapeSize(shape, originalSize) {\n    switch(shape){\n        case \"arrowDown\":\n        case \"arrowUp\":\n            return size(originalSize, 1);\n        case \"circle\":\n            return size(originalSize, 0.8);\n        case \"square\":\n            return size(originalSize, 0.7);\n    }\n}\nfunction calculateShapeHeight(barSpacing) {\n    return ceiledEven(size(barSpacing, 1));\n}\nfunction shapeMargin(barSpacing) {\n    return Math.max(size(barSpacing, 0.1), 3 /* Constants.MinShapeMargin */ );\n}\nfunction calculateAdjustedMargin(margin, hasSide, hasInBar) {\n    if (hasSide) {\n        return margin;\n    } else if (hasInBar) {\n        return Math.ceil(margin / 2);\n    }\n    return 0;\n}\nfunction drawSquare(ctx, coords, size) {\n    const squareSize = shapeSize(\"square\", size);\n    const halfSize = (squareSize - 1) * coords._internal_pixelRatio / 2;\n    const left = coords._internal_x - halfSize;\n    const top = coords._internal_y - halfSize;\n    ctx.fillRect(left, top, squareSize * coords._internal_pixelRatio, squareSize * coords._internal_pixelRatio);\n}\nfunction hitTestSquare(centerX, centerY, size, x, y) {\n    const squareSize = shapeSize(\"square\", size);\n    const halfSize = (squareSize - 1) / 2;\n    const left = centerX - halfSize;\n    const top = centerY - halfSize;\n    return x >= left && x <= left + squareSize && y >= top && y <= top + squareSize;\n}\nfunction drawArrow(up, ctx, coords, size) {\n    const arrowSize = shapeSize(\"arrowUp\", size);\n    const halfArrowSize = (arrowSize - 1) / 2 * coords._internal_pixelRatio;\n    const baseSize = ceiledOdd(size / 2);\n    const halfBaseSize = (baseSize - 1) / 2 * coords._internal_pixelRatio;\n    ctx.beginPath();\n    if (up) {\n        ctx.moveTo(coords._internal_x - halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x, coords._internal_y - halfArrowSize);\n        ctx.lineTo(coords._internal_x + halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y + halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y + halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y);\n    } else {\n        ctx.moveTo(coords._internal_x - halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x, coords._internal_y + halfArrowSize);\n        ctx.lineTo(coords._internal_x + halfArrowSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y);\n        ctx.lineTo(coords._internal_x + halfBaseSize, coords._internal_y - halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y - halfArrowSize);\n        ctx.lineTo(coords._internal_x - halfBaseSize, coords._internal_y);\n    }\n    ctx.fill();\n}\nfunction hitTestArrow(up, centerX, centerY, size, x, y) {\n    // TODO: implement arrow hit test\n    return hitTestSquare(centerX, centerY, size, x, y);\n}\nfunction drawCircle(ctx, coords, size) {\n    const circleSize = shapeSize(\"circle\", size);\n    const halfSize = (circleSize - 1) / 2;\n    ctx.beginPath();\n    ctx.arc(coords._internal_x, coords._internal_y, halfSize * coords._internal_pixelRatio, 0, 2 * Math.PI, false);\n    ctx.fill();\n}\nfunction hitTestCircle(centerX, centerY, size, x, y) {\n    const circleSize = shapeSize(\"circle\", size);\n    const tolerance = 2 + circleSize / 2;\n    const xOffset = centerX - x;\n    const yOffset = centerY - y;\n    const dist = Math.sqrt(xOffset * xOffset + yOffset * yOffset);\n    return dist <= tolerance;\n}\nfunction drawText(ctx, text, x, y, horizontalPixelRatio, verticalPixelRatio) {\n    ctx.save();\n    ctx.scale(horizontalPixelRatio, verticalPixelRatio);\n    ctx.fillText(text, x, y);\n    ctx.restore();\n}\nfunction hitTestText(textX, textY, textWidth, textHeight, x, y) {\n    const halfHeight = textHeight / 2;\n    return x >= textX && x <= textX + textWidth && y >= textY - halfHeight && y <= textY + halfHeight;\n}\nclass SeriesMarkersRenderer extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n        this._private__textWidthCache = new TextWidthCache();\n        this._private__fontSize = -1;\n        this._private__fontFamily = \"\";\n        this._private__font = \"\";\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal_setParams(fontSize, fontFamily) {\n        if (this._private__fontSize !== fontSize || this._private__fontFamily !== fontFamily) {\n            this._private__fontSize = fontSize;\n            this._private__fontFamily = fontFamily;\n            this._private__font = makeFont(fontSize, fontFamily);\n            this._private__textWidthCache._internal_reset();\n        }\n    }\n    _internal_hitTest(x, y) {\n        if (this._private__data === null || this._private__data._internal_visibleRange === null) {\n            return null;\n        }\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const item = this._private__data._internal_items[i];\n            if (hitTestItem(item, x, y)) {\n                return {\n                    _internal_hitTestData: item._internal_internalId,\n                    _internal_externalId: item._internal_externalId\n                };\n            }\n        }\n        return null;\n    }\n    _internal__drawImpl({ context: ctx, horizontalPixelRatio, verticalPixelRatio }, isHovered, hitTestData) {\n        if (this._private__data === null || this._private__data._internal_visibleRange === null) {\n            return;\n        }\n        ctx.textBaseline = \"middle\";\n        ctx.font = this._private__font;\n        for(let i = this._private__data._internal_visibleRange.from; i < this._private__data._internal_visibleRange.to; i++){\n            const item = this._private__data._internal_items[i];\n            if (item._internal_text !== undefined) {\n                item._internal_text._internal_width = this._private__textWidthCache._internal_measureText(ctx, item._internal_text._internal_content);\n                item._internal_text._internal_height = this._private__fontSize;\n                item._internal_text._internal_x = item._internal_x - item._internal_text._internal_width / 2;\n            }\n            drawItem(item, ctx, horizontalPixelRatio, verticalPixelRatio);\n        }\n    }\n}\nfunction bitmapShapeItemCoordinates(item, horizontalPixelRatio, verticalPixelRatio) {\n    const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n    const correction = tickWidth % 2 / 2;\n    return {\n        _internal_x: Math.round(item._internal_x * horizontalPixelRatio) + correction,\n        _internal_y: item._internal_y * verticalPixelRatio,\n        _internal_pixelRatio: horizontalPixelRatio\n    };\n}\nfunction drawItem(item, ctx, horizontalPixelRatio, verticalPixelRatio) {\n    ctx.fillStyle = item._internal_color;\n    if (item._internal_text !== undefined) {\n        drawText(ctx, item._internal_text._internal_content, item._internal_text._internal_x, item._internal_text._internal_y, horizontalPixelRatio, verticalPixelRatio);\n    }\n    drawShape(item, ctx, bitmapShapeItemCoordinates(item, horizontalPixelRatio, verticalPixelRatio));\n}\nfunction drawShape(item, ctx, coordinates) {\n    if (item._internal_size === 0) {\n        return;\n    }\n    switch(item._internal_shape){\n        case \"arrowDown\":\n            drawArrow(false, ctx, coordinates, item._internal_size);\n            return;\n        case \"arrowUp\":\n            drawArrow(true, ctx, coordinates, item._internal_size);\n            return;\n        case \"circle\":\n            drawCircle(ctx, coordinates, item._internal_size);\n            return;\n        case \"square\":\n            drawSquare(ctx, coordinates, item._internal_size);\n            return;\n    }\n    ensureNever(item._internal_shape);\n}\nfunction hitTestItem(item, x, y) {\n    if (item._internal_text !== undefined && hitTestText(item._internal_text._internal_x, item._internal_text._internal_y, item._internal_text._internal_width, item._internal_text._internal_height, x, y)) {\n        return true;\n    }\n    return hitTestShape(item, x, y);\n}\nfunction hitTestShape(item, x, y) {\n    if (item._internal_size === 0) {\n        return false;\n    }\n    switch(item._internal_shape){\n        case \"arrowDown\":\n            return hitTestArrow(true, item._internal_x, item._internal_y, item._internal_size, x, y);\n        case \"arrowUp\":\n            return hitTestArrow(false, item._internal_x, item._internal_y, item._internal_size, x, y);\n        case \"circle\":\n            return hitTestCircle(item._internal_x, item._internal_y, item._internal_size, x, y);\n        case \"square\":\n            return hitTestSquare(item._internal_x, item._internal_y, item._internal_size, x, y);\n    }\n}\n// eslint-disable-next-line max-params\nfunction fillSizeAndY(rendererItem, marker, seriesData, offsets, textHeight, shapeMargin, priceScale, timeScale, firstValue) {\n    const inBarPrice = isNumber(seriesData) ? seriesData : seriesData._internal_close;\n    const highPrice = isNumber(seriesData) ? seriesData : seriesData._internal_high;\n    const lowPrice = isNumber(seriesData) ? seriesData : seriesData._internal_low;\n    const sizeMultiplier = isNumber(marker.size) ? Math.max(marker.size, 0) : 1;\n    const shapeSize = calculateShapeHeight(timeScale._internal_barSpacing()) * sizeMultiplier;\n    const halfSize = shapeSize / 2;\n    rendererItem._internal_size = shapeSize;\n    switch(marker.position){\n        case \"inBar\":\n            {\n                rendererItem._internal_y = priceScale._internal_priceToCoordinate(inBarPrice, firstValue);\n                if (rendererItem._internal_text !== undefined) {\n                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */ );\n                }\n                return;\n            }\n        case \"aboveBar\":\n            {\n                rendererItem._internal_y = priceScale._internal_priceToCoordinate(highPrice, firstValue) - halfSize - offsets._internal_aboveBar;\n                if (rendererItem._internal_text !== undefined) {\n                    rendererItem._internal_text._internal_y = rendererItem._internal_y - halfSize - textHeight * (0.5 + 0.1 /* Constants.TextMargin */ );\n                    offsets._internal_aboveBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */ );\n                }\n                offsets._internal_aboveBar += shapeSize + shapeMargin;\n                return;\n            }\n        case \"belowBar\":\n            {\n                rendererItem._internal_y = priceScale._internal_priceToCoordinate(lowPrice, firstValue) + halfSize + offsets._internal_belowBar;\n                if (rendererItem._internal_text !== undefined) {\n                    rendererItem._internal_text._internal_y = rendererItem._internal_y + halfSize + shapeMargin + textHeight * (0.5 + 0.1 /* Constants.TextMargin */ );\n                    offsets._internal_belowBar += textHeight * (1 + 2 * 0.1 /* Constants.TextMargin */ );\n                }\n                offsets._internal_belowBar += shapeSize + shapeMargin;\n                return;\n            }\n    }\n    ensureNever(marker.position);\n}\nclass SeriesMarkersPaneView {\n    constructor(series, model){\n        this._private__invalidated = true;\n        this._private__dataInvalidated = true;\n        this._private__autoScaleMarginsInvalidated = true;\n        this._private__autoScaleMargins = null;\n        this._private__markersPositions = null;\n        this._private__renderer = new SeriesMarkersRenderer();\n        this._private__series = series;\n        this._private__model = model;\n        this._private__data = {\n            _internal_items: [],\n            _internal_visibleRange: null\n        };\n    }\n    _internal_update(updateType) {\n        this._private__invalidated = true;\n        this._private__autoScaleMarginsInvalidated = true;\n        if (updateType === \"data\") {\n            this._private__dataInvalidated = true;\n            this._private__markersPositions = null;\n        }\n    }\n    _internal_renderer(addAnchors) {\n        if (!this._private__series._internal_visible()) {\n            return null;\n        }\n        if (this._private__invalidated) {\n            this._internal__makeValid();\n        }\n        const layout = this._private__model._internal_options().layout;\n        this._private__renderer._internal_setParams(layout.fontSize, layout.fontFamily);\n        this._private__renderer._internal_setData(this._private__data);\n        return this._private__renderer;\n    }\n    _internal_autoScaleMargins() {\n        if (this._private__autoScaleMarginsInvalidated) {\n            if (this._private__series._internal_indexedMarkers().length > 0) {\n                const barSpacing = this._private__model._internal_timeScale()._internal_barSpacing();\n                const shapeMargin$1 = shapeMargin(barSpacing);\n                const marginValue = calculateShapeHeight(barSpacing) * 1.5 + shapeMargin$1 * 2;\n                const positions = this._internal__getMarkerPositions();\n                this._private__autoScaleMargins = {\n                    above: calculateAdjustedMargin(marginValue, positions.aboveBar, positions.inBar),\n                    below: calculateAdjustedMargin(marginValue, positions.belowBar, positions.inBar)\n                };\n            } else {\n                this._private__autoScaleMargins = null;\n            }\n            this._private__autoScaleMarginsInvalidated = false;\n        }\n        return this._private__autoScaleMargins;\n    }\n    _internal__getMarkerPositions() {\n        if (this._private__markersPositions === null) {\n            this._private__markersPositions = this._private__series._internal_indexedMarkers().reduce((acc, marker)=>{\n                if (!acc[marker.position]) {\n                    acc[marker.position] = true;\n                }\n                return acc;\n            }, {\n                inBar: false,\n                aboveBar: false,\n                belowBar: false\n            });\n        }\n        return this._private__markersPositions;\n    }\n    _internal__makeValid() {\n        const priceScale = this._private__series._internal_priceScale();\n        const timeScale = this._private__model._internal_timeScale();\n        const seriesMarkers = this._private__series._internal_indexedMarkers();\n        if (this._private__dataInvalidated) {\n            this._private__data._internal_items = seriesMarkers.map((marker)=>({\n                    _internal_time: marker.time,\n                    _internal_x: 0,\n                    _internal_y: 0,\n                    _internal_size: 0,\n                    _internal_shape: marker.shape,\n                    _internal_color: marker.color,\n                    _internal_internalId: marker._internal_internalId,\n                    _internal_externalId: marker.id,\n                    _internal_text: undefined\n                }));\n            this._private__dataInvalidated = false;\n        }\n        const layoutOptions = this._private__model._internal_options().layout;\n        this._private__data._internal_visibleRange = null;\n        const visibleBars = timeScale._internal_visibleStrictRange();\n        if (visibleBars === null) {\n            return;\n        }\n        const firstValue = this._private__series._internal_firstValue();\n        if (firstValue === null) {\n            return;\n        }\n        if (this._private__data._internal_items.length === 0) {\n            return;\n        }\n        let prevTimeIndex = NaN;\n        const shapeMargin$1 = shapeMargin(timeScale._internal_barSpacing());\n        const offsets = {\n            _internal_aboveBar: shapeMargin$1,\n            _internal_belowBar: shapeMargin$1\n        };\n        this._private__data._internal_visibleRange = visibleTimedValues(this._private__data._internal_items, visibleBars, true);\n        for(let index = this._private__data._internal_visibleRange.from; index < this._private__data._internal_visibleRange.to; index++){\n            const marker = seriesMarkers[index];\n            if (marker.time !== prevTimeIndex) {\n                // new bar, reset stack counter\n                offsets._internal_aboveBar = shapeMargin$1;\n                offsets._internal_belowBar = shapeMargin$1;\n                prevTimeIndex = marker.time;\n            }\n            const rendererItem = this._private__data._internal_items[index];\n            rendererItem._internal_x = timeScale._internal_indexToCoordinate(marker.time);\n            if (marker.text !== undefined && marker.text.length > 0) {\n                rendererItem._internal_text = {\n                    _internal_content: marker.text,\n                    _internal_x: 0,\n                    _internal_y: 0,\n                    _internal_width: 0,\n                    _internal_height: 0\n                };\n            }\n            const dataAt = this._private__series._internal_dataAt(marker.time);\n            if (dataAt === null) {\n                continue;\n            }\n            fillSizeAndY(rendererItem, marker, dataAt, offsets, layoutOptions.fontSize, shapeMargin$1, priceScale, timeScale, firstValue._internal_value);\n        }\n        this._private__invalidated = false;\n    }\n}\nclass SeriesPriceLinePaneView extends SeriesHorizontalLinePaneView {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(series){\n        super(series);\n    }\n    _internal__updateImpl() {\n        const data = this._internal__lineRendererData;\n        data._internal_visible = false;\n        const seriesOptions = this._internal__series._internal_options();\n        if (!seriesOptions.priceLineVisible || !this._internal__series._internal_visible()) {\n            return;\n        }\n        const lastValueData = this._internal__series._internal_lastValueData(seriesOptions.priceLineSource === 0 /* PriceLineSource.LastBar */ );\n        if (lastValueData._internal_noData) {\n            return;\n        }\n        data._internal_visible = true;\n        data._internal_y = lastValueData._internal_coordinate;\n        data._internal_color = this._internal__series._internal_priceLineColor(lastValueData._internal_color);\n        data._internal_lineWidth = seriesOptions.priceLineWidth;\n        data._internal_lineStyle = seriesOptions.priceLineStyle;\n    }\n}\nclass SeriesPriceAxisView extends PriceAxisView {\n    constructor(source){\n        super();\n        this._private__source = source;\n    }\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\n        axisRendererData._internal_visible = false;\n        paneRendererData._internal_visible = false;\n        const source = this._private__source;\n        if (!source._internal_visible()) {\n            return;\n        }\n        const seriesOptions = source._internal_options();\n        const showSeriesLastValue = seriesOptions.lastValueVisible;\n        const showSymbolLabel = source._internal_title() !== \"\";\n        const showPriceAndPercentage = seriesOptions.seriesLastValueMode === 0 /* PriceAxisLastValueMode.LastPriceAndPercentageValue */ ;\n        const lastValueData = source._internal_lastValueData(false);\n        if (lastValueData._internal_noData) {\n            return;\n        }\n        if (showSeriesLastValue) {\n            axisRendererData._internal_text = this._internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage);\n            axisRendererData._internal_visible = axisRendererData._internal_text.length !== 0;\n        }\n        if (showSymbolLabel || showPriceAndPercentage) {\n            paneRendererData._internal_text = this._internal__paneText(lastValueData, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage);\n            paneRendererData._internal_visible = paneRendererData._internal_text.length > 0;\n        }\n        const lastValueColor = source._internal_priceLineColor(lastValueData._internal_color);\n        const colors = generateContrastColors(lastValueColor);\n        commonRendererData._internal_background = colors._internal_background;\n        commonRendererData._internal_coordinate = lastValueData._internal_coordinate;\n        paneRendererData._internal_borderColor = source._internal_model()._internal_backgroundColorAtYPercentFromTop(lastValueData._internal_coordinate / source._internal_priceScale()._internal_height());\n        axisRendererData._internal_borderColor = lastValueColor;\n        axisRendererData._internal_color = colors._internal_foreground;\n        paneRendererData._internal_color = colors._internal_foreground;\n    }\n    _internal__paneText(lastValue, showSeriesLastValue, showSymbolLabel, showPriceAndPercentage) {\n        let result = \"\";\n        const title = this._private__source._internal_title();\n        if (showSymbolLabel && title.length !== 0) {\n            result += `${title} `;\n        }\n        if (showSeriesLastValue && showPriceAndPercentage) {\n            result += this._private__source._internal_priceScale()._internal_isPercentage() ? lastValue._internal_formattedPriceAbsolute : lastValue._internal_formattedPricePercentage;\n        }\n        return result.trim();\n    }\n    _internal__axisText(lastValueData, showSeriesLastValue, showPriceAndPercentage) {\n        if (!showSeriesLastValue) {\n            return \"\";\n        }\n        if (!showPriceAndPercentage) {\n            return lastValueData._internal_text;\n        }\n        return this._private__source._internal_priceScale()._internal_isPercentage() ? lastValueData._internal_formattedPricePercentage : lastValueData._internal_formattedPriceAbsolute;\n    }\n}\nfunction computeFiniteResult(method, valueOne, valueTwo, fallback) {\n    const firstFinite = Number.isFinite(valueOne);\n    const secondFinite = Number.isFinite(valueTwo);\n    if (firstFinite && secondFinite) {\n        return method(valueOne, valueTwo);\n    }\n    return !firstFinite && !secondFinite ? fallback : firstFinite ? valueOne : valueTwo;\n}\nclass PriceRangeImpl {\n    constructor(minValue, maxValue){\n        this._private__minValue = minValue;\n        this._private__maxValue = maxValue;\n    }\n    _internal_equals(pr) {\n        if (pr === null) {\n            return false;\n        }\n        return this._private__minValue === pr._private__minValue && this._private__maxValue === pr._private__maxValue;\n    }\n    _internal_clone() {\n        return new PriceRangeImpl(this._private__minValue, this._private__maxValue);\n    }\n    _internal_minValue() {\n        return this._private__minValue;\n    }\n    _internal_maxValue() {\n        return this._private__maxValue;\n    }\n    _internal_length() {\n        return this._private__maxValue - this._private__minValue;\n    }\n    _internal_isEmpty() {\n        return this._private__maxValue === this._private__minValue || Number.isNaN(this._private__maxValue) || Number.isNaN(this._private__minValue);\n    }\n    _internal_merge(anotherRange) {\n        if (anotherRange === null) {\n            return this;\n        }\n        return new PriceRangeImpl(computeFiniteResult(Math.min, this._internal_minValue(), anotherRange._internal_minValue(), -Infinity), computeFiniteResult(Math.max, this._internal_maxValue(), anotherRange._internal_maxValue(), Infinity));\n    }\n    _internal_scaleAroundCenter(coeff) {\n        if (!isNumber(coeff)) {\n            return;\n        }\n        const delta = this._private__maxValue - this._private__minValue;\n        if (delta === 0) {\n            return;\n        }\n        const center = (this._private__maxValue + this._private__minValue) * 0.5;\n        let maxDelta = this._private__maxValue - center;\n        let minDelta = this._private__minValue - center;\n        maxDelta *= coeff;\n        minDelta *= coeff;\n        this._private__maxValue = center + maxDelta;\n        this._private__minValue = center + minDelta;\n    }\n    _internal_shift(delta) {\n        if (!isNumber(delta)) {\n            return;\n        }\n        this._private__maxValue += delta;\n        this._private__minValue += delta;\n    }\n    _internal_toRaw() {\n        return {\n            minValue: this._private__minValue,\n            maxValue: this._private__maxValue\n        };\n    }\n    static _internal_fromRaw(raw) {\n        return raw === null ? null : new PriceRangeImpl(raw.minValue, raw.maxValue);\n    }\n}\nclass AutoscaleInfoImpl {\n    constructor(priceRange, margins){\n        this._private__priceRange = priceRange;\n        this._private__margins = margins || null;\n    }\n    _internal_priceRange() {\n        return this._private__priceRange;\n    }\n    _internal_margins() {\n        return this._private__margins;\n    }\n    _internal_toRaw() {\n        if (this._private__priceRange === null) {\n            return null;\n        }\n        return {\n            priceRange: this._private__priceRange._internal_toRaw(),\n            margins: this._private__margins || undefined\n        };\n    }\n    static _internal_fromRaw(raw) {\n        return raw === null ? null : new AutoscaleInfoImpl(PriceRangeImpl._internal_fromRaw(raw.priceRange), raw.margins);\n    }\n}\nclass CustomPriceLinePaneView extends SeriesHorizontalLinePaneView {\n    constructor(series, priceLine){\n        super(series);\n        this._private__priceLine = priceLine;\n    }\n    _internal__updateImpl() {\n        const data = this._internal__lineRendererData;\n        data._internal_visible = false;\n        const lineOptions = this._private__priceLine._internal_options();\n        if (!this._internal__series._internal_visible() || !lineOptions.lineVisible) {\n            return;\n        }\n        const y = this._private__priceLine._internal_yCoord();\n        if (y === null) {\n            return;\n        }\n        data._internal_visible = true;\n        data._internal_y = y;\n        data._internal_color = lineOptions.color;\n        data._internal_lineWidth = lineOptions.lineWidth;\n        data._internal_lineStyle = lineOptions.lineStyle;\n        data._internal_externalId = this._private__priceLine._internal_options().id;\n    }\n}\nclass CustomPriceLinePriceAxisView extends PriceAxisView {\n    constructor(series, priceLine){\n        super();\n        this._private__series = series;\n        this._private__priceLine = priceLine;\n    }\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonData) {\n        axisRendererData._internal_visible = false;\n        paneRendererData._internal_visible = false;\n        const options = this._private__priceLine._internal_options();\n        const labelVisible = options.axisLabelVisible;\n        const showPaneLabel = options.title !== \"\";\n        const series = this._private__series;\n        if (!labelVisible || !series._internal_visible()) {\n            return;\n        }\n        const y = this._private__priceLine._internal_yCoord();\n        if (y === null) {\n            return;\n        }\n        if (showPaneLabel) {\n            paneRendererData._internal_text = options.title;\n            paneRendererData._internal_visible = true;\n        }\n        paneRendererData._internal_borderColor = series._internal_model()._internal_backgroundColorAtYPercentFromTop(y / series._internal_priceScale()._internal_height());\n        axisRendererData._internal_text = this._private__formatPrice(options.price);\n        axisRendererData._internal_visible = true;\n        const colors = generateContrastColors(options.axisLabelColor || options.color);\n        commonData._internal_background = colors._internal_background;\n        const textColor = options.axisLabelTextColor || colors._internal_foreground;\n        axisRendererData._internal_color = textColor; // price text\n        paneRendererData._internal_color = textColor; // title text\n        commonData._internal_coordinate = y;\n    }\n    _private__formatPrice(price) {\n        const firstValue = this._private__series._internal_firstValue();\n        if (firstValue === null) {\n            return \"\";\n        }\n        return this._private__series._internal_priceScale()._internal_formatPrice(price, firstValue._internal_value);\n    }\n}\nclass CustomPriceLine {\n    constructor(series, options){\n        this._private__series = series;\n        this._private__options = options;\n        this._private__priceLineView = new CustomPriceLinePaneView(series, this);\n        this._private__priceAxisView = new CustomPriceLinePriceAxisView(series, this);\n        this._private__panePriceAxisView = new PanePriceAxisView(this._private__priceAxisView, series, series._internal_model());\n    }\n    _internal_applyOptions(options) {\n        merge(this._private__options, options);\n        this._internal_update();\n        this._private__series._internal_model()._internal_lightUpdate();\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_paneView() {\n        return this._private__priceLineView;\n    }\n    _internal_labelPaneView() {\n        return this._private__panePriceAxisView;\n    }\n    _internal_priceAxisView() {\n        return this._private__priceAxisView;\n    }\n    _internal_update() {\n        this._private__priceLineView._internal_update();\n        this._private__priceAxisView._internal_update();\n    }\n    _internal_yCoord() {\n        const series = this._private__series;\n        const priceScale = series._internal_priceScale();\n        const timeScale = series._internal_model()._internal_timeScale();\n        if (timeScale._internal_isEmpty() || priceScale._internal_isEmpty()) {\n            return null;\n        }\n        const firstValue = series._internal_firstValue();\n        if (firstValue === null) {\n            return null;\n        }\n        return priceScale._internal_priceToCoordinate(this._private__options.price, firstValue._internal_value);\n    }\n}\nclass PriceDataSource extends DataSource {\n    constructor(model){\n        super();\n        this._private__model = model;\n    }\n    _internal_model() {\n        return this._private__model;\n    }\n}\nconst barStyleFnMap = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Bar: (findBar, barStyle, barIndex, precomputedBars)=>{\n        var _a;\n        const upColor = barStyle.upColor;\n        const downColor = barStyle.downColor;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */ ]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */ ]);\n        return {\n            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : isUp ? upColor : downColor\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Candlestick: (findBar, candlestickStyle, barIndex, precomputedBars)=>{\n        var _a, _b, _c;\n        const upColor = candlestickStyle.upColor;\n        const downColor = candlestickStyle.downColor;\n        const borderUpColor = candlestickStyle.borderUpColor;\n        const borderDownColor = candlestickStyle.borderDownColor;\n        const wickUpColor = candlestickStyle.wickUpColor;\n        const wickDownColor = candlestickStyle.wickDownColor;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        const isUp = ensure(currentBar._internal_value[0 /* PlotRowValueIndex.Open */ ]) <= ensure(currentBar._internal_value[3 /* PlotRowValueIndex.Close */ ]);\n        return {\n            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : isUp ? upColor : downColor,\n            _internal_barBorderColor: (_b = currentBar._internal_borderColor) !== null && _b !== void 0 ? _b : isUp ? borderUpColor : borderDownColor,\n            _internal_barWickColor: (_c = currentBar._internal_wickColor) !== null && _c !== void 0 ? _c : isUp ? wickUpColor : wickDownColor\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Custom: (findBar, customStyle, barIndex, precomputedBars)=>{\n        var _a;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        return {\n            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : customStyle.color\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Area: (findBar, areaStyle, barIndex, precomputedBars)=>{\n        var _a, _b, _c, _d;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        return {\n            _internal_barColor: (_a = currentBar._internal_lineColor) !== null && _a !== void 0 ? _a : areaStyle.lineColor,\n            _internal_lineColor: (_b = currentBar._internal_lineColor) !== null && _b !== void 0 ? _b : areaStyle.lineColor,\n            _internal_topColor: (_c = currentBar._internal_topColor) !== null && _c !== void 0 ? _c : areaStyle.topColor,\n            _internal_bottomColor: (_d = currentBar._internal_bottomColor) !== null && _d !== void 0 ? _d : areaStyle.bottomColor\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Baseline: (findBar, baselineStyle, barIndex, precomputedBars)=>{\n        var _a, _b, _c, _d, _e, _f;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        const isAboveBaseline = currentBar._internal_value[3 /* PlotRowValueIndex.Close */ ] >= baselineStyle.baseValue.price;\n        return {\n            _internal_barColor: isAboveBaseline ? baselineStyle.topLineColor : baselineStyle.bottomLineColor,\n            _internal_topLineColor: (_a = currentBar._internal_topLineColor) !== null && _a !== void 0 ? _a : baselineStyle.topLineColor,\n            _internal_bottomLineColor: (_b = currentBar._internal_bottomLineColor) !== null && _b !== void 0 ? _b : baselineStyle.bottomLineColor,\n            _internal_topFillColor1: (_c = currentBar._internal_topFillColor1) !== null && _c !== void 0 ? _c : baselineStyle.topFillColor1,\n            _internal_topFillColor2: (_d = currentBar._internal_topFillColor2) !== null && _d !== void 0 ? _d : baselineStyle.topFillColor2,\n            _internal_bottomFillColor1: (_e = currentBar._internal_bottomFillColor1) !== null && _e !== void 0 ? _e : baselineStyle.bottomFillColor1,\n            _internal_bottomFillColor2: (_f = currentBar._internal_bottomFillColor2) !== null && _f !== void 0 ? _f : baselineStyle.bottomFillColor2\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Line: (findBar, lineStyle, barIndex, precomputedBars)=>{\n        var _a, _b;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        return {\n            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : lineStyle.color,\n            _internal_lineColor: (_b = currentBar._internal_color) !== null && _b !== void 0 ? _b : lineStyle.color\n        };\n    },\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Histogram: (findBar, histogramStyle, barIndex, precomputedBars)=>{\n        var _a;\n        const currentBar = ensureNotNull(findBar(barIndex, precomputedBars));\n        return {\n            _internal_barColor: (_a = currentBar._internal_color) !== null && _a !== void 0 ? _a : histogramStyle.color\n        };\n    }\n};\nclass SeriesBarColorer {\n    constructor(series){\n        this._private__findBar = (barIndex, precomputedBars)=>{\n            if (precomputedBars !== undefined) {\n                return precomputedBars._internal_value;\n            }\n            return this._private__series._internal_bars()._internal_valueAt(barIndex);\n        };\n        this._private__series = series;\n        this._private__styleGetter = barStyleFnMap[series._internal_seriesType()];\n    }\n    _internal_barStyle(barIndex, precomputedBars) {\n        // precomputedBars: {value: [Array BarValues], previousValue: [Array BarValues] | undefined}\n        // Used to avoid binary search if bars are already known\n        return this._private__styleGetter(this._private__findBar, this._private__series._internal_options(), barIndex, precomputedBars);\n    }\n}\n/**\n * Search direction if no data found at provided index\n */ var MismatchDirection;\n(function(MismatchDirection) {\n    /**\n     * Search the nearest left item\n     */ MismatchDirection[MismatchDirection[\"NearestLeft\"] = -1] = \"NearestLeft\";\n    /**\n     * Do not search\n     */ MismatchDirection[MismatchDirection[\"None\"] = 0] = \"None\";\n    /**\n     * Search the nearest right item\n     */ MismatchDirection[MismatchDirection[\"NearestRight\"] = 1] = \"NearestRight\";\n})(MismatchDirection || (MismatchDirection = {}));\n// TODO: think about changing it dynamically\nconst CHUNK_SIZE = 30;\n/**\n * PlotList is an array of plot rows\n * each plot row consists of key (index in timescale) and plot value map\n */ class PlotList {\n    constructor(){\n        this._private__items = [];\n        this._private__minMaxCache = new Map();\n        this._private__rowSearchCache = new Map();\n    }\n    // @returns Last row\n    _internal_last() {\n        return this._internal_size() > 0 ? this._private__items[this._private__items.length - 1] : null;\n    }\n    _internal_firstIndex() {\n        return this._internal_size() > 0 ? this._private__indexAt(0) : null;\n    }\n    _internal_lastIndex() {\n        return this._internal_size() > 0 ? this._private__indexAt(this._private__items.length - 1) : null;\n    }\n    _internal_size() {\n        return this._private__items.length;\n    }\n    _internal_isEmpty() {\n        return this._internal_size() === 0;\n    }\n    _internal_contains(index) {\n        return this._private__search(index, 0 /* MismatchDirection.None */ ) !== null;\n    }\n    _internal_valueAt(index) {\n        return this._internal_search(index);\n    }\n    _internal_search(index, searchMode = 0 /* MismatchDirection.None */ ) {\n        const pos = this._private__search(index, searchMode);\n        if (pos === null) {\n            return null;\n        }\n        return Object.assign(Object.assign({}, this._private__valueAt(pos)), {\n            _internal_index: this._private__indexAt(pos)\n        });\n    }\n    _internal_rows() {\n        return this._private__items;\n    }\n    _internal_minMaxOnRangeCached(start, end, plots) {\n        // this code works for single series only\n        // could fail after whitespaces implementation\n        if (this._internal_isEmpty()) {\n            return null;\n        }\n        let result = null;\n        for (const plot of plots){\n            const plotMinMax = this._private__minMaxOnRangeCachedImpl(start, end, plot);\n            result = mergeMinMax(result, plotMinMax);\n        }\n        return result;\n    }\n    _internal_setData(plotRows) {\n        this._private__rowSearchCache.clear();\n        this._private__minMaxCache.clear();\n        this._private__items = plotRows;\n    }\n    _private__indexAt(offset) {\n        return this._private__items[offset]._internal_index;\n    }\n    _private__valueAt(offset) {\n        return this._private__items[offset];\n    }\n    _private__search(index, searchMode) {\n        const exactPos = this._private__bsearch(index);\n        if (exactPos === null && searchMode !== 0 /* MismatchDirection.None */ ) {\n            switch(searchMode){\n                case -1 /* MismatchDirection.NearestLeft */ :\n                    return this._private__searchNearestLeft(index);\n                case 1 /* MismatchDirection.NearestRight */ :\n                    return this._private__searchNearestRight(index);\n                default:\n                    throw new TypeError(\"Unknown search mode\");\n            }\n        }\n        return exactPos;\n    }\n    _private__searchNearestLeft(index) {\n        let nearestLeftPos = this._private__lowerbound(index);\n        if (nearestLeftPos > 0) {\n            nearestLeftPos = nearestLeftPos - 1;\n        }\n        return nearestLeftPos !== this._private__items.length && this._private__indexAt(nearestLeftPos) < index ? nearestLeftPos : null;\n    }\n    _private__searchNearestRight(index) {\n        const nearestRightPos = this._private__upperbound(index);\n        return nearestRightPos !== this._private__items.length && index < this._private__indexAt(nearestRightPos) ? nearestRightPos : null;\n    }\n    _private__bsearch(index) {\n        const start = this._private__lowerbound(index);\n        if (start !== this._private__items.length && !(index < this._private__items[start]._internal_index)) {\n            return start;\n        }\n        return null;\n    }\n    _private__lowerbound(index) {\n        return lowerBound(this._private__items, index, (a, b)=>a._internal_index < b);\n    }\n    _private__upperbound(index) {\n        return upperBound(this._private__items, index, (a, b)=>a._internal_index > b);\n    }\n    _private__plotMinMax(startIndex, endIndexExclusive, plotIndex) {\n        let result = null;\n        for(let i = startIndex; i < endIndexExclusive; i++){\n            const values = this._private__items[i]._internal_value;\n            const v = values[plotIndex];\n            if (Number.isNaN(v)) {\n                continue;\n            }\n            if (result === null) {\n                result = {\n                    _internal_min: v,\n                    _internal_max: v\n                };\n            } else {\n                if (v < result._internal_min) {\n                    result._internal_min = v;\n                }\n                if (v > result._internal_max) {\n                    result._internal_max = v;\n                }\n            }\n        }\n        return result;\n    }\n    _private__minMaxOnRangeCachedImpl(start, end, plotIndex) {\n        // this code works for single series only\n        // could fail after whitespaces implementation\n        if (this._internal_isEmpty()) {\n            return null;\n        }\n        let result = null;\n        // assume that bar indexes only increase\n        const firstIndex = ensureNotNull(this._internal_firstIndex());\n        const lastIndex = ensureNotNull(this._internal_lastIndex());\n        const s = Math.max(start, firstIndex);\n        const e = Math.min(end, lastIndex);\n        const cachedLow = Math.ceil(s / CHUNK_SIZE) * CHUNK_SIZE;\n        const cachedHigh = Math.max(cachedLow, Math.floor(e / CHUNK_SIZE) * CHUNK_SIZE);\n        {\n            const startIndex = this._private__lowerbound(s);\n            const endIndex = this._private__upperbound(Math.min(e, cachedLow, end)); // non-inclusive end\n            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);\n            result = mergeMinMax(result, plotMinMax);\n        }\n        let minMaxCache = this._private__minMaxCache.get(plotIndex);\n        if (minMaxCache === undefined) {\n            minMaxCache = new Map();\n            this._private__minMaxCache.set(plotIndex, minMaxCache);\n        }\n        // now go cached\n        for(let c = Math.max(cachedLow + 1, s); c < cachedHigh; c += CHUNK_SIZE){\n            const chunkIndex = Math.floor(c / CHUNK_SIZE);\n            let chunkMinMax = minMaxCache.get(chunkIndex);\n            if (chunkMinMax === undefined) {\n                const chunkStart = this._private__lowerbound(chunkIndex * CHUNK_SIZE);\n                const chunkEnd = this._private__upperbound((chunkIndex + 1) * CHUNK_SIZE - 1);\n                chunkMinMax = this._private__plotMinMax(chunkStart, chunkEnd, plotIndex);\n                minMaxCache.set(chunkIndex, chunkMinMax);\n            }\n            result = mergeMinMax(result, chunkMinMax);\n        }\n        // tail\n        {\n            const startIndex = this._private__lowerbound(cachedHigh);\n            const endIndex = this._private__upperbound(e); // non-inclusive end\n            const plotMinMax = this._private__plotMinMax(startIndex, endIndex, plotIndex);\n            result = mergeMinMax(result, plotMinMax);\n        }\n        return result;\n    }\n}\nfunction mergeMinMax(first, second) {\n    if (first === null) {\n        return second;\n    } else {\n        if (second === null) {\n            return first;\n        } else {\n            // merge MinMax values\n            const min = Math.min(first._internal_min, second._internal_min);\n            const max = Math.max(first._internal_max, second._internal_max);\n            return {\n                _internal_min: min,\n                _internal_max: max\n            };\n        }\n    }\n}\nfunction createSeriesPlotList() {\n    return new PlotList();\n}\nclass SeriesPrimitiveRendererWrapper {\n    constructor(baseRenderer){\n        this._private__baseRenderer = baseRenderer;\n    }\n    _internal_draw(target, isHovered, hitTestData) {\n        this._private__baseRenderer.draw(target);\n    }\n    _internal_drawBackground(target, isHovered, hitTestData) {\n        var _a, _b;\n        (_b = (_a = this._private__baseRenderer).drawBackground) === null || _b === void 0 ? void 0 : _b.call(_a, target);\n    }\n}\nclass SeriesPrimitivePaneViewWrapper {\n    constructor(paneView){\n        this._private__cache = null;\n        this._private__paneView = paneView;\n    }\n    _internal_renderer() {\n        var _a;\n        const baseRenderer = this._private__paneView.renderer();\n        if (baseRenderer === null) {\n            return null;\n        }\n        if (((_a = this._private__cache) === null || _a === void 0 ? void 0 : _a._internal_base) === baseRenderer) {\n            return this._private__cache._internal_wrapper;\n        }\n        const wrapper = new SeriesPrimitiveRendererWrapper(baseRenderer);\n        this._private__cache = {\n            _internal_base: baseRenderer,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_zOrder() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._private__paneView).zOrder) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : \"normal\";\n    }\n}\nfunction getAxisViewData(baseView) {\n    var _a, _b, _c, _d, _e;\n    return {\n        _internal_text: baseView.text(),\n        _internal_coordinate: baseView.coordinate(),\n        _internal_fixedCoordinate: (_a = baseView.fixedCoordinate) === null || _a === void 0 ? void 0 : _a.call(baseView),\n        _internal_color: baseView.textColor(),\n        _internal_background: baseView.backColor(),\n        _internal_visible: (_c = (_b = baseView.visible) === null || _b === void 0 ? void 0 : _b.call(baseView)) !== null && _c !== void 0 ? _c : true,\n        _internal_tickVisible: (_e = (_d = baseView.tickVisible) === null || _d === void 0 ? void 0 : _d.call(baseView)) !== null && _e !== void 0 ? _e : true\n    };\n}\nclass SeriesPrimitiveTimeAxisViewWrapper {\n    constructor(baseView, timeScale){\n        this._private__renderer = new TimeAxisViewRenderer();\n        this._private__baseView = baseView;\n        this._private__timeScale = timeScale;\n    }\n    _internal_renderer() {\n        this._private__renderer._internal_setData(Object.assign({\n            _internal_width: this._private__timeScale._internal_width()\n        }, getAxisViewData(this._private__baseView)));\n        return this._private__renderer;\n    }\n}\nclass SeriesPrimitivePriceAxisViewWrapper extends PriceAxisView {\n    constructor(baseView, priceScale){\n        super();\n        this._private__baseView = baseView;\n        this._private__priceScale = priceScale;\n    }\n    _internal__updateRendererData(axisRendererData, paneRendererData, commonRendererData) {\n        const data = getAxisViewData(this._private__baseView);\n        commonRendererData._internal_background = data._internal_background;\n        axisRendererData._internal_color = data._internal_color;\n        const additionalPadding = 2 / 12 * this._private__priceScale._internal_fontSize();\n        commonRendererData._internal_additionalPaddingTop = additionalPadding;\n        commonRendererData._internal_additionalPaddingBottom = additionalPadding;\n        commonRendererData._internal_coordinate = data._internal_coordinate;\n        commonRendererData._internal_fixedCoordinate = data._internal_fixedCoordinate;\n        axisRendererData._internal_text = data._internal_text;\n        axisRendererData._internal_visible = data._internal_visible;\n        axisRendererData._internal_tickVisible = data._internal_tickVisible;\n    }\n}\nclass SeriesPrimitiveWrapper {\n    constructor(primitive, series){\n        this._private__paneViewsCache = null;\n        this._private__timeAxisViewsCache = null;\n        this._private__priceAxisViewsCache = null;\n        this._private__priceAxisPaneViewsCache = null;\n        this._private__timeAxisPaneViewsCache = null;\n        this._private__primitive = primitive;\n        this._private__series = series;\n    }\n    _internal_primitive() {\n        return this._private__primitive;\n    }\n    _internal_updateAllViews() {\n        var _a, _b;\n        (_b = (_a = this._private__primitive).updateAllViews) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _internal_paneViews() {\n        var _a, _b, _c, _d;\n        const base = (_c = (_b = (_a = this._private__primitive).paneViews) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];\n        if (((_d = this._private__paneViewsCache) === null || _d === void 0 ? void 0 : _d._internal_base) === base) {\n            return this._private__paneViewsCache._internal_wrapper;\n        }\n        const wrapper = base.map((pw)=>new SeriesPrimitivePaneViewWrapper(pw));\n        this._private__paneViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_timeAxisViews() {\n        var _a, _b, _c, _d;\n        const base = (_c = (_b = (_a = this._private__primitive).timeAxisViews) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];\n        if (((_d = this._private__timeAxisViewsCache) === null || _d === void 0 ? void 0 : _d._internal_base) === base) {\n            return this._private__timeAxisViewsCache._internal_wrapper;\n        }\n        const timeScale = this._private__series._internal_model()._internal_timeScale();\n        const wrapper = base.map((aw)=>new SeriesPrimitiveTimeAxisViewWrapper(aw, timeScale));\n        this._private__timeAxisViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_priceAxisViews() {\n        var _a, _b, _c, _d;\n        const base = (_c = (_b = (_a = this._private__primitive).priceAxisViews) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];\n        if (((_d = this._private__priceAxisViewsCache) === null || _d === void 0 ? void 0 : _d._internal_base) === base) {\n            return this._private__priceAxisViewsCache._internal_wrapper;\n        }\n        const priceScale = this._private__series._internal_priceScale();\n        const wrapper = base.map((aw)=>new SeriesPrimitivePriceAxisViewWrapper(aw, priceScale));\n        this._private__priceAxisViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_priceAxisPaneViews() {\n        var _a, _b, _c, _d;\n        const base = (_c = (_b = (_a = this._private__primitive).priceAxisPaneViews) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];\n        if (((_d = this._private__priceAxisPaneViewsCache) === null || _d === void 0 ? void 0 : _d._internal_base) === base) {\n            return this._private__priceAxisPaneViewsCache._internal_wrapper;\n        }\n        const wrapper = base.map((pw)=>new SeriesPrimitivePaneViewWrapper(pw));\n        this._private__priceAxisPaneViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_timeAxisPaneViews() {\n        var _a, _b, _c, _d;\n        const base = (_c = (_b = (_a = this._private__primitive).timeAxisPaneViews) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];\n        if (((_d = this._private__timeAxisPaneViewsCache) === null || _d === void 0 ? void 0 : _d._internal_base) === base) {\n            return this._private__timeAxisPaneViewsCache._internal_wrapper;\n        }\n        const wrapper = base.map((pw)=>new SeriesPrimitivePaneViewWrapper(pw));\n        this._private__timeAxisPaneViewsCache = {\n            _internal_base: base,\n            _internal_wrapper: wrapper\n        };\n        return wrapper;\n    }\n    _internal_autoscaleInfo(startTimePoint, endTimePoint) {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._private__primitive).autoscaleInfo) === null || _b === void 0 ? void 0 : _b.call(_a, startTimePoint, endTimePoint)) !== null && _c !== void 0 ? _c : null;\n    }\n    _internal_hitTest(x, y) {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._private__primitive).hitTest) === null || _b === void 0 ? void 0 : _b.call(_a, x, y)) !== null && _c !== void 0 ? _c : null;\n    }\n}\nfunction extractPrimitivePaneViews(primitives, extractor, zOrder, destination) {\n    primitives.forEach((wrapper)=>{\n        extractor(wrapper).forEach((paneView)=>{\n            if (paneView._internal_zOrder() !== zOrder) {\n                return;\n            }\n            destination.push(paneView);\n        });\n    });\n}\nfunction primitivePaneViewsExtractor(wrapper) {\n    return wrapper._internal_paneViews();\n}\nfunction primitivePricePaneViewsExtractor(wrapper) {\n    return wrapper._internal_priceAxisPaneViews();\n}\nfunction primitiveTimePaneViewsExtractor(wrapper) {\n    return wrapper._internal_timeAxisPaneViews();\n}\nclass Series extends PriceDataSource {\n    constructor(model, options, seriesType, pane, customPaneView){\n        super(model);\n        this._private__data = createSeriesPlotList();\n        this._private__priceLineView = new SeriesPriceLinePaneView(this);\n        this._private__customPriceLines = [];\n        this._private__baseHorizontalLineView = new SeriesHorizontalBaseLinePaneView(this);\n        this._private__lastPriceAnimationPaneView = null;\n        this._private__barColorerCache = null;\n        this._private__markers = [];\n        this._private__indexedMarkers = [];\n        this._private__animationTimeoutId = null;\n        this._private__primitives = [];\n        this._private__options = options;\n        this._private__seriesType = seriesType;\n        const priceAxisView = new SeriesPriceAxisView(this);\n        this._private__priceAxisViews = [\n            priceAxisView\n        ];\n        this._private__panePriceAxisView = new PanePriceAxisView(priceAxisView, this, model);\n        if (seriesType === \"Area\" || seriesType === \"Line\" || seriesType === \"Baseline\") {\n            this._private__lastPriceAnimationPaneView = new SeriesLastPriceAnimationPaneView(this);\n        }\n        this._private__recreateFormatter();\n        this._private__recreatePaneViews(customPaneView);\n    }\n    _internal_destroy() {\n        if (this._private__animationTimeoutId !== null) {\n            clearTimeout(this._private__animationTimeoutId);\n        }\n    }\n    _internal_priceLineColor(lastBarColor) {\n        return this._private__options.priceLineColor || lastBarColor;\n    }\n    _internal_lastValueData(globalLast) {\n        const noDataRes = {\n            _internal_noData: true\n        };\n        const priceScale = this._internal_priceScale();\n        if (this._internal_model()._internal_timeScale()._internal_isEmpty() || priceScale._internal_isEmpty() || this._private__data._internal_isEmpty()) {\n            return noDataRes;\n        }\n        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();\n        const firstValue = this._internal_firstValue();\n        if (visibleBars === null || firstValue === null) {\n            return noDataRes;\n        }\n        // find range of bars inside range\n        // TODO: make it more optimal\n        let bar;\n        let lastIndex;\n        if (globalLast) {\n            const lastBar = this._private__data._internal_last();\n            if (lastBar === null) {\n                return noDataRes;\n            }\n            bar = lastBar;\n            lastIndex = lastBar._internal_index;\n        } else {\n            const endBar = this._private__data._internal_search(visibleBars._internal_right(), -1 /* MismatchDirection.NearestLeft */ );\n            if (endBar === null) {\n                return noDataRes;\n            }\n            bar = this._private__data._internal_valueAt(endBar._internal_index);\n            if (bar === null) {\n                return noDataRes;\n            }\n            lastIndex = endBar._internal_index;\n        }\n        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */ ];\n        const barColorer = this._internal_barColorer();\n        const style = barColorer._internal_barStyle(lastIndex, {\n            _internal_value: bar\n        });\n        const coordinate = priceScale._internal_priceToCoordinate(price, firstValue._internal_value);\n        return {\n            _internal_noData: false,\n            _internal_price: price,\n            _internal_text: priceScale._internal_formatPrice(price, firstValue._internal_value),\n            _internal_formattedPriceAbsolute: priceScale._internal_formatPriceAbsolute(price),\n            _internal_formattedPricePercentage: priceScale._internal_formatPricePercentage(price, firstValue._internal_value),\n            _internal_color: style._internal_barColor,\n            _internal_coordinate: coordinate,\n            _internal_index: lastIndex\n        };\n    }\n    _internal_barColorer() {\n        if (this._private__barColorerCache !== null) {\n            return this._private__barColorerCache;\n        }\n        this._private__barColorerCache = new SeriesBarColorer(this);\n        return this._private__barColorerCache;\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyOptions(options) {\n        const targetPriceScaleId = options.priceScaleId;\n        if (targetPriceScaleId !== undefined && targetPriceScaleId !== this._private__options.priceScaleId) {\n            // series cannot do it itself, ask model\n            this._internal_model()._internal_moveSeriesToScale(this, targetPriceScaleId);\n        }\n        merge(this._private__options, options);\n        if (options.priceFormat !== undefined) {\n            this._private__recreateFormatter();\n            // updated formatter might affect rendering  and as a consequence of this the width of price axis might be changed\n            // thus we need to force the chart to do a full update to apply changes correctly\n            // full update is quite heavy operation in terms of performance\n            // but updating formatter looks like quite rare so forcing a full update here shouldn't affect the performance a lot\n            this._internal_model()._internal_fullUpdate();\n        }\n        this._internal_model()._internal_updateSource(this);\n        // a series might affect crosshair by some options (like crosshair markers)\n        // that's why we need to update crosshair as well\n        this._internal_model()._internal_updateCrosshair();\n        this._private__paneView._internal_update(\"options\");\n    }\n    _internal_setData(data, updateInfo) {\n        this._private__data._internal_setData(data);\n        this._private__recalculateMarkers();\n        this._private__paneView._internal_update(\"data\");\n        this._private__markersPaneView._internal_update(\"data\");\n        if (this._private__lastPriceAnimationPaneView !== null) {\n            if (updateInfo && updateInfo._internal_lastBarUpdatedOrNewBarsAddedToTheRight) {\n                this._private__lastPriceAnimationPaneView._internal_onNewRealtimeDataReceived();\n            } else if (data.length === 0) {\n                this._private__lastPriceAnimationPaneView._internal_onDataCleared();\n            }\n        }\n        const sourcePane = this._internal_model()._internal_paneForSource(this);\n        this._internal_model()._internal_recalculatePane(sourcePane);\n        this._internal_model()._internal_updateSource(this);\n        this._internal_model()._internal_updateCrosshair();\n        this._internal_model()._internal_lightUpdate();\n    }\n    _internal_setMarkers(data) {\n        this._private__markers = data;\n        this._private__recalculateMarkers();\n        const sourcePane = this._internal_model()._internal_paneForSource(this);\n        this._private__markersPaneView._internal_update(\"data\");\n        this._internal_model()._internal_recalculatePane(sourcePane);\n        this._internal_model()._internal_updateSource(this);\n        this._internal_model()._internal_updateCrosshair();\n        this._internal_model()._internal_lightUpdate();\n    }\n    _internal_markers() {\n        return this._private__markers;\n    }\n    _internal_indexedMarkers() {\n        return this._private__indexedMarkers;\n    }\n    _internal_createPriceLine(options) {\n        const result = new CustomPriceLine(this, options);\n        this._private__customPriceLines.push(result);\n        this._internal_model()._internal_updateSource(this);\n        return result;\n    }\n    _internal_removePriceLine(line) {\n        const index = this._private__customPriceLines.indexOf(line);\n        if (index !== -1) {\n            this._private__customPriceLines.splice(index, 1);\n        }\n        this._internal_model()._internal_updateSource(this);\n    }\n    _internal_seriesType() {\n        return this._private__seriesType;\n    }\n    _internal_firstValue() {\n        const bar = this._internal_firstBar();\n        if (bar === null) {\n            return null;\n        }\n        return {\n            _internal_value: bar._internal_value[3 /* PlotRowValueIndex.Close */ ],\n            _internal_timePoint: bar._internal_time\n        };\n    }\n    _internal_firstBar() {\n        const visibleBars = this._internal_model()._internal_timeScale()._internal_visibleStrictRange();\n        if (visibleBars === null) {\n            return null;\n        }\n        const startTimePoint = visibleBars._internal_left();\n        return this._private__data._internal_search(startTimePoint, 1 /* MismatchDirection.NearestRight */ );\n    }\n    _internal_bars() {\n        return this._private__data;\n    }\n    _internal_dataAt(time) {\n        const prices = this._private__data._internal_valueAt(time);\n        if (prices === null) {\n            return null;\n        }\n        if (this._private__seriesType === \"Bar\" || this._private__seriesType === \"Candlestick\" || this._private__seriesType === \"Custom\") {\n            return {\n                _internal_open: prices._internal_value[0 /* PlotRowValueIndex.Open */ ],\n                _internal_high: prices._internal_value[1 /* PlotRowValueIndex.High */ ],\n                _internal_low: prices._internal_value[2 /* PlotRowValueIndex.Low */ ],\n                _internal_close: prices._internal_value[3 /* PlotRowValueIndex.Close */ ]\n            };\n        } else {\n            return prices._internal_value[3 /* PlotRowValueIndex.Close */ ];\n        }\n    }\n    _internal_topPaneViews(pane) {\n        const res = [];\n        extractPrimitivePaneViews(this._private__primitives, primitivePaneViewsExtractor, \"top\", res);\n        const animationPaneView = this._private__lastPriceAnimationPaneView;\n        if (animationPaneView === null || !animationPaneView._internal_visible()) {\n            return res;\n        }\n        if (this._private__animationTimeoutId === null && animationPaneView._internal_animationActive()) {\n            this._private__animationTimeoutId = setTimeout(()=>{\n                this._private__animationTimeoutId = null;\n                this._internal_model()._internal_cursorUpdate();\n            }, 0);\n        }\n        animationPaneView._internal_invalidateStage();\n        res.unshift(animationPaneView);\n        return res;\n    }\n    _internal_paneViews() {\n        const res = [];\n        if (!this._private__isOverlay()) {\n            res.push(this._private__baseHorizontalLineView);\n        }\n        res.push(this._private__paneView, this._private__priceLineView, this._private__markersPaneView);\n        const priceLineViews = this._private__customPriceLines.map((line)=>line._internal_paneView());\n        res.push(...priceLineViews);\n        extractPrimitivePaneViews(this._private__primitives, primitivePaneViewsExtractor, \"normal\", res);\n        return res;\n    }\n    _internal_bottomPaneViews() {\n        return this._private__extractPaneViews(primitivePaneViewsExtractor, \"bottom\");\n    }\n    _internal_pricePaneViews(zOrder) {\n        return this._private__extractPaneViews(primitivePricePaneViewsExtractor, zOrder);\n    }\n    _internal_timePaneViews(zOrder) {\n        return this._private__extractPaneViews(primitiveTimePaneViewsExtractor, zOrder);\n    }\n    _internal_primitiveHitTest(x, y) {\n        return this._private__primitives.map((primitive)=>primitive._internal_hitTest(x, y)).filter((result)=>result !== null);\n    }\n    _internal_labelPaneViews(pane) {\n        return [\n            this._private__panePriceAxisView,\n            ...this._private__customPriceLines.map((line)=>line._internal_labelPaneView())\n        ];\n    }\n    _internal_priceAxisViews(pane, priceScale) {\n        if (priceScale !== this._internal__priceScale && !this._private__isOverlay()) {\n            return [];\n        }\n        const result = [\n            ...this._private__priceAxisViews\n        ];\n        for (const customPriceLine of this._private__customPriceLines){\n            result.push(customPriceLine._internal_priceAxisView());\n        }\n        this._private__primitives.forEach((wrapper)=>{\n            result.push(...wrapper._internal_priceAxisViews());\n        });\n        return result;\n    }\n    _internal_timeAxisViews() {\n        const res = [];\n        this._private__primitives.forEach((wrapper)=>{\n            res.push(...wrapper._internal_timeAxisViews());\n        });\n        return res;\n    }\n    _internal_autoscaleInfo(startTimePoint, endTimePoint) {\n        if (this._private__options.autoscaleInfoProvider !== undefined) {\n            const autoscaleInfo = this._private__options.autoscaleInfoProvider(()=>{\n                const res = this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);\n                return res === null ? null : res._internal_toRaw();\n            });\n            return AutoscaleInfoImpl._internal_fromRaw(autoscaleInfo);\n        }\n        return this._private__autoscaleInfoImpl(startTimePoint, endTimePoint);\n    }\n    _internal_minMove() {\n        return this._private__options.priceFormat.minMove;\n    }\n    _internal_formatter() {\n        return this._private__formatter;\n    }\n    _internal_updateAllViews() {\n        var _a;\n        this._private__paneView._internal_update();\n        this._private__markersPaneView._internal_update();\n        for (const priceAxisView of this._private__priceAxisViews){\n            priceAxisView._internal_update();\n        }\n        for (const customPriceLine of this._private__customPriceLines){\n            customPriceLine._internal_update();\n        }\n        this._private__priceLineView._internal_update();\n        this._private__baseHorizontalLineView._internal_update();\n        (_a = this._private__lastPriceAnimationPaneView) === null || _a === void 0 ? void 0 : _a._internal_update();\n        this._private__primitives.forEach((wrapper)=>wrapper._internal_updateAllViews());\n    }\n    _internal_priceScale() {\n        return ensureNotNull(super._internal_priceScale());\n    }\n    _internal_markerDataAtIndex(index) {\n        const getValue = (this._private__seriesType === \"Line\" || this._private__seriesType === \"Area\" || this._private__seriesType === \"Baseline\") && this._private__options.crosshairMarkerVisible;\n        if (!getValue) {\n            return null;\n        }\n        const bar = this._private__data._internal_valueAt(index);\n        if (bar === null) {\n            return null;\n        }\n        const price = bar._internal_value[3 /* PlotRowValueIndex.Close */ ];\n        const radius = this._private__markerRadius();\n        const borderColor = this._private__markerBorderColor();\n        const borderWidth = this._private__markerBorderWidth();\n        const backgroundColor = this._private__markerBackgroundColor(index);\n        return {\n            _internal_price: price,\n            _internal_radius: radius,\n            _internal_borderColor: borderColor,\n            _internal_borderWidth: borderWidth,\n            _internal_backgroundColor: backgroundColor\n        };\n    }\n    _internal_title() {\n        return this._private__options.title;\n    }\n    _internal_visible() {\n        return this._private__options.visible;\n    }\n    _internal_attachPrimitive(primitive) {\n        this._private__primitives.push(new SeriesPrimitiveWrapper(primitive, this));\n    }\n    _internal_detachPrimitive(source) {\n        this._private__primitives = this._private__primitives.filter((wrapper)=>wrapper._internal_primitive() !== source);\n    }\n    _internal_customSeriesPlotValuesBuilder() {\n        if (this._private__paneView instanceof SeriesCustomPaneView === false) {\n            return undefined;\n        }\n        return (data)=>{\n            return this._private__paneView._internal_priceValueBuilder(data);\n        };\n    }\n    _internal_customSeriesWhitespaceCheck() {\n        if (this._private__paneView instanceof SeriesCustomPaneView === false) {\n            return undefined;\n        }\n        return (data)=>{\n            return this._private__paneView._internal_isWhitespace(data);\n        };\n    }\n    _private__isOverlay() {\n        const priceScale = this._internal_priceScale();\n        return !isDefaultPriceScale(priceScale._internal_id());\n    }\n    _private__autoscaleInfoImpl(startTimePoint, endTimePoint) {\n        if (!isInteger(startTimePoint) || !isInteger(endTimePoint) || this._private__data._internal_isEmpty()) {\n            return null;\n        }\n        // TODO: refactor this\n        // series data is strongly hardcoded to keep bars\n        const plots = this._private__seriesType === \"Line\" || this._private__seriesType === \"Area\" || this._private__seriesType === \"Baseline\" || this._private__seriesType === \"Histogram\" ? [\n            3 /* PlotRowValueIndex.Close */ \n        ] : [\n            2 /* PlotRowValueIndex.Low */ ,\n            1 /* PlotRowValueIndex.High */ \n        ];\n        const barsMinMax = this._private__data._internal_minMaxOnRangeCached(startTimePoint, endTimePoint, plots);\n        let range = barsMinMax !== null ? new PriceRangeImpl(barsMinMax._internal_min, barsMinMax._internal_max) : null;\n        if (this._internal_seriesType() === \"Histogram\") {\n            const base = this._private__options.base;\n            const rangeWithBase = new PriceRangeImpl(base, base);\n            range = range !== null ? range._internal_merge(rangeWithBase) : rangeWithBase;\n        }\n        let margins = this._private__markersPaneView._internal_autoScaleMargins();\n        this._private__primitives.forEach((primitive)=>{\n            const primitiveAutoscale = primitive._internal_autoscaleInfo(startTimePoint, endTimePoint);\n            if (primitiveAutoscale === null || primitiveAutoscale === void 0 ? void 0 : primitiveAutoscale.priceRange) {\n                const primitiveRange = new PriceRangeImpl(primitiveAutoscale.priceRange.minValue, primitiveAutoscale.priceRange.maxValue);\n                range = range !== null ? range._internal_merge(primitiveRange) : primitiveRange;\n            }\n            if (primitiveAutoscale === null || primitiveAutoscale === void 0 ? void 0 : primitiveAutoscale.margins) {\n                margins = mergeMargins(margins, primitiveAutoscale.margins);\n            }\n        });\n        return new AutoscaleInfoImpl(range, margins);\n    }\n    _private__markerRadius() {\n        switch(this._private__seriesType){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                return this._private__options.crosshairMarkerRadius;\n        }\n        return 0;\n    }\n    _private__markerBorderColor() {\n        switch(this._private__seriesType){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                {\n                    const crosshairMarkerBorderColor = this._private__options.crosshairMarkerBorderColor;\n                    if (crosshairMarkerBorderColor.length !== 0) {\n                        return crosshairMarkerBorderColor;\n                    }\n                }\n        }\n        return null;\n    }\n    _private__markerBorderWidth() {\n        switch(this._private__seriesType){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                return this._private__options.crosshairMarkerBorderWidth;\n        }\n        return 0;\n    }\n    _private__markerBackgroundColor(index) {\n        switch(this._private__seriesType){\n            case \"Line\":\n            case \"Area\":\n            case \"Baseline\":\n                {\n                    const crosshairMarkerBackgroundColor = this._private__options.crosshairMarkerBackgroundColor;\n                    if (crosshairMarkerBackgroundColor.length !== 0) {\n                        return crosshairMarkerBackgroundColor;\n                    }\n                }\n        }\n        return this._internal_barColorer()._internal_barStyle(index)._internal_barColor;\n    }\n    _private__recreateFormatter() {\n        switch(this._private__options.priceFormat.type){\n            case \"custom\":\n                {\n                    this._private__formatter = {\n                        format: this._private__options.priceFormat.formatter\n                    };\n                    break;\n                }\n            case \"volume\":\n                {\n                    this._private__formatter = new VolumeFormatter(this._private__options.priceFormat.precision);\n                    break;\n                }\n            case \"percent\":\n                {\n                    this._private__formatter = new PercentageFormatter(this._private__options.priceFormat.precision);\n                    break;\n                }\n            default:\n                {\n                    const priceScale = Math.pow(10, this._private__options.priceFormat.precision);\n                    this._private__formatter = new PriceFormatter(priceScale, this._private__options.priceFormat.minMove * priceScale);\n                }\n        }\n        if (this._internal__priceScale !== null) {\n            this._internal__priceScale._internal_updateFormatter();\n        }\n    }\n    _private__recalculateMarkers() {\n        const timeScale = this._internal_model()._internal_timeScale();\n        if (!timeScale._internal_hasPoints() || this._private__data._internal_isEmpty()) {\n            this._private__indexedMarkers = [];\n            return;\n        }\n        const firstDataIndex = ensureNotNull(this._private__data._internal_firstIndex());\n        this._private__indexedMarkers = this._private__markers.map((marker, index)=>{\n            // the first find index on the time scale (across all series)\n            const timePointIndex = ensureNotNull(timeScale._internal_timeToIndex(marker.time, true));\n            // and then search that index inside the series data\n            const searchMode = timePointIndex < firstDataIndex ? 1 /* MismatchDirection.NearestRight */  : -1 /* MismatchDirection.NearestLeft */ ;\n            const seriesDataIndex = ensureNotNull(this._private__data._internal_search(timePointIndex, searchMode))._internal_index;\n            return {\n                time: seriesDataIndex,\n                position: marker.position,\n                shape: marker.shape,\n                color: marker.color,\n                id: marker.id,\n                _internal_internalId: index,\n                text: marker.text,\n                size: marker.size,\n                originalTime: marker.originalTime\n            };\n        });\n    }\n    _private__recreatePaneViews(customPaneView) {\n        this._private__markersPaneView = new SeriesMarkersPaneView(this, this._internal_model());\n        switch(this._private__seriesType){\n            case \"Bar\":\n                {\n                    this._private__paneView = new SeriesBarsPaneView(this, this._internal_model());\n                    break;\n                }\n            case \"Candlestick\":\n                {\n                    this._private__paneView = new SeriesCandlesticksPaneView(this, this._internal_model());\n                    break;\n                }\n            case \"Line\":\n                {\n                    this._private__paneView = new SeriesLinePaneView(this, this._internal_model());\n                    break;\n                }\n            case \"Custom\":\n                {\n                    this._private__paneView = new SeriesCustomPaneView(this, this._internal_model(), ensureDefined(customPaneView));\n                    break;\n                }\n            case \"Area\":\n                {\n                    this._private__paneView = new SeriesAreaPaneView(this, this._internal_model());\n                    break;\n                }\n            case \"Baseline\":\n                {\n                    this._private__paneView = new SeriesBaselinePaneView(this, this._internal_model());\n                    break;\n                }\n            case \"Histogram\":\n                {\n                    this._private__paneView = new SeriesHistogramPaneView(this, this._internal_model());\n                    break;\n                }\n            default:\n                throw Error(\"Unknown chart style assigned: \" + this._private__seriesType);\n        }\n    }\n    _private__extractPaneViews(extractor, zOrder) {\n        const res = [];\n        extractPrimitivePaneViews(this._private__primitives, extractor, zOrder, res);\n        return res;\n    }\n}\nfunction mergeMargins(source, additionalMargin) {\n    var _a, _b;\n    return {\n        above: Math.max((_a = source === null || source === void 0 ? void 0 : source.above) !== null && _a !== void 0 ? _a : 0, additionalMargin.above),\n        below: Math.max((_b = source === null || source === void 0 ? void 0 : source.below) !== null && _b !== void 0 ? _b : 0, additionalMargin.below)\n    };\n}\nclass Magnet {\n    constructor(options){\n        this._private__options = options;\n    }\n    _internal_align(price, index, pane) {\n        let res = price;\n        if (this._private__options.mode === 0 /* CrosshairMode.Normal */ ) {\n            return res;\n        }\n        const defaultPriceScale = pane._internal_defaultPriceScale();\n        const firstValue = defaultPriceScale._internal_firstValue();\n        if (firstValue === null) {\n            return res;\n        }\n        const y = defaultPriceScale._internal_priceToCoordinate(price, firstValue);\n        // get all serieses from the pane\n        const serieses = pane._internal_dataSources().filter((ds)=>ds instanceof Series);\n        const candidates = serieses.reduce((acc, series)=>{\n            if (pane._internal_isOverlay(series) || !series._internal_visible()) {\n                return acc;\n            }\n            const ps = series._internal_priceScale();\n            const bars = series._internal_bars();\n            if (ps._internal_isEmpty() || !bars._internal_contains(index)) {\n                return acc;\n            }\n            const bar = bars._internal_valueAt(index);\n            if (bar === null) {\n                return acc;\n            }\n            // convert bar to pixels\n            const firstPrice = ensure(series._internal_firstValue());\n            return acc.concat([\n                ps._internal_priceToCoordinate(bar._internal_value[3 /* PlotRowValueIndex.Close */ ], firstPrice._internal_value)\n            ]);\n        }, []);\n        if (candidates.length === 0) {\n            return res;\n        }\n        candidates.sort((y1, y2)=>Math.abs(y1 - y) - Math.abs(y2 - y));\n        const nearest = candidates[0];\n        res = defaultPriceScale._internal_coordinateToPrice(nearest, firstValue);\n        return res;\n    }\n}\nclass GridRenderer extends BitmapCoordinatesPaneRenderer {\n    constructor(){\n        super(...arguments);\n        this._private__data = null;\n    }\n    _internal_setData(data) {\n        this._private__data = data;\n    }\n    _internal__drawImpl({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\n        if (this._private__data === null) {\n            return;\n        }\n        const lineWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n        ctx.lineWidth = lineWidth;\n        strokeInPixel(ctx, ()=>{\n            const data = ensureNotNull(this._private__data);\n            if (data._internal_vertLinesVisible) {\n                ctx.strokeStyle = data._internal_vertLinesColor;\n                setLineStyle(ctx, data._internal_vertLineStyle);\n                ctx.beginPath();\n                for (const timeMark of data._internal_timeMarks){\n                    const x = Math.round(timeMark._internal_coord * horizontalPixelRatio);\n                    ctx.moveTo(x, -lineWidth);\n                    ctx.lineTo(x, bitmapSize.height + lineWidth);\n                }\n                ctx.stroke();\n            }\n            if (data._internal_horzLinesVisible) {\n                ctx.strokeStyle = data._internal_horzLinesColor;\n                setLineStyle(ctx, data._internal_horzLineStyle);\n                ctx.beginPath();\n                for (const priceMark of data._internal_priceMarks){\n                    const y = Math.round(priceMark._internal_coord * verticalPixelRatio);\n                    ctx.moveTo(-lineWidth, y);\n                    ctx.lineTo(bitmapSize.width + lineWidth, y);\n                }\n                ctx.stroke();\n            }\n        });\n    }\n}\nclass GridPaneView {\n    constructor(pane){\n        this._private__renderer = new GridRenderer();\n        this._private__invalidated = true;\n        this._private__pane = pane;\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            const gridOptions = this._private__pane._internal_model()._internal_options().grid;\n            const data = {\n                _internal_horzLinesVisible: gridOptions.horzLines.visible,\n                _internal_vertLinesVisible: gridOptions.vertLines.visible,\n                _internal_horzLinesColor: gridOptions.horzLines.color,\n                _internal_vertLinesColor: gridOptions.vertLines.color,\n                _internal_horzLineStyle: gridOptions.horzLines.style,\n                _internal_vertLineStyle: gridOptions.vertLines.style,\n                _internal_priceMarks: this._private__pane._internal_defaultPriceScale()._internal_marks(),\n                // need this conversiom because TimeMark is a part of external interface\n                // and fields inside TimeMark are not minified\n                _internal_timeMarks: (this._private__pane._internal_model()._internal_timeScale()._internal_marks() || []).map((tm)=>{\n                    return {\n                        _internal_coord: tm.coord\n                    };\n                })\n            };\n            this._private__renderer._internal_setData(data);\n            this._private__invalidated = false;\n        }\n        return this._private__renderer;\n    }\n}\nclass Grid {\n    constructor(pane){\n        this._private__paneView = new GridPaneView(pane);\n    }\n    _internal_paneView() {\n        return this._private__paneView;\n    }\n}\nconst defLogFormula = {\n    _internal_logicalOffset: 4,\n    _internal_coordOffset: 0.0001\n};\nfunction fromPercent(value, baseValue) {\n    if (baseValue < 0) {\n        value = -value;\n    }\n    return value / 100 * baseValue + baseValue;\n}\nfunction toPercent(value, baseValue) {\n    const result = 100 * (value - baseValue) / baseValue;\n    return baseValue < 0 ? -result : result;\n}\nfunction toPercentRange(priceRange, baseValue) {\n    const minPercent = toPercent(priceRange._internal_minValue(), baseValue);\n    const maxPercent = toPercent(priceRange._internal_maxValue(), baseValue);\n    return new PriceRangeImpl(minPercent, maxPercent);\n}\nfunction fromIndexedTo100(value, baseValue) {\n    value -= 100;\n    if (baseValue < 0) {\n        value = -value;\n    }\n    return value / 100 * baseValue + baseValue;\n}\nfunction toIndexedTo100(value, baseValue) {\n    const result = 100 * (value - baseValue) / baseValue + 100;\n    return baseValue < 0 ? -result : result;\n}\nfunction toIndexedTo100Range(priceRange, baseValue) {\n    const minPercent = toIndexedTo100(priceRange._internal_minValue(), baseValue);\n    const maxPercent = toIndexedTo100(priceRange._internal_maxValue(), baseValue);\n    return new PriceRangeImpl(minPercent, maxPercent);\n}\nfunction toLog(price, logFormula) {\n    const m = Math.abs(price);\n    if (m < 1e-15) {\n        return 0;\n    }\n    const res = Math.log10(m + logFormula._internal_coordOffset) + logFormula._internal_logicalOffset;\n    return price < 0 ? -res : res;\n}\nfunction fromLog(logical, logFormula) {\n    const m = Math.abs(logical);\n    if (m < 1e-15) {\n        return 0;\n    }\n    const res = Math.pow(10, m - logFormula._internal_logicalOffset) - logFormula._internal_coordOffset;\n    return logical < 0 ? -res : res;\n}\nfunction convertPriceRangeToLog(priceRange, logFormula) {\n    if (priceRange === null) {\n        return null;\n    }\n    const min = toLog(priceRange._internal_minValue(), logFormula);\n    const max = toLog(priceRange._internal_maxValue(), logFormula);\n    return new PriceRangeImpl(min, max);\n}\nfunction canConvertPriceRangeFromLog(priceRange, logFormula) {\n    if (priceRange === null) {\n        return false;\n    }\n    const min = fromLog(priceRange._internal_minValue(), logFormula);\n    const max = fromLog(priceRange._internal_maxValue(), logFormula);\n    return isFinite(min) && isFinite(max);\n}\nfunction convertPriceRangeFromLog(priceRange, logFormula) {\n    if (priceRange === null) {\n        return null;\n    }\n    const min = fromLog(priceRange._internal_minValue(), logFormula);\n    const max = fromLog(priceRange._internal_maxValue(), logFormula);\n    return new PriceRangeImpl(min, max);\n}\nfunction logFormulaForPriceRange(range) {\n    if (range === null) {\n        return defLogFormula;\n    }\n    const diff = Math.abs(range._internal_maxValue() - range._internal_minValue());\n    if (diff >= 1 || diff < 1e-15) {\n        return defLogFormula;\n    }\n    const digits = Math.ceil(Math.abs(Math.log10(diff)));\n    const logicalOffset = defLogFormula._internal_logicalOffset + digits;\n    const coordOffset = 1 / Math.pow(10, logicalOffset);\n    return {\n        _internal_logicalOffset: logicalOffset,\n        _internal_coordOffset: coordOffset\n    };\n}\nfunction logFormulasAreSame(f1, f2) {\n    return f1._internal_logicalOffset === f2._internal_logicalOffset && f1._internal_coordOffset === f2._internal_coordOffset;\n}\nclass PriceTickSpanCalculator {\n    constructor(base, integralDividers){\n        this._private__base = base;\n        this._private__integralDividers = integralDividers;\n        if (isBaseDecimal(this._private__base)) {\n            this._private__fractionalDividers = [\n                2,\n                2.5,\n                2\n            ];\n        } else {\n            this._private__fractionalDividers = [];\n            for(let baseRest = this._private__base; baseRest !== 1;){\n                if (baseRest % 2 === 0) {\n                    this._private__fractionalDividers.push(2);\n                    baseRest /= 2;\n                } else if (baseRest % 5 === 0) {\n                    this._private__fractionalDividers.push(2, 2.5);\n                    baseRest /= 5;\n                } else {\n                    throw new Error(\"unexpected base\");\n                }\n                if (this._private__fractionalDividers.length > 100) {\n                    throw new Error(\"something wrong with base\");\n                }\n            }\n        }\n    }\n    _internal_tickSpan(high, low, maxTickSpan) {\n        const minMovement = this._private__base === 0 ? 0 : 1 / this._private__base;\n        let resultTickSpan = Math.pow(10, Math.max(0, Math.ceil(Math.log10(high - low))));\n        let index = 0;\n        let c = this._private__integralDividers[0];\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            // the second part is actual for small with very small values like 1e-10\n            // greaterOrEqual fails for such values\n            const resultTickSpanLargerMinMovement = greaterOrEqual(resultTickSpan, minMovement, 1e-14 /* Constants.TickSpanEpsilon */ ) && resultTickSpan > minMovement + 1e-14 /* Constants.TickSpanEpsilon */ ;\n            const resultTickSpanLargerMaxTickSpan = greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */ );\n            const resultTickSpanLarger1 = greaterOrEqual(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */ );\n            const haveToContinue = resultTickSpanLargerMinMovement && resultTickSpanLargerMaxTickSpan && resultTickSpanLarger1;\n            if (!haveToContinue) {\n                break;\n            }\n            resultTickSpan /= c;\n            c = this._private__integralDividers[++index % this._private__integralDividers.length];\n        }\n        if (resultTickSpan <= minMovement + 1e-14 /* Constants.TickSpanEpsilon */ ) {\n            resultTickSpan = minMovement;\n        }\n        resultTickSpan = Math.max(1, resultTickSpan);\n        if (this._private__fractionalDividers.length > 0 && equal(resultTickSpan, 1, 1e-14 /* Constants.TickSpanEpsilon */ )) {\n            index = 0;\n            c = this._private__fractionalDividers[0];\n            while(greaterOrEqual(resultTickSpan, maxTickSpan * c, 1e-14 /* Constants.TickSpanEpsilon */ ) && resultTickSpan > minMovement + 1e-14 /* Constants.TickSpanEpsilon */ ){\n                resultTickSpan /= c;\n                c = this._private__fractionalDividers[++index % this._private__fractionalDividers.length];\n            }\n        }\n        return resultTickSpan;\n    }\n}\nconst TICK_DENSITY = 2.5;\nclass PriceTickMarkBuilder {\n    constructor(priceScale, base, coordinateToLogicalFunc, logicalToCoordinateFunc){\n        this._private__marks = [];\n        this._private__priceScale = priceScale;\n        this._private__base = base;\n        this._private__coordinateToLogicalFunc = coordinateToLogicalFunc;\n        this._private__logicalToCoordinateFunc = logicalToCoordinateFunc;\n    }\n    _internal_tickSpan(high, low) {\n        if (high < low) {\n            throw new Error(\"high < low\");\n        }\n        const scaleHeight = this._private__priceScale._internal_height();\n        const markHeight = this._private__tickMarkHeight();\n        const maxTickSpan = (high - low) * markHeight / scaleHeight;\n        const spanCalculator1 = new PriceTickSpanCalculator(this._private__base, [\n            2,\n            2.5,\n            2\n        ]);\n        const spanCalculator2 = new PriceTickSpanCalculator(this._private__base, [\n            2,\n            2,\n            2.5\n        ]);\n        const spanCalculator3 = new PriceTickSpanCalculator(this._private__base, [\n            2.5,\n            2,\n            2\n        ]);\n        const spans = [];\n        spans.push(spanCalculator1._internal_tickSpan(high, low, maxTickSpan), spanCalculator2._internal_tickSpan(high, low, maxTickSpan), spanCalculator3._internal_tickSpan(high, low, maxTickSpan));\n        return min(spans);\n    }\n    _internal_rebuildTickMarks() {\n        const priceScale = this._private__priceScale;\n        const firstValue = priceScale._internal_firstValue();\n        if (firstValue === null) {\n            this._private__marks = [];\n            return;\n        }\n        const scaleHeight = priceScale._internal_height();\n        const bottom = this._private__coordinateToLogicalFunc(scaleHeight - 1, firstValue);\n        const top = this._private__coordinateToLogicalFunc(0, firstValue);\n        const extraTopBottomMargin = this._private__priceScale._internal_options().entireTextOnly ? this._private__fontHeight() / 2 : 0;\n        const minCoord = extraTopBottomMargin;\n        const maxCoord = scaleHeight - 1 - extraTopBottomMargin;\n        const high = Math.max(bottom, top);\n        const low = Math.min(bottom, top);\n        if (high === low) {\n            this._private__marks = [];\n            return;\n        }\n        let span = this._internal_tickSpan(high, low);\n        let mod = high % span;\n        mod += mod < 0 ? span : 0;\n        const sign = high >= low ? 1 : -1;\n        let prevCoord = null;\n        let targetIndex = 0;\n        for(let logical = high - mod; logical > low; logical -= span){\n            const coord = this._private__logicalToCoordinateFunc(logical, firstValue, true);\n            // check if there is place for it\n            // this is required for log scale\n            if (prevCoord !== null && Math.abs(coord - prevCoord) < this._private__tickMarkHeight()) {\n                continue;\n            }\n            // check if a tick mark is partially visible and skip it if entireTextOnly is true\n            if (coord < minCoord || coord > maxCoord) {\n                continue;\n            }\n            if (targetIndex < this._private__marks.length) {\n                this._private__marks[targetIndex]._internal_coord = coord;\n                this._private__marks[targetIndex]._internal_label = priceScale._internal_formatLogical(logical);\n            } else {\n                this._private__marks.push({\n                    _internal_coord: coord,\n                    _internal_label: priceScale._internal_formatLogical(logical)\n                });\n            }\n            targetIndex++;\n            prevCoord = coord;\n            if (priceScale._internal_isLog()) {\n                // recalc span\n                span = this._internal_tickSpan(logical * sign, low);\n            }\n        }\n        this._private__marks.length = targetIndex;\n    }\n    _internal_marks() {\n        return this._private__marks;\n    }\n    _private__fontHeight() {\n        return this._private__priceScale._internal_fontSize();\n    }\n    _private__tickMarkHeight() {\n        return Math.ceil(this._private__fontHeight() * TICK_DENSITY);\n    }\n}\nfunction sortSources(sources) {\n    return sources.slice().sort((s1, s2)=>{\n        return ensureNotNull(s1._internal_zorder()) - ensureNotNull(s2._internal_zorder());\n    });\n}\n/**\n * Represents the price scale mode.\n */ var PriceScaleMode;\n(function(PriceScaleMode) {\n    /**\n     * Price scale shows prices. Price range changes linearly.\n     */ PriceScaleMode[PriceScaleMode[\"Normal\"] = 0] = \"Normal\";\n    /**\n     * Price scale shows prices. Price range changes logarithmically.\n     */ PriceScaleMode[PriceScaleMode[\"Logarithmic\"] = 1] = \"Logarithmic\";\n    /**\n     * Price scale shows percentage values according the first visible value of the price scale.\n     * The first visible value is 0% in this mode.\n     */ PriceScaleMode[PriceScaleMode[\"Percentage\"] = 2] = \"Percentage\";\n    /**\n     * The same as percentage mode, but the first value is moved to 100.\n     */ PriceScaleMode[PriceScaleMode[\"IndexedTo100\"] = 3] = \"IndexedTo100\";\n})(PriceScaleMode || (PriceScaleMode = {}));\nconst percentageFormatter = new PercentageFormatter();\nconst defaultPriceFormatter = new PriceFormatter(100, 1);\nclass PriceScale {\n    constructor(id, options, layoutOptions, localizationOptions){\n        this._private__height = 0;\n        this._private__internalHeightCache = null;\n        this._private__priceRange = null;\n        this._private__priceRangeSnapshot = null;\n        this._private__invalidatedForRange = {\n            _internal_isValid: false,\n            _internal_visibleBars: null\n        };\n        this._private__marginAbove = 0;\n        this._private__marginBelow = 0;\n        this._private__onMarksChanged = new Delegate();\n        this._private__modeChanged = new Delegate();\n        this._private__dataSources = [];\n        this._private__cachedOrderedSources = null;\n        this._private__marksCache = null;\n        this._private__scaleStartPoint = null;\n        this._private__scrollStartPoint = null;\n        this._private__formatter = defaultPriceFormatter;\n        this._private__logFormula = logFormulaForPriceRange(null);\n        this._private__id = id;\n        this._private__options = options;\n        this._private__layoutOptions = layoutOptions;\n        this._private__localizationOptions = localizationOptions;\n        this._private__markBuilder = new PriceTickMarkBuilder(this, 100, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));\n    }\n    _internal_id() {\n        return this._private__id;\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyOptions(options) {\n        merge(this._private__options, options);\n        this._internal_updateFormatter();\n        if (options.mode !== undefined) {\n            this._internal_setMode({\n                _internal_mode: options.mode\n            });\n        }\n        if (options.scaleMargins !== undefined) {\n            const top = ensureDefined(options.scaleMargins.top);\n            const bottom = ensureDefined(options.scaleMargins.bottom);\n            if (top < 0 || top > 1) {\n                throw new Error(`Invalid top margin - expect value between 0 and 1, given=${top}`);\n            }\n            if (bottom < 0 || bottom > 1) {\n                throw new Error(`Invalid bottom margin - expect value between 0 and 1, given=${bottom}`);\n            }\n            if (top + bottom > 1) {\n                throw new Error(`Invalid margins - sum of margins must be less than 1, given=${top + bottom}`);\n            }\n            this._private__invalidateInternalHeightCache();\n            this._private__marksCache = null;\n        }\n    }\n    _internal_isAutoScale() {\n        return this._private__options.autoScale;\n    }\n    _internal_isLog() {\n        return this._private__options.mode === 1 /* PriceScaleMode.Logarithmic */ ;\n    }\n    _internal_isPercentage() {\n        return this._private__options.mode === 2 /* PriceScaleMode.Percentage */ ;\n    }\n    _internal_isIndexedTo100() {\n        return this._private__options.mode === 3 /* PriceScaleMode.IndexedTo100 */ ;\n    }\n    _internal_mode() {\n        return {\n            _internal_autoScale: this._private__options.autoScale,\n            _internal_isInverted: this._private__options.invertScale,\n            _internal_mode: this._private__options.mode\n        };\n    }\n    // eslint-disable-next-line complexity\n    _internal_setMode(newMode) {\n        const oldMode = this._internal_mode();\n        let priceRange = null;\n        if (newMode._internal_autoScale !== undefined) {\n            this._private__options.autoScale = newMode._internal_autoScale;\n        }\n        if (newMode._internal_mode !== undefined) {\n            this._private__options.mode = newMode._internal_mode;\n            if (newMode._internal_mode === 2 /* PriceScaleMode.Percentage */  || newMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */ ) {\n                this._private__options.autoScale = true;\n            }\n            // TODO: Remove after making rebuildTickMarks lazy\n            this._private__invalidatedForRange._internal_isValid = false;\n        }\n        // define which scale converted from\n        if (oldMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */  && newMode._internal_mode !== oldMode._internal_mode) {\n            if (canConvertPriceRangeFromLog(this._private__priceRange, this._private__logFormula)) {\n                priceRange = convertPriceRangeFromLog(this._private__priceRange, this._private__logFormula);\n                if (priceRange !== null) {\n                    this._internal_setPriceRange(priceRange);\n                }\n            } else {\n                this._private__options.autoScale = true;\n            }\n        }\n        // define which scale converted to\n        if (newMode._internal_mode === 1 /* PriceScaleMode.Logarithmic */  && newMode._internal_mode !== oldMode._internal_mode) {\n            priceRange = convertPriceRangeToLog(this._private__priceRange, this._private__logFormula);\n            if (priceRange !== null) {\n                this._internal_setPriceRange(priceRange);\n            }\n        }\n        const modeChanged = oldMode._internal_mode !== this._private__options.mode;\n        if (modeChanged && (oldMode._internal_mode === 2 /* PriceScaleMode.Percentage */  || this._internal_isPercentage())) {\n            this._internal_updateFormatter();\n        }\n        if (modeChanged && (oldMode._internal_mode === 3 /* PriceScaleMode.IndexedTo100 */  || this._internal_isIndexedTo100())) {\n            this._internal_updateFormatter();\n        }\n        if (newMode._internal_isInverted !== undefined && oldMode._internal_isInverted !== newMode._internal_isInverted) {\n            this._private__options.invertScale = newMode._internal_isInverted;\n            this._private__onIsInvertedChanged();\n        }\n        this._private__modeChanged._internal_fire(oldMode, this._internal_mode());\n    }\n    _internal_modeChanged() {\n        return this._private__modeChanged;\n    }\n    _internal_fontSize() {\n        return this._private__layoutOptions.fontSize;\n    }\n    _internal_height() {\n        return this._private__height;\n    }\n    _internal_setHeight(value) {\n        if (this._private__height === value) {\n            return;\n        }\n        this._private__height = value;\n        this._private__invalidateInternalHeightCache();\n        this._private__marksCache = null;\n    }\n    _internal_internalHeight() {\n        if (this._private__internalHeightCache) {\n            return this._private__internalHeightCache;\n        }\n        const res = this._internal_height() - this._private__topMarginPx() - this._private__bottomMarginPx();\n        this._private__internalHeightCache = res;\n        return res;\n    }\n    _internal_priceRange() {\n        this._private__makeSureItIsValid();\n        return this._private__priceRange;\n    }\n    _internal_setPriceRange(newPriceRange, isForceSetValue) {\n        const oldPriceRange = this._private__priceRange;\n        if (!isForceSetValue && !(oldPriceRange === null && newPriceRange !== null) && (oldPriceRange === null || oldPriceRange._internal_equals(newPriceRange))) {\n            return;\n        }\n        this._private__marksCache = null;\n        this._private__priceRange = newPriceRange;\n    }\n    _internal_isEmpty() {\n        this._private__makeSureItIsValid();\n        return this._private__height === 0 || !this._private__priceRange || this._private__priceRange._internal_isEmpty();\n    }\n    _internal_invertedCoordinate(coordinate) {\n        return this._internal_isInverted() ? coordinate : this._internal_height() - 1 - coordinate;\n    }\n    _internal_priceToCoordinate(price, baseValue) {\n        if (this._internal_isPercentage()) {\n            price = toPercent(price, baseValue);\n        } else if (this._internal_isIndexedTo100()) {\n            price = toIndexedTo100(price, baseValue);\n        }\n        return this._private__logicalToCoordinate(price, baseValue);\n    }\n    _internal_pointsArrayToCoordinates(points, baseValue, visibleRange) {\n        this._private__makeSureItIsValid();\n        const bh = this._private__bottomMarginPx();\n        const range = ensureNotNull(this._internal_priceRange());\n        const min = range._internal_minValue();\n        const max = range._internal_maxValue();\n        const ih = this._internal_internalHeight() - 1;\n        const isInverted = this._internal_isInverted();\n        const hmm = ih / (max - min);\n        const fromIndex = visibleRange === undefined ? 0 : visibleRange.from;\n        const toIndex = visibleRange === undefined ? points.length : visibleRange.to;\n        const transformFn = this._private__getCoordinateTransformer();\n        for(let i = fromIndex; i < toIndex; i++){\n            const point = points[i];\n            const price = point._internal_price;\n            if (isNaN(price)) {\n                continue;\n            }\n            let logical = price;\n            if (transformFn !== null) {\n                logical = transformFn(point._internal_price, baseValue);\n            }\n            const invCoordinate = bh + hmm * (logical - min);\n            const coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            point._internal_y = coordinate;\n        }\n    }\n    _internal_barPricesToCoordinates(pricesList, baseValue, visibleRange) {\n        this._private__makeSureItIsValid();\n        const bh = this._private__bottomMarginPx();\n        const range = ensureNotNull(this._internal_priceRange());\n        const min = range._internal_minValue();\n        const max = range._internal_maxValue();\n        const ih = this._internal_internalHeight() - 1;\n        const isInverted = this._internal_isInverted();\n        const hmm = ih / (max - min);\n        const fromIndex = visibleRange === undefined ? 0 : visibleRange.from;\n        const toIndex = visibleRange === undefined ? pricesList.length : visibleRange.to;\n        const transformFn = this._private__getCoordinateTransformer();\n        for(let i = fromIndex; i < toIndex; i++){\n            const bar = pricesList[i];\n            let openLogical = bar._internal_open;\n            let highLogical = bar._internal_high;\n            let lowLogical = bar._internal_low;\n            let closeLogical = bar._internal_close;\n            if (transformFn !== null) {\n                openLogical = transformFn(bar._internal_open, baseValue);\n                highLogical = transformFn(bar._internal_high, baseValue);\n                lowLogical = transformFn(bar._internal_low, baseValue);\n                closeLogical = transformFn(bar._internal_close, baseValue);\n            }\n            let invCoordinate = bh + hmm * (openLogical - min);\n            let coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_openY = coordinate;\n            invCoordinate = bh + hmm * (highLogical - min);\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_highY = coordinate;\n            invCoordinate = bh + hmm * (lowLogical - min);\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_lowY = coordinate;\n            invCoordinate = bh + hmm * (closeLogical - min);\n            coordinate = isInverted ? invCoordinate : this._private__height - 1 - invCoordinate;\n            bar._internal_closeY = coordinate;\n        }\n    }\n    _internal_coordinateToPrice(coordinate, baseValue) {\n        const logical = this._private__coordinateToLogical(coordinate, baseValue);\n        return this._internal_logicalToPrice(logical, baseValue);\n    }\n    _internal_logicalToPrice(logical, baseValue) {\n        let value = logical;\n        if (this._internal_isPercentage()) {\n            value = fromPercent(value, baseValue);\n        } else if (this._internal_isIndexedTo100()) {\n            value = fromIndexedTo100(value, baseValue);\n        }\n        return value;\n    }\n    _internal_dataSources() {\n        return this._private__dataSources;\n    }\n    _internal_orderedSources() {\n        if (this._private__cachedOrderedSources) {\n            return this._private__cachedOrderedSources;\n        }\n        let sources = [];\n        for(let i = 0; i < this._private__dataSources.length; i++){\n            const ds = this._private__dataSources[i];\n            if (ds._internal_zorder() === null) {\n                ds._internal_setZorder(i + 1);\n            }\n            sources.push(ds);\n        }\n        sources = sortSources(sources);\n        this._private__cachedOrderedSources = sources;\n        return this._private__cachedOrderedSources;\n    }\n    _internal_addDataSource(source) {\n        if (this._private__dataSources.indexOf(source) !== -1) {\n            return;\n        }\n        this._private__dataSources.push(source);\n        this._internal_updateFormatter();\n        this._internal_invalidateSourcesCache();\n    }\n    _internal_removeDataSource(source) {\n        const index = this._private__dataSources.indexOf(source);\n        if (index === -1) {\n            throw new Error(\"source is not attached to scale\");\n        }\n        this._private__dataSources.splice(index, 1);\n        if (this._private__dataSources.length === 0) {\n            this._internal_setMode({\n                _internal_autoScale: true\n            });\n            // if no sources on price scale let's clear price range cache as well as enabling auto scale\n            this._internal_setPriceRange(null);\n        }\n        this._internal_updateFormatter();\n        this._internal_invalidateSourcesCache();\n    }\n    _internal_firstValue() {\n        // TODO: cache the result\n        let result = null;\n        for (const source of this._private__dataSources){\n            const firstValue = source._internal_firstValue();\n            if (firstValue === null) {\n                continue;\n            }\n            if (result === null || firstValue._internal_timePoint < result._internal_timePoint) {\n                result = firstValue;\n            }\n        }\n        return result === null ? null : result._internal_value;\n    }\n    _internal_isInverted() {\n        return this._private__options.invertScale;\n    }\n    _internal_marks() {\n        const firstValueIsNull = this._internal_firstValue() === null;\n        // do not recalculate marks if firstValueIsNull is true because in this case we'll always get empty result\n        // this could happen in case when a series had some data and then you set empty data to it (in a simplified case)\n        // we could display an empty price scale, but this is not good from UX\n        // so in this case we need to keep an previous marks to display them on the scale\n        // as one of possible examples for this situation could be the following:\n        // let's say you have a study/indicator attached to a price scale and then you decide to stop it, i.e. remove its data because of its visibility\n        // a user will see the previous marks on the scale until you turn on your study back or remove it from the chart completely\n        if (this._private__marksCache !== null && (firstValueIsNull || this._private__marksCache._internal_firstValueIsNull === firstValueIsNull)) {\n            return this._private__marksCache._internal_marks;\n        }\n        this._private__markBuilder._internal_rebuildTickMarks();\n        const marks = this._private__markBuilder._internal_marks();\n        this._private__marksCache = {\n            _internal_marks: marks,\n            _internal_firstValueIsNull: firstValueIsNull\n        };\n        this._private__onMarksChanged._internal_fire();\n        return marks;\n    }\n    _internal_onMarksChanged() {\n        return this._private__onMarksChanged;\n    }\n    _internal_startScale(x) {\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\n            return;\n        }\n        if (this._private__scaleStartPoint !== null || this._private__priceRangeSnapshot !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        // invert x\n        this._private__scaleStartPoint = this._private__height - x;\n        this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();\n    }\n    _internal_scaleTo(x) {\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\n            return;\n        }\n        if (this._private__scaleStartPoint === null) {\n            return;\n        }\n        this._internal_setMode({\n            _internal_autoScale: false\n        });\n        // invert x\n        x = this._private__height - x;\n        if (x < 0) {\n            x = 0;\n        }\n        let scaleCoeff = (this._private__scaleStartPoint + (this._private__height - 1) * 0.2) / (x + (this._private__height - 1) * 0.2);\n        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();\n        scaleCoeff = Math.max(scaleCoeff, 0.1);\n        newPriceRange._internal_scaleAroundCenter(scaleCoeff);\n        this._internal_setPriceRange(newPriceRange);\n    }\n    _internal_endScale() {\n        if (this._internal_isPercentage() || this._internal_isIndexedTo100()) {\n            return;\n        }\n        this._private__scaleStartPoint = null;\n        this._private__priceRangeSnapshot = null;\n    }\n    _internal_startScroll(x) {\n        if (this._internal_isAutoScale()) {\n            return;\n        }\n        if (this._private__scrollStartPoint !== null || this._private__priceRangeSnapshot !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        this._private__scrollStartPoint = x;\n        this._private__priceRangeSnapshot = ensureNotNull(this._internal_priceRange())._internal_clone();\n    }\n    _internal_scrollTo(x) {\n        if (this._internal_isAutoScale()) {\n            return;\n        }\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        const priceUnitsPerPixel = ensureNotNull(this._internal_priceRange())._internal_length() / (this._internal_internalHeight() - 1);\n        let pixelDelta = x - this._private__scrollStartPoint;\n        if (this._internal_isInverted()) {\n            pixelDelta *= -1;\n        }\n        const priceDelta = pixelDelta * priceUnitsPerPixel;\n        const newPriceRange = ensureNotNull(this._private__priceRangeSnapshot)._internal_clone();\n        newPriceRange._internal_shift(priceDelta);\n        this._internal_setPriceRange(newPriceRange, true);\n        this._private__marksCache = null;\n    }\n    _internal_endScroll() {\n        if (this._internal_isAutoScale()) {\n            return;\n        }\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        this._private__scrollStartPoint = null;\n        this._private__priceRangeSnapshot = null;\n    }\n    _internal_formatter() {\n        if (!this._private__formatter) {\n            this._internal_updateFormatter();\n        }\n        return this._private__formatter;\n    }\n    _internal_formatPrice(price, firstValue) {\n        switch(this._private__options.mode){\n            case 2 /* PriceScaleMode.Percentage */ :\n                return this._private__formatPercentage(toPercent(price, firstValue));\n            case 3 /* PriceScaleMode.IndexedTo100 */ :\n                return this._internal_formatter().format(toIndexedTo100(price, firstValue));\n            default:\n                return this._private__formatPrice(price);\n        }\n    }\n    _internal_formatLogical(logical) {\n        switch(this._private__options.mode){\n            case 2 /* PriceScaleMode.Percentage */ :\n                return this._private__formatPercentage(logical);\n            case 3 /* PriceScaleMode.IndexedTo100 */ :\n                return this._internal_formatter().format(logical);\n            default:\n                return this._private__formatPrice(logical);\n        }\n    }\n    _internal_formatPriceAbsolute(price) {\n        return this._private__formatPrice(price, ensureNotNull(this._private__formatterSource())._internal_formatter());\n    }\n    _internal_formatPricePercentage(price, baseValue) {\n        price = toPercent(price, baseValue);\n        return this._private__formatPercentage(price, percentageFormatter);\n    }\n    _internal_sourcesForAutoScale() {\n        return this._private__dataSources;\n    }\n    _internal_recalculatePriceRange(visibleBars) {\n        this._private__invalidatedForRange = {\n            _internal_visibleBars: visibleBars,\n            _internal_isValid: false\n        };\n    }\n    _internal_updateAllViews() {\n        this._private__dataSources.forEach((s)=>s._internal_updateAllViews());\n    }\n    _internal_updateFormatter() {\n        this._private__marksCache = null;\n        const formatterSource = this._private__formatterSource();\n        let base = 100;\n        if (formatterSource !== null) {\n            base = Math.round(1 / formatterSource._internal_minMove());\n        }\n        this._private__formatter = defaultPriceFormatter;\n        if (this._internal_isPercentage()) {\n            this._private__formatter = percentageFormatter;\n            base = 100;\n        } else if (this._internal_isIndexedTo100()) {\n            this._private__formatter = new PriceFormatter(100, 1);\n            base = 100;\n        } else {\n            if (formatterSource !== null) {\n                // user\n                this._private__formatter = formatterSource._internal_formatter();\n            }\n        }\n        this._private__markBuilder = new PriceTickMarkBuilder(this, base, this._private__coordinateToLogical.bind(this), this._private__logicalToCoordinate.bind(this));\n        this._private__markBuilder._internal_rebuildTickMarks();\n    }\n    _internal_invalidateSourcesCache() {\n        this._private__cachedOrderedSources = null;\n    }\n    /**\n     * @returns The {@link IPriceDataSource} that will be used as the \"formatter source\" (take minMove for formatter).\n     */ _private__formatterSource() {\n        return this._private__dataSources[0] || null;\n    }\n    _private__topMarginPx() {\n        return this._internal_isInverted() ? this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow : this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove;\n    }\n    _private__bottomMarginPx() {\n        return this._internal_isInverted() ? this._private__options.scaleMargins.top * this._internal_height() + this._private__marginAbove : this._private__options.scaleMargins.bottom * this._internal_height() + this._private__marginBelow;\n    }\n    _private__makeSureItIsValid() {\n        if (!this._private__invalidatedForRange._internal_isValid) {\n            this._private__invalidatedForRange._internal_isValid = true;\n            this._private__recalculatePriceRangeImpl();\n        }\n    }\n    _private__invalidateInternalHeightCache() {\n        this._private__internalHeightCache = null;\n    }\n    _private__logicalToCoordinate(logical, baseValue) {\n        this._private__makeSureItIsValid();\n        if (this._internal_isEmpty()) {\n            return 0;\n        }\n        logical = this._internal_isLog() && logical ? toLog(logical, this._private__logFormula) : logical;\n        const range = ensureNotNull(this._internal_priceRange());\n        const invCoordinate = this._private__bottomMarginPx() + (this._internal_internalHeight() - 1) * (logical - range._internal_minValue()) / range._internal_length();\n        const coordinate = this._internal_invertedCoordinate(invCoordinate);\n        return coordinate;\n    }\n    _private__coordinateToLogical(coordinate, baseValue) {\n        this._private__makeSureItIsValid();\n        if (this._internal_isEmpty()) {\n            return 0;\n        }\n        const invCoordinate = this._internal_invertedCoordinate(coordinate);\n        const range = ensureNotNull(this._internal_priceRange());\n        const logical = range._internal_minValue() + range._internal_length() * ((invCoordinate - this._private__bottomMarginPx()) / (this._internal_internalHeight() - 1));\n        return this._internal_isLog() ? fromLog(logical, this._private__logFormula) : logical;\n    }\n    _private__onIsInvertedChanged() {\n        this._private__marksCache = null;\n        this._private__markBuilder._internal_rebuildTickMarks();\n    }\n    // eslint-disable-next-line complexity\n    _private__recalculatePriceRangeImpl() {\n        const visibleBars = this._private__invalidatedForRange._internal_visibleBars;\n        if (visibleBars === null) {\n            return;\n        }\n        let priceRange = null;\n        const sources = this._internal_sourcesForAutoScale();\n        let marginAbove = 0;\n        let marginBelow = 0;\n        for (const source of sources){\n            if (!source._internal_visible()) {\n                continue;\n            }\n            const firstValue = source._internal_firstValue();\n            if (firstValue === null) {\n                continue;\n            }\n            const autoScaleInfo = source._internal_autoscaleInfo(visibleBars._internal_left(), visibleBars._internal_right());\n            let sourceRange = autoScaleInfo && autoScaleInfo._internal_priceRange();\n            if (sourceRange !== null) {\n                switch(this._private__options.mode){\n                    case 1 /* PriceScaleMode.Logarithmic */ :\n                        sourceRange = convertPriceRangeToLog(sourceRange, this._private__logFormula);\n                        break;\n                    case 2 /* PriceScaleMode.Percentage */ :\n                        sourceRange = toPercentRange(sourceRange, firstValue._internal_value);\n                        break;\n                    case 3 /* PriceScaleMode.IndexedTo100 */ :\n                        sourceRange = toIndexedTo100Range(sourceRange, firstValue._internal_value);\n                        break;\n                }\n                if (priceRange === null) {\n                    priceRange = sourceRange;\n                } else {\n                    priceRange = priceRange._internal_merge(ensureNotNull(sourceRange));\n                }\n                if (autoScaleInfo !== null) {\n                    const margins = autoScaleInfo._internal_margins();\n                    if (margins !== null) {\n                        marginAbove = Math.max(marginAbove, margins.above);\n                        marginBelow = Math.max(marginBelow, margins.below);\n                    }\n                }\n            }\n        }\n        if (marginAbove !== this._private__marginAbove || marginBelow !== this._private__marginBelow) {\n            this._private__marginAbove = marginAbove;\n            this._private__marginBelow = marginBelow;\n            this._private__marksCache = null;\n            this._private__invalidateInternalHeightCache();\n        }\n        if (priceRange !== null) {\n            // keep current range is new is empty\n            if (priceRange._internal_minValue() === priceRange._internal_maxValue()) {\n                const formatterSource = this._private__formatterSource();\n                const minMove = formatterSource === null || this._internal_isPercentage() || this._internal_isIndexedTo100() ? 1 : formatterSource._internal_minMove();\n                // if price range is degenerated to 1 point let's extend it by 10 min move values\n                // to avoid incorrect range and empty (blank) scale (in case of min tick much greater than 1)\n                const extendValue = 5 * minMove;\n                if (this._internal_isLog()) {\n                    priceRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);\n                }\n                priceRange = new PriceRangeImpl(priceRange._internal_minValue() - extendValue, priceRange._internal_maxValue() + extendValue);\n                if (this._internal_isLog()) {\n                    priceRange = convertPriceRangeToLog(priceRange, this._private__logFormula);\n                }\n            }\n            if (this._internal_isLog()) {\n                const rawRange = convertPriceRangeFromLog(priceRange, this._private__logFormula);\n                const newLogFormula = logFormulaForPriceRange(rawRange);\n                if (!logFormulasAreSame(newLogFormula, this._private__logFormula)) {\n                    const rawSnapshot = this._private__priceRangeSnapshot !== null ? convertPriceRangeFromLog(this._private__priceRangeSnapshot, this._private__logFormula) : null;\n                    this._private__logFormula = newLogFormula;\n                    priceRange = convertPriceRangeToLog(rawRange, newLogFormula);\n                    if (rawSnapshot !== null) {\n                        this._private__priceRangeSnapshot = convertPriceRangeToLog(rawSnapshot, newLogFormula);\n                    }\n                }\n            }\n            this._internal_setPriceRange(priceRange);\n        } else {\n            // reset empty to default\n            if (this._private__priceRange === null) {\n                this._internal_setPriceRange(new PriceRangeImpl(-0.5, 0.5));\n                this._private__logFormula = logFormulaForPriceRange(null);\n            }\n        }\n        this._private__invalidatedForRange._internal_isValid = true;\n    }\n    _private__getCoordinateTransformer() {\n        if (this._internal_isPercentage()) {\n            return toPercent;\n        } else if (this._internal_isIndexedTo100()) {\n            return toIndexedTo100;\n        } else if (this._internal_isLog()) {\n            return (price)=>toLog(price, this._private__logFormula);\n        }\n        return null;\n    }\n    _private__formatValue(value, formatter, fallbackFormatter) {\n        if (formatter === undefined) {\n            if (fallbackFormatter === undefined) {\n                fallbackFormatter = this._internal_formatter();\n            }\n            return fallbackFormatter.format(value);\n        }\n        return formatter(value);\n    }\n    _private__formatPrice(price, fallbackFormatter) {\n        return this._private__formatValue(price, this._private__localizationOptions.priceFormatter, fallbackFormatter);\n    }\n    _private__formatPercentage(percentage, fallbackFormatter) {\n        return this._private__formatValue(percentage, this._private__localizationOptions.percentageFormatter, fallbackFormatter);\n    }\n}\nconst DEFAULT_STRETCH_FACTOR = 1000;\nclass Pane {\n    constructor(timeScale, model){\n        this._private__dataSources = [];\n        this._private__overlaySourcesByScaleId = new Map();\n        this._private__height = 0;\n        this._private__width = 0;\n        this._private__stretchFactor = DEFAULT_STRETCH_FACTOR;\n        this._private__cachedOrderedSources = null;\n        this._private__destroyed = new Delegate();\n        this._private__timeScale = timeScale;\n        this._private__model = model;\n        this._private__grid = new Grid(this);\n        const options = model._internal_options();\n        this._private__leftPriceScale = this._private__createPriceScale(\"left\" /* DefaultPriceScaleId.Left */ , options.leftPriceScale);\n        this._private__rightPriceScale = this._private__createPriceScale(\"right\" /* DefaultPriceScaleId.Right */ , options.rightPriceScale);\n        this._private__leftPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__leftPriceScale), this);\n        this._private__rightPriceScale._internal_modeChanged()._internal_subscribe(this._private__onPriceScaleModeChanged.bind(this, this._private__rightPriceScale), this);\n        this._internal_applyScaleOptions(options);\n    }\n    _internal_applyScaleOptions(options) {\n        if (options.leftPriceScale) {\n            this._private__leftPriceScale._internal_applyOptions(options.leftPriceScale);\n        }\n        if (options.rightPriceScale) {\n            this._private__rightPriceScale._internal_applyOptions(options.rightPriceScale);\n        }\n        if (options.localization) {\n            this._private__leftPriceScale._internal_updateFormatter();\n            this._private__rightPriceScale._internal_updateFormatter();\n        }\n        if (options.overlayPriceScales) {\n            const sourceArrays = Array.from(this._private__overlaySourcesByScaleId.values());\n            for (const arr of sourceArrays){\n                const priceScale = ensureNotNull(arr[0]._internal_priceScale());\n                priceScale._internal_applyOptions(options.overlayPriceScales);\n                if (options.localization) {\n                    priceScale._internal_updateFormatter();\n                }\n            }\n        }\n    }\n    _internal_priceScaleById(id) {\n        switch(id){\n            case \"left\" /* DefaultPriceScaleId.Left */ :\n                {\n                    return this._private__leftPriceScale;\n                }\n            case \"right\" /* DefaultPriceScaleId.Right */ :\n                {\n                    return this._private__rightPriceScale;\n                }\n        }\n        if (this._private__overlaySourcesByScaleId.has(id)) {\n            return ensureDefined(this._private__overlaySourcesByScaleId.get(id))[0]._internal_priceScale();\n        }\n        return null;\n    }\n    _internal_destroy() {\n        this._internal_model()._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);\n        this._private__leftPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);\n        this._private__rightPriceScale._internal_modeChanged()._internal_unsubscribeAll(this);\n        this._private__dataSources.forEach((source)=>{\n            if (source._internal_destroy) {\n                source._internal_destroy();\n            }\n        });\n        this._private__destroyed._internal_fire();\n    }\n    _internal_stretchFactor() {\n        return this._private__stretchFactor;\n    }\n    _internal_setStretchFactor(factor) {\n        this._private__stretchFactor = factor;\n    }\n    _internal_model() {\n        return this._private__model;\n    }\n    _internal_width() {\n        return this._private__width;\n    }\n    _internal_height() {\n        return this._private__height;\n    }\n    _internal_setWidth(width) {\n        this._private__width = width;\n        this._internal_updateAllSources();\n    }\n    _internal_setHeight(height) {\n        this._private__height = height;\n        this._private__leftPriceScale._internal_setHeight(height);\n        this._private__rightPriceScale._internal_setHeight(height);\n        // process overlays\n        this._private__dataSources.forEach((ds)=>{\n            if (this._internal_isOverlay(ds)) {\n                const priceScale = ds._internal_priceScale();\n                if (priceScale !== null) {\n                    priceScale._internal_setHeight(height);\n                }\n            }\n        });\n        this._internal_updateAllSources();\n    }\n    _internal_dataSources() {\n        return this._private__dataSources;\n    }\n    _internal_isOverlay(source) {\n        const priceScale = source._internal_priceScale();\n        if (priceScale === null) {\n            return true;\n        }\n        return this._private__leftPriceScale !== priceScale && this._private__rightPriceScale !== priceScale;\n    }\n    _internal_addDataSource(source, targetScaleId, zOrder) {\n        const targetZOrder = zOrder !== undefined ? zOrder : this._private__getZOrderMinMax()._internal_maxZOrder + 1;\n        this._private__insertDataSource(source, targetScaleId, targetZOrder);\n    }\n    _internal_removeDataSource(source) {\n        const index = this._private__dataSources.indexOf(source);\n        assert(index !== -1, \"removeDataSource: invalid data source\");\n        this._private__dataSources.splice(index, 1);\n        const priceScaleId = ensureNotNull(source._internal_priceScale())._internal_id();\n        if (this._private__overlaySourcesByScaleId.has(priceScaleId)) {\n            const overlaySources = ensureDefined(this._private__overlaySourcesByScaleId.get(priceScaleId));\n            const overlayIndex = overlaySources.indexOf(source);\n            if (overlayIndex !== -1) {\n                overlaySources.splice(overlayIndex, 1);\n                if (overlaySources.length === 0) {\n                    this._private__overlaySourcesByScaleId.delete(priceScaleId);\n                }\n            }\n        }\n        const priceScale = source._internal_priceScale();\n        // if source has owner, it returns owner's price scale\n        // and it does not have source in their list\n        if (priceScale && priceScale._internal_dataSources().indexOf(source) >= 0) {\n            priceScale._internal_removeDataSource(source);\n        }\n        if (priceScale !== null) {\n            priceScale._internal_invalidateSourcesCache();\n            this._internal_recalculatePriceScale(priceScale);\n        }\n        this._private__cachedOrderedSources = null;\n    }\n    _internal_priceScalePosition(priceScale) {\n        if (priceScale === this._private__leftPriceScale) {\n            return \"left\";\n        }\n        if (priceScale === this._private__rightPriceScale) {\n            return \"right\";\n        }\n        return \"overlay\";\n    }\n    _internal_leftPriceScale() {\n        return this._private__leftPriceScale;\n    }\n    _internal_rightPriceScale() {\n        return this._private__rightPriceScale;\n    }\n    _internal_startScalePrice(priceScale, x) {\n        priceScale._internal_startScale(x);\n    }\n    _internal_scalePriceTo(priceScale, x) {\n        priceScale._internal_scaleTo(x);\n        // TODO: be more smart and update only affected views\n        this._internal_updateAllSources();\n    }\n    _internal_endScalePrice(priceScale) {\n        priceScale._internal_endScale();\n    }\n    _internal_startScrollPrice(priceScale, x) {\n        priceScale._internal_startScroll(x);\n    }\n    _internal_scrollPriceTo(priceScale, x) {\n        priceScale._internal_scrollTo(x);\n        this._internal_updateAllSources();\n    }\n    _internal_endScrollPrice(priceScale) {\n        priceScale._internal_endScroll();\n    }\n    _internal_updateAllSources() {\n        this._private__dataSources.forEach((source)=>{\n            source._internal_updateAllViews();\n        });\n    }\n    _internal_defaultPriceScale() {\n        let priceScale = null;\n        if (this._private__model._internal_options().rightPriceScale.visible && this._private__rightPriceScale._internal_dataSources().length !== 0) {\n            priceScale = this._private__rightPriceScale;\n        } else if (this._private__model._internal_options().leftPriceScale.visible && this._private__leftPriceScale._internal_dataSources().length !== 0) {\n            priceScale = this._private__leftPriceScale;\n        } else if (this._private__dataSources.length !== 0) {\n            priceScale = this._private__dataSources[0]._internal_priceScale();\n        }\n        if (priceScale === null) {\n            priceScale = this._private__rightPriceScale;\n        }\n        return priceScale;\n    }\n    _internal_defaultVisiblePriceScale() {\n        let priceScale = null;\n        if (this._private__model._internal_options().rightPriceScale.visible) {\n            priceScale = this._private__rightPriceScale;\n        } else if (this._private__model._internal_options().leftPriceScale.visible) {\n            priceScale = this._private__leftPriceScale;\n        }\n        return priceScale;\n    }\n    _internal_recalculatePriceScale(priceScale) {\n        if (priceScale === null || !priceScale._internal_isAutoScale()) {\n            return;\n        }\n        this._private__recalculatePriceScaleImpl(priceScale);\n    }\n    _internal_resetPriceScale(priceScale) {\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n        priceScale._internal_setMode({\n            _internal_autoScale: true\n        });\n        if (visibleBars !== null) {\n            priceScale._internal_recalculatePriceRange(visibleBars);\n        }\n        this._internal_updateAllSources();\n    }\n    _internal_momentaryAutoScale() {\n        this._private__recalculatePriceScaleImpl(this._private__leftPriceScale);\n        this._private__recalculatePriceScaleImpl(this._private__rightPriceScale);\n    }\n    _internal_recalculate() {\n        this._internal_recalculatePriceScale(this._private__leftPriceScale);\n        this._internal_recalculatePriceScale(this._private__rightPriceScale);\n        this._private__dataSources.forEach((ds)=>{\n            if (this._internal_isOverlay(ds)) {\n                this._internal_recalculatePriceScale(ds._internal_priceScale());\n            }\n        });\n        this._internal_updateAllSources();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_orderedSources() {\n        if (this._private__cachedOrderedSources === null) {\n            this._private__cachedOrderedSources = sortSources(this._private__dataSources);\n        }\n        return this._private__cachedOrderedSources;\n    }\n    _internal_onDestroyed() {\n        return this._private__destroyed;\n    }\n    _internal_grid() {\n        return this._private__grid;\n    }\n    _private__recalculatePriceScaleImpl(priceScale) {\n        // TODO: can use this checks\n        const sourceForAutoScale = priceScale._internal_sourcesForAutoScale();\n        if (sourceForAutoScale && sourceForAutoScale.length > 0 && !this._private__timeScale._internal_isEmpty()) {\n            const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n            if (visibleBars !== null) {\n                priceScale._internal_recalculatePriceRange(visibleBars);\n            }\n        }\n        priceScale._internal_updateAllViews();\n    }\n    _private__getZOrderMinMax() {\n        const sources = this._internal_orderedSources();\n        if (sources.length === 0) {\n            return {\n                _internal_minZOrder: 0,\n                _internal_maxZOrder: 0\n            };\n        }\n        let minZOrder = 0;\n        let maxZOrder = 0;\n        for(let j = 0; j < sources.length; j++){\n            const ds = sources[j];\n            const zOrder = ds._internal_zorder();\n            if (zOrder !== null) {\n                if (zOrder < minZOrder) {\n                    minZOrder = zOrder;\n                }\n                if (zOrder > maxZOrder) {\n                    maxZOrder = zOrder;\n                }\n            }\n        }\n        return {\n            _internal_minZOrder: minZOrder,\n            _internal_maxZOrder: maxZOrder\n        };\n    }\n    _private__insertDataSource(source, priceScaleId, zOrder) {\n        let priceScale = this._internal_priceScaleById(priceScaleId);\n        if (priceScale === null) {\n            priceScale = this._private__createPriceScale(priceScaleId, this._private__model._internal_options().overlayPriceScales);\n        }\n        this._private__dataSources.push(source);\n        if (!isDefaultPriceScale(priceScaleId)) {\n            const overlaySources = this._private__overlaySourcesByScaleId.get(priceScaleId) || [];\n            overlaySources.push(source);\n            this._private__overlaySourcesByScaleId.set(priceScaleId, overlaySources);\n        }\n        priceScale._internal_addDataSource(source);\n        source._internal_setPriceScale(priceScale);\n        source._internal_setZorder(zOrder);\n        this._internal_recalculatePriceScale(priceScale);\n        this._private__cachedOrderedSources = null;\n    }\n    _private__onPriceScaleModeChanged(priceScale, oldMode, newMode) {\n        if (oldMode._internal_mode === newMode._internal_mode) {\n            return;\n        }\n        // momentary auto scale if we toggle percentage/indexedTo100 mode\n        this._private__recalculatePriceScaleImpl(priceScale);\n    }\n    _private__createPriceScale(id, options) {\n        const actualOptions = Object.assign({\n            visible: true,\n            autoScale: true\n        }, clone(options));\n        const priceScale = new PriceScale(id, actualOptions, this._private__model._internal_options().layout, this._private__model._internal_options().localization);\n        priceScale._internal_setHeight(this._internal_height());\n        return priceScale;\n    }\n}\nclass FormattedLabelsCache {\n    constructor(format, horzScaleBehavior, size = 50){\n        this._private__actualSize = 0;\n        this._private__usageTick = 1;\n        this._private__oldestTick = 1;\n        this._private__cache = new Map();\n        this._private__tick2Labels = new Map();\n        this._private__format = format;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__maxSize = size;\n    }\n    _internal_format(tickMark) {\n        const time = tickMark.time;\n        const cacheKey = this._private__horzScaleBehavior.cacheKey(time);\n        const tick = this._private__cache.get(cacheKey);\n        if (tick !== undefined) {\n            return tick._internal_string;\n        }\n        if (this._private__actualSize === this._private__maxSize) {\n            const oldestValue = this._private__tick2Labels.get(this._private__oldestTick);\n            this._private__tick2Labels.delete(this._private__oldestTick);\n            this._private__cache.delete(ensureDefined(oldestValue));\n            this._private__oldestTick++;\n            this._private__actualSize--;\n        }\n        const str = this._private__format(tickMark);\n        this._private__cache.set(cacheKey, {\n            _internal_string: str,\n            _internal_tick: this._private__usageTick\n        });\n        this._private__tick2Labels.set(this._private__usageTick, cacheKey);\n        this._private__actualSize++;\n        this._private__usageTick++;\n        return str;\n    }\n}\nclass RangeImpl {\n    constructor(left, right){\n        assert(left <= right, \"right should be >= left\");\n        this._private__left = left;\n        this._private__right = right;\n    }\n    _internal_left() {\n        return this._private__left;\n    }\n    _internal_right() {\n        return this._private__right;\n    }\n    _internal_count() {\n        return this._private__right - this._private__left + 1;\n    }\n    _internal_contains(index) {\n        return this._private__left <= index && index <= this._private__right;\n    }\n    _internal_equals(other) {\n        return this._private__left === other._internal_left() && this._private__right === other._internal_right();\n    }\n}\nfunction areRangesEqual(first, second) {\n    if (first === null || second === null) {\n        return first === second;\n    }\n    return first._internal_equals(second);\n}\nclass TickMarks {\n    constructor(){\n        this._private__marksByWeight = new Map();\n        this._private__cache = null;\n        this._private__uniformDistribution = false;\n    }\n    _internal_setUniformDistribution(val) {\n        this._private__uniformDistribution = val;\n        this._private__cache = null;\n    }\n    _internal_setTimeScalePoints(newPoints, firstChangedPointIndex) {\n        this._private__removeMarksSinceIndex(firstChangedPointIndex);\n        this._private__cache = null;\n        for(let index = firstChangedPointIndex; index < newPoints.length; ++index){\n            const point = newPoints[index];\n            let marksForWeight = this._private__marksByWeight.get(point.timeWeight);\n            if (marksForWeight === undefined) {\n                marksForWeight = [];\n                this._private__marksByWeight.set(point.timeWeight, marksForWeight);\n            }\n            marksForWeight.push({\n                index: index,\n                time: point.time,\n                weight: point.timeWeight,\n                originalTime: point.originalTime\n            });\n        }\n    }\n    _internal_build(spacing, maxWidth) {\n        const maxIndexesPerMark = Math.ceil(maxWidth / spacing);\n        if (this._private__cache === null || this._private__cache._internal_maxIndexesPerMark !== maxIndexesPerMark) {\n            this._private__cache = {\n                _internal_marks: this._private__buildMarksImpl(maxIndexesPerMark),\n                _internal_maxIndexesPerMark: maxIndexesPerMark\n            };\n        }\n        return this._private__cache._internal_marks;\n    }\n    _private__removeMarksSinceIndex(sinceIndex) {\n        if (sinceIndex === 0) {\n            this._private__marksByWeight.clear();\n            return;\n        }\n        const weightsToClear = [];\n        this._private__marksByWeight.forEach((marks, timeWeight)=>{\n            if (sinceIndex <= marks[0].index) {\n                weightsToClear.push(timeWeight);\n            } else {\n                marks.splice(lowerBound(marks, sinceIndex, (tm)=>tm.index < sinceIndex), Infinity);\n            }\n        });\n        for (const weight of weightsToClear){\n            this._private__marksByWeight.delete(weight);\n        }\n    }\n    _private__buildMarksImpl(maxIndexesPerMark) {\n        let marks = [];\n        for (const weight of Array.from(this._private__marksByWeight.keys()).sort((a, b)=>b - a)){\n            if (!this._private__marksByWeight.get(weight)) {\n                continue;\n            }\n            // Built tickMarks are now prevMarks, and marks it as new array\n            const prevMarks = marks;\n            marks = [];\n            const prevMarksLength = prevMarks.length;\n            let prevMarksPointer = 0;\n            const currentWeight = ensureDefined(this._private__marksByWeight.get(weight));\n            const currentWeightLength = currentWeight.length;\n            let rightIndex = Infinity;\n            let leftIndex = -Infinity;\n            for(let i = 0; i < currentWeightLength; i++){\n                const mark = currentWeight[i];\n                const currentIndex = mark.index;\n                // Determine indexes with which current index will be compared\n                // All marks to the right is moved to new array\n                while(prevMarksPointer < prevMarksLength){\n                    const lastMark = prevMarks[prevMarksPointer];\n                    const lastIndex = lastMark.index;\n                    if (lastIndex < currentIndex) {\n                        prevMarksPointer++;\n                        marks.push(lastMark);\n                        leftIndex = lastIndex;\n                        rightIndex = Infinity;\n                    } else {\n                        rightIndex = lastIndex;\n                        break;\n                    }\n                }\n                if (rightIndex - currentIndex >= maxIndexesPerMark && currentIndex - leftIndex >= maxIndexesPerMark) {\n                    // TickMark fits. Place it into new array\n                    marks.push(mark);\n                    leftIndex = currentIndex;\n                } else {\n                    if (this._private__uniformDistribution) {\n                        return prevMarks;\n                    }\n                }\n            }\n            // Place all unused tickMarks into new array;\n            for(; prevMarksPointer < prevMarksLength; prevMarksPointer++){\n                marks.push(prevMarks[prevMarksPointer]);\n            }\n        }\n        return marks;\n    }\n}\nclass TimeScaleVisibleRange {\n    constructor(logicalRange){\n        this._private__logicalRange = logicalRange;\n    }\n    _internal_strictRange() {\n        if (this._private__logicalRange === null) {\n            return null;\n        }\n        return new RangeImpl(Math.floor(this._private__logicalRange._internal_left()), Math.ceil(this._private__logicalRange._internal_right()));\n    }\n    _internal_logicalRange() {\n        return this._private__logicalRange;\n    }\n    static _internal_invalid() {\n        return new TimeScaleVisibleRange(null);\n    }\n}\nconst defaultTickMarkMaxCharacterLength = 8;\nfunction markWithGreaterWeight(a, b) {\n    return a.weight > b.weight ? a : b;\n}\nclass TimeScale {\n    constructor(model, options, localizationOptions, horzScaleBehavior){\n        this._private__width = 0;\n        this._private__baseIndexOrNull = null;\n        this._private__points = [];\n        this._private__scrollStartPoint = null;\n        this._private__scaleStartPoint = null;\n        this._private__tickMarks = new TickMarks();\n        this._private__formattedByWeight = new Map();\n        this._private__visibleRange = TimeScaleVisibleRange._internal_invalid();\n        this._private__visibleRangeInvalidated = true;\n        this._private__visibleBarsChanged = new Delegate();\n        this._private__logicalRangeChanged = new Delegate();\n        this._private__optionsApplied = new Delegate();\n        this._private__commonTransitionStartState = null;\n        this._private__timeMarksCache = null;\n        this._private__labels = [];\n        this._private__options = options;\n        this._private__localizationOptions = localizationOptions;\n        this._private__rightOffset = options.rightOffset;\n        this._private__barSpacing = options.barSpacing;\n        this._private__model = model;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__updateDateTimeFormatter();\n        this._private__tickMarks._internal_setUniformDistribution(options.uniformDistribution);\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyLocalizationOptions(localizationOptions) {\n        merge(this._private__localizationOptions, localizationOptions);\n        this._private__invalidateTickMarks();\n        this._private__updateDateTimeFormatter();\n    }\n    _internal_applyOptions(options, localizationOptions) {\n        var _a;\n        merge(this._private__options, options);\n        if (this._private__options.fixLeftEdge) {\n            this._private__doFixLeftEdge();\n        }\n        if (this._private__options.fixRightEdge) {\n            this._private__doFixRightEdge();\n        }\n        // note that bar spacing should be applied before right offset\n        // because right offset depends on bar spacing\n        if (options.barSpacing !== undefined) {\n            this._private__model._internal_setBarSpacing(options.barSpacing);\n        }\n        if (options.rightOffset !== undefined) {\n            this._private__model._internal_setRightOffset(options.rightOffset);\n        }\n        if (options.minBarSpacing !== undefined) {\n            // yes, if we apply min bar spacing then we need to correct bar spacing\n            // the easiest way is to apply it once again\n            this._private__model._internal_setBarSpacing((_a = options.barSpacing) !== null && _a !== void 0 ? _a : this._private__barSpacing);\n        }\n        this._private__invalidateTickMarks();\n        this._private__updateDateTimeFormatter();\n        this._private__optionsApplied._internal_fire();\n    }\n    _internal_indexToTime(index) {\n        var _a, _b;\n        return (_b = (_a = this._private__points[index]) === null || _a === void 0 ? void 0 : _a.time) !== null && _b !== void 0 ? _b : null;\n    }\n    _internal_indexToTimeScalePoint(index) {\n        var _a;\n        return (_a = this._private__points[index]) !== null && _a !== void 0 ? _a : null;\n    }\n    _internal_timeToIndex(time, findNearest) {\n        if (this._private__points.length < 1) {\n            // no time points available\n            return null;\n        }\n        if (this._private__horzScaleBehavior.key(time) > this._private__horzScaleBehavior.key(this._private__points[this._private__points.length - 1].time)) {\n            // special case\n            return findNearest ? this._private__points.length - 1 : null;\n        }\n        const index = lowerBound(this._private__points, this._private__horzScaleBehavior.key(time), (a, b)=>this._private__horzScaleBehavior.key(a.time) < b);\n        if (this._private__horzScaleBehavior.key(time) < this._private__horzScaleBehavior.key(this._private__points[index].time)) {\n            return findNearest ? index : null;\n        }\n        return index;\n    }\n    _internal_isEmpty() {\n        return this._private__width === 0 || this._private__points.length === 0 || this._private__baseIndexOrNull === null;\n    }\n    _internal_hasPoints() {\n        return this._private__points.length > 0;\n    }\n    // strict range: integer indices of the bars in the visible range rounded in more wide direction\n    _internal_visibleStrictRange() {\n        this._private__updateVisibleRange();\n        return this._private__visibleRange._internal_strictRange();\n    }\n    _internal_visibleLogicalRange() {\n        this._private__updateVisibleRange();\n        return this._private__visibleRange._internal_logicalRange();\n    }\n    _internal_visibleTimeRange() {\n        const visibleBars = this._internal_visibleStrictRange();\n        if (visibleBars === null) {\n            return null;\n        }\n        const range = {\n            from: visibleBars._internal_left(),\n            to: visibleBars._internal_right()\n        };\n        return this._internal_timeRangeForLogicalRange(range);\n    }\n    _internal_timeRangeForLogicalRange(range) {\n        const from = Math.round(range.from);\n        const to = Math.round(range.to);\n        const firstIndex = ensureNotNull(this._private__firstIndex());\n        const lastIndex = ensureNotNull(this._private__lastIndex());\n        return {\n            from: ensureNotNull(this._internal_indexToTimeScalePoint(Math.max(firstIndex, from))),\n            to: ensureNotNull(this._internal_indexToTimeScalePoint(Math.min(lastIndex, to)))\n        };\n    }\n    _internal_logicalRangeForTimeRange(range) {\n        return {\n            from: ensureNotNull(this._internal_timeToIndex(range.from, true)),\n            to: ensureNotNull(this._internal_timeToIndex(range.to, true))\n        };\n    }\n    _internal_width() {\n        return this._private__width;\n    }\n    _internal_setWidth(newWidth) {\n        if (!isFinite(newWidth) || newWidth <= 0) {\n            return;\n        }\n        if (this._private__width === newWidth) {\n            return;\n        }\n        // when we change the width and we need to correct visible range because of fixing left edge\n        // we need to check the previous visible range rather than the new one\n        // because it might be updated by changing width, bar spacing, etc\n        // but we need to try to keep the same range\n        const previousVisibleRange = this._internal_visibleLogicalRange();\n        const oldWidth = this._private__width;\n        this._private__width = newWidth;\n        this._private__visibleRangeInvalidated = true;\n        if (this._private__options.lockVisibleTimeRangeOnResize && oldWidth !== 0) {\n            // recalculate bar spacing\n            const newBarSpacing = this._private__barSpacing * newWidth / oldWidth;\n            this._private__barSpacing = newBarSpacing;\n        }\n        // if time scale is scrolled to the end of data and we have fixed right edge\n        // keep left edge instead of right\n        // we need it to avoid \"shaking\" if the last bar visibility affects time scale width\n        if (this._private__options.fixLeftEdge) {\n            // note that logical left range means not the middle of a bar (it's the left border)\n            if (previousVisibleRange !== null && previousVisibleRange._internal_left() <= 0) {\n                const delta = oldWidth - newWidth;\n                // reduce  _rightOffset means move right\n                // we could move more than required - this will be fixed by _correctOffset()\n                this._private__rightOffset -= Math.round(delta / this._private__barSpacing) + 1;\n                this._private__visibleRangeInvalidated = true;\n            }\n        }\n        // updating bar spacing should be first because right offset depends on it\n        this._private__correctBarSpacing();\n        this._private__correctOffset();\n    }\n    _internal_indexToCoordinate(index) {\n        if (this._internal_isEmpty() || !isInteger(index)) {\n            return 0;\n        }\n        const baseIndex = this._internal_baseIndex();\n        const deltaFromRight = baseIndex + this._private__rightOffset - index;\n        const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;\n        return coordinate;\n    }\n    _internal_indexesToCoordinates(points, visibleRange) {\n        const baseIndex = this._internal_baseIndex();\n        const indexFrom = visibleRange === undefined ? 0 : visibleRange.from;\n        const indexTo = visibleRange === undefined ? points.length : visibleRange.to;\n        for(let i = indexFrom; i < indexTo; i++){\n            const index = points[i]._internal_time;\n            const deltaFromRight = baseIndex + this._private__rightOffset - index;\n            const coordinate = this._private__width - (deltaFromRight + 0.5) * this._private__barSpacing - 1;\n            points[i]._internal_x = coordinate;\n        }\n    }\n    _internal_coordinateToIndex(x) {\n        return Math.ceil(this._private__coordinateToFloatIndex(x));\n    }\n    _internal_setRightOffset(offset) {\n        this._private__visibleRangeInvalidated = true;\n        this._private__rightOffset = offset;\n        this._private__correctOffset();\n        this._private__model._internal_recalculateAllPanes();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_barSpacing() {\n        return this._private__barSpacing;\n    }\n    _internal_setBarSpacing(newBarSpacing) {\n        this._private__setBarSpacing(newBarSpacing);\n        // do not allow scroll out of visible bars\n        this._private__correctOffset();\n        this._private__model._internal_recalculateAllPanes();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_rightOffset() {\n        return this._private__rightOffset;\n    }\n    // eslint-disable-next-line complexity\n    _internal_marks() {\n        if (this._internal_isEmpty()) {\n            return null;\n        }\n        if (this._private__timeMarksCache !== null) {\n            return this._private__timeMarksCache;\n        }\n        const spacing = this._private__barSpacing;\n        const fontSize = this._private__model._internal_options().layout.fontSize;\n        const pixelsPer8Characters = (fontSize + 4) * 5;\n        const pixelsPerCharacter = pixelsPer8Characters / defaultTickMarkMaxCharacterLength;\n        const maxLabelWidth = pixelsPerCharacter * (this._private__options.tickMarkMaxCharacterLength || defaultTickMarkMaxCharacterLength);\n        const indexPerLabel = Math.round(maxLabelWidth / spacing);\n        const visibleBars = ensureNotNull(this._internal_visibleStrictRange());\n        const firstBar = Math.max(visibleBars._internal_left(), visibleBars._internal_left() - indexPerLabel);\n        const lastBar = Math.max(visibleBars._internal_right(), visibleBars._internal_right() - indexPerLabel);\n        const items = this._private__tickMarks._internal_build(spacing, maxLabelWidth);\n        // according to indexPerLabel value this value means \"earliest index which _might be_ used as the second label on time scale\"\n        const earliestIndexOfSecondLabel = this._private__firstIndex() + indexPerLabel;\n        // according to indexPerLabel value this value means \"earliest index which _might be_ used as the second last label on time scale\"\n        const indexOfSecondLastLabel = this._private__lastIndex() - indexPerLabel;\n        const isAllScalingAndScrollingDisabled = this._private__isAllScalingAndScrollingDisabled();\n        const isLeftEdgeFixed = this._private__options.fixLeftEdge || isAllScalingAndScrollingDisabled;\n        const isRightEdgeFixed = this._private__options.fixRightEdge || isAllScalingAndScrollingDisabled;\n        let targetIndex = 0;\n        for (const tm of items){\n            if (!(firstBar <= tm.index && tm.index <= lastBar)) {\n                continue;\n            }\n            let label;\n            if (targetIndex < this._private__labels.length) {\n                label = this._private__labels[targetIndex];\n                label.coord = this._internal_indexToCoordinate(tm.index);\n                label.label = this._private__formatLabel(tm);\n                label.weight = tm.weight;\n            } else {\n                label = {\n                    needAlignCoordinate: false,\n                    coord: this._internal_indexToCoordinate(tm.index),\n                    label: this._private__formatLabel(tm),\n                    weight: tm.weight\n                };\n                this._private__labels.push(label);\n            }\n            if (this._private__barSpacing > maxLabelWidth / 2 && !isAllScalingAndScrollingDisabled) {\n                // if there is enough space then let's show all tick marks as usual\n                label.needAlignCoordinate = false;\n            } else {\n                // if a user is able to scroll after a tick mark then show it as usual, otherwise the coordinate might be aligned\n                // if the index is for the second (last) label or later (earlier) then most likely this label might be displayed without correcting the coordinate\n                label.needAlignCoordinate = isLeftEdgeFixed && tm.index <= earliestIndexOfSecondLabel || isRightEdgeFixed && tm.index >= indexOfSecondLastLabel;\n            }\n            targetIndex++;\n        }\n        this._private__labels.length = targetIndex;\n        this._private__timeMarksCache = this._private__labels;\n        return this._private__labels;\n    }\n    _internal_restoreDefault() {\n        this._private__visibleRangeInvalidated = true;\n        this._internal_setBarSpacing(this._private__options.barSpacing);\n        this._internal_setRightOffset(this._private__options.rightOffset);\n    }\n    _internal_setBaseIndex(baseIndex) {\n        this._private__visibleRangeInvalidated = true;\n        this._private__baseIndexOrNull = baseIndex;\n        this._private__correctOffset();\n        this._private__doFixLeftEdge();\n    }\n    /**\n     * Zoom in/out the scale around a `zoomPoint` on `scale` value.\n     *\n     * @param zoomPoint - X coordinate of the point to apply the zoom.\n     * If `rightBarStaysOnScroll` option is disabled, then will be used to restore right offset.\n     * @param scale - Zoom value (in 1/10 parts of current bar spacing).\n     * Negative value means zoom out, positive - zoom in.\n     */ _internal_zoom(zoomPoint, scale) {\n        const floatIndexAtZoomPoint = this._private__coordinateToFloatIndex(zoomPoint);\n        const barSpacing = this._internal_barSpacing();\n        const newBarSpacing = barSpacing + scale * (barSpacing / 10);\n        // zoom in/out bar spacing\n        this._internal_setBarSpacing(newBarSpacing);\n        if (!this._private__options.rightBarStaysOnScroll) {\n            // and then correct right offset to move index under zoomPoint back to its coordinate\n            this._internal_setRightOffset(this._internal_rightOffset() + (floatIndexAtZoomPoint - this._private__coordinateToFloatIndex(zoomPoint)));\n        }\n    }\n    _internal_startScale(x) {\n        if (this._private__scrollStartPoint) {\n            this._internal_endScroll();\n        }\n        if (this._private__scaleStartPoint !== null || this._private__commonTransitionStartState !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        this._private__scaleStartPoint = x;\n        this._private__saveCommonTransitionsStartState();\n    }\n    _internal_scaleTo(x) {\n        if (this._private__commonTransitionStartState === null) {\n            return;\n        }\n        const startLengthFromRight = clamp(this._private__width - x, 0, this._private__width);\n        const currentLengthFromRight = clamp(this._private__width - ensureNotNull(this._private__scaleStartPoint), 0, this._private__width);\n        if (startLengthFromRight === 0 || currentLengthFromRight === 0) {\n            return;\n        }\n        this._internal_setBarSpacing(this._private__commonTransitionStartState._internal_barSpacing * startLengthFromRight / currentLengthFromRight);\n    }\n    _internal_endScale() {\n        if (this._private__scaleStartPoint === null) {\n            return;\n        }\n        this._private__scaleStartPoint = null;\n        this._private__clearCommonTransitionsStartState();\n    }\n    _internal_startScroll(x) {\n        if (this._private__scrollStartPoint !== null || this._private__commonTransitionStartState !== null) {\n            return;\n        }\n        if (this._internal_isEmpty()) {\n            return;\n        }\n        this._private__scrollStartPoint = x;\n        this._private__saveCommonTransitionsStartState();\n    }\n    _internal_scrollTo(x) {\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        const shiftInLogical = (this._private__scrollStartPoint - x) / this._internal_barSpacing();\n        this._private__rightOffset = ensureNotNull(this._private__commonTransitionStartState)._internal_rightOffset + shiftInLogical;\n        this._private__visibleRangeInvalidated = true;\n        // do not allow scroll out of visible bars\n        this._private__correctOffset();\n    }\n    _internal_endScroll() {\n        if (this._private__scrollStartPoint === null) {\n            return;\n        }\n        this._private__scrollStartPoint = null;\n        this._private__clearCommonTransitionsStartState();\n    }\n    _internal_scrollToRealTime() {\n        this._internal_scrollToOffsetAnimated(this._private__options.rightOffset);\n    }\n    _internal_scrollToOffsetAnimated(offset, animationDuration = 400 /* Constants.DefaultAnimationDuration */ ) {\n        if (!isFinite(offset)) {\n            throw new RangeError(\"offset is required and must be finite number\");\n        }\n        if (!isFinite(animationDuration) || animationDuration <= 0) {\n            throw new RangeError(\"animationDuration (optional) must be finite positive number\");\n        }\n        const source = this._private__rightOffset;\n        const animationStart = performance.now();\n        this._private__model._internal_setTimeScaleAnimation({\n            _internal_finished: (time)=>(time - animationStart) / animationDuration >= 1,\n            _internal_getPosition: (time)=>{\n                const animationProgress = (time - animationStart) / animationDuration;\n                const finishAnimation = animationProgress >= 1;\n                return finishAnimation ? offset : source + (offset - source) * animationProgress;\n            }\n        });\n    }\n    _internal_update(newPoints, firstChangedPointIndex) {\n        this._private__visibleRangeInvalidated = true;\n        this._private__points = newPoints;\n        this._private__tickMarks._internal_setTimeScalePoints(newPoints, firstChangedPointIndex);\n        this._private__correctOffset();\n    }\n    _internal_visibleBarsChanged() {\n        return this._private__visibleBarsChanged;\n    }\n    _internal_logicalRangeChanged() {\n        return this._private__logicalRangeChanged;\n    }\n    _internal_optionsApplied() {\n        return this._private__optionsApplied;\n    }\n    _internal_baseIndex() {\n        // null is used to known that baseIndex is not set yet\n        // so in methods which should known whether it is set or not\n        // we should check field `_baseIndexOrNull` instead of getter `baseIndex()`\n        // see minRightOffset for example\n        return this._private__baseIndexOrNull || 0;\n    }\n    _internal_setVisibleRange(range) {\n        const length = range._internal_count();\n        this._private__setBarSpacing(this._private__width / length);\n        this._private__rightOffset = range._internal_right() - this._internal_baseIndex();\n        this._private__correctOffset();\n        this._private__visibleRangeInvalidated = true;\n        this._private__model._internal_recalculateAllPanes();\n        this._private__model._internal_lightUpdate();\n    }\n    _internal_fitContent() {\n        const first = this._private__firstIndex();\n        const last = this._private__lastIndex();\n        if (first === null || last === null) {\n            return;\n        }\n        this._internal_setVisibleRange(new RangeImpl(first, last + this._private__options.rightOffset));\n    }\n    _internal_setLogicalRange(range) {\n        const barRange = new RangeImpl(range.from, range.to);\n        this._internal_setVisibleRange(barRange);\n    }\n    _internal_formatDateTime(timeScalePoint) {\n        if (this._private__localizationOptions.timeFormatter !== undefined) {\n            return this._private__localizationOptions.timeFormatter(timeScalePoint.originalTime);\n        }\n        return this._private__horzScaleBehavior.formatHorzItem(timeScalePoint.time);\n    }\n    _private__isAllScalingAndScrollingDisabled() {\n        const { handleScroll, handleScale } = this._private__model._internal_options();\n        return !handleScroll.horzTouchDrag && !handleScroll.mouseWheel && !handleScroll.pressedMouseMove && !handleScroll.vertTouchDrag && !handleScale.axisDoubleClickReset.time && !handleScale.axisPressedMouseMove.time && !handleScale.mouseWheel && !handleScale.pinch;\n    }\n    _private__firstIndex() {\n        return this._private__points.length === 0 ? null : 0;\n    }\n    _private__lastIndex() {\n        return this._private__points.length === 0 ? null : this._private__points.length - 1;\n    }\n    _private__rightOffsetForCoordinate(x) {\n        return (this._private__width - 1 - x) / this._private__barSpacing;\n    }\n    _private__coordinateToFloatIndex(x) {\n        const deltaFromRight = this._private__rightOffsetForCoordinate(x);\n        const baseIndex = this._internal_baseIndex();\n        const index = baseIndex + this._private__rightOffset - deltaFromRight;\n        // JavaScript uses very strange rounding\n        // we need rounding to avoid problems with calculation errors\n        return Math.round(index * 1000000) / 1000000;\n    }\n    _private__setBarSpacing(newBarSpacing) {\n        const oldBarSpacing = this._private__barSpacing;\n        this._private__barSpacing = newBarSpacing;\n        this._private__correctBarSpacing();\n        // this._barSpacing might be changed in _correctBarSpacing\n        if (oldBarSpacing !== this._private__barSpacing) {\n            this._private__visibleRangeInvalidated = true;\n            this._private__resetTimeMarksCache();\n        }\n    }\n    _private__updateVisibleRange() {\n        if (!this._private__visibleRangeInvalidated) {\n            return;\n        }\n        this._private__visibleRangeInvalidated = false;\n        if (this._internal_isEmpty()) {\n            this._private__setVisibleRange(TimeScaleVisibleRange._internal_invalid());\n            return;\n        }\n        const baseIndex = this._internal_baseIndex();\n        const newBarsLength = this._private__width / this._private__barSpacing;\n        const rightBorder = this._private__rightOffset + baseIndex;\n        const leftBorder = rightBorder - newBarsLength + 1;\n        const logicalRange = new RangeImpl(leftBorder, rightBorder);\n        this._private__setVisibleRange(new TimeScaleVisibleRange(logicalRange));\n    }\n    _private__correctBarSpacing() {\n        const minBarSpacing = this._private__minBarSpacing();\n        if (this._private__barSpacing < minBarSpacing) {\n            this._private__barSpacing = minBarSpacing;\n            this._private__visibleRangeInvalidated = true;\n        }\n        if (this._private__width !== 0) {\n            // make sure that this (1 / Constants.MinVisibleBarsCount) >= coeff in max bar spacing (it's 0.5 here)\n            const maxBarSpacing = this._private__width * 0.5;\n            if (this._private__barSpacing > maxBarSpacing) {\n                this._private__barSpacing = maxBarSpacing;\n                this._private__visibleRangeInvalidated = true;\n            }\n        }\n    }\n    _private__minBarSpacing() {\n        // if both options are enabled then limit bar spacing so that zooming-out is not possible\n        // if it would cause either the first or last points to move too far from an edge\n        if (this._private__options.fixLeftEdge && this._private__options.fixRightEdge && this._private__points.length !== 0) {\n            return this._private__width / this._private__points.length;\n        }\n        return this._private__options.minBarSpacing;\n    }\n    _private__correctOffset() {\n        // block scrolling of to past\n        const minRightOffset = this._private__minRightOffset();\n        if (minRightOffset !== null && this._private__rightOffset < minRightOffset) {\n            this._private__rightOffset = minRightOffset;\n            this._private__visibleRangeInvalidated = true;\n        }\n        // block scrolling of to future\n        const maxRightOffset = this._private__maxRightOffset();\n        if (this._private__rightOffset > maxRightOffset) {\n            this._private__rightOffset = maxRightOffset;\n            this._private__visibleRangeInvalidated = true;\n        }\n    }\n    _private__minRightOffset() {\n        const firstIndex = this._private__firstIndex();\n        const baseIndex = this._private__baseIndexOrNull;\n        if (firstIndex === null || baseIndex === null) {\n            return null;\n        }\n        const barsEstimation = this._private__options.fixLeftEdge ? this._private__width / this._private__barSpacing : Math.min(2 /* Constants.MinVisibleBarsCount */ , this._private__points.length);\n        return firstIndex - baseIndex - 1 + barsEstimation;\n    }\n    _private__maxRightOffset() {\n        return this._private__options.fixRightEdge ? 0 : this._private__width / this._private__barSpacing - Math.min(2 /* Constants.MinVisibleBarsCount */ , this._private__points.length);\n    }\n    _private__saveCommonTransitionsStartState() {\n        this._private__commonTransitionStartState = {\n            _internal_barSpacing: this._internal_barSpacing(),\n            _internal_rightOffset: this._internal_rightOffset()\n        };\n    }\n    _private__clearCommonTransitionsStartState() {\n        this._private__commonTransitionStartState = null;\n    }\n    _private__formatLabel(tickMark) {\n        let formatter = this._private__formattedByWeight.get(tickMark.weight);\n        if (formatter === undefined) {\n            formatter = new FormattedLabelsCache((mark)=>{\n                return this._private__formatLabelImpl(mark);\n            }, this._private__horzScaleBehavior);\n            this._private__formattedByWeight.set(tickMark.weight, formatter);\n        }\n        return formatter._internal_format(tickMark);\n    }\n    _private__formatLabelImpl(tickMark) {\n        return this._private__horzScaleBehavior.formatTickmark(tickMark, this._private__localizationOptions);\n    }\n    _private__setVisibleRange(newVisibleRange) {\n        const oldVisibleRange = this._private__visibleRange;\n        this._private__visibleRange = newVisibleRange;\n        if (!areRangesEqual(oldVisibleRange._internal_strictRange(), this._private__visibleRange._internal_strictRange())) {\n            this._private__visibleBarsChanged._internal_fire();\n        }\n        if (!areRangesEqual(oldVisibleRange._internal_logicalRange(), this._private__visibleRange._internal_logicalRange())) {\n            this._private__logicalRangeChanged._internal_fire();\n        }\n        // TODO: reset only coords in case when this._visibleBars has not been changed\n        this._private__resetTimeMarksCache();\n    }\n    _private__resetTimeMarksCache() {\n        this._private__timeMarksCache = null;\n    }\n    _private__invalidateTickMarks() {\n        this._private__resetTimeMarksCache();\n        this._private__formattedByWeight.clear();\n    }\n    _private__updateDateTimeFormatter() {\n        this._private__horzScaleBehavior.updateFormatter(this._private__localizationOptions);\n    }\n    _private__doFixLeftEdge() {\n        if (!this._private__options.fixLeftEdge) {\n            return;\n        }\n        const firstIndex = this._private__firstIndex();\n        if (firstIndex === null) {\n            return;\n        }\n        const visibleRange = this._internal_visibleStrictRange();\n        if (visibleRange === null) {\n            return;\n        }\n        const delta = visibleRange._internal_left() - firstIndex;\n        if (delta < 0) {\n            const leftEdgeOffset = this._private__rightOffset - delta - 1;\n            this._internal_setRightOffset(leftEdgeOffset);\n        }\n        this._private__correctBarSpacing();\n    }\n    _private__doFixRightEdge() {\n        this._private__correctOffset();\n        this._private__correctBarSpacing();\n    }\n}\nclass MediaCoordinatesPaneRenderer {\n    _internal_draw(target, isHovered, hitTestData) {\n        target.useMediaCoordinateSpace((scope)=>this._internal__drawImpl(scope, isHovered, hitTestData));\n    }\n    _internal_drawBackground(target, isHovered, hitTestData) {\n        target.useMediaCoordinateSpace((scope)=>this._internal__drawBackgroundImpl(scope, isHovered, hitTestData));\n    }\n    _internal__drawBackgroundImpl(renderingScope, isHovered, hitTestData) {}\n}\nclass WatermarkRenderer extends MediaCoordinatesPaneRenderer {\n    constructor(data){\n        super();\n        this._private__metricsCache = new Map();\n        this._private__data = data;\n    }\n    _internal__drawImpl(renderingScope) {}\n    _internal__drawBackgroundImpl(renderingScope) {\n        if (!this._private__data._internal_visible) {\n            return;\n        }\n        const { context: ctx, mediaSize } = renderingScope;\n        let textHeight = 0;\n        for (const line of this._private__data._internal_lines){\n            if (line._internal_text.length === 0) {\n                continue;\n            }\n            ctx.font = line._internal_font;\n            const textWidth = this._private__metrics(ctx, line._internal_text);\n            if (textWidth > mediaSize.width) {\n                line._internal_zoom = mediaSize.width / textWidth;\n            } else {\n                line._internal_zoom = 1;\n            }\n            textHeight += line._internal_lineHeight * line._internal_zoom;\n        }\n        let vertOffset = 0;\n        switch(this._private__data._internal_vertAlign){\n            case \"top\":\n                vertOffset = 0;\n                break;\n            case \"center\":\n                vertOffset = Math.max((mediaSize.height - textHeight) / 2, 0);\n                break;\n            case \"bottom\":\n                vertOffset = Math.max(mediaSize.height - textHeight, 0);\n                break;\n        }\n        ctx.fillStyle = this._private__data._internal_color;\n        for (const line of this._private__data._internal_lines){\n            ctx.save();\n            let horzOffset = 0;\n            switch(this._private__data._internal_horzAlign){\n                case \"left\":\n                    ctx.textAlign = \"left\";\n                    horzOffset = line._internal_lineHeight / 2;\n                    break;\n                case \"center\":\n                    ctx.textAlign = \"center\";\n                    horzOffset = mediaSize.width / 2;\n                    break;\n                case \"right\":\n                    ctx.textAlign = \"right\";\n                    horzOffset = mediaSize.width - 1 - line._internal_lineHeight / 2;\n                    break;\n            }\n            ctx.translate(horzOffset, vertOffset);\n            ctx.textBaseline = \"top\";\n            ctx.font = line._internal_font;\n            ctx.scale(line._internal_zoom, line._internal_zoom);\n            ctx.fillText(line._internal_text, 0, line._internal_vertOffset);\n            ctx.restore();\n            vertOffset += line._internal_lineHeight * line._internal_zoom;\n        }\n    }\n    _private__metrics(ctx, text) {\n        const fontCache = this._private__fontCache(ctx.font);\n        let result = fontCache.get(text);\n        if (result === undefined) {\n            result = ctx.measureText(text).width;\n            fontCache.set(text, result);\n        }\n        return result;\n    }\n    _private__fontCache(font) {\n        let fontCache = this._private__metricsCache.get(font);\n        if (fontCache === undefined) {\n            fontCache = new Map();\n            this._private__metricsCache.set(font, fontCache);\n        }\n        return fontCache;\n    }\n}\nclass WatermarkPaneView {\n    constructor(source){\n        this._private__invalidated = true;\n        this._private__rendererData = {\n            _internal_visible: false,\n            _internal_color: \"\",\n            _internal_lines: [],\n            _internal_vertAlign: \"center\",\n            _internal_horzAlign: \"center\"\n        };\n        this._private__renderer = new WatermarkRenderer(this._private__rendererData);\n        this._private__source = source;\n    }\n    _internal_update() {\n        this._private__invalidated = true;\n    }\n    _internal_renderer() {\n        if (this._private__invalidated) {\n            this._private__updateImpl();\n            this._private__invalidated = false;\n        }\n        return this._private__renderer;\n    }\n    _private__updateImpl() {\n        const options = this._private__source._internal_options();\n        const data = this._private__rendererData;\n        data._internal_visible = options.visible;\n        if (!data._internal_visible) {\n            return;\n        }\n        data._internal_color = options.color;\n        data._internal_horzAlign = options.horzAlign;\n        data._internal_vertAlign = options.vertAlign;\n        data._internal_lines = [\n            {\n                _internal_text: options.text,\n                _internal_font: makeFont(options.fontSize, options.fontFamily, options.fontStyle),\n                _internal_lineHeight: options.fontSize * 1.2,\n                _internal_vertOffset: 0,\n                _internal_zoom: 0\n            }\n        ];\n    }\n}\nclass Watermark extends DataSource {\n    constructor(model, options){\n        super();\n        this._private__options = options;\n        this._private__paneView = new WatermarkPaneView(this);\n    }\n    _internal_priceAxisViews() {\n        return [];\n    }\n    _internal_paneViews() {\n        return [\n            this._private__paneView\n        ];\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_updateAllViews() {\n        this._private__paneView._internal_update();\n    }\n}\n/// <reference types=\"_build-time-constants\" />\n/**\n * Determine how to exit the tracking mode.\n *\n * By default, mobile users will long press to deactivate the scroll and have the ability to check values and dates.\n * Another press is required to activate the scroll, be able to move left/right, zoom, etc.\n */ var TrackingModeExitMode;\n(function(TrackingModeExitMode) {\n    /**\n     * Tracking Mode will be deactivated on touch end event.\n     */ TrackingModeExitMode[TrackingModeExitMode[\"OnTouchEnd\"] = 0] = \"OnTouchEnd\";\n    /**\n     * Tracking Mode will be deactivated on the next tap event.\n     */ TrackingModeExitMode[TrackingModeExitMode[\"OnNextTap\"] = 1] = \"OnNextTap\";\n})(TrackingModeExitMode || (TrackingModeExitMode = {}));\nclass ChartModel {\n    constructor(invalidateHandler, options, horzScaleBehavior){\n        this._private__panes = [];\n        this._private__serieses = [];\n        this._private__width = 0;\n        this._private__hoveredSource = null;\n        this._private__priceScalesOptionsChanged = new Delegate();\n        this._private__crosshairMoved = new Delegate();\n        this._private__gradientColorsCache = null;\n        this._private__invalidateHandler = invalidateHandler;\n        this._private__options = options;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__rendererOptionsProvider = new PriceAxisRendererOptionsProvider(this);\n        this._private__timeScale = new TimeScale(this, options.timeScale, this._private__options.localization, horzScaleBehavior);\n        this._private__crosshair = new Crosshair(this, options.crosshair);\n        this._private__magnet = new Magnet(options.crosshair);\n        this._private__watermark = new Watermark(this, options.watermark);\n        this._internal_createPane();\n        this._private__panes[0]._internal_setStretchFactor(DEFAULT_STRETCH_FACTOR * 2);\n        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */ );\n        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */ );\n    }\n    _internal_fullUpdate() {\n        this._private__invalidate(InvalidateMask._internal_full());\n    }\n    _internal_lightUpdate() {\n        this._private__invalidate(InvalidateMask._internal_light());\n    }\n    _internal_cursorUpdate() {\n        this._private__invalidate(new InvalidateMask(1 /* InvalidationLevel.Cursor */ ));\n    }\n    _internal_updateSource(source) {\n        const inv = this._private__invalidationMaskForSource(source);\n        this._private__invalidate(inv);\n    }\n    _internal_hoveredSource() {\n        return this._private__hoveredSource;\n    }\n    _internal_setHoveredSource(source) {\n        const prevSource = this._private__hoveredSource;\n        this._private__hoveredSource = source;\n        if (prevSource !== null) {\n            this._internal_updateSource(prevSource._internal_source);\n        }\n        if (source !== null) {\n            this._internal_updateSource(source._internal_source);\n        }\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_applyOptions(options) {\n        merge(this._private__options, options);\n        this._private__panes.forEach((p)=>p._internal_applyScaleOptions(options));\n        if (options.timeScale !== undefined) {\n            this._private__timeScale._internal_applyOptions(options.timeScale);\n        }\n        if (options.localization !== undefined) {\n            this._private__timeScale._internal_applyLocalizationOptions(options.localization);\n        }\n        if (options.leftPriceScale || options.rightPriceScale) {\n            this._private__priceScalesOptionsChanged._internal_fire();\n        }\n        this._private__backgroundTopColor = this._private__getBackgroundColor(0 /* BackgroundColorSide.Top */ );\n        this._private__backgroundBottomColor = this._private__getBackgroundColor(1 /* BackgroundColorSide.Bottom */ );\n        this._internal_fullUpdate();\n    }\n    _internal_applyPriceScaleOptions(priceScaleId, options) {\n        if (priceScaleId === \"left\" /* DefaultPriceScaleId.Left */ ) {\n            this._internal_applyOptions({\n                leftPriceScale: options\n            });\n            return;\n        } else if (priceScaleId === \"right\" /* DefaultPriceScaleId.Right */ ) {\n            this._internal_applyOptions({\n                rightPriceScale: options\n            });\n            return;\n        }\n        const res = this._internal_findPriceScale(priceScaleId);\n        if (res === null) {\n            {\n                throw new Error(`Trying to apply price scale options with incorrect ID: ${priceScaleId}`);\n            }\n        }\n        res._internal_priceScale._internal_applyOptions(options);\n        this._private__priceScalesOptionsChanged._internal_fire();\n    }\n    _internal_findPriceScale(priceScaleId) {\n        for (const pane of this._private__panes){\n            const priceScale = pane._internal_priceScaleById(priceScaleId);\n            if (priceScale !== null) {\n                return {\n                    _internal_pane: pane,\n                    _internal_priceScale: priceScale\n                };\n            }\n        }\n        return null;\n    }\n    _internal_timeScale() {\n        return this._private__timeScale;\n    }\n    _internal_panes() {\n        return this._private__panes;\n    }\n    _internal_watermarkSource() {\n        return this._private__watermark;\n    }\n    _internal_crosshairSource() {\n        return this._private__crosshair;\n    }\n    _internal_crosshairMoved() {\n        return this._private__crosshairMoved;\n    }\n    _internal_setPaneHeight(pane, height) {\n        pane._internal_setHeight(height);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_setWidth(width) {\n        this._private__width = width;\n        this._private__timeScale._internal_setWidth(this._private__width);\n        this._private__panes.forEach((pane)=>pane._internal_setWidth(width));\n        this._internal_recalculateAllPanes();\n    }\n    _internal_createPane(index) {\n        const pane = new Pane(this._private__timeScale, this);\n        if (index !== undefined) {\n            this._private__panes.splice(index, 0, pane);\n        } else {\n            // adding to the end - common case\n            this._private__panes.push(pane);\n        }\n        const actualIndex = index === undefined ? this._private__panes.length - 1 : index;\n        // we always do autoscaling on the creation\n        // if autoscale option is true, it is ok, just recalculate by invalidation mask\n        // if autoscale option is false, autoscale anyway on the first draw\n        // also there is a scenario when autoscale is true in constructor and false later on applyOptions\n        const mask = InvalidateMask._internal_full();\n        mask._internal_invalidatePane(actualIndex, {\n            _internal_level: 0 /* InvalidationLevel.None */ ,\n            _internal_autoScale: true\n        });\n        this._private__invalidate(mask);\n        return pane;\n    }\n    _internal_startScalePrice(pane, priceScale, x) {\n        pane._internal_startScalePrice(priceScale, x);\n    }\n    _internal_scalePriceTo(pane, priceScale, x) {\n        pane._internal_scalePriceTo(priceScale, x);\n        this._internal_updateCrosshair();\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_endScalePrice(pane, priceScale) {\n        pane._internal_endScalePrice(priceScale);\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_startScrollPrice(pane, priceScale, x) {\n        if (priceScale._internal_isAutoScale()) {\n            return;\n        }\n        pane._internal_startScrollPrice(priceScale, x);\n    }\n    _internal_scrollPriceTo(pane, priceScale, x) {\n        if (priceScale._internal_isAutoScale()) {\n            return;\n        }\n        pane._internal_scrollPriceTo(priceScale, x);\n        this._internal_updateCrosshair();\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_endScrollPrice(pane, priceScale) {\n        if (priceScale._internal_isAutoScale()) {\n            return;\n        }\n        pane._internal_endScrollPrice(priceScale);\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_resetPriceScale(pane, priceScale) {\n        pane._internal_resetPriceScale(priceScale);\n        this._private__invalidate(this._private__paneInvalidationMask(pane, 2 /* InvalidationLevel.Light */ ));\n    }\n    _internal_startScaleTime(position) {\n        this._private__timeScale._internal_startScale(position);\n    }\n    /**\n     * Zoom in/out the chart (depends on scale value).\n     *\n     * @param pointX - X coordinate of the point to apply the zoom (the point which should stay on its place)\n     * @param scale - Zoom value. Negative value means zoom out, positive - zoom in.\n     */ _internal_zoomTime(pointX, scale) {\n        const timeScale = this._internal_timeScale();\n        if (timeScale._internal_isEmpty() || scale === 0) {\n            return;\n        }\n        const timeScaleWidth = timeScale._internal_width();\n        pointX = Math.max(1, Math.min(pointX, timeScaleWidth));\n        timeScale._internal_zoom(pointX, scale);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_scrollChart(x) {\n        this._internal_startScrollTime(0);\n        this._internal_scrollTimeTo(x);\n        this._internal_endScrollTime();\n    }\n    _internal_scaleTimeTo(x) {\n        this._private__timeScale._internal_scaleTo(x);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_endScaleTime() {\n        this._private__timeScale._internal_endScale();\n        this._internal_lightUpdate();\n    }\n    _internal_startScrollTime(x) {\n        this._private__timeScale._internal_startScroll(x);\n    }\n    _internal_scrollTimeTo(x) {\n        this._private__timeScale._internal_scrollTo(x);\n        this._internal_recalculateAllPanes();\n    }\n    _internal_endScrollTime() {\n        this._private__timeScale._internal_endScroll();\n        this._internal_lightUpdate();\n    }\n    _internal_serieses() {\n        return this._private__serieses;\n    }\n    _internal_setAndSaveCurrentPosition(x, y, event, pane, skipEvent) {\n        this._private__crosshair._internal_saveOriginCoord(x, y);\n        let price = NaN;\n        let index = this._private__timeScale._internal_coordinateToIndex(x);\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n        if (visibleBars !== null) {\n            index = Math.min(Math.max(visibleBars._internal_left(), index), visibleBars._internal_right());\n        }\n        const priceScale = pane._internal_defaultPriceScale();\n        const firstValue = priceScale._internal_firstValue();\n        if (firstValue !== null) {\n            price = priceScale._internal_coordinateToPrice(y, firstValue);\n        }\n        price = this._private__magnet._internal_align(price, index, pane);\n        this._private__crosshair._internal_setPosition(index, price, pane);\n        this._internal_cursorUpdate();\n        if (!skipEvent) {\n            this._private__crosshairMoved._internal_fire(this._private__crosshair._internal_appliedIndex(), {\n                x,\n                y\n            }, event);\n        }\n    }\n    // A position provided external (not from an internal event listener)\n    _internal_setAndSaveSyntheticPosition(price, horizontalPosition, pane) {\n        const priceScale = pane._internal_defaultPriceScale();\n        const firstValue = priceScale._internal_firstValue();\n        const y = priceScale._internal_priceToCoordinate(price, ensureNotNull(firstValue));\n        const index = this._private__timeScale._internal_timeToIndex(horizontalPosition, true);\n        const x = this._private__timeScale._internal_indexToCoordinate(ensureNotNull(index));\n        this._internal_setAndSaveCurrentPosition(x, y, null, pane, true);\n    }\n    _internal_clearCurrentPosition(skipEvent) {\n        const crosshair = this._internal_crosshairSource();\n        crosshair._internal_clearPosition();\n        this._internal_cursorUpdate();\n        if (!skipEvent) {\n            this._private__crosshairMoved._internal_fire(null, null, null);\n        }\n    }\n    _internal_updateCrosshair() {\n        // apply magnet\n        const pane = this._private__crosshair._internal_pane();\n        if (pane !== null) {\n            const x = this._private__crosshair._internal_originCoordX();\n            const y = this._private__crosshair._internal_originCoordY();\n            this._internal_setAndSaveCurrentPosition(x, y, null, pane);\n        }\n        this._private__crosshair._internal_updateAllViews();\n    }\n    _internal_updateTimeScale(newBaseIndex, newPoints, firstChangedPointIndex) {\n        const oldFirstTime = this._private__timeScale._internal_indexToTime(0);\n        if (newPoints !== undefined && firstChangedPointIndex !== undefined) {\n            this._private__timeScale._internal_update(newPoints, firstChangedPointIndex);\n        }\n        const newFirstTime = this._private__timeScale._internal_indexToTime(0);\n        const currentBaseIndex = this._private__timeScale._internal_baseIndex();\n        const visibleBars = this._private__timeScale._internal_visibleStrictRange();\n        // if time scale cannot return current visible bars range (e.g. time scale has zero-width)\n        // then we do not need to update right offset to shift visible bars range to have the same right offset as we have before new bar\n        // (and actually we cannot)\n        if (visibleBars !== null && oldFirstTime !== null && newFirstTime !== null) {\n            const isLastSeriesBarVisible = visibleBars._internal_contains(currentBaseIndex);\n            const isLeftBarShiftToLeft = this._private__horzScaleBehavior.key(oldFirstTime) > this._private__horzScaleBehavior.key(newFirstTime);\n            const isSeriesPointsAdded = newBaseIndex !== null && newBaseIndex > currentBaseIndex;\n            const isSeriesPointsAddedToRight = isSeriesPointsAdded && !isLeftBarShiftToLeft;\n            const allowShiftWhenReplacingWhitespace = this._private__timeScale._internal_options().allowShiftVisibleRangeOnWhitespaceReplacement;\n            const replacedExistingWhitespace = firstChangedPointIndex === undefined;\n            const needShiftVisibleRangeOnNewBar = isLastSeriesBarVisible && (!replacedExistingWhitespace || allowShiftWhenReplacingWhitespace) && this._private__timeScale._internal_options().shiftVisibleRangeOnNewBar;\n            if (isSeriesPointsAddedToRight && !needShiftVisibleRangeOnNewBar) {\n                const compensationShift = newBaseIndex - currentBaseIndex;\n                this._private__timeScale._internal_setRightOffset(this._private__timeScale._internal_rightOffset() - compensationShift);\n            }\n        }\n        this._private__timeScale._internal_setBaseIndex(newBaseIndex);\n    }\n    _internal_recalculatePane(pane) {\n        if (pane !== null) {\n            pane._internal_recalculate();\n        }\n    }\n    _internal_paneForSource(source) {\n        const pane = this._private__panes.find((p)=>p._internal_orderedSources().includes(source));\n        return pane === undefined ? null : pane;\n    }\n    _internal_recalculateAllPanes() {\n        this._private__watermark._internal_updateAllViews();\n        this._private__panes.forEach((p)=>p._internal_recalculate());\n        this._internal_updateCrosshair();\n    }\n    _internal_destroy() {\n        this._private__panes.forEach((p)=>p._internal_destroy());\n        this._private__panes.length = 0;\n        // to avoid memleaks\n        this._private__options.localization.priceFormatter = undefined;\n        this._private__options.localization.percentageFormatter = undefined;\n        this._private__options.localization.timeFormatter = undefined;\n    }\n    _internal_rendererOptionsProvider() {\n        return this._private__rendererOptionsProvider;\n    }\n    _internal_priceAxisRendererOptions() {\n        return this._private__rendererOptionsProvider._internal_options();\n    }\n    _internal_priceScalesOptionsChanged() {\n        return this._private__priceScalesOptionsChanged;\n    }\n    _internal_createSeries(seriesType, options, customPaneView) {\n        const pane = this._private__panes[0];\n        const series = this._private__createSeries(options, seriesType, pane, customPaneView);\n        this._private__serieses.push(series);\n        if (this._private__serieses.length === 1) {\n            // call fullUpdate to recalculate chart's parts geometry\n            this._internal_fullUpdate();\n        } else {\n            this._internal_lightUpdate();\n        }\n        return series;\n    }\n    _internal_removeSeries(series) {\n        const pane = this._internal_paneForSource(series);\n        const seriesIndex = this._private__serieses.indexOf(series);\n        assert(seriesIndex !== -1, \"Series not found\");\n        this._private__serieses.splice(seriesIndex, 1);\n        ensureNotNull(pane)._internal_removeDataSource(series);\n        if (series._internal_destroy) {\n            series._internal_destroy();\n        }\n    }\n    _internal_moveSeriesToScale(series, targetScaleId) {\n        const pane = ensureNotNull(this._internal_paneForSource(series));\n        pane._internal_removeDataSource(series);\n        // check if targetScaleId exists\n        const target = this._internal_findPriceScale(targetScaleId);\n        if (target === null) {\n            // new scale on the same pane\n            const zOrder = series._internal_zorder();\n            pane._internal_addDataSource(series, targetScaleId, zOrder);\n        } else {\n            // if move to the new scale of the same pane, keep zorder\n            // if move to new pane\n            const zOrder = target._internal_pane === pane ? series._internal_zorder() : undefined;\n            target._internal_pane._internal_addDataSource(series, targetScaleId, zOrder);\n        }\n    }\n    _internal_fitContent() {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setFitContent();\n        this._private__invalidate(mask);\n    }\n    _internal_setTargetLogicalRange(range) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_applyRange(range);\n        this._private__invalidate(mask);\n    }\n    _internal_resetTimeScale() {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_resetTimeScale();\n        this._private__invalidate(mask);\n    }\n    _internal_setBarSpacing(spacing) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setBarSpacing(spacing);\n        this._private__invalidate(mask);\n    }\n    _internal_setRightOffset(offset) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setRightOffset(offset);\n        this._private__invalidate(mask);\n    }\n    _internal_setTimeScaleAnimation(animation) {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_setTimeScaleAnimation(animation);\n        this._private__invalidate(mask);\n    }\n    _internal_stopTimeScaleAnimation() {\n        const mask = InvalidateMask._internal_light();\n        mask._internal_stopTimeScaleAnimation();\n        this._private__invalidate(mask);\n    }\n    _internal_defaultVisiblePriceScaleId() {\n        return this._private__options.rightPriceScale.visible ? \"right\" /* DefaultPriceScaleId.Right */  : \"left\" /* DefaultPriceScaleId.Left */ ;\n    }\n    _internal_backgroundBottomColor() {\n        return this._private__backgroundBottomColor;\n    }\n    _internal_backgroundTopColor() {\n        return this._private__backgroundTopColor;\n    }\n    _internal_backgroundColorAtYPercentFromTop(percent) {\n        const bottomColor = this._private__backgroundBottomColor;\n        const topColor = this._private__backgroundTopColor;\n        if (bottomColor === topColor) {\n            // solid background\n            return bottomColor;\n        }\n        // gradient background\n        // percent should be from 0 to 100 (we're using only integer values to make cache more efficient)\n        percent = Math.max(0, Math.min(100, Math.round(percent * 100)));\n        if (this._private__gradientColorsCache === null || this._private__gradientColorsCache._internal_topColor !== topColor || this._private__gradientColorsCache._internal_bottomColor !== bottomColor) {\n            this._private__gradientColorsCache = {\n                _internal_topColor: topColor,\n                _internal_bottomColor: bottomColor,\n                _internal_colors: new Map()\n            };\n        } else {\n            const cachedValue = this._private__gradientColorsCache._internal_colors.get(percent);\n            if (cachedValue !== undefined) {\n                return cachedValue;\n            }\n        }\n        const result = gradientColorAtPercent(topColor, bottomColor, percent / 100);\n        this._private__gradientColorsCache._internal_colors.set(percent, result);\n        return result;\n    }\n    _private__paneInvalidationMask(pane, level) {\n        const inv = new InvalidateMask(level);\n        if (pane !== null) {\n            const index = this._private__panes.indexOf(pane);\n            inv._internal_invalidatePane(index, {\n                _internal_level: level\n            });\n        }\n        return inv;\n    }\n    _private__invalidationMaskForSource(source, invalidateType) {\n        if (invalidateType === undefined) {\n            invalidateType = 2 /* InvalidationLevel.Light */ ;\n        }\n        return this._private__paneInvalidationMask(this._internal_paneForSource(source), invalidateType);\n    }\n    _private__invalidate(mask) {\n        if (this._private__invalidateHandler) {\n            this._private__invalidateHandler(mask);\n        }\n        this._private__panes.forEach((pane)=>pane._internal_grid()._internal_paneView()._internal_update());\n    }\n    _private__createSeries(options, seriesType, pane, customPaneView) {\n        const series = new Series(this, options, seriesType, pane, customPaneView);\n        const targetScaleId = options.priceScaleId !== undefined ? options.priceScaleId : this._internal_defaultVisiblePriceScaleId();\n        pane._internal_addDataSource(series, targetScaleId);\n        if (!isDefaultPriceScale(targetScaleId)) {\n            // let's apply that options again to apply margins\n            series._internal_applyOptions(options);\n        }\n        return series;\n    }\n    _private__getBackgroundColor(side) {\n        const layoutOptions = this._private__options.layout;\n        if (layoutOptions.background.type === \"gradient\" /* ColorType.VerticalGradient */ ) {\n            return side === 0 /* BackgroundColorSide.Top */  ? layoutOptions.background.topColor : layoutOptions.background.bottomColor;\n        }\n        return layoutOptions.background.color;\n    }\n}\nfunction fillUpDownCandlesticksColors(options) {\n    if (options.borderColor !== undefined) {\n        options.borderUpColor = options.borderColor;\n        options.borderDownColor = options.borderColor;\n    }\n    if (options.wickColor !== undefined) {\n        options.wickUpColor = options.wickColor;\n        options.wickDownColor = options.wickColor;\n    }\n}\n/**\n * Represents the type of the last price animation for series such as area or line.\n */ var LastPriceAnimationMode;\n(function(LastPriceAnimationMode) {\n    /**\n     * Animation is always disabled\n     */ LastPriceAnimationMode[LastPriceAnimationMode[\"Disabled\"] = 0] = \"Disabled\";\n    /**\n     * Animation is always enabled.\n     */ LastPriceAnimationMode[LastPriceAnimationMode[\"Continuous\"] = 1] = \"Continuous\";\n    /**\n     * Animation is active after new data.\n     */ LastPriceAnimationMode[LastPriceAnimationMode[\"OnDataUpdate\"] = 2] = \"OnDataUpdate\";\n})(LastPriceAnimationMode || (LastPriceAnimationMode = {}));\nfunction precisionByMinMove(minMove) {\n    if (minMove >= 1) {\n        return 0;\n    }\n    let i = 0;\n    for(; i < 8; i++){\n        const intPart = Math.round(minMove);\n        const fractPart = Math.abs(intPart - minMove);\n        if (fractPart < 1e-8) {\n            return i;\n        }\n        minMove = minMove * 10;\n    }\n    return i;\n}\n/**\n * Represents the source of data to be used for the horizontal price line.\n */ var PriceLineSource;\n(function(PriceLineSource) {\n    /**\n     * Use the last bar data.\n     */ PriceLineSource[PriceLineSource[\"LastBar\"] = 0] = \"LastBar\";\n    /**\n     * Use the last visible data of the chart viewport.\n     */ PriceLineSource[PriceLineSource[\"LastVisible\"] = 1] = \"LastVisible\";\n})(PriceLineSource || (PriceLineSource = {}));\n/**\n * Represents a type of color.\n */ var ColorType;\n(function(ColorType) {\n    /** Solid color */ ColorType[\"Solid\"] = \"solid\";\n    /** Vertical gradient color */ ColorType[\"VerticalGradient\"] = \"gradient\";\n})(ColorType || (ColorType = {}));\n/**\n * Check if a time value is a business day object.\n *\n * @param time - The time to check.\n * @returns `true` if `time` is a {@link BusinessDay} object, false otherwise.\n */ function isBusinessDay(time) {\n    return !isNumber(time) && !isString(time);\n}\n/**\n * Check if a time value is a UTC timestamp number.\n *\n * @param time - The time to check.\n * @returns `true` if `time` is a {@link UTCTimestamp} number, false otherwise.\n */ function isUTCTimestamp(time) {\n    return isNumber(time);\n}\n/**\n * Represents the type of a tick mark on the time axis.\n */ var TickMarkType;\n(function(TickMarkType) {\n    /**\n     * The start of the year (e.g. it's the first tick mark in a year).\n     */ TickMarkType[TickMarkType[\"Year\"] = 0] = \"Year\";\n    /**\n     * The start of the month (e.g. it's the first tick mark in a month).\n     */ TickMarkType[TickMarkType[\"Month\"] = 1] = \"Month\";\n    /**\n     * A day of the month.\n     */ TickMarkType[TickMarkType[\"DayOfMonth\"] = 2] = \"DayOfMonth\";\n    /**\n     * A time without seconds.\n     */ TickMarkType[TickMarkType[\"Time\"] = 3] = \"Time\";\n    /**\n     * A time with seconds.\n     */ TickMarkType[TickMarkType[\"TimeWithSeconds\"] = 4] = \"TimeWithSeconds\";\n})(TickMarkType || (TickMarkType = {}));\nconst getMonth = (date)=>date.getUTCMonth() + 1;\nconst getDay = (date)=>date.getUTCDate();\nconst getYear = (date)=>date.getUTCFullYear();\nconst dd = (date)=>numberToStringWithLeadingZero(getDay(date), 2);\nconst MMMM = (date, locale)=>new Date(date.getUTCFullYear(), date.getUTCMonth(), 1).toLocaleString(locale, {\n        month: \"long\"\n    });\nconst MMM = (date, locale)=>new Date(date.getUTCFullYear(), date.getUTCMonth(), 1).toLocaleString(locale, {\n        month: \"short\"\n    });\nconst MM = (date)=>numberToStringWithLeadingZero(getMonth(date), 2);\nconst yy = (date)=>numberToStringWithLeadingZero(getYear(date) % 100, 2);\nconst yyyy = (date)=>numberToStringWithLeadingZero(getYear(date), 4);\nfunction formatDate(date, format, locale) {\n    return format.replace(/yyyy/g, yyyy(date)).replace(/yy/g, yy(date)).replace(/MMMM/g, MMMM(date, locale)).replace(/MMM/g, MMM(date, locale)).replace(/MM/g, MM(date)).replace(/dd/g, dd(date));\n}\nclass DateFormatter {\n    constructor(dateFormat = \"yyyy-MM-dd\", locale = \"default\"){\n        this._private__dateFormat = dateFormat;\n        this._private__locale = locale;\n    }\n    _internal_format(date) {\n        return formatDate(date, this._private__dateFormat, this._private__locale);\n    }\n}\nclass TimeFormatter {\n    constructor(format){\n        this._private__formatStr = format || \"%h:%m:%s\";\n    }\n    _internal_format(date) {\n        return this._private__formatStr.replace(\"%h\", numberToStringWithLeadingZero(date.getUTCHours(), 2)).replace(\"%m\", numberToStringWithLeadingZero(date.getUTCMinutes(), 2)).replace(\"%s\", numberToStringWithLeadingZero(date.getUTCSeconds(), 2));\n    }\n}\nconst defaultParams = {\n    _internal_dateFormat: \"yyyy-MM-dd\",\n    _internal_timeFormat: \"%h:%m:%s\",\n    _internal_dateTimeSeparator: \" \",\n    _internal_locale: \"default\"\n};\nclass DateTimeFormatter {\n    constructor(params = {}){\n        const formatterParams = Object.assign(Object.assign({}, defaultParams), params);\n        this._private__dateFormatter = new DateFormatter(formatterParams._internal_dateFormat, formatterParams._internal_locale);\n        this._private__timeFormatter = new TimeFormatter(formatterParams._internal_timeFormat);\n        this._private__separator = formatterParams._internal_dateTimeSeparator;\n    }\n    _internal_format(dateTime) {\n        return `${this._private__dateFormatter._internal_format(dateTime)}${this._private__separator}${this._private__timeFormatter._internal_format(dateTime)}`;\n    }\n}\nfunction defaultTickMarkFormatter(timePoint, tickMarkType, locale) {\n    const formatOptions = {};\n    switch(tickMarkType){\n        case 0 /* TickMarkType.Year */ :\n            formatOptions.year = \"numeric\";\n            break;\n        case 1 /* TickMarkType.Month */ :\n            formatOptions.month = \"short\";\n            break;\n        case 2 /* TickMarkType.DayOfMonth */ :\n            formatOptions.day = \"numeric\";\n            break;\n        case 3 /* TickMarkType.Time */ :\n            formatOptions.hour12 = false;\n            formatOptions.hour = \"2-digit\";\n            formatOptions.minute = \"2-digit\";\n            break;\n        case 4 /* TickMarkType.TimeWithSeconds */ :\n            formatOptions.hour12 = false;\n            formatOptions.hour = \"2-digit\";\n            formatOptions.minute = \"2-digit\";\n            formatOptions.second = \"2-digit\";\n            break;\n    }\n    const date = timePoint._internal_businessDay === undefined ? new Date(timePoint._internal_timestamp * 1000) : new Date(Date.UTC(timePoint._internal_businessDay.year, timePoint._internal_businessDay.month - 1, timePoint._internal_businessDay.day));\n    // from given date we should use only as UTC date or timestamp\n    // but to format as locale date we can convert UTC date to local date\n    const localDateFromUtc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    return localDateFromUtc.toLocaleString(locale, formatOptions);\n}\nfunction hours(count) {\n    return count * 60 * 60 * 1000;\n}\nfunction minutes(count) {\n    return count * 60 * 1000;\n}\nfunction seconds(count) {\n    return count * 1000;\n}\nconst intradayWeightDivisors = [\n    {\n        _internal_divisor: seconds(1),\n        _internal_weight: 10 /* TickMarkWeight.Second */ \n    },\n    {\n        _internal_divisor: minutes(1),\n        _internal_weight: 20 /* TickMarkWeight.Minute1 */ \n    },\n    {\n        _internal_divisor: minutes(5),\n        _internal_weight: 21 /* TickMarkWeight.Minute5 */ \n    },\n    {\n        _internal_divisor: minutes(30),\n        _internal_weight: 22 /* TickMarkWeight.Minute30 */ \n    },\n    {\n        _internal_divisor: hours(1),\n        _internal_weight: 30 /* TickMarkWeight.Hour1 */ \n    },\n    {\n        _internal_divisor: hours(3),\n        _internal_weight: 31 /* TickMarkWeight.Hour3 */ \n    },\n    {\n        _internal_divisor: hours(6),\n        _internal_weight: 32 /* TickMarkWeight.Hour6 */ \n    },\n    {\n        _internal_divisor: hours(12),\n        _internal_weight: 33 /* TickMarkWeight.Hour12 */ \n    }\n];\nfunction weightByTime(currentDate, prevDate) {\n    if (currentDate.getUTCFullYear() !== prevDate.getUTCFullYear()) {\n        return 70 /* TickMarkWeight.Year */ ;\n    } else if (currentDate.getUTCMonth() !== prevDate.getUTCMonth()) {\n        return 60 /* TickMarkWeight.Month */ ;\n    } else if (currentDate.getUTCDate() !== prevDate.getUTCDate()) {\n        return 50 /* TickMarkWeight.Day */ ;\n    }\n    for(let i = intradayWeightDivisors.length - 1; i >= 0; --i){\n        if (Math.floor(prevDate.getTime() / intradayWeightDivisors[i]._internal_divisor) !== Math.floor(currentDate.getTime() / intradayWeightDivisors[i]._internal_divisor)) {\n            return intradayWeightDivisors[i]._internal_weight;\n        }\n    }\n    return 0 /* TickMarkWeight.LessThanSecond */ ;\n}\nfunction cast(t) {\n    return t;\n}\nfunction fillWeightsForPoints(sortedTimePoints, startIndex = 0) {\n    if (sortedTimePoints.length === 0) {\n        return;\n    }\n    let prevTime = startIndex === 0 ? null : cast(sortedTimePoints[startIndex - 1].time)._internal_timestamp;\n    let prevDate = prevTime !== null ? new Date(prevTime * 1000) : null;\n    let totalTimeDiff = 0;\n    for(let index = startIndex; index < sortedTimePoints.length; ++index){\n        const currentPoint = sortedTimePoints[index];\n        const currentDate = new Date(cast(currentPoint.time)._internal_timestamp * 1000);\n        if (prevDate !== null) {\n            currentPoint.timeWeight = weightByTime(currentDate, prevDate);\n        }\n        totalTimeDiff += cast(currentPoint.time)._internal_timestamp - (prevTime || cast(currentPoint.time)._internal_timestamp);\n        prevTime = cast(currentPoint.time)._internal_timestamp;\n        prevDate = currentDate;\n    }\n    if (startIndex === 0 && sortedTimePoints.length > 1) {\n        // let's guess a weight for the first point\n        // let's say the previous point was average time back in the history\n        const averageTimeDiff = Math.ceil(totalTimeDiff / (sortedTimePoints.length - 1));\n        const approxPrevDate = new Date((cast(sortedTimePoints[0].time)._internal_timestamp - averageTimeDiff) * 1000);\n        sortedTimePoints[0].timeWeight = weightByTime(new Date(cast(sortedTimePoints[0].time)._internal_timestamp * 1000), approxPrevDate);\n    }\n}\nfunction businessDayConverter(time) {\n    let businessDay = time;\n    if (isString(time)) {\n        businessDay = stringToBusinessDay(time);\n    }\n    if (!isBusinessDay(businessDay)) {\n        throw new Error(\"time must be of type BusinessDay\");\n    }\n    const date = new Date(Date.UTC(businessDay.year, businessDay.month - 1, businessDay.day, 0, 0, 0, 0));\n    return {\n        _internal_timestamp: Math.round(date.getTime() / 1000),\n        _internal_businessDay: businessDay\n    };\n}\nfunction timestampConverter(time) {\n    if (!isUTCTimestamp(time)) {\n        throw new Error(\"time must be of type isUTCTimestamp\");\n    }\n    return {\n        _internal_timestamp: time\n    };\n}\nfunction selectTimeConverter(data) {\n    if (data.length === 0) {\n        return null;\n    }\n    if (isBusinessDay(data[0].time) || isString(data[0].time)) {\n        return businessDayConverter;\n    }\n    return timestampConverter;\n}\nconst validDateRegex = /^\\d\\d\\d\\d-\\d\\d-\\d\\d$/;\nfunction convertTime(time) {\n    if (isUTCTimestamp(time)) {\n        return timestampConverter(time);\n    }\n    if (!isBusinessDay(time)) {\n        return businessDayConverter(stringToBusinessDay(time));\n    }\n    return businessDayConverter(time);\n}\nfunction stringToBusinessDay(value) {\n    {\n        // in some browsers (I look at your Chrome) the Date constructor may accept invalid date string\n        // but parses them in 'implementation specific' way\n        // for example 2019-1-1 isn't the same as 2019-01-01 (for Chrome both are 'valid' date strings)\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=968939\n        // so, we need to be sure that date has valid format to avoid strange behavior and hours of debugging\n        // but let's do this in development build only because of perf\n        if (!validDateRegex.test(value)) {\n            throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);\n        }\n    }\n    const d = new Date(value);\n    if (isNaN(d.getTime())) {\n        throw new Error(`Invalid date string=${value}, expected format=yyyy-mm-dd`);\n    }\n    return {\n        day: d.getUTCDate(),\n        month: d.getUTCMonth() + 1,\n        year: d.getUTCFullYear()\n    };\n}\nfunction convertStringToBusinessDay(value) {\n    if (isString(value.time)) {\n        value.time = stringToBusinessDay(value.time);\n    }\n}\nfunction convertStringsToBusinessDays(data) {\n    return data.forEach(convertStringToBusinessDay);\n}\n// eslint-disable-next-line complexity\nfunction weightToTickMarkType(weight, timeVisible, secondsVisible) {\n    switch(weight){\n        case 0 /* TickMarkWeight.LessThanSecond */ :\n        case 10 /* TickMarkWeight.Second */ :\n            return timeVisible ? secondsVisible ? 4 /* TickMarkType.TimeWithSeconds */  : 3 /* TickMarkType.Time */  : 2 /* TickMarkType.DayOfMonth */ ;\n        case 20 /* TickMarkWeight.Minute1 */ :\n        case 21 /* TickMarkWeight.Minute5 */ :\n        case 22 /* TickMarkWeight.Minute30 */ :\n        case 30 /* TickMarkWeight.Hour1 */ :\n        case 31 /* TickMarkWeight.Hour3 */ :\n        case 32 /* TickMarkWeight.Hour6 */ :\n        case 33 /* TickMarkWeight.Hour12 */ :\n            return timeVisible ? 3 /* TickMarkType.Time */  : 2 /* TickMarkType.DayOfMonth */ ;\n        case 50 /* TickMarkWeight.Day */ :\n            return 2 /* TickMarkType.DayOfMonth */ ;\n        case 60 /* TickMarkWeight.Month */ :\n            return 1 /* TickMarkType.Month */ ;\n        case 70 /* TickMarkWeight.Year */ :\n            return 0 /* TickMarkType.Year */ ;\n    }\n}\nclass HorzScaleBehaviorTime {\n    options() {\n        return this._private__options;\n    }\n    setOptions(options) {\n        this._private__options = options;\n        this.updateFormatter(options.localization);\n    }\n    preprocessData(data) {\n        if (Array.isArray(data)) {\n            convertStringsToBusinessDays(data);\n        } else {\n            convertStringToBusinessDay(data);\n        }\n    }\n    createConverterToInternalObj(data) {\n        return ensureNotNull(selectTimeConverter(data));\n    }\n    key(item) {\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof item === \"object\" && \"_internal_timestamp\" in item) {\n            return item._internal_timestamp;\n        } else {\n            return this.key(this.convertHorzItemToInternal(item));\n        }\n    }\n    cacheKey(item) {\n        const time = item;\n        return time._internal_businessDay === undefined ? new Date(time._internal_timestamp * 1000).getTime() : new Date(Date.UTC(time._internal_businessDay.year, time._internal_businessDay.month - 1, time._internal_businessDay.day)).getTime();\n    }\n    convertHorzItemToInternal(item) {\n        return convertTime(item);\n    }\n    updateFormatter(options) {\n        if (!this._private__options) {\n            return;\n        }\n        const dateFormat = options.dateFormat;\n        if (this._private__options.timeScale.timeVisible) {\n            this._private__dateTimeFormatter = new DateTimeFormatter({\n                _internal_dateFormat: dateFormat,\n                _internal_timeFormat: this._private__options.timeScale.secondsVisible ? \"%h:%m:%s\" : \"%h:%m\",\n                _internal_dateTimeSeparator: \"   \",\n                _internal_locale: options.locale\n            });\n        } else {\n            this._private__dateTimeFormatter = new DateFormatter(dateFormat, options.locale);\n        }\n    }\n    formatHorzItem(item) {\n        const tp = item;\n        return this._private__dateTimeFormatter._internal_format(new Date(tp._internal_timestamp * 1000));\n    }\n    formatTickmark(tickMark, localizationOptions) {\n        const tickMarkType = weightToTickMarkType(tickMark.weight, this._private__options.timeScale.timeVisible, this._private__options.timeScale.secondsVisible);\n        const options = this._private__options.timeScale;\n        if (options.tickMarkFormatter !== undefined) {\n            const tickMarkString = options.tickMarkFormatter(tickMark.originalTime, tickMarkType, localizationOptions.locale);\n            if (tickMarkString !== null) {\n                return tickMarkString;\n            }\n        }\n        return defaultTickMarkFormatter(tickMark.time, tickMarkType, localizationOptions.locale);\n    }\n    maxTickMarkWeight(tickMarks) {\n        let maxWeight = tickMarks.reduce(markWithGreaterWeight, tickMarks[0]).weight;\n        // special case: it looks strange if 15:00 is bold but 14:00 is not\n        // so if maxWeight > TickMarkWeight.Hour1 and < TickMarkWeight.Day reduce it to TickMarkWeight.Hour1\n        if (maxWeight > 30 /* TickMarkWeight.Hour1 */  && maxWeight < 50 /* TickMarkWeight.Day */ ) {\n            maxWeight = 30 /* TickMarkWeight.Hour1 */ ;\n        }\n        return maxWeight;\n    }\n    fillWeightsForPoints(sortedTimePoints, startIndex) {\n        fillWeightsForPoints(sortedTimePoints, startIndex);\n    }\n    static _internal_applyDefaults(options) {\n        return merge({\n            localization: {\n                dateFormat: \"dd MMM 'yy\"\n            }\n        }, options !== null && options !== void 0 ? options : {});\n    }\n}\n/**\n * When you're trying to use the library in server-side context (for instance in SSR)\n * you don't have some browser-specific variables like navigator or window\n * and if the library will use them on the top level of the library\n * the import will fail due ReferenceError\n * thus, this allows use the navigator on the top level and being imported in server-side context as well\n * See issue #446\n */ // eslint-disable-next-line @typescript-eslint/tslint/config\nconst isRunningOnClientSide = \"undefined\" !== \"undefined\";\nfunction isFF() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    return window.navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n}\nfunction isIOS() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return /iPhone|iPad|iPod/.test(window.navigator.platform);\n}\nfunction isChrome() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    return window.chrome !== undefined;\n}\n// Determine whether the browser is running on windows.\nfunction isWindows() {\n    var _a;\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    // more accurate if available\n    if ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.userAgentData) === null || _a === void 0 ? void 0 : _a.platform) {\n        return navigator.userAgentData.platform === \"Windows\";\n    }\n    return navigator.userAgent.toLowerCase().indexOf(\"win\") >= 0;\n}\n// Determine whether the browser is Chromium based.\nfunction isChromiumBased() {\n    if (!isRunningOnClientSide) {\n        return false;\n    }\n    if (!navigator.userAgentData) {\n        return false;\n    }\n    return navigator.userAgentData.brands.some((brand)=>{\n        return brand.brand.includes(\"Chromium\");\n    });\n}\n/// <reference types=\"_build-time-constants\" />\nfunction warn(msg) {\n    {\n        // eslint-disable-next-line no-console\n        console.warn(msg);\n    }\n}\n// on Hi-DPI CSS size * Device Pixel Ratio should be integer to avoid smoothing\n// For chart widget we decrease the size because we must be inside container.\n// For time axis this is not important, since it just affects space for pane widgets\nfunction suggestChartSize(originalSize) {\n    const integerWidth = Math.floor(originalSize.width);\n    const integerHeight = Math.floor(originalSize.height);\n    const width = integerWidth - integerWidth % 2;\n    const height = integerHeight - integerHeight % 2;\n    return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n        width,\n        height\n    });\n}\nfunction suggestTimeScaleHeight(originalHeight) {\n    return originalHeight + originalHeight % 2;\n}\nfunction suggestPriceScaleWidth(originalWidth) {\n    return originalWidth + originalWidth % 2;\n}\nfunction distanceBetweenPoints(pos1, pos2) {\n    return pos1._internal_position - pos2._internal_position;\n}\nfunction speedPxPerMSec(pos1, pos2, maxSpeed) {\n    const speed = (pos1._internal_position - pos2._internal_position) / (pos1._internal_time - pos2._internal_time);\n    return Math.sign(speed) * Math.min(Math.abs(speed), maxSpeed);\n}\nfunction durationMSec(speed, dumpingCoeff) {\n    const lnDumpingCoeff = Math.log(dumpingCoeff);\n    return Math.log(1 /* Constants.EpsilonDistance */  * lnDumpingCoeff / -speed) / lnDumpingCoeff;\n}\nclass KineticAnimation {\n    constructor(minSpeed, maxSpeed, dumpingCoeff, minMove){\n        this._private__position1 = null;\n        this._private__position2 = null;\n        this._private__position3 = null;\n        this._private__position4 = null;\n        this._private__animationStartPosition = null;\n        this._private__durationMsecs = 0;\n        this._private__speedPxPerMsec = 0;\n        this._private__minSpeed = minSpeed;\n        this._private__maxSpeed = maxSpeed;\n        this._private__dumpingCoeff = dumpingCoeff;\n        this._private__minMove = minMove;\n    }\n    _internal_addPosition(position, time) {\n        if (this._private__position1 !== null) {\n            if (this._private__position1._internal_time === time) {\n                this._private__position1._internal_position = position;\n                return;\n            }\n            if (Math.abs(this._private__position1._internal_position - position) < this._private__minMove) {\n                return;\n            }\n        }\n        this._private__position4 = this._private__position3;\n        this._private__position3 = this._private__position2;\n        this._private__position2 = this._private__position1;\n        this._private__position1 = {\n            _internal_time: time,\n            _internal_position: position\n        };\n    }\n    _internal_start(position, time) {\n        if (this._private__position1 === null || this._private__position2 === null) {\n            return;\n        }\n        if (time - this._private__position1._internal_time > 50 /* Constants.MaxStartDelay */ ) {\n            return;\n        }\n        // To calculate all the rest parameters we should calculate the speed af first\n        let totalDistance = 0;\n        const speed1 = speedPxPerMSec(this._private__position1, this._private__position2, this._private__maxSpeed);\n        const distance1 = distanceBetweenPoints(this._private__position1, this._private__position2);\n        // We're calculating weighted average speed\n        // Than more distance for a segment, than more its weight\n        const speedItems = [\n            speed1\n        ];\n        const distanceItems = [\n            distance1\n        ];\n        totalDistance += distance1;\n        if (this._private__position3 !== null) {\n            const speed2 = speedPxPerMSec(this._private__position2, this._private__position3, this._private__maxSpeed);\n            // stop at this moment if direction of the segment is opposite\n            if (Math.sign(speed2) === Math.sign(speed1)) {\n                const distance2 = distanceBetweenPoints(this._private__position2, this._private__position3);\n                speedItems.push(speed2);\n                distanceItems.push(distance2);\n                totalDistance += distance2;\n                if (this._private__position4 !== null) {\n                    const speed3 = speedPxPerMSec(this._private__position3, this._private__position4, this._private__maxSpeed);\n                    if (Math.sign(speed3) === Math.sign(speed1)) {\n                        const distance3 = distanceBetweenPoints(this._private__position3, this._private__position4);\n                        speedItems.push(speed3);\n                        distanceItems.push(distance3);\n                        totalDistance += distance3;\n                    }\n                }\n            }\n        }\n        let resultSpeed = 0;\n        for(let i = 0; i < speedItems.length; ++i){\n            resultSpeed += distanceItems[i] / totalDistance * speedItems[i];\n        }\n        if (Math.abs(resultSpeed) < this._private__minSpeed) {\n            return;\n        }\n        this._private__animationStartPosition = {\n            _internal_position: position,\n            _internal_time: time\n        };\n        this._private__speedPxPerMsec = resultSpeed;\n        this._private__durationMsecs = durationMSec(Math.abs(resultSpeed), this._private__dumpingCoeff);\n    }\n    _internal_getPosition(time) {\n        const startPosition = ensureNotNull(this._private__animationStartPosition);\n        const durationMsecs = time - startPosition._internal_time;\n        return startPosition._internal_position + this._private__speedPxPerMsec * (Math.pow(this._private__dumpingCoeff, durationMsecs) - 1) / Math.log(this._private__dumpingCoeff);\n    }\n    _internal_finished(time) {\n        return this._private__animationStartPosition === null || this._private__progressDuration(time) === this._private__durationMsecs;\n    }\n    _private__progressDuration(time) {\n        const startPosition = ensureNotNull(this._private__animationStartPosition);\n        const progress = time - startPosition._internal_time;\n        return Math.min(progress, this._private__durationMsecs);\n    }\n}\nconst svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 35 19\" width=\"35\" height=\"19\" fill=\"none\"><g fill-rule=\"evenodd\" clip-path=\"url(#a)\" clip-rule=\"evenodd\"><path fill=\"var(--stroke)\" d=\"M2 0H0v10h6v9h21.4l.5-1.3 6-15 1-2.7H23.7l-.5 1.3-.2.6a5 5 0 0 0-7-.9V0H2Zm20 17h4l5.2-13 .8-2h-7l-1 2.5-.2.5-1.5 3.8-.3.7V17Zm-.8-10a3 3 0 0 0 .7-2.7A3 3 0 1 0 16.8 7h4.4ZM14 7V2H2v6h6v9h4V7h2Z\"/><path fill=\"var(--fill)\" d=\"M14 2H2v6h6v9h6V2Zm12 15h-7l6-15h7l-6 15Zm-7-9a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z\"/></g><defs><clipPath id=\"a\"><path fill=\"var(--stroke)\" d=\"M0 0h35v19H0z\"/></clipPath></defs></svg>`;\nconst css = `a#tv-attr-logo{--fill:#131722;--stroke:#fff;position:absolute;left:10px;bottom:10px;height:19px;width:35px;margin:0;padding:0;border:0;z-index:3;}a#tv-attr-logo[data-dark]{--fill:#D1D4DC;--stroke:#131722;}`;\n// This widget doesn't support dynamically responding to options changes\n// because it is expected that the `attributionLogo` option won't be changed\n// and this saves some bundle size.\nclass AttributionLogoWidget {\n    constructor(container, chart){\n        this._private__element = undefined;\n        this._private__cssElement = undefined;\n        this._private__theme = undefined;\n        this._private__visible = false;\n        this._private__container = container;\n        this._private__chart = chart;\n        this._private__render();\n    }\n    _internal_update() {\n        this._private__render();\n    }\n    _internal_removeElement() {\n        if (this._private__element) {\n            this._private__container.removeChild(this._private__element);\n        }\n        if (this._private__cssElement) {\n            this._private__container.removeChild(this._private__cssElement);\n        }\n        this._private__element = undefined;\n        this._private__cssElement = undefined;\n    }\n    _private__shouldUpdate() {\n        return this._private__visible !== this._private__shouldBeVisible() || this._private__theme !== this._private__themeToUse();\n    }\n    _private__themeToUse() {\n        return colorStringToGrayscale(this._private__chart._internal_options().layout.textColor) > 160 ? \"dark\" : \"light\";\n    }\n    _private__shouldBeVisible() {\n        return this._private__chart._internal_options().layout.attributionLogo;\n    }\n    _private__getUTMSource() {\n        const url = new URL(location.href);\n        if (!url.hostname) {\n            // ignore local testing\n            return \"\";\n        }\n        return \"&utm_source=\" + url.hostname + url.pathname;\n    }\n    _private__render() {\n        if (!this._private__shouldUpdate()) {\n            return;\n        }\n        this._internal_removeElement();\n        this._private__visible = this._private__shouldBeVisible();\n        if (this._private__visible) {\n            this._private__theme = this._private__themeToUse();\n            this._private__cssElement = document.createElement(\"style\");\n            this._private__cssElement.innerText = css;\n            this._private__element = document.createElement(\"a\");\n            this._private__element.href = `https://www.tradingview.com/?utm_medium=lwc-link&utm_campaign=lwc-chart${this._private__getUTMSource()}`;\n            this._private__element.title = \"Charting by TradingView\";\n            this._private__element.id = \"tv-attr-logo\";\n            this._private__element.target = \"_blank\";\n            this._private__element.innerHTML = svg;\n            this._private__element.toggleAttribute(\"data-dark\", this._private__theme === \"dark\");\n            this._private__container.appendChild(this._private__cssElement);\n            this._private__container.appendChild(this._private__element);\n        }\n    }\n}\nfunction createBoundCanvas(parentElement, size) {\n    const doc = ensureNotNull(parentElement.ownerDocument);\n    const canvas = doc.createElement(\"canvas\");\n    parentElement.appendChild(canvas);\n    const binding = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.bindCanvasElementBitmapSizeTo)(canvas, {\n        type: \"device-pixel-content-box\",\n        options: {\n            allowResizeObserver: false\n        },\n        transform: (bitmapSize, canvasElementClientSize)=>({\n                width: Math.max(bitmapSize.width, canvasElementClientSize.width),\n                height: Math.max(bitmapSize.height, canvasElementClientSize.height)\n            })\n    });\n    binding.resizeCanvasElement(size);\n    return binding;\n}\nfunction releaseCanvas(canvas) {\n    var _a;\n    // This function fixes the iOS Safari error \"Total canvas memory use exceeds the maximum limit\".\n    // Seems that iOS Safari stores canvas elements for some additional time internally.\n    // So if we create/destroy a lot of canvas elements in a short period of time we can get this error.\n    // We resize the canvas to 1x1 pixels to force it to release memmory resources.\n    canvas.width = 1;\n    canvas.height = 1;\n    (_a = canvas.getContext(\"2d\")) === null || _a === void 0 ? void 0 : _a.clearRect(0, 0, 1, 1);\n}\nfunction drawBackground(renderer, target, isHovered, hitTestData) {\n    if (renderer._internal_drawBackground) {\n        renderer._internal_drawBackground(target, isHovered, hitTestData);\n    }\n}\nfunction drawForeground(renderer, target, isHovered, hitTestData) {\n    renderer._internal_draw(target, isHovered, hitTestData);\n}\nfunction drawSourcePaneViews(paneViewsGetter, drawRendererFn, source, pane) {\n    const paneViews = paneViewsGetter(source, pane);\n    for (const paneView of paneViews){\n        const renderer = paneView._internal_renderer();\n        if (renderer !== null) {\n            drawRendererFn(renderer);\n        }\n    }\n}\nfunction preventScrollByWheelClick(el) {\n    if (!isChrome()) {\n        return;\n    }\n    el.addEventListener(\"mousedown\", (e)=>{\n        if (e.button === 1 /* MouseEventButton.Middle */ ) {\n            // prevent incorrect scrolling event\n            e.preventDefault();\n            return false;\n        }\n        return undefined;\n    });\n}\n// TODO: get rid of a lot of boolean flags, probably we should replace it with some enum\nclass MouseEventHandler {\n    constructor(target, handler, options){\n        this._private__clickCount = 0;\n        this._private__clickTimeoutId = null;\n        this._private__clickPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n        this._private__tapCount = 0;\n        this._private__tapTimeoutId = null;\n        this._private__tapPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n        this._private__longTapTimeoutId = null;\n        this._private__longTapActive = false;\n        this._private__mouseMoveStartPosition = null;\n        this._private__touchMoveStartPosition = null;\n        this._private__touchMoveExceededManhattanDistance = false;\n        this._private__cancelClick = false;\n        this._private__cancelTap = false;\n        this._private__unsubscribeOutsideMouseEvents = null;\n        this._private__unsubscribeOutsideTouchEvents = null;\n        this._private__unsubscribeMobileSafariEvents = null;\n        this._private__unsubscribeMousemove = null;\n        this._private__unsubscribeRootMouseEvents = null;\n        this._private__unsubscribeRootTouchEvents = null;\n        this._private__startPinchMiddlePoint = null;\n        this._private__startPinchDistance = 0;\n        this._private__pinchPrevented = false;\n        this._private__preventTouchDragProcess = false;\n        this._private__mousePressed = false;\n        this._private__lastTouchEventTimeStamp = 0;\n        // for touchstart/touchmove/touchend events we handle only first touch\n        // i.e. we don't support several active touches at the same time (except pinch event)\n        this._private__activeTouchId = null;\n        // accept all mouse leave events if it's not an iOS device\n        // see _mouseEnterHandler, _mouseMoveHandler, _mouseLeaveHandler\n        this._private__acceptMouseLeave = !isIOS();\n        /**\n         * In Firefox mouse events dont't fire if the mouse position is outside of the browser's border.\n         * To prevent the mouse from hanging while pressed we're subscribing on the mouseleave event of the document element.\n         * We're subscribing on mouseleave, but this event is actually fired on mouseup outside of the browser's border.\n         */ this._private__onFirefoxOutsideMouseUp = (mouseUpEvent)=>{\n            this._private__mouseUpHandler(mouseUpEvent);\n        };\n        /**\n         * Safari doesn't fire touchstart/mousedown events on double tap since iOS 13.\n         * There are two possible solutions:\n         * 1) Call preventDefault in touchEnd handler. But it also prevents click event from firing.\n         * 2) Add listener on dblclick event that fires with the preceding mousedown/mouseup.\n         * https://developer.apple.com/forums/thread/125073\n         */ this._private__onMobileSafariDoubleClick = (dblClickEvent)=>{\n            if (this._private__firesTouchEvents(dblClickEvent)) {\n                const compatEvent = this._private__makeCompatEvent(dblClickEvent);\n                ++this._private__tapCount;\n                if (this._private__tapTimeoutId && this._private__tapCount > 1) {\n                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__tapPosition);\n                    if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */  && !this._private__cancelTap) {\n                        this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);\n                    }\n                    this._private__resetTapTimeout();\n                }\n            } else {\n                const compatEvent = this._private__makeCompatEvent(dblClickEvent);\n                ++this._private__clickCount;\n                if (this._private__clickTimeoutId && this._private__clickCount > 1) {\n                    const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(dblClickEvent), this._private__clickPosition);\n                    if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */  && !this._private__cancelClick) {\n                        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);\n                    }\n                    this._private__resetClickTimeout();\n                }\n            }\n        };\n        this._private__target = target;\n        this._private__handler = handler;\n        this._private__options = options;\n        this._private__init();\n    }\n    _internal_destroy() {\n        if (this._private__unsubscribeOutsideMouseEvents !== null) {\n            this._private__unsubscribeOutsideMouseEvents();\n            this._private__unsubscribeOutsideMouseEvents = null;\n        }\n        if (this._private__unsubscribeOutsideTouchEvents !== null) {\n            this._private__unsubscribeOutsideTouchEvents();\n            this._private__unsubscribeOutsideTouchEvents = null;\n        }\n        if (this._private__unsubscribeMousemove !== null) {\n            this._private__unsubscribeMousemove();\n            this._private__unsubscribeMousemove = null;\n        }\n        if (this._private__unsubscribeRootMouseEvents !== null) {\n            this._private__unsubscribeRootMouseEvents();\n            this._private__unsubscribeRootMouseEvents = null;\n        }\n        if (this._private__unsubscribeRootTouchEvents !== null) {\n            this._private__unsubscribeRootTouchEvents();\n            this._private__unsubscribeRootTouchEvents = null;\n        }\n        if (this._private__unsubscribeMobileSafariEvents !== null) {\n            this._private__unsubscribeMobileSafariEvents();\n            this._private__unsubscribeMobileSafariEvents = null;\n        }\n        this._private__clearLongTapTimeout();\n        this._private__resetClickTimeout();\n    }\n    _private__mouseEnterHandler(enterEvent) {\n        if (this._private__unsubscribeMousemove) {\n            this._private__unsubscribeMousemove();\n        }\n        const boundMouseMoveHandler = this._private__mouseMoveHandler.bind(this);\n        this._private__unsubscribeMousemove = ()=>{\n            this._private__target.removeEventListener(\"mousemove\", boundMouseMoveHandler);\n        };\n        this._private__target.addEventListener(\"mousemove\", boundMouseMoveHandler);\n        if (this._private__firesTouchEvents(enterEvent)) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(enterEvent);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseEnterEvent);\n        this._private__acceptMouseLeave = true;\n    }\n    _private__resetClickTimeout() {\n        if (this._private__clickTimeoutId !== null) {\n            clearTimeout(this._private__clickTimeoutId);\n        }\n        this._private__clickCount = 0;\n        this._private__clickTimeoutId = null;\n        this._private__clickPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n    }\n    _private__resetTapTimeout() {\n        if (this._private__tapTimeoutId !== null) {\n            clearTimeout(this._private__tapTimeoutId);\n        }\n        this._private__tapCount = 0;\n        this._private__tapTimeoutId = null;\n        this._private__tapPosition = {\n            _internal_x: Number.NEGATIVE_INFINITY,\n            _internal_y: Number.POSITIVE_INFINITY\n        };\n    }\n    _private__mouseMoveHandler(moveEvent) {\n        if (this._private__mousePressed || this._private__touchMoveStartPosition !== null) {\n            return;\n        }\n        if (this._private__firesTouchEvents(moveEvent)) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(moveEvent);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseMoveEvent);\n        this._private__acceptMouseLeave = true;\n    }\n    _private__touchMoveHandler(moveEvent) {\n        const touch = touchWithId(moveEvent.changedTouches, ensureNotNull(this._private__activeTouchId));\n        if (touch === null) {\n            return;\n        }\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(moveEvent);\n        if (this._private__startPinchMiddlePoint !== null) {\n            return;\n        }\n        if (this._private__preventTouchDragProcess) {\n            return;\n        }\n        // prevent pinch if move event comes faster than the second touch\n        this._private__pinchPrevented = true;\n        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(touch), ensureNotNull(this._private__touchMoveStartPosition));\n        const { _internal_xOffset: xOffset, _internal_yOffset: yOffset, _internal_manhattanDistance: manhattanDistance } = moveInfo;\n        if (!this._private__touchMoveExceededManhattanDistance && manhattanDistance < 5 /* Constants.CancelTapManhattanDistance */ ) {\n            return;\n        }\n        if (!this._private__touchMoveExceededManhattanDistance) {\n            // first time when current position exceeded manhattan distance\n            // vertical drag is more important than horizontal drag\n            // because we scroll the page vertically often than horizontally\n            const correctedXOffset = xOffset * 0.5;\n            // a drag can be only if touch page scroll isn't allowed\n            const isVertDrag = yOffset >= correctedXOffset && !this._private__options._internal_treatVertTouchDragAsPageScroll();\n            const isHorzDrag = correctedXOffset > yOffset && !this._private__options._internal_treatHorzTouchDragAsPageScroll();\n            // if drag event happened then we should revert preventDefault state to original one\n            // and try to process the drag event\n            // else we shouldn't prevent default of the event and ignore processing the drag event\n            if (!isVertDrag && !isHorzDrag) {\n                this._private__preventTouchDragProcess = true;\n            }\n            this._private__touchMoveExceededManhattanDistance = true;\n            // if manhattan distance is more that 5 - we should cancel tap event\n            this._private__cancelTap = true;\n            this._private__clearLongTapTimeout();\n            this._private__resetTapTimeout();\n        }\n        if (!this._private__preventTouchDragProcess) {\n            const compatEvent = this._private__makeCompatEvent(moveEvent, touch);\n            this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchMoveEvent);\n            // we should prevent default in case of touch only\n            // to prevent scroll of the page\n            preventDefault(moveEvent);\n        }\n    }\n    _private__mouseMoveWithDownHandler(moveEvent) {\n        if (moveEvent.button !== 0 /* MouseEventButton.Left */ ) {\n            return;\n        }\n        const moveInfo = this._private__touchMouseMoveWithDownInfo(getPosition(moveEvent), ensureNotNull(this._private__mouseMoveStartPosition));\n        const { _internal_manhattanDistance: manhattanDistance } = moveInfo;\n        if (manhattanDistance >= 5 /* Constants.CancelClickManhattanDistance */ ) {\n            // if manhattan distance is more that 5 - we should cancel click event\n            this._private__cancelClick = true;\n            this._private__resetClickTimeout();\n        }\n        if (this._private__cancelClick) {\n            // if this._cancelClick is true, that means that minimum manhattan distance is already exceeded\n            const compatEvent = this._private__makeCompatEvent(moveEvent);\n            this._private__processMouseEvent(compatEvent, this._private__handler._internal_pressedMouseMoveEvent);\n        }\n    }\n    _private__touchMouseMoveWithDownInfo(currentPosition, startPosition) {\n        const xOffset = Math.abs(startPosition._internal_x - currentPosition._internal_x);\n        const yOffset = Math.abs(startPosition._internal_y - currentPosition._internal_y);\n        const manhattanDistance = xOffset + yOffset;\n        return {\n            _internal_xOffset: xOffset,\n            _internal_yOffset: yOffset,\n            _internal_manhattanDistance: manhattanDistance\n        };\n    }\n    // eslint-disable-next-line complexity\n    _private__touchEndHandler(touchEndEvent) {\n        let touch = touchWithId(touchEndEvent.changedTouches, ensureNotNull(this._private__activeTouchId));\n        if (touch === null && touchEndEvent.touches.length === 0) {\n            // something went wrong, somehow we missed the required touchend event\n            // probably the browser has not sent this event\n            touch = touchEndEvent.changedTouches[0];\n        }\n        if (touch === null) {\n            return;\n        }\n        this._private__activeTouchId = null;\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(touchEndEvent);\n        this._private__clearLongTapTimeout();\n        this._private__touchMoveStartPosition = null;\n        if (this._private__unsubscribeRootTouchEvents) {\n            this._private__unsubscribeRootTouchEvents();\n            this._private__unsubscribeRootTouchEvents = null;\n        }\n        const compatEvent = this._private__makeCompatEvent(touchEndEvent, touch);\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchEndEvent);\n        ++this._private__tapCount;\n        if (this._private__tapTimeoutId && this._private__tapCount > 1) {\n            // check that both clicks are near enough\n            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(touch), this._private__tapPosition);\n            if (manhattanDistance < 30 /* Constants.DoubleTapManhattanDistance */  && !this._private__cancelTap) {\n                this._private__processTouchEvent(compatEvent, this._private__handler._internal_doubleTapEvent);\n            }\n            this._private__resetTapTimeout();\n        } else {\n            if (!this._private__cancelTap) {\n                this._private__processTouchEvent(compatEvent, this._private__handler._internal_tapEvent);\n                // do not fire mouse events if tap handler was executed\n                // prevent click event on new dom element (who appeared after tap)\n                if (this._private__handler._internal_tapEvent) {\n                    preventDefault(touchEndEvent);\n                }\n            }\n        }\n        // prevent, for example, safari's dblclick-to-zoom or fast-click after long-tap\n        // we handle mouseDoubleClickEvent here ourselves\n        if (this._private__tapCount === 0) {\n            preventDefault(touchEndEvent);\n        }\n        if (touchEndEvent.touches.length === 0) {\n            if (this._private__longTapActive) {\n                this._private__longTapActive = false;\n                // prevent native click event\n                preventDefault(touchEndEvent);\n            }\n        }\n    }\n    _private__mouseUpHandler(mouseUpEvent) {\n        if (mouseUpEvent.button !== 0 /* MouseEventButton.Left */ ) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(mouseUpEvent);\n        this._private__mouseMoveStartPosition = null;\n        this._private__mousePressed = false;\n        if (this._private__unsubscribeRootMouseEvents) {\n            this._private__unsubscribeRootMouseEvents();\n            this._private__unsubscribeRootMouseEvents = null;\n        }\n        if (isFF()) {\n            const rootElement = this._private__target.ownerDocument.documentElement;\n            rootElement.removeEventListener(\"mouseleave\", this._private__onFirefoxOutsideMouseUp);\n        }\n        if (this._private__firesTouchEvents(mouseUpEvent)) {\n            return;\n        }\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseUpEvent);\n        ++this._private__clickCount;\n        if (this._private__clickTimeoutId && this._private__clickCount > 1) {\n            // check that both clicks are near enough\n            const { _internal_manhattanDistance: manhattanDistance } = this._private__touchMouseMoveWithDownInfo(getPosition(mouseUpEvent), this._private__clickPosition);\n            if (manhattanDistance < 5 /* Constants.DoubleClickManhattanDistance */  && !this._private__cancelClick) {\n                this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDoubleClickEvent);\n            }\n            this._private__resetClickTimeout();\n        } else {\n            if (!this._private__cancelClick) {\n                this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseClickEvent);\n            }\n        }\n    }\n    _private__clearLongTapTimeout() {\n        if (this._private__longTapTimeoutId === null) {\n            return;\n        }\n        clearTimeout(this._private__longTapTimeoutId);\n        this._private__longTapTimeoutId = null;\n    }\n    _private__touchStartHandler(downEvent) {\n        if (this._private__activeTouchId !== null) {\n            return;\n        }\n        const touch = downEvent.changedTouches[0];\n        this._private__activeTouchId = touch.identifier;\n        this._private__lastTouchEventTimeStamp = eventTimeStamp(downEvent);\n        const rootElement = this._private__target.ownerDocument.documentElement;\n        this._private__cancelTap = false;\n        this._private__touchMoveExceededManhattanDistance = false;\n        this._private__preventTouchDragProcess = false;\n        this._private__touchMoveStartPosition = getPosition(touch);\n        if (this._private__unsubscribeRootTouchEvents) {\n            this._private__unsubscribeRootTouchEvents();\n            this._private__unsubscribeRootTouchEvents = null;\n        }\n        {\n            const boundTouchMoveWithDownHandler = this._private__touchMoveHandler.bind(this);\n            const boundTouchEndHandler = this._private__touchEndHandler.bind(this);\n            this._private__unsubscribeRootTouchEvents = ()=>{\n                rootElement.removeEventListener(\"touchmove\", boundTouchMoveWithDownHandler);\n                rootElement.removeEventListener(\"touchend\", boundTouchEndHandler);\n            };\n            rootElement.addEventListener(\"touchmove\", boundTouchMoveWithDownHandler, {\n                passive: false\n            });\n            rootElement.addEventListener(\"touchend\", boundTouchEndHandler, {\n                passive: false\n            });\n            this._private__clearLongTapTimeout();\n            this._private__longTapTimeoutId = setTimeout(this._private__longTapHandler.bind(this, downEvent), 240 /* Delay.LongTap */ );\n        }\n        const compatEvent = this._private__makeCompatEvent(downEvent, touch);\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_touchStartEvent);\n        if (!this._private__tapTimeoutId) {\n            this._private__tapCount = 0;\n            this._private__tapTimeoutId = setTimeout(this._private__resetTapTimeout.bind(this), 500 /* Delay.ResetClick */ );\n            this._private__tapPosition = getPosition(touch);\n        }\n    }\n    _private__mouseDownHandler(downEvent) {\n        if (downEvent.button !== 0 /* MouseEventButton.Left */ ) {\n            return;\n        }\n        const rootElement = this._private__target.ownerDocument.documentElement;\n        if (isFF()) {\n            rootElement.addEventListener(\"mouseleave\", this._private__onFirefoxOutsideMouseUp);\n        }\n        this._private__cancelClick = false;\n        this._private__mouseMoveStartPosition = getPosition(downEvent);\n        if (this._private__unsubscribeRootMouseEvents) {\n            this._private__unsubscribeRootMouseEvents();\n            this._private__unsubscribeRootMouseEvents = null;\n        }\n        {\n            const boundMouseMoveWithDownHandler = this._private__mouseMoveWithDownHandler.bind(this);\n            const boundMouseUpHandler = this._private__mouseUpHandler.bind(this);\n            this._private__unsubscribeRootMouseEvents = ()=>{\n                rootElement.removeEventListener(\"mousemove\", boundMouseMoveWithDownHandler);\n                rootElement.removeEventListener(\"mouseup\", boundMouseUpHandler);\n            };\n            rootElement.addEventListener(\"mousemove\", boundMouseMoveWithDownHandler);\n            rootElement.addEventListener(\"mouseup\", boundMouseUpHandler);\n        }\n        this._private__mousePressed = true;\n        if (this._private__firesTouchEvents(downEvent)) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(downEvent);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseDownEvent);\n        if (!this._private__clickTimeoutId) {\n            this._private__clickCount = 0;\n            this._private__clickTimeoutId = setTimeout(this._private__resetClickTimeout.bind(this), 500 /* Delay.ResetClick */ );\n            this._private__clickPosition = getPosition(downEvent);\n        }\n    }\n    _private__init() {\n        this._private__target.addEventListener(\"mouseenter\", this._private__mouseEnterHandler.bind(this));\n        // Do not show context menu when something went wrong\n        this._private__target.addEventListener(\"touchcancel\", this._private__clearLongTapTimeout.bind(this));\n        {\n            const doc = this._private__target.ownerDocument;\n            const outsideHandler = (event)=>{\n                if (!this._private__handler._internal_mouseDownOutsideEvent) {\n                    return;\n                }\n                if (event.composed && this._private__target.contains(event.composedPath()[0])) {\n                    return;\n                }\n                if (event.target && this._private__target.contains(event.target)) {\n                    return;\n                }\n                this._private__handler._internal_mouseDownOutsideEvent();\n            };\n            this._private__unsubscribeOutsideTouchEvents = ()=>{\n                doc.removeEventListener(\"touchstart\", outsideHandler);\n            };\n            this._private__unsubscribeOutsideMouseEvents = ()=>{\n                doc.removeEventListener(\"mousedown\", outsideHandler);\n            };\n            doc.addEventListener(\"mousedown\", outsideHandler);\n            doc.addEventListener(\"touchstart\", outsideHandler, {\n                passive: true\n            });\n        }\n        if (isIOS()) {\n            this._private__unsubscribeMobileSafariEvents = ()=>{\n                this._private__target.removeEventListener(\"dblclick\", this._private__onMobileSafariDoubleClick);\n            };\n            this._private__target.addEventListener(\"dblclick\", this._private__onMobileSafariDoubleClick);\n        }\n        this._private__target.addEventListener(\"mouseleave\", this._private__mouseLeaveHandler.bind(this));\n        this._private__target.addEventListener(\"touchstart\", this._private__touchStartHandler.bind(this), {\n            passive: true\n        });\n        preventScrollByWheelClick(this._private__target);\n        this._private__target.addEventListener(\"mousedown\", this._private__mouseDownHandler.bind(this));\n        this._private__initPinch();\n        // Hey mobile Safari, what's up?\n        // If mobile Safari doesn't have any touchmove handler with passive=false\n        // it treats a touchstart and the following touchmove events as cancelable=false,\n        // so we can't prevent them (as soon we subscribe on touchmove inside touchstart's handler).\n        // And we'll get scroll of the page along with chart's one instead of only chart's scroll.\n        this._private__target.addEventListener(\"touchmove\", ()=>{}, {\n            passive: false\n        });\n    }\n    _private__initPinch() {\n        if (this._private__handler._internal_pinchStartEvent === undefined && this._private__handler._internal_pinchEvent === undefined && this._private__handler._internal_pinchEndEvent === undefined) {\n            return;\n        }\n        this._private__target.addEventListener(\"touchstart\", (event)=>this._private__checkPinchState(event.touches), {\n            passive: true\n        });\n        this._private__target.addEventListener(\"touchmove\", (event)=>{\n            if (event.touches.length !== 2 || this._private__startPinchMiddlePoint === null) {\n                return;\n            }\n            if (this._private__handler._internal_pinchEvent !== undefined) {\n                const currentDistance = getDistance(event.touches[0], event.touches[1]);\n                const scale = currentDistance / this._private__startPinchDistance;\n                this._private__handler._internal_pinchEvent(this._private__startPinchMiddlePoint, scale);\n                preventDefault(event);\n            }\n        }, {\n            passive: false\n        });\n        this._private__target.addEventListener(\"touchend\", (event)=>{\n            this._private__checkPinchState(event.touches);\n        });\n    }\n    _private__checkPinchState(touches) {\n        if (touches.length === 1) {\n            this._private__pinchPrevented = false;\n        }\n        if (touches.length !== 2 || this._private__pinchPrevented || this._private__longTapActive) {\n            this._private__stopPinch();\n        } else {\n            this._private__startPinch(touches);\n        }\n    }\n    _private__startPinch(touches) {\n        const box = getBoundingClientRect(this._private__target);\n        this._private__startPinchMiddlePoint = {\n            _internal_x: (touches[0].clientX - box.left + (touches[1].clientX - box.left)) / 2,\n            _internal_y: (touches[0].clientY - box.top + (touches[1].clientY - box.top)) / 2\n        };\n        this._private__startPinchDistance = getDistance(touches[0], touches[1]);\n        if (this._private__handler._internal_pinchStartEvent !== undefined) {\n            this._private__handler._internal_pinchStartEvent();\n        }\n        this._private__clearLongTapTimeout();\n    }\n    _private__stopPinch() {\n        if (this._private__startPinchMiddlePoint === null) {\n            return;\n        }\n        this._private__startPinchMiddlePoint = null;\n        if (this._private__handler._internal_pinchEndEvent !== undefined) {\n            this._private__handler._internal_pinchEndEvent();\n        }\n    }\n    _private__mouseLeaveHandler(event) {\n        if (this._private__unsubscribeMousemove) {\n            this._private__unsubscribeMousemove();\n        }\n        if (this._private__firesTouchEvents(event)) {\n            return;\n        }\n        if (!this._private__acceptMouseLeave) {\n            // mobile Safari sometimes emits mouse leave event for no reason, there is no way to handle it in other way\n            // just ignore this event if there was no mouse move or mouse enter events\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(event);\n        this._private__processMouseEvent(compatEvent, this._private__handler._internal_mouseLeaveEvent);\n        // accept all mouse leave events if it's not an iOS device\n        this._private__acceptMouseLeave = !isIOS();\n    }\n    _private__longTapHandler(event) {\n        const touch = touchWithId(event.touches, ensureNotNull(this._private__activeTouchId));\n        if (touch === null) {\n            return;\n        }\n        const compatEvent = this._private__makeCompatEvent(event, touch);\n        this._private__processTouchEvent(compatEvent, this._private__handler._internal_longTapEvent);\n        this._private__cancelTap = true;\n        // long tap is active until touchend event with 0 touches occurred\n        this._private__longTapActive = true;\n    }\n    _private__firesTouchEvents(e) {\n        if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents !== undefined) {\n            return e.sourceCapabilities.firesTouchEvents;\n        }\n        return eventTimeStamp(e) < this._private__lastTouchEventTimeStamp + 500 /* Delay.PreventFiresTouchEvents */ ;\n    }\n    _private__processTouchEvent(event, callback) {\n        if (callback) {\n            callback.call(this._private__handler, event);\n        }\n    }\n    _private__processMouseEvent(event, callback) {\n        if (!callback) {\n            return;\n        }\n        callback.call(this._private__handler, event);\n    }\n    _private__makeCompatEvent(event, touch) {\n        // TouchEvent has no clientX/Y coordinates:\n        // We have to use the last Touch instead\n        const eventLike = touch || event;\n        const box = this._private__target.getBoundingClientRect() || {\n            left: 0,\n            top: 0\n        };\n        return {\n            clientX: eventLike.clientX,\n            clientY: eventLike.clientY,\n            pageX: eventLike.pageX,\n            pageY: eventLike.pageY,\n            screenX: eventLike.screenX,\n            screenY: eventLike.screenY,\n            localX: eventLike.clientX - box.left,\n            localY: eventLike.clientY - box.top,\n            ctrlKey: event.ctrlKey,\n            altKey: event.altKey,\n            shiftKey: event.shiftKey,\n            metaKey: event.metaKey,\n            _internal_isTouch: !event.type.startsWith(\"mouse\") && event.type !== \"contextmenu\" && event.type !== \"click\",\n            _internal_srcType: event.type,\n            _internal_target: eventLike.target,\n            _internal_view: event.view,\n            _internal_preventDefault: ()=>{\n                if (event.type !== \"touchstart\") {\n                    // touchstart is passive and cannot be prevented\n                    preventDefault(event);\n                }\n            }\n        };\n    }\n}\nfunction getBoundingClientRect(element) {\n    return element.getBoundingClientRect() || {\n        left: 0,\n        top: 0\n    };\n}\nfunction getDistance(p1, p2) {\n    const xDiff = p1.clientX - p2.clientX;\n    const yDiff = p1.clientY - p2.clientY;\n    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\nfunction preventDefault(event) {\n    if (event.cancelable) {\n        event.preventDefault();\n    }\n}\nfunction getPosition(eventLike) {\n    return {\n        _internal_x: eventLike.pageX,\n        _internal_y: eventLike.pageY\n    };\n}\nfunction eventTimeStamp(e) {\n    // for some reason e.timestamp is always 0 on iPad with magic mouse, so we use performance.now() as a fallback\n    return e.timeStamp || performance.now();\n}\nfunction touchWithId(touches, id) {\n    for(let i = 0; i < touches.length; ++i){\n        if (touches[i].identifier === id) {\n            return touches[i];\n        }\n    }\n    return null;\n}\n// returns true if item is above reference\nfunction comparePrimitiveZOrder(item, reference) {\n    return !reference || item === \"top\" && reference !== \"top\" || item === \"normal\" && reference === \"bottom\";\n}\nfunction findBestPrimitiveHitTest(sources, x, y) {\n    var _a, _b;\n    let bestPrimitiveHit;\n    let bestHitSource;\n    for (const source of sources){\n        const primitiveHitResults = (_b = (_a = source._internal_primitiveHitTest) === null || _a === void 0 ? void 0 : _a.call(source, x, y)) !== null && _b !== void 0 ? _b : [];\n        for (const hitResult of primitiveHitResults){\n            if (comparePrimitiveZOrder(hitResult.zOrder, bestPrimitiveHit === null || bestPrimitiveHit === void 0 ? void 0 : bestPrimitiveHit.zOrder)) {\n                bestPrimitiveHit = hitResult;\n                bestHitSource = source;\n            }\n        }\n    }\n    if (!bestPrimitiveHit || !bestHitSource) {\n        return null;\n    }\n    return {\n        _internal_hit: bestPrimitiveHit,\n        _internal_source: bestHitSource\n    };\n}\nfunction convertPrimitiveHitResult(primitiveHit) {\n    return {\n        _internal_source: primitiveHit._internal_source,\n        _internal_object: {\n            _internal_externalId: primitiveHit._internal_hit.externalId\n        },\n        _internal_cursorStyle: primitiveHit._internal_hit.cursorStyle\n    };\n}\n/**\n * Performs a hit test on a collection of pane views to determine which view and object\n * is located at a given coordinate (x, y) and returns the matching pane view and\n * hit-tested result object, or null if no match is found.\n */ function hitTestPaneView(paneViews, x, y) {\n    for (const paneView of paneViews){\n        const renderer = paneView._internal_renderer();\n        if (renderer !== null && renderer._internal_hitTest) {\n            const result = renderer._internal_hitTest(x, y);\n            if (result !== null) {\n                return {\n                    _internal_view: paneView,\n                    _internal_object: result\n                };\n            }\n        }\n    }\n    return null;\n}\nfunction hitTestPane(pane, x, y) {\n    const sources = pane._internal_orderedSources();\n    const bestPrimitiveHit = findBestPrimitiveHitTest(sources, x, y);\n    if ((bestPrimitiveHit === null || bestPrimitiveHit === void 0 ? void 0 : bestPrimitiveHit._internal_hit.zOrder) === \"top\") {\n        // a primitive hit on the 'top' layer will always beat the built-in hit tests\n        // (on normal layer) so we can return early here.\n        return convertPrimitiveHitResult(bestPrimitiveHit);\n    }\n    for (const source of sources){\n        if (bestPrimitiveHit && bestPrimitiveHit._internal_source === source && bestPrimitiveHit._internal_hit.zOrder !== \"bottom\" && !bestPrimitiveHit._internal_hit.isBackground) {\n            // a primitive will be drawn above a built-in item like a series marker\n            // therefore it takes precedence here.\n            return convertPrimitiveHitResult(bestPrimitiveHit);\n        }\n        const sourceResult = hitTestPaneView(source._internal_paneViews(pane), x, y);\n        if (sourceResult !== null) {\n            return {\n                _internal_source: source,\n                _internal_view: sourceResult._internal_view,\n                _internal_object: sourceResult._internal_object\n            };\n        }\n        if (bestPrimitiveHit && bestPrimitiveHit._internal_source === source && bestPrimitiveHit._internal_hit.zOrder !== \"bottom\" && bestPrimitiveHit._internal_hit.isBackground) {\n            return convertPrimitiveHitResult(bestPrimitiveHit);\n        }\n    }\n    if (bestPrimitiveHit === null || bestPrimitiveHit === void 0 ? void 0 : bestPrimitiveHit._internal_hit) {\n        // return primitive hits for the 'bottom' layer\n        return convertPrimitiveHitResult(bestPrimitiveHit);\n    }\n    return null;\n}\nfunction buildPriceAxisViewsGetter(zOrder, priceScaleId) {\n    return (source)=>{\n        var _a, _b, _c, _d;\n        const psId = (_b = (_a = source._internal_priceScale()) === null || _a === void 0 ? void 0 : _a._internal_id()) !== null && _b !== void 0 ? _b : \"\";\n        if (psId !== priceScaleId) {\n            // exclude if source is using a different price scale.\n            return [];\n        }\n        return (_d = (_c = source._internal_pricePaneViews) === null || _c === void 0 ? void 0 : _c.call(source, zOrder)) !== null && _d !== void 0 ? _d : [];\n    };\n}\nfunction recalculateOverlapping(views, direction, scaleHeight, rendererOptions) {\n    if (!views.length) {\n        return;\n    }\n    let currentGroupStart = 0;\n    const center = scaleHeight / 2;\n    const initLabelHeight = views[0]._internal_height(rendererOptions, true);\n    let spaceBeforeCurrentGroup = direction === 1 ? center - (views[0]._internal_getFixedCoordinate() - initLabelHeight / 2) : views[0]._internal_getFixedCoordinate() - initLabelHeight / 2 - center;\n    spaceBeforeCurrentGroup = Math.max(0, spaceBeforeCurrentGroup);\n    for(let i = 1; i < views.length; i++){\n        const view = views[i];\n        const prev = views[i - 1];\n        const height = prev._internal_height(rendererOptions, false);\n        const coordinate = view._internal_getFixedCoordinate();\n        const prevFixedCoordinate = prev._internal_getFixedCoordinate();\n        const overlap = direction === 1 ? coordinate > prevFixedCoordinate - height : coordinate < prevFixedCoordinate + height;\n        if (overlap) {\n            const fixedCoordinate = prevFixedCoordinate - height * direction;\n            view._internal_setFixedCoordinate(fixedCoordinate);\n            const edgePoint = fixedCoordinate - direction * height / 2;\n            const outOfViewport = direction === 1 ? edgePoint < 0 : edgePoint > scaleHeight;\n            if (outOfViewport && spaceBeforeCurrentGroup > 0) {\n                // shift the whole group up or down\n                const desiredGroupShift = direction === 1 ? -1 - edgePoint : edgePoint - scaleHeight;\n                const possibleShift = Math.min(desiredGroupShift, spaceBeforeCurrentGroup);\n                for(let k = currentGroupStart; k < views.length; k++){\n                    views[k]._internal_setFixedCoordinate(views[k]._internal_getFixedCoordinate() + direction * possibleShift);\n                }\n                spaceBeforeCurrentGroup -= possibleShift;\n            }\n        } else {\n            currentGroupStart = i;\n            spaceBeforeCurrentGroup = direction === 1 ? prevFixedCoordinate - height - coordinate : coordinate - (prevFixedCoordinate + height);\n        }\n    }\n}\nfunction priceScaleCrosshairLabelVisible(crosshair) {\n    return crosshair.mode !== 2 /* CrosshairMode.Hidden */  && crosshair.horzLine.visible && crosshair.horzLine.labelVisible;\n}\nclass PriceAxisWidget {\n    constructor(pane, options, rendererOptionsProvider, side){\n        this._private__priceScale = null;\n        this._private__size = null;\n        this._private__mousedown = false;\n        this._private__widthCache = new TextWidthCache(200);\n        this._private__font = null;\n        this._private__prevOptimalWidth = 0;\n        this._private__isSettingSize = false;\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize) {\n                return;\n            }\n            this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();\n        };\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize) {\n                return;\n            }\n            this._private__pane._internal_chart()._internal_model()._internal_lightUpdate();\n        };\n        this._private__pane = pane;\n        this._private__options = options;\n        this._private__layoutOptions = options.layout;\n        this._private__rendererOptionsProvider = rendererOptionsProvider;\n        this._private__isLeft = side === \"left\";\n        this._private__sourcePaneViews = buildPriceAxisViewsGetter(\"normal\", side);\n        this._private__sourceTopPaneViews = buildPriceAxisViewsGetter(\"top\", side);\n        this._private__sourceBottomPaneViews = buildPriceAxisViewsGetter(\"bottom\", side);\n        this._private__cell = document.createElement(\"div\");\n        this._private__cell.style.height = \"100%\";\n        this._private__cell.style.overflow = \"hidden\";\n        this._private__cell.style.width = \"25px\";\n        this._private__cell.style.left = \"0\";\n        this._private__cell.style.position = \"relative\";\n        this._private__canvasBinding = createBoundCanvas(this._private__cell, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        const canvas = this._private__canvasBinding.canvasElement;\n        canvas.style.position = \"absolute\";\n        canvas.style.zIndex = \"1\";\n        canvas.style.left = \"0\";\n        canvas.style.top = \"0\";\n        this._private__topCanvasBinding = createBoundCanvas(this._private__cell, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\n        topCanvas.style.position = \"absolute\";\n        topCanvas.style.zIndex = \"2\";\n        topCanvas.style.left = \"0\";\n        topCanvas.style.top = \"0\";\n        const handler = {\n            _internal_mouseDownEvent: this._private__mouseDownEvent.bind(this),\n            _internal_touchStartEvent: this._private__mouseDownEvent.bind(this),\n            _internal_pressedMouseMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\n            _internal_touchMoveEvent: this._private__pressedMouseMoveEvent.bind(this),\n            _internal_mouseDownOutsideEvent: this._private__mouseDownOutsideEvent.bind(this),\n            _internal_mouseUpEvent: this._private__mouseUpEvent.bind(this),\n            _internal_touchEndEvent: this._private__mouseUpEvent.bind(this),\n            _internal_mouseDoubleClickEvent: this._private__mouseDoubleClickEvent.bind(this),\n            _internal_doubleTapEvent: this._private__mouseDoubleClickEvent.bind(this),\n            _internal_mouseEnterEvent: this._private__mouseEnterEvent.bind(this),\n            _internal_mouseLeaveEvent: this._private__mouseLeaveEvent.bind(this)\n        };\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, handler, {\n            _internal_treatVertTouchDragAsPageScroll: ()=>!this._private__options.handleScroll.vertTouchDrag,\n            _internal_treatHorzTouchDragAsPageScroll: ()=>true\n        });\n    }\n    _internal_destroy() {\n        this._private__mouseEventHandler._internal_destroy();\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\n        this._private__topCanvasBinding.dispose();\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n        if (this._private__priceScale !== null) {\n            this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);\n        }\n        this._private__priceScale = null;\n    }\n    _internal_getElement() {\n        return this._private__cell;\n    }\n    _internal_fontSize() {\n        return this._private__layoutOptions.fontSize;\n    }\n    _internal_rendererOptions() {\n        const options = this._private__rendererOptionsProvider._internal_options();\n        const isFontChanged = this._private__font !== options._internal_font;\n        if (isFontChanged) {\n            this._private__widthCache._internal_reset();\n            this._private__font = options._internal_font;\n        }\n        return options;\n    }\n    _internal_optimalWidth() {\n        if (this._private__priceScale === null) {\n            return 0;\n        }\n        let tickMarkMaxWidth = 0;\n        const rendererOptions = this._internal_rendererOptions();\n        const ctx = ensureNotNull(this._private__canvasBinding.canvasElement.getContext(\"2d\"));\n        ctx.save();\n        const tickMarks = this._private__priceScale._internal_marks();\n        ctx.font = this._private__baseFont();\n        if (tickMarks.length > 0) {\n            tickMarkMaxWidth = Math.max(this._private__widthCache._internal_measureText(ctx, tickMarks[0]._internal_label), this._private__widthCache._internal_measureText(ctx, tickMarks[tickMarks.length - 1]._internal_label));\n        }\n        const views = this._private__backLabels();\n        for(let j = views.length; j--;){\n            const width = this._private__widthCache._internal_measureText(ctx, views[j]._internal_text());\n            if (width > tickMarkMaxWidth) {\n                tickMarkMaxWidth = width;\n            }\n        }\n        const firstValue = this._private__priceScale._internal_firstValue();\n        if (firstValue !== null && this._private__size !== null && priceScaleCrosshairLabelVisible(this._private__options.crosshair)) {\n            const topValue = this._private__priceScale._internal_coordinateToPrice(1, firstValue);\n            const bottomValue = this._private__priceScale._internal_coordinateToPrice(this._private__size.height - 2, firstValue);\n            tickMarkMaxWidth = Math.max(tickMarkMaxWidth, this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.floor(Math.min(topValue, bottomValue)) + 0.11111111111111, firstValue)), this._private__widthCache._internal_measureText(ctx, this._private__priceScale._internal_formatPrice(Math.ceil(Math.max(topValue, bottomValue)) - 0.11111111111111, firstValue)));\n        }\n        ctx.restore();\n        const resultTickMarksMaxWidth = tickMarkMaxWidth || 34 /* Constants.DefaultOptimalWidth */ ;\n        const res = Math.ceil(rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingInner + rendererOptions._internal_paddingOuter + 5 /* Constants.LabelOffset */  + resultTickMarksMaxWidth);\n        // make it even, remove this after migration to perfect fancy canvas\n        return suggestPriceScaleWidth(res);\n    }\n    _internal_setSize(newSize) {\n        if (this._private__size === null || !(0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, newSize)) {\n            this._private__size = newSize;\n            this._private__isSettingSize = true;\n            this._private__canvasBinding.resizeCanvasElement(newSize);\n            this._private__topCanvasBinding.resizeCanvasElement(newSize);\n            this._private__isSettingSize = false;\n            this._private__cell.style.width = `${newSize.width}px`;\n            this._private__cell.style.height = `${newSize.height}px`;\n        }\n    }\n    _internal_getWidth() {\n        return ensureNotNull(this._private__size).width;\n    }\n    _internal_setPriceScale(priceScale) {\n        if (this._private__priceScale === priceScale) {\n            return;\n        }\n        if (this._private__priceScale !== null) {\n            this._private__priceScale._internal_onMarksChanged()._internal_unsubscribeAll(this);\n        }\n        this._private__priceScale = priceScale;\n        priceScale._internal_onMarksChanged()._internal_subscribe(this._private__onMarksChanged.bind(this), this);\n    }\n    _internal_priceScale() {\n        return this._private__priceScale;\n    }\n    _internal_reset() {\n        const pane = this._private__pane._internal_state();\n        const model = this._private__pane._internal_chart()._internal_model();\n        model._internal_resetPriceScale(pane, ensureNotNull(this._internal_priceScale()));\n    }\n    _internal_paint(type) {\n        if (this._private__size === null) {\n            return;\n        }\n        if (type !== 1 /* InvalidationLevel.Cursor */ ) {\n            this._private__alignLabels();\n            this._private__canvasBinding.applySuggestedBitmapSize();\n            const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding);\n            if (target !== null) {\n                target.useBitmapCoordinateSpace((scope)=>{\n                    this._private__drawBackground(scope);\n                    this._private__drawBorder(scope);\n                });\n                this._private__pane._internal_drawAdditionalSources(target, this._private__sourceBottomPaneViews);\n                this._private__drawTickMarks(target);\n                this._private__pane._internal_drawAdditionalSources(target, this._private__sourcePaneViews);\n                this._private__drawBackLabels(target);\n            }\n        }\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\n        const topTarget = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__topCanvasBinding);\n        if (topTarget !== null) {\n            topTarget.useBitmapCoordinateSpace(({ context: ctx, bitmapSize })=>{\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\n            });\n            this._private__drawCrosshairLabel(topTarget);\n            this._private__pane._internal_drawAdditionalSources(topTarget, this._private__sourceTopPaneViews);\n        }\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _internal_update() {\n        var _a;\n        // this call has side-effect - it regenerates marks on the price scale\n        (_a = this._private__priceScale) === null || _a === void 0 ? void 0 : _a._internal_marks();\n    }\n    _private__mouseDownEvent(e) {\n        if (this._private__priceScale === null || this._private__priceScale._internal_isEmpty() || !this._private__options.handleScale.axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        this._private__mousedown = true;\n        model._internal_startScalePrice(pane, this._private__priceScale, e.localY);\n    }\n    _private__pressedMouseMoveEvent(e) {\n        if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        const priceScale = this._private__priceScale;\n        model._internal_scalePriceTo(pane, priceScale, e.localY);\n    }\n    _private__mouseDownOutsideEvent() {\n        if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        const priceScale = this._private__priceScale;\n        if (this._private__mousedown) {\n            this._private__mousedown = false;\n            model._internal_endScalePrice(pane, priceScale);\n        }\n    }\n    _private__mouseUpEvent(e) {\n        if (this._private__priceScale === null || !this._private__options.handleScale.axisPressedMouseMove.price) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const pane = this._private__pane._internal_state();\n        this._private__mousedown = false;\n        model._internal_endScalePrice(pane, this._private__priceScale);\n    }\n    _private__mouseDoubleClickEvent(e) {\n        if (this._private__options.handleScale.axisDoubleClickReset.price) {\n            this._internal_reset();\n        }\n    }\n    _private__mouseEnterEvent(e) {\n        if (this._private__priceScale === null) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        if (model._internal_options().handleScale.axisPressedMouseMove.price && !this._private__priceScale._internal_isPercentage() && !this._private__priceScale._internal_isIndexedTo100()) {\n            this._private__setCursor(1 /* CursorType.NsResize */ );\n        }\n    }\n    _private__mouseLeaveEvent(e) {\n        this._private__setCursor(0 /* CursorType.Default */ );\n    }\n    _private__backLabels() {\n        const res = [];\n        const priceScale = this._private__priceScale === null ? undefined : this._private__priceScale;\n        const addViewsForSources = (sources)=>{\n            for(let i = 0; i < sources.length; ++i){\n                const source = sources[i];\n                const views = source._internal_priceAxisViews(this._private__pane._internal_state(), priceScale);\n                for(let j = 0; j < views.length; j++){\n                    res.push(views[j]);\n                }\n            }\n        };\n        // calculate max and min coordinates for views on selection\n        // crosshair individually\n        addViewsForSources(this._private__pane._internal_state()._internal_orderedSources());\n        return res;\n    }\n    _private__drawBackground({ context: ctx, bitmapSize }) {\n        const { width, height } = bitmapSize;\n        const model = this._private__pane._internal_state()._internal_model();\n        const topColor = model._internal_backgroundTopColor();\n        const bottomColor = model._internal_backgroundBottomColor();\n        if (topColor === bottomColor) {\n            clearRect(ctx, 0, 0, width, height, topColor);\n        } else {\n            clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);\n        }\n    }\n    _private__drawBorder({ context: ctx, bitmapSize, horizontalPixelRatio }) {\n        if (this._private__size === null || this._private__priceScale === null || !this._private__priceScale._internal_options().borderVisible) {\n            return;\n        }\n        ctx.fillStyle = this._private__priceScale._internal_options().borderColor;\n        const borderSize = Math.max(1, Math.floor(this._internal_rendererOptions()._internal_borderSize * horizontalPixelRatio));\n        let left;\n        if (this._private__isLeft) {\n            left = bitmapSize.width - borderSize;\n        } else {\n            left = 0;\n        }\n        ctx.fillRect(left, 0, borderSize, bitmapSize.height);\n    }\n    _private__drawTickMarks(target) {\n        if (this._private__size === null || this._private__priceScale === null) {\n            return;\n        }\n        const tickMarks = this._private__priceScale._internal_marks();\n        const priceScaleOptions = this._private__priceScale._internal_options();\n        const rendererOptions = this._internal_rendererOptions();\n        const tickMarkLeftX = this._private__isLeft ? this._private__size.width - rendererOptions._internal_tickLength : 0;\n        if (priceScaleOptions.borderVisible && priceScaleOptions.ticksVisible) {\n            target.useBitmapCoordinateSpace(({ context: ctx, horizontalPixelRatio, verticalPixelRatio })=>{\n                ctx.fillStyle = priceScaleOptions.borderColor;\n                const tickHeight = Math.max(1, Math.floor(verticalPixelRatio));\n                const tickOffset = Math.floor(verticalPixelRatio * 0.5);\n                const tickLength = Math.round(rendererOptions._internal_tickLength * horizontalPixelRatio);\n                ctx.beginPath();\n                for (const tickMark of tickMarks){\n                    ctx.rect(Math.floor(tickMarkLeftX * horizontalPixelRatio), Math.round(tickMark._internal_coord * verticalPixelRatio) - tickOffset, tickLength, tickHeight);\n                }\n                ctx.fill();\n            });\n        }\n        target.useMediaCoordinateSpace(({ context: ctx })=>{\n            var _a;\n            ctx.font = this._private__baseFont();\n            ctx.fillStyle = (_a = priceScaleOptions.textColor) !== null && _a !== void 0 ? _a : this._private__layoutOptions.textColor;\n            ctx.textAlign = this._private__isLeft ? \"right\" : \"left\";\n            ctx.textBaseline = \"middle\";\n            const textLeftX = this._private__isLeft ? Math.round(tickMarkLeftX - rendererOptions._internal_paddingInner) : Math.round(tickMarkLeftX + rendererOptions._internal_tickLength + rendererOptions._internal_paddingInner);\n            const yMidCorrections = tickMarks.map((mark)=>this._private__widthCache._internal_yMidCorrection(ctx, mark._internal_label));\n            for(let i = tickMarks.length; i--;){\n                const tickMark = tickMarks[i];\n                ctx.fillText(tickMark._internal_label, textLeftX, tickMark._internal_coord + yMidCorrections[i]);\n            }\n        });\n    }\n    _private__alignLabels() {\n        if (this._private__size === null || this._private__priceScale === null) {\n            return;\n        }\n        const views = [];\n        const orderedSources = this._private__priceScale._internal_orderedSources().slice(); // Copy of array\n        const pane = this._private__pane;\n        const paneState = pane._internal_state();\n        const rendererOptions = this._internal_rendererOptions();\n        // if we are default price scale, append labels from no-scale\n        const isDefault = this._private__priceScale === paneState._internal_defaultVisiblePriceScale();\n        if (isDefault) {\n            this._private__pane._internal_state()._internal_orderedSources().forEach((source)=>{\n                if (paneState._internal_isOverlay(source)) {\n                    orderedSources.push(source);\n                }\n            });\n        }\n        const priceScale = this._private__priceScale;\n        const updateForSources = (sources)=>{\n            sources.forEach((source)=>{\n                const sourceViews = source._internal_priceAxisViews(paneState, priceScale);\n                // never align selected sources\n                sourceViews.forEach((view)=>{\n                    view._internal_setFixedCoordinate(null);\n                    if (view._internal_isVisible()) {\n                        views.push(view);\n                    }\n                });\n            });\n        };\n        // crosshair individually\n        updateForSources(orderedSources);\n        views.forEach((view)=>view._internal_setFixedCoordinate(view._internal_coordinate()));\n        const options = this._private__priceScale._internal_options();\n        if (!options.alignLabels) {\n            return;\n        }\n        this._private__fixLabelOverlap(views, rendererOptions);\n    }\n    _private__fixLabelOverlap(views, rendererOptions) {\n        if (this._private__size === null) {\n            return;\n        }\n        const center = this._private__size.height / 2;\n        // split into two parts\n        const top = views.filter((view)=>view._internal_coordinate() <= center);\n        const bottom = views.filter((view)=>view._internal_coordinate() > center);\n        // sort top from center to top\n        top.sort((l, r)=>r._internal_coordinate() - l._internal_coordinate());\n        bottom.sort((l, r)=>l._internal_coordinate() - r._internal_coordinate());\n        for (const view of views){\n            const halfHeight = Math.floor(view._internal_height(rendererOptions) / 2);\n            const coordinate = view._internal_coordinate();\n            if (coordinate > -halfHeight && coordinate < halfHeight) {\n                view._internal_setFixedCoordinate(halfHeight);\n            }\n            if (coordinate > this._private__size.height - halfHeight && coordinate < this._private__size.height + halfHeight) {\n                view._internal_setFixedCoordinate(this._private__size.height - halfHeight);\n            }\n        }\n        recalculateOverlapping(top, 1, this._private__size.height, rendererOptions);\n        recalculateOverlapping(bottom, -1, this._private__size.height, rendererOptions);\n    }\n    _private__drawBackLabels(target) {\n        if (this._private__size === null) {\n            return;\n        }\n        const views = this._private__backLabels();\n        const rendererOptions = this._internal_rendererOptions();\n        const align = this._private__isLeft ? \"right\" : \"left\";\n        views.forEach((view)=>{\n            if (view._internal_isAxisLabelVisible()) {\n                const renderer = view._internal_renderer(ensureNotNull(this._private__priceScale));\n                renderer._internal_draw(target, rendererOptions, this._private__widthCache, align);\n            }\n        });\n    }\n    _private__drawCrosshairLabel(target) {\n        if (this._private__size === null || this._private__priceScale === null) {\n            return;\n        }\n        const model = this._private__pane._internal_chart()._internal_model();\n        const views = []; // array of arrays\n        const pane = this._private__pane._internal_state();\n        const v = model._internal_crosshairSource()._internal_priceAxisViews(pane, this._private__priceScale);\n        if (v.length) {\n            views.push(v);\n        }\n        const ro = this._internal_rendererOptions();\n        const align = this._private__isLeft ? \"right\" : \"left\";\n        views.forEach((arr)=>{\n            arr.forEach((view)=>{\n                view._internal_renderer(ensureNotNull(this._private__priceScale))._internal_draw(target, ro, this._private__widthCache, align);\n            });\n        });\n    }\n    _private__setCursor(type) {\n        this._private__cell.style.cursor = type === 1 /* CursorType.NsResize */  ? \"ns-resize\" : \"default\";\n    }\n    _private__onMarksChanged() {\n        const width = this._internal_optimalWidth();\n        // avoid price scale is shrunk\n        // using < instead !== to avoid infinite changes\n        if (this._private__prevOptimalWidth < width) {\n            this._private__pane._internal_chart()._internal_model()._internal_fullUpdate();\n        }\n        this._private__prevOptimalWidth = width;\n    }\n    _private__baseFont() {\n        return makeFont(this._private__layoutOptions.fontSize, this._private__layoutOptions.fontFamily);\n    }\n}\nfunction sourceBottomPaneViews$1(source, pane) {\n    var _a, _b;\n    return (_b = (_a = source._internal_bottomPaneViews) === null || _a === void 0 ? void 0 : _a.call(source, pane)) !== null && _b !== void 0 ? _b : [];\n}\nfunction sourcePaneViews$1(source, pane) {\n    var _a, _b;\n    return (_b = (_a = source._internal_paneViews) === null || _a === void 0 ? void 0 : _a.call(source, pane)) !== null && _b !== void 0 ? _b : [];\n}\nfunction sourceLabelPaneViews(source, pane) {\n    var _a, _b;\n    return (_b = (_a = source._internal_labelPaneViews) === null || _a === void 0 ? void 0 : _a.call(source, pane)) !== null && _b !== void 0 ? _b : [];\n}\nfunction sourceTopPaneViews$1(source, pane) {\n    var _a, _b;\n    return (_b = (_a = source._internal_topPaneViews) === null || _a === void 0 ? void 0 : _a.call(source, pane)) !== null && _b !== void 0 ? _b : [];\n}\nclass PaneWidget {\n    constructor(chart, state){\n        this._private__size = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        });\n        this._private__leftPriceAxisWidget = null;\n        this._private__rightPriceAxisWidget = null;\n        this._private__attributionLogoWidget = null;\n        this._private__startScrollingPos = null;\n        this._private__isScrolling = false;\n        this._private__clicked = new Delegate();\n        this._private__dblClicked = new Delegate();\n        this._private__prevPinchScale = 0;\n        this._private__longTap = false;\n        this._private__startTrackPoint = null;\n        this._private__exitTrackingModeOnNextTry = false;\n        this._private__initCrosshairPosition = null;\n        this._private__scrollXAnimation = null;\n        this._private__isSettingSize = false;\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize || this._private__state === null) {\n                return;\n            }\n            this._private__model()._internal_lightUpdate();\n        };\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (this._private__isSettingSize || this._private__state === null) {\n                return;\n            }\n            this._private__model()._internal_lightUpdate();\n        };\n        this._private__chart = chart;\n        this._private__state = state;\n        this._private__state._internal_onDestroyed()._internal_subscribe(this._private__onStateDestroyed.bind(this), this, true);\n        this._private__paneCell = document.createElement(\"td\");\n        this._private__paneCell.style.padding = \"0\";\n        this._private__paneCell.style.position = \"relative\";\n        const paneWrapper = document.createElement(\"div\");\n        paneWrapper.style.width = \"100%\";\n        paneWrapper.style.height = \"100%\";\n        paneWrapper.style.position = \"relative\";\n        paneWrapper.style.overflow = \"hidden\";\n        this._private__leftAxisCell = document.createElement(\"td\");\n        this._private__leftAxisCell.style.padding = \"0\";\n        this._private__rightAxisCell = document.createElement(\"td\");\n        this._private__rightAxisCell.style.padding = \"0\";\n        this._private__paneCell.appendChild(paneWrapper);\n        this._private__canvasBinding = createBoundCanvas(paneWrapper, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        const canvas = this._private__canvasBinding.canvasElement;\n        canvas.style.position = \"absolute\";\n        canvas.style.zIndex = \"1\";\n        canvas.style.left = \"0\";\n        canvas.style.top = \"0\";\n        this._private__topCanvasBinding = createBoundCanvas(paneWrapper, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\n        topCanvas.style.position = \"absolute\";\n        topCanvas.style.zIndex = \"2\";\n        topCanvas.style.left = \"0\";\n        topCanvas.style.top = \"0\";\n        this._private__rowElement = document.createElement(\"tr\");\n        this._private__rowElement.appendChild(this._private__leftAxisCell);\n        this._private__rowElement.appendChild(this._private__paneCell);\n        this._private__rowElement.appendChild(this._private__rightAxisCell);\n        this._internal_updatePriceAxisWidgetsStates();\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, this, {\n            _internal_treatVertTouchDragAsPageScroll: ()=>this._private__startTrackPoint === null && !this._private__chart._internal_options().handleScroll.vertTouchDrag,\n            _internal_treatHorzTouchDragAsPageScroll: ()=>this._private__startTrackPoint === null && !this._private__chart._internal_options().handleScroll.horzTouchDrag\n        });\n    }\n    _internal_destroy() {\n        if (this._private__leftPriceAxisWidget !== null) {\n            this._private__leftPriceAxisWidget._internal_destroy();\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            this._private__rightPriceAxisWidget._internal_destroy();\n        }\n        this._private__attributionLogoWidget = null;\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\n        this._private__topCanvasBinding.dispose();\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\n        }\n        this._private__mouseEventHandler._internal_destroy();\n    }\n    _internal_state() {\n        return ensureNotNull(this._private__state);\n    }\n    _internal_setState(pane) {\n        var _a, _b;\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\n        }\n        this._private__state = pane;\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_subscribe(PaneWidget.prototype._private__onStateDestroyed.bind(this), this, true);\n        }\n        this._internal_updatePriceAxisWidgetsStates();\n        if (this._private__chart._internal_paneWidgets().indexOf(this) === this._private__chart._internal_paneWidgets().length - 1) {\n            this._private__attributionLogoWidget = (_a = this._private__attributionLogoWidget) !== null && _a !== void 0 ? _a : new AttributionLogoWidget(this._private__paneCell, this._private__chart);\n            this._private__attributionLogoWidget._internal_update();\n        } else {\n            (_b = this._private__attributionLogoWidget) === null || _b === void 0 ? void 0 : _b._internal_removeElement();\n            this._private__attributionLogoWidget = null;\n        }\n    }\n    _internal_chart() {\n        return this._private__chart;\n    }\n    _internal_getElement() {\n        return this._private__rowElement;\n    }\n    _internal_updatePriceAxisWidgetsStates() {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__recreatePriceAxisWidgets();\n        if (this._private__model()._internal_serieses().length === 0) {\n            return;\n        }\n        if (this._private__leftPriceAxisWidget !== null) {\n            const leftPriceScale = this._private__state._internal_leftPriceScale();\n            this._private__leftPriceAxisWidget._internal_setPriceScale(ensureNotNull(leftPriceScale));\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            const rightPriceScale = this._private__state._internal_rightPriceScale();\n            this._private__rightPriceAxisWidget._internal_setPriceScale(ensureNotNull(rightPriceScale));\n        }\n    }\n    _internal_updatePriceAxisWidgets() {\n        if (this._private__leftPriceAxisWidget !== null) {\n            this._private__leftPriceAxisWidget._internal_update();\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            this._private__rightPriceAxisWidget._internal_update();\n        }\n    }\n    _internal_stretchFactor() {\n        return this._private__state !== null ? this._private__state._internal_stretchFactor() : 0;\n    }\n    _internal_setStretchFactor(stretchFactor) {\n        if (this._private__state) {\n            this._private__state._internal_setStretchFactor(stretchFactor);\n        }\n    }\n    _internal_mouseEnterEvent(event) {\n        if (!this._private__state) {\n            return;\n        }\n        this._private__onMouseEvent();\n        const x = event.localX;\n        const y = event.localY;\n        this._private__setCrosshairPosition(x, y, event);\n    }\n    _internal_mouseDownEvent(event) {\n        this._private__onMouseEvent();\n        this._private__mouseTouchDownEvent();\n        this._private__setCrosshairPosition(event.localX, event.localY, event);\n    }\n    _internal_mouseMoveEvent(event) {\n        var _a;\n        if (!this._private__state) {\n            return;\n        }\n        this._private__onMouseEvent();\n        const x = event.localX;\n        const y = event.localY;\n        this._private__setCrosshairPosition(x, y, event);\n        const hitTest = this._internal_hitTest(x, y);\n        this._private__chart._internal_setCursorStyle((_a = hitTest === null || hitTest === void 0 ? void 0 : hitTest._internal_cursorStyle) !== null && _a !== void 0 ? _a : null);\n        this._private__model()._internal_setHoveredSource(hitTest && {\n            _internal_source: hitTest._internal_source,\n            _internal_object: hitTest._internal_object\n        });\n    }\n    _internal_mouseClickEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__onMouseEvent();\n        this._private__fireClickedDelegate(event);\n    }\n    _internal_mouseDoubleClickEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__fireMouseClickDelegate(this._private__dblClicked, event);\n    }\n    _internal_doubleTapEvent(event) {\n        this._internal_mouseDoubleClickEvent(event);\n    }\n    _internal_pressedMouseMoveEvent(event) {\n        this._private__onMouseEvent();\n        this._private__pressedMouseTouchMoveEvent(event);\n        this._private__setCrosshairPosition(event.localX, event.localY, event);\n    }\n    _internal_mouseUpEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__onMouseEvent();\n        this._private__longTap = false;\n        this._private__endScroll(event);\n    }\n    _internal_tapEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__fireClickedDelegate(event);\n    }\n    _internal_longTapEvent(event) {\n        this._private__longTap = true;\n        if (this._private__startTrackPoint === null) {\n            const point = {\n                x: event.localX,\n                y: event.localY\n            };\n            this._private__startTrackingMode(point, point, event);\n        }\n    }\n    _internal_mouseLeaveEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        this._private__onMouseEvent();\n        this._private__state._internal_model()._internal_setHoveredSource(null);\n        this._private__clearCrosshairPosition();\n    }\n    _internal_clicked() {\n        return this._private__clicked;\n    }\n    _internal_dblClicked() {\n        return this._private__dblClicked;\n    }\n    _internal_pinchStartEvent() {\n        this._private__prevPinchScale = 1;\n        this._private__model()._internal_stopTimeScaleAnimation();\n    }\n    _internal_pinchEvent(middlePoint, scale) {\n        if (!this._private__chart._internal_options().handleScale.pinch) {\n            return;\n        }\n        const zoomScale = (scale - this._private__prevPinchScale) * 5;\n        this._private__prevPinchScale = scale;\n        this._private__model()._internal_zoomTime(middlePoint._internal_x, zoomScale);\n    }\n    _internal_touchStartEvent(event) {\n        this._private__longTap = false;\n        this._private__exitTrackingModeOnNextTry = this._private__startTrackPoint !== null;\n        this._private__mouseTouchDownEvent();\n        const crosshair = this._private__model()._internal_crosshairSource();\n        if (this._private__startTrackPoint !== null && crosshair._internal_visible()) {\n            this._private__initCrosshairPosition = {\n                x: crosshair._internal_appliedX(),\n                y: crosshair._internal_appliedY()\n            };\n            this._private__startTrackPoint = {\n                x: event.localX,\n                y: event.localY\n            };\n        }\n    }\n    _internal_touchMoveEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        const x = event.localX;\n        const y = event.localY;\n        if (this._private__startTrackPoint !== null) {\n            // tracking mode: move crosshair\n            this._private__exitTrackingModeOnNextTry = false;\n            const origPoint = ensureNotNull(this._private__initCrosshairPosition);\n            const newX = origPoint.x + (x - this._private__startTrackPoint.x);\n            const newY = origPoint.y + (y - this._private__startTrackPoint.y);\n            this._private__setCrosshairPosition(newX, newY, event);\n            return;\n        }\n        this._private__pressedMouseTouchMoveEvent(event);\n    }\n    _internal_touchEndEvent(event) {\n        if (this._internal_chart()._internal_options().trackingMode.exitMode === 0 /* TrackingModeExitMode.OnTouchEnd */ ) {\n            this._private__exitTrackingModeOnNextTry = true;\n        }\n        this._private__tryExitTrackingMode();\n        this._private__endScroll(event);\n    }\n    _internal_hitTest(x, y) {\n        const state = this._private__state;\n        if (state === null) {\n            return null;\n        }\n        return hitTestPane(state, x, y);\n    }\n    _internal_setPriceAxisSize(width, position) {\n        const priceAxisWidget = position === \"left\" ? this._private__leftPriceAxisWidget : this._private__rightPriceAxisWidget;\n        ensureNotNull(priceAxisWidget)._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width,\n            height: this._private__size.height\n        }));\n    }\n    _internal_getSize() {\n        return this._private__size;\n    }\n    _internal_setSize(newSize) {\n        if ((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, newSize)) {\n            return;\n        }\n        this._private__size = newSize;\n        this._private__isSettingSize = true;\n        this._private__canvasBinding.resizeCanvasElement(newSize);\n        this._private__topCanvasBinding.resizeCanvasElement(newSize);\n        this._private__isSettingSize = false;\n        this._private__paneCell.style.width = newSize.width + \"px\";\n        this._private__paneCell.style.height = newSize.height + \"px\";\n    }\n    _internal_recalculatePriceScales() {\n        const pane = ensureNotNull(this._private__state);\n        pane._internal_recalculatePriceScale(pane._internal_leftPriceScale());\n        pane._internal_recalculatePriceScale(pane._internal_rightPriceScale());\n        for (const source of pane._internal_dataSources()){\n            if (pane._internal_isOverlay(source)) {\n                const priceScale = source._internal_priceScale();\n                if (priceScale !== null) {\n                    pane._internal_recalculatePriceScale(priceScale);\n                }\n                // for overlay drawings price scale is owner's price scale\n                // however owner's price scale could not contain ds\n                source._internal_updateAllViews();\n            }\n        }\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _internal_paint(type) {\n        if (type === 0 /* InvalidationLevel.None */ ) {\n            return;\n        }\n        if (this._private__state === null) {\n            return;\n        }\n        if (type > 1 /* InvalidationLevel.Cursor */ ) {\n            this._internal_recalculatePriceScales();\n        }\n        if (this._private__leftPriceAxisWidget !== null) {\n            this._private__leftPriceAxisWidget._internal_paint(type);\n        }\n        if (this._private__rightPriceAxisWidget !== null) {\n            this._private__rightPriceAxisWidget._internal_paint(type);\n        }\n        if (type !== 1 /* InvalidationLevel.Cursor */ ) {\n            this._private__canvasBinding.applySuggestedBitmapSize();\n            const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding);\n            if (target !== null) {\n                target.useBitmapCoordinateSpace((scope)=>{\n                    this._private__drawBackground(scope);\n                });\n                if (this._private__state) {\n                    this._private__drawSources(target, sourceBottomPaneViews$1);\n                    this._private__drawGrid(target);\n                    this._private__drawWatermark(target);\n                    this._private__drawSources(target, sourcePaneViews$1);\n                    this._private__drawSources(target, sourceLabelPaneViews);\n                }\n            }\n        }\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\n        const topTarget = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__topCanvasBinding);\n        if (topTarget !== null) {\n            topTarget.useBitmapCoordinateSpace(({ context: ctx, bitmapSize })=>{\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\n            });\n            this._private__drawCrosshair(topTarget);\n            this._private__drawSources(topTarget, sourceTopPaneViews$1);\n        }\n    }\n    _internal_leftPriceAxisWidget() {\n        return this._private__leftPriceAxisWidget;\n    }\n    _internal_rightPriceAxisWidget() {\n        return this._private__rightPriceAxisWidget;\n    }\n    _internal_drawAdditionalSources(target, paneViewsGetter) {\n        this._private__drawSources(target, paneViewsGetter);\n    }\n    _private__onStateDestroyed() {\n        if (this._private__state !== null) {\n            this._private__state._internal_onDestroyed()._internal_unsubscribeAll(this);\n        }\n        this._private__state = null;\n    }\n    _private__fireClickedDelegate(event) {\n        this._private__fireMouseClickDelegate(this._private__clicked, event);\n    }\n    _private__fireMouseClickDelegate(delegate, event) {\n        const x = event.localX;\n        const y = event.localY;\n        if (delegate._internal_hasListeners()) {\n            delegate._internal_fire(this._private__model()._internal_timeScale()._internal_coordinateToIndex(x), {\n                x,\n                y\n            }, event);\n        }\n    }\n    _private__drawBackground({ context: ctx, bitmapSize }) {\n        const { width, height } = bitmapSize;\n        const model = this._private__model();\n        const topColor = model._internal_backgroundTopColor();\n        const bottomColor = model._internal_backgroundBottomColor();\n        if (topColor === bottomColor) {\n            clearRect(ctx, 0, 0, width, height, bottomColor);\n        } else {\n            clearRectWithGradient(ctx, 0, 0, width, height, topColor, bottomColor);\n        }\n    }\n    _private__drawGrid(target) {\n        const state = ensureNotNull(this._private__state);\n        const paneView = state._internal_grid()._internal_paneView();\n        const renderer = paneView._internal_renderer();\n        if (renderer !== null) {\n            renderer._internal_draw(target, false);\n        }\n    }\n    _private__drawWatermark(target) {\n        const source = this._private__model()._internal_watermarkSource();\n        this._private__drawSourceImpl(target, sourcePaneViews$1, drawBackground, source);\n        this._private__drawSourceImpl(target, sourcePaneViews$1, drawForeground, source);\n    }\n    _private__drawCrosshair(target) {\n        this._private__drawSourceImpl(target, sourcePaneViews$1, drawForeground, this._private__model()._internal_crosshairSource());\n    }\n    _private__drawSources(target, paneViewsGetter) {\n        const state = ensureNotNull(this._private__state);\n        const sources = state._internal_orderedSources();\n        for (const source of sources){\n            this._private__drawSourceImpl(target, paneViewsGetter, drawBackground, source);\n        }\n        for (const source of sources){\n            this._private__drawSourceImpl(target, paneViewsGetter, drawForeground, source);\n        }\n    }\n    _private__drawSourceImpl(target, paneViewsGetter, drawFn, source) {\n        const state = ensureNotNull(this._private__state);\n        const hoveredSource = state._internal_model()._internal_hoveredSource();\n        const isHovered = hoveredSource !== null && hoveredSource._internal_source === source;\n        const objecId = hoveredSource !== null && isHovered && hoveredSource._internal_object !== undefined ? hoveredSource._internal_object._internal_hitTestData : undefined;\n        const drawRendererFn = (renderer)=>drawFn(renderer, target, isHovered, objecId);\n        drawSourcePaneViews(paneViewsGetter, drawRendererFn, source, state);\n    }\n    _private__recreatePriceAxisWidgets() {\n        if (this._private__state === null) {\n            return;\n        }\n        const chart = this._private__chart;\n        const leftAxisVisible = this._private__state._internal_leftPriceScale()._internal_options().visible;\n        const rightAxisVisible = this._private__state._internal_rightPriceScale()._internal_options().visible;\n        if (!leftAxisVisible && this._private__leftPriceAxisWidget !== null) {\n            this._private__leftAxisCell.removeChild(this._private__leftPriceAxisWidget._internal_getElement());\n            this._private__leftPriceAxisWidget._internal_destroy();\n            this._private__leftPriceAxisWidget = null;\n        }\n        if (!rightAxisVisible && this._private__rightPriceAxisWidget !== null) {\n            this._private__rightAxisCell.removeChild(this._private__rightPriceAxisWidget._internal_getElement());\n            this._private__rightPriceAxisWidget._internal_destroy();\n            this._private__rightPriceAxisWidget = null;\n        }\n        const rendererOptionsProvider = chart._internal_model()._internal_rendererOptionsProvider();\n        if (leftAxisVisible && this._private__leftPriceAxisWidget === null) {\n            this._private__leftPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, \"left\");\n            this._private__leftAxisCell.appendChild(this._private__leftPriceAxisWidget._internal_getElement());\n        }\n        if (rightAxisVisible && this._private__rightPriceAxisWidget === null) {\n            this._private__rightPriceAxisWidget = new PriceAxisWidget(this, chart._internal_options(), rendererOptionsProvider, \"right\");\n            this._private__rightAxisCell.appendChild(this._private__rightPriceAxisWidget._internal_getElement());\n        }\n    }\n    _private__preventScroll(event) {\n        return event._internal_isTouch && this._private__longTap || this._private__startTrackPoint !== null;\n    }\n    _private__correctXCoord(x) {\n        return Math.max(0, Math.min(x, this._private__size.width - 1));\n    }\n    _private__correctYCoord(y) {\n        return Math.max(0, Math.min(y, this._private__size.height - 1));\n    }\n    _private__setCrosshairPosition(x, y, event) {\n        this._private__model()._internal_setAndSaveCurrentPosition(this._private__correctXCoord(x), this._private__correctYCoord(y), event, ensureNotNull(this._private__state));\n    }\n    _private__clearCrosshairPosition() {\n        this._private__model()._internal_clearCurrentPosition();\n    }\n    _private__tryExitTrackingMode() {\n        if (this._private__exitTrackingModeOnNextTry) {\n            this._private__startTrackPoint = null;\n            this._private__clearCrosshairPosition();\n        }\n    }\n    _private__startTrackingMode(startTrackPoint, crossHairPosition, event) {\n        this._private__startTrackPoint = startTrackPoint;\n        this._private__exitTrackingModeOnNextTry = false;\n        this._private__setCrosshairPosition(crossHairPosition.x, crossHairPosition.y, event);\n        const crosshair = this._private__model()._internal_crosshairSource();\n        this._private__initCrosshairPosition = {\n            x: crosshair._internal_appliedX(),\n            y: crosshair._internal_appliedY()\n        };\n    }\n    _private__model() {\n        return this._private__chart._internal_model();\n    }\n    _private__endScroll(event) {\n        if (!this._private__isScrolling) {\n            return;\n        }\n        const model = this._private__model();\n        const state = this._internal_state();\n        model._internal_endScrollPrice(state, state._internal_defaultPriceScale());\n        this._private__startScrollingPos = null;\n        this._private__isScrolling = false;\n        model._internal_endScrollTime();\n        if (this._private__scrollXAnimation !== null) {\n            const startAnimationTime = performance.now();\n            const timeScale = model._internal_timeScale();\n            this._private__scrollXAnimation._internal_start(timeScale._internal_rightOffset(), startAnimationTime);\n            if (!this._private__scrollXAnimation._internal_finished(startAnimationTime)) {\n                model._internal_setTimeScaleAnimation(this._private__scrollXAnimation);\n            }\n        }\n    }\n    _private__onMouseEvent() {\n        this._private__startTrackPoint = null;\n    }\n    _private__mouseTouchDownEvent() {\n        if (!this._private__state) {\n            return;\n        }\n        this._private__model()._internal_stopTimeScaleAnimation();\n        if (document.activeElement !== document.body && document.activeElement !== document.documentElement) {\n            // If any focusable element except the page itself is focused, remove the focus\n            ensureNotNull(document.activeElement).blur();\n        } else {\n            // Clear selection\n            const selection = document.getSelection();\n            if (selection !== null) {\n                selection.removeAllRanges();\n            }\n        }\n        const priceScale = this._private__state._internal_defaultPriceScale();\n        if (priceScale._internal_isEmpty() || this._private__model()._internal_timeScale()._internal_isEmpty()) {\n            return;\n        }\n    }\n    // eslint-disable-next-line complexity\n    _private__pressedMouseTouchMoveEvent(event) {\n        if (this._private__state === null) {\n            return;\n        }\n        const model = this._private__model();\n        const timeScale = model._internal_timeScale();\n        if (timeScale._internal_isEmpty()) {\n            return;\n        }\n        const chartOptions = this._private__chart._internal_options();\n        const scrollOptions = chartOptions.handleScroll;\n        const kineticScrollOptions = chartOptions.kineticScroll;\n        if ((!scrollOptions.pressedMouseMove || event._internal_isTouch) && (!scrollOptions.horzTouchDrag && !scrollOptions.vertTouchDrag || !event._internal_isTouch)) {\n            return;\n        }\n        const priceScale = this._private__state._internal_defaultPriceScale();\n        const now = performance.now();\n        if (this._private__startScrollingPos === null && !this._private__preventScroll(event)) {\n            this._private__startScrollingPos = {\n                x: event.clientX,\n                y: event.clientY,\n                _internal_timestamp: now,\n                _internal_localX: event.localX,\n                _internal_localY: event.localY\n            };\n        }\n        if (this._private__startScrollingPos !== null && !this._private__isScrolling && (this._private__startScrollingPos.x !== event.clientX || this._private__startScrollingPos.y !== event.clientY)) {\n            if (event._internal_isTouch && kineticScrollOptions.touch || !event._internal_isTouch && kineticScrollOptions.mouse) {\n                const barSpacing = timeScale._internal_barSpacing();\n                this._private__scrollXAnimation = new KineticAnimation(0.2 /* KineticScrollConstants.MinScrollSpeed */  / barSpacing, 7 /* KineticScrollConstants.MaxScrollSpeed */  / barSpacing, 0.997 /* KineticScrollConstants.DumpingCoeff */ , 15 /* KineticScrollConstants.ScrollMinMove */  / barSpacing);\n                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), this._private__startScrollingPos._internal_timestamp);\n            } else {\n                this._private__scrollXAnimation = null;\n            }\n            if (!priceScale._internal_isEmpty()) {\n                model._internal_startScrollPrice(this._private__state, priceScale, event.localY);\n            }\n            model._internal_startScrollTime(event.localX);\n            this._private__isScrolling = true;\n        }\n        if (this._private__isScrolling) {\n            // this allows scrolling not default price scales\n            if (!priceScale._internal_isEmpty()) {\n                model._internal_scrollPriceTo(this._private__state, priceScale, event.localY);\n            }\n            model._internal_scrollTimeTo(event.localX);\n            if (this._private__scrollXAnimation !== null) {\n                this._private__scrollXAnimation._internal_addPosition(timeScale._internal_rightOffset(), now);\n            }\n        }\n    }\n}\nclass PriceAxisStub {\n    constructor(side, options, params, borderVisible, bottomColor){\n        this._private__invalidated = true;\n        this._private__size = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        });\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>this._internal_paint(3 /* InvalidationLevel.Full */ );\n        this._private__isLeft = side === \"left\";\n        this._private__rendererOptionsProvider = params._internal_rendererOptionsProvider;\n        this._private__options = options;\n        this._private__borderVisible = borderVisible;\n        this._private__bottomColor = bottomColor;\n        this._private__cell = document.createElement(\"div\");\n        this._private__cell.style.width = \"25px\";\n        this._private__cell.style.height = \"100%\";\n        this._private__cell.style.overflow = \"hidden\";\n        this._private__canvasBinding = createBoundCanvas(this._private__cell, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n    }\n    _internal_destroy() {\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n    }\n    _internal_getElement() {\n        return this._private__cell;\n    }\n    _internal_getSize() {\n        return this._private__size;\n    }\n    _internal_setSize(newSize) {\n        if (!(0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, newSize)) {\n            this._private__size = newSize;\n            this._private__canvasBinding.resizeCanvasElement(newSize);\n            this._private__cell.style.width = `${newSize.width}px`;\n            this._private__cell.style.height = `${newSize.height}px`;\n            this._private__invalidated = true;\n        }\n    }\n    _internal_paint(type) {\n        if (type < 3 /* InvalidationLevel.Full */  && !this._private__invalidated) {\n            return;\n        }\n        if (this._private__size.width === 0 || this._private__size.height === 0) {\n            return;\n        }\n        this._private__invalidated = false;\n        this._private__canvasBinding.applySuggestedBitmapSize();\n        const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding);\n        if (target !== null) {\n            target.useBitmapCoordinateSpace((scope)=>{\n                this._private__drawBackground(scope);\n                this._private__drawBorder(scope);\n            });\n        }\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _private__drawBorder({ context: ctx, bitmapSize, horizontalPixelRatio, verticalPixelRatio }) {\n        if (!this._private__borderVisible()) {\n            return;\n        }\n        ctx.fillStyle = this._private__options.timeScale.borderColor;\n        const horzBorderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * horizontalPixelRatio);\n        const vertBorderSize = Math.floor(this._private__rendererOptionsProvider._internal_options()._internal_borderSize * verticalPixelRatio);\n        const left = this._private__isLeft ? bitmapSize.width - horzBorderSize : 0;\n        ctx.fillRect(left, 0, horzBorderSize, vertBorderSize);\n    }\n    _private__drawBackground({ context: ctx, bitmapSize }) {\n        clearRect(ctx, 0, 0, bitmapSize.width, bitmapSize.height, this._private__bottomColor());\n    }\n}\nfunction buildTimeAxisViewsGetter(zOrder) {\n    return (source)=>{\n        var _a, _b;\n        return (_b = (_a = source._internal_timePaneViews) === null || _a === void 0 ? void 0 : _a.call(source, zOrder)) !== null && _b !== void 0 ? _b : [];\n    };\n}\nconst sourcePaneViews = buildTimeAxisViewsGetter(\"normal\");\nconst sourceTopPaneViews = buildTimeAxisViewsGetter(\"top\");\nconst sourceBottomPaneViews = buildTimeAxisViewsGetter(\"bottom\");\nclass TimeAxisWidget {\n    constructor(chartWidget, horzScaleBehavior){\n        this._private__leftStub = null;\n        this._private__rightStub = null;\n        this._private__rendererOptions = null;\n        this._private__mouseDown = false;\n        this._private__size = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 0,\n            height: 0\n        });\n        this._private__sizeChanged = new Delegate();\n        this._private__widthCache = new TextWidthCache(5);\n        this._private__isSettingSize = false;\n        this._private__canvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (!this._private__isSettingSize) {\n                this._private__chart._internal_model()._internal_lightUpdate();\n            }\n        };\n        this._private__topCanvasSuggestedBitmapSizeChangedHandler = ()=>{\n            if (!this._private__isSettingSize) {\n                this._private__chart._internal_model()._internal_lightUpdate();\n            }\n        };\n        this._private__chart = chartWidget;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__options = chartWidget._internal_options().layout;\n        this._private__element = document.createElement(\"tr\");\n        this._private__leftStubCell = document.createElement(\"td\");\n        this._private__leftStubCell.style.padding = \"0\";\n        this._private__rightStubCell = document.createElement(\"td\");\n        this._private__rightStubCell.style.padding = \"0\";\n        this._private__cell = document.createElement(\"td\");\n        this._private__cell.style.height = \"25px\";\n        this._private__cell.style.padding = \"0\";\n        this._private__dv = document.createElement(\"div\");\n        this._private__dv.style.width = \"100%\";\n        this._private__dv.style.height = \"100%\";\n        this._private__dv.style.position = \"relative\";\n        this._private__dv.style.overflow = \"hidden\";\n        this._private__cell.appendChild(this._private__dv);\n        this._private__canvasBinding = createBoundCanvas(this._private__dv, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__canvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        const canvas = this._private__canvasBinding.canvasElement;\n        canvas.style.position = \"absolute\";\n        canvas.style.zIndex = \"1\";\n        canvas.style.left = \"0\";\n        canvas.style.top = \"0\";\n        this._private__topCanvasBinding = createBoundCanvas(this._private__dv, (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: 16,\n            height: 16\n        }));\n        this._private__topCanvasBinding.subscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        const topCanvas = this._private__topCanvasBinding.canvasElement;\n        topCanvas.style.position = \"absolute\";\n        topCanvas.style.zIndex = \"2\";\n        topCanvas.style.left = \"0\";\n        topCanvas.style.top = \"0\";\n        this._private__element.appendChild(this._private__leftStubCell);\n        this._private__element.appendChild(this._private__cell);\n        this._private__element.appendChild(this._private__rightStubCell);\n        this._private__recreateStubs();\n        this._private__chart._internal_model()._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__recreateStubs.bind(this), this);\n        this._private__mouseEventHandler = new MouseEventHandler(this._private__topCanvasBinding.canvasElement, this, {\n            _internal_treatVertTouchDragAsPageScroll: ()=>true,\n            _internal_treatHorzTouchDragAsPageScroll: ()=>!this._private__chart._internal_options().handleScroll.horzTouchDrag\n        });\n    }\n    _internal_destroy() {\n        this._private__mouseEventHandler._internal_destroy();\n        if (this._private__leftStub !== null) {\n            this._private__leftStub._internal_destroy();\n        }\n        if (this._private__rightStub !== null) {\n            this._private__rightStub._internal_destroy();\n        }\n        this._private__topCanvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__topCanvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__topCanvasBinding.canvasElement);\n        this._private__topCanvasBinding.dispose();\n        this._private__canvasBinding.unsubscribeSuggestedBitmapSizeChanged(this._private__canvasSuggestedBitmapSizeChangedHandler);\n        releaseCanvas(this._private__canvasBinding.canvasElement);\n        this._private__canvasBinding.dispose();\n    }\n    _internal_getElement() {\n        return this._private__element;\n    }\n    _internal_leftStub() {\n        return this._private__leftStub;\n    }\n    _internal_rightStub() {\n        return this._private__rightStub;\n    }\n    _internal_mouseDownEvent(event) {\n        if (this._private__mouseDown) {\n            return;\n        }\n        this._private__mouseDown = true;\n        const model = this._private__chart._internal_model();\n        if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {\n            return;\n        }\n        model._internal_startScaleTime(event.localX);\n    }\n    _internal_touchStartEvent(event) {\n        this._internal_mouseDownEvent(event);\n    }\n    _internal_mouseDownOutsideEvent() {\n        const model = this._private__chart._internal_model();\n        if (!model._internal_timeScale()._internal_isEmpty() && this._private__mouseDown) {\n            this._private__mouseDown = false;\n            if (this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {\n                model._internal_endScaleTime();\n            }\n        }\n    }\n    _internal_pressedMouseMoveEvent(event) {\n        const model = this._private__chart._internal_model();\n        if (model._internal_timeScale()._internal_isEmpty() || !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {\n            return;\n        }\n        model._internal_scaleTimeTo(event.localX);\n    }\n    _internal_touchMoveEvent(event) {\n        this._internal_pressedMouseMoveEvent(event);\n    }\n    _internal_mouseUpEvent() {\n        this._private__mouseDown = false;\n        const model = this._private__chart._internal_model();\n        if (model._internal_timeScale()._internal_isEmpty() && !this._private__chart._internal_options().handleScale.axisPressedMouseMove.time) {\n            return;\n        }\n        model._internal_endScaleTime();\n    }\n    _internal_touchEndEvent() {\n        this._internal_mouseUpEvent();\n    }\n    _internal_mouseDoubleClickEvent() {\n        if (this._private__chart._internal_options().handleScale.axisDoubleClickReset.time) {\n            this._private__chart._internal_model()._internal_resetTimeScale();\n        }\n    }\n    _internal_doubleTapEvent() {\n        this._internal_mouseDoubleClickEvent();\n    }\n    _internal_mouseEnterEvent() {\n        if (this._private__chart._internal_model()._internal_options().handleScale.axisPressedMouseMove.time) {\n            this._private__setCursor(1 /* CursorType.EwResize */ );\n        }\n    }\n    _internal_mouseLeaveEvent() {\n        this._private__setCursor(0 /* CursorType.Default */ );\n    }\n    _internal_getSize() {\n        return this._private__size;\n    }\n    _internal_sizeChanged() {\n        return this._private__sizeChanged;\n    }\n    _internal_setSizes(timeAxisSize, leftStubWidth, rightStubWidth) {\n        if (!(0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.equalSizes)(this._private__size, timeAxisSize)) {\n            this._private__size = timeAxisSize;\n            this._private__isSettingSize = true;\n            this._private__canvasBinding.resizeCanvasElement(timeAxisSize);\n            this._private__topCanvasBinding.resizeCanvasElement(timeAxisSize);\n            this._private__isSettingSize = false;\n            this._private__cell.style.width = `${timeAxisSize.width}px`;\n            this._private__cell.style.height = `${timeAxisSize.height}px`;\n            this._private__sizeChanged._internal_fire(timeAxisSize);\n        }\n        if (this._private__leftStub !== null) {\n            this._private__leftStub._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: leftStubWidth,\n                height: timeAxisSize.height\n            }));\n        }\n        if (this._private__rightStub !== null) {\n            this._private__rightStub._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: rightStubWidth,\n                height: timeAxisSize.height\n            }));\n        }\n    }\n    _internal_optimalHeight() {\n        const rendererOptions = this._private__getRendererOptions();\n        return Math.ceil(// rendererOptions.offsetSize +\n        rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_fontSize + rendererOptions._internal_paddingTop + rendererOptions._internal_paddingBottom + rendererOptions._internal_labelBottomOffset);\n    }\n    _internal_update() {\n        // this call has side-effect - it regenerates marks on the time scale\n        this._private__chart._internal_model()._internal_timeScale()._internal_marks();\n    }\n    _internal_getBitmapSize() {\n        return this._private__canvasBinding.bitmapSize;\n    }\n    _internal_drawBitmap(ctx, x, y) {\n        const bitmapSize = this._internal_getBitmapSize();\n        if (bitmapSize.width > 0 && bitmapSize.height > 0) {\n            ctx.drawImage(this._private__canvasBinding.canvasElement, x, y);\n        }\n    }\n    _internal_paint(type) {\n        if (type === 0 /* InvalidationLevel.None */ ) {\n            return;\n        }\n        if (type !== 1 /* InvalidationLevel.Cursor */ ) {\n            this._private__canvasBinding.applySuggestedBitmapSize();\n            const target = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__canvasBinding);\n            if (target !== null) {\n                target.useBitmapCoordinateSpace((scope)=>{\n                    this._private__drawBackground(scope);\n                    this._private__drawBorder(scope);\n                    this._private__drawAdditionalSources(target, sourceBottomPaneViews);\n                });\n                this._private__drawTickMarks(target);\n                this._private__drawAdditionalSources(target, sourcePaneViews);\n            // atm we don't have sources to be drawn on time axis except crosshair which is rendered on top level canvas\n            // so let's don't call this code at all for now\n            // this._drawLabels(this._chart.model().dataSources(), target);\n            }\n            if (this._private__leftStub !== null) {\n                this._private__leftStub._internal_paint(type);\n            }\n            if (this._private__rightStub !== null) {\n                this._private__rightStub._internal_paint(type);\n            }\n        }\n        this._private__topCanvasBinding.applySuggestedBitmapSize();\n        const topTarget = (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.tryCreateCanvasRenderingTarget2D)(this._private__topCanvasBinding);\n        if (topTarget !== null) {\n            topTarget.useBitmapCoordinateSpace(({ context: ctx, bitmapSize })=>{\n                ctx.clearRect(0, 0, bitmapSize.width, bitmapSize.height);\n            });\n            this._private__drawLabels([\n                ...this._private__chart._internal_model()._internal_serieses(),\n                this._private__chart._internal_model()._internal_crosshairSource()\n            ], topTarget);\n            this._private__drawAdditionalSources(topTarget, sourceTopPaneViews);\n        }\n    }\n    _private__drawAdditionalSources(target, axisViewsGetter) {\n        const sources = this._private__chart._internal_model()._internal_serieses();\n        for (const source of sources){\n            drawSourcePaneViews(axisViewsGetter, (renderer)=>drawBackground(renderer, target, false, undefined), source, undefined);\n        }\n        for (const source of sources){\n            drawSourcePaneViews(axisViewsGetter, (renderer)=>drawForeground(renderer, target, false, undefined), source, undefined);\n        }\n    }\n    _private__drawBackground({ context: ctx, bitmapSize }) {\n        clearRect(ctx, 0, 0, bitmapSize.width, bitmapSize.height, this._private__chart._internal_model()._internal_backgroundBottomColor());\n    }\n    _private__drawBorder({ context: ctx, bitmapSize, verticalPixelRatio }) {\n        if (this._private__chart._internal_options().timeScale.borderVisible) {\n            ctx.fillStyle = this._private__lineColor();\n            const borderSize = Math.max(1, Math.floor(this._private__getRendererOptions()._internal_borderSize * verticalPixelRatio));\n            ctx.fillRect(0, 0, bitmapSize.width, borderSize);\n        }\n    }\n    _private__drawTickMarks(target) {\n        const timeScale = this._private__chart._internal_model()._internal_timeScale();\n        const tickMarks = timeScale._internal_marks();\n        if (!tickMarks || tickMarks.length === 0) {\n            return;\n        }\n        const maxWeight = this._private__horzScaleBehavior.maxTickMarkWeight(tickMarks);\n        const rendererOptions = this._private__getRendererOptions();\n        const options = timeScale._internal_options();\n        if (options.borderVisible && options.ticksVisible) {\n            target.useBitmapCoordinateSpace(({ context: ctx, horizontalPixelRatio, verticalPixelRatio })=>{\n                ctx.strokeStyle = this._private__lineColor();\n                ctx.fillStyle = this._private__lineColor();\n                const tickWidth = Math.max(1, Math.floor(horizontalPixelRatio));\n                const tickOffset = Math.floor(horizontalPixelRatio * 0.5);\n                ctx.beginPath();\n                const tickLen = Math.round(rendererOptions._internal_tickLength * verticalPixelRatio);\n                for(let index = tickMarks.length; index--;){\n                    const x = Math.round(tickMarks[index].coord * horizontalPixelRatio);\n                    ctx.rect(x - tickOffset, 0, tickWidth, tickLen);\n                }\n                ctx.fill();\n            });\n        }\n        target.useMediaCoordinateSpace(({ context: ctx })=>{\n            const yText = rendererOptions._internal_borderSize + rendererOptions._internal_tickLength + rendererOptions._internal_paddingTop + rendererOptions._internal_fontSize / 2;\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillStyle = this._private__textColor();\n            // draw base marks\n            ctx.font = this._private__baseFont();\n            for (const tickMark of tickMarks){\n                if (tickMark.weight < maxWeight) {\n                    const coordinate = tickMark.needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark.coord, tickMark.label) : tickMark.coord;\n                    ctx.fillText(tickMark.label, coordinate, yText);\n                }\n            }\n            if (this._private__chart._internal_options().timeScale.allowBoldLabels) {\n                ctx.font = this._private__baseBoldFont();\n            }\n            for (const tickMark of tickMarks){\n                if (tickMark.weight >= maxWeight) {\n                    const coordinate = tickMark.needAlignCoordinate ? this._private__alignTickMarkLabelCoordinate(ctx, tickMark.coord, tickMark.label) : tickMark.coord;\n                    ctx.fillText(tickMark.label, coordinate, yText);\n                }\n            }\n        });\n    }\n    _private__alignTickMarkLabelCoordinate(ctx, coordinate, labelText) {\n        const labelWidth = this._private__widthCache._internal_measureText(ctx, labelText);\n        const labelWidthHalf = labelWidth / 2;\n        const leftTextCoordinate = Math.floor(coordinate - labelWidthHalf) + 0.5;\n        if (leftTextCoordinate < 0) {\n            coordinate = coordinate + Math.abs(0 - leftTextCoordinate);\n        } else if (leftTextCoordinate + labelWidth > this._private__size.width) {\n            coordinate = coordinate - Math.abs(this._private__size.width - (leftTextCoordinate + labelWidth));\n        }\n        return coordinate;\n    }\n    _private__drawLabels(sources, target) {\n        const rendererOptions = this._private__getRendererOptions();\n        for (const source of sources){\n            for (const view of source._internal_timeAxisViews()){\n                view._internal_renderer()._internal_draw(target, rendererOptions);\n            }\n        }\n    }\n    _private__lineColor() {\n        return this._private__chart._internal_options().timeScale.borderColor;\n    }\n    _private__textColor() {\n        return this._private__options.textColor;\n    }\n    _private__fontSize() {\n        return this._private__options.fontSize;\n    }\n    _private__baseFont() {\n        return makeFont(this._private__fontSize(), this._private__options.fontFamily);\n    }\n    _private__baseBoldFont() {\n        return makeFont(this._private__fontSize(), this._private__options.fontFamily, \"bold\");\n    }\n    _private__getRendererOptions() {\n        if (this._private__rendererOptions === null) {\n            this._private__rendererOptions = {\n                _internal_borderSize: 1 /* Constants.BorderSize */ ,\n                _internal_baselineOffset: NaN,\n                _internal_paddingTop: NaN,\n                _internal_paddingBottom: NaN,\n                _internal_paddingHorizontal: NaN,\n                _internal_tickLength: 5 /* Constants.TickLength */ ,\n                _internal_fontSize: NaN,\n                _internal_font: \"\",\n                _internal_widthCache: new TextWidthCache(),\n                _internal_labelBottomOffset: 0\n            };\n        }\n        const rendererOptions = this._private__rendererOptions;\n        const newFont = this._private__baseFont();\n        if (rendererOptions._internal_font !== newFont) {\n            const fontSize = this._private__fontSize();\n            rendererOptions._internal_fontSize = fontSize;\n            rendererOptions._internal_font = newFont;\n            rendererOptions._internal_paddingTop = 3 * fontSize / 12;\n            rendererOptions._internal_paddingBottom = 3 * fontSize / 12;\n            rendererOptions._internal_paddingHorizontal = 9 * fontSize / 12;\n            rendererOptions._internal_baselineOffset = 0;\n            rendererOptions._internal_labelBottomOffset = 4 * fontSize / 12;\n            rendererOptions._internal_widthCache._internal_reset();\n        }\n        return this._private__rendererOptions;\n    }\n    _private__setCursor(type) {\n        this._private__cell.style.cursor = type === 1 /* CursorType.EwResize */  ? \"ew-resize\" : \"default\";\n    }\n    _private__recreateStubs() {\n        const model = this._private__chart._internal_model();\n        const options = model._internal_options();\n        if (!options.leftPriceScale.visible && this._private__leftStub !== null) {\n            this._private__leftStubCell.removeChild(this._private__leftStub._internal_getElement());\n            this._private__leftStub._internal_destroy();\n            this._private__leftStub = null;\n        }\n        if (!options.rightPriceScale.visible && this._private__rightStub !== null) {\n            this._private__rightStubCell.removeChild(this._private__rightStub._internal_getElement());\n            this._private__rightStub._internal_destroy();\n            this._private__rightStub = null;\n        }\n        const rendererOptionsProvider = this._private__chart._internal_model()._internal_rendererOptionsProvider();\n        const params = {\n            _internal_rendererOptionsProvider: rendererOptionsProvider\n        };\n        const borderVisibleGetter = ()=>{\n            return options.leftPriceScale.borderVisible && model._internal_timeScale()._internal_options().borderVisible;\n        };\n        const bottomColorGetter = ()=>model._internal_backgroundBottomColor();\n        if (options.leftPriceScale.visible && this._private__leftStub === null) {\n            this._private__leftStub = new PriceAxisStub(\"left\", options, params, borderVisibleGetter, bottomColorGetter);\n            this._private__leftStubCell.appendChild(this._private__leftStub._internal_getElement());\n        }\n        if (options.rightPriceScale.visible && this._private__rightStub === null) {\n            this._private__rightStub = new PriceAxisStub(\"right\", options, params, borderVisibleGetter, bottomColorGetter);\n            this._private__rightStubCell.appendChild(this._private__rightStub._internal_getElement());\n        }\n    }\n}\nconst windowsChrome = isChromiumBased() && isWindows();\nclass ChartWidget {\n    constructor(container, options, horzScaleBehavior){\n        this._private__paneWidgets = [];\n        this._private__drawRafId = 0;\n        this._private__height = 0;\n        this._private__width = 0;\n        this._private__leftPriceAxisWidth = 0;\n        this._private__rightPriceAxisWidth = 0;\n        this._private__invalidateMask = null;\n        this._private__drawPlanned = false;\n        this._private__clicked = new Delegate();\n        this._private__dblClicked = new Delegate();\n        this._private__crosshairMoved = new Delegate();\n        this._private__observer = null;\n        this._private__cursorStyleOverride = null;\n        this._private__container = container;\n        this._private__options = options;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__element = document.createElement(\"div\");\n        this._private__element.classList.add(\"tv-lightweight-charts\");\n        this._private__element.style.overflow = \"hidden\";\n        this._private__element.style.direction = \"ltr\";\n        this._private__element.style.width = \"100%\";\n        this._private__element.style.height = \"100%\";\n        disableSelection(this._private__element);\n        this._private__tableElement = document.createElement(\"table\");\n        this._private__tableElement.setAttribute(\"cellspacing\", \"0\");\n        this._private__element.appendChild(this._private__tableElement);\n        this._private__onWheelBound = this._private__onMousewheel.bind(this);\n        if (shouldSubscribeMouseWheel(this._private__options)) {\n            this._private__setMouseWheelEventListener(true);\n        }\n        this._private__model = new ChartModel(this._private__invalidateHandler.bind(this), this._private__options, horzScaleBehavior);\n        this._internal_model()._internal_crosshairMoved()._internal_subscribe(this._private__onPaneWidgetCrosshairMoved.bind(this), this);\n        this._private__timeAxisWidget = new TimeAxisWidget(this, this._private__horzScaleBehavior);\n        this._private__tableElement.appendChild(this._private__timeAxisWidget._internal_getElement());\n        const usedObserver = options.autoSize && this._private__installObserver();\n        // observer could not fire event immediately for some cases\n        // so we have to set initial size manually\n        let width = this._private__options.width;\n        let height = this._private__options.height;\n        // ignore width/height options if observer has actually been used\n        // however respect options if installing resize observer failed\n        if (usedObserver || width === 0 || height === 0) {\n            const containerRect = container.getBoundingClientRect();\n            width = width || containerRect.width;\n            height = height || containerRect.height;\n        }\n        // BEWARE: resize must be called BEFORE _syncGuiWithModel (in constructor only)\n        // or after but with adjustSize to properly update time scale\n        this._internal_resize(width, height);\n        this._private__syncGuiWithModel();\n        container.appendChild(this._private__element);\n        this._private__updateTimeAxisVisibility();\n        this._private__model._internal_timeScale()._internal_optionsApplied()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);\n        this._private__model._internal_priceScalesOptionsChanged()._internal_subscribe(this._private__model._internal_fullUpdate.bind(this._private__model), this);\n    }\n    _internal_model() {\n        return this._private__model;\n    }\n    _internal_options() {\n        return this._private__options;\n    }\n    _internal_paneWidgets() {\n        return this._private__paneWidgets;\n    }\n    _internal_timeAxisWidget() {\n        return this._private__timeAxisWidget;\n    }\n    _internal_destroy() {\n        this._private__setMouseWheelEventListener(false);\n        if (this._private__drawRafId !== 0) {\n            window.cancelAnimationFrame(this._private__drawRafId);\n        }\n        this._private__model._internal_crosshairMoved()._internal_unsubscribeAll(this);\n        this._private__model._internal_timeScale()._internal_optionsApplied()._internal_unsubscribeAll(this);\n        this._private__model._internal_priceScalesOptionsChanged()._internal_unsubscribeAll(this);\n        this._private__model._internal_destroy();\n        for (const paneWidget of this._private__paneWidgets){\n            this._private__tableElement.removeChild(paneWidget._internal_getElement());\n            paneWidget._internal_clicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_dblClicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_destroy();\n        }\n        this._private__paneWidgets = [];\n        // for (const paneSeparator of this._paneSeparators) {\n        // \tthis._destroySeparator(paneSeparator);\n        // }\n        // this._paneSeparators = [];\n        ensureNotNull(this._private__timeAxisWidget)._internal_destroy();\n        if (this._private__element.parentElement !== null) {\n            this._private__element.parentElement.removeChild(this._private__element);\n        }\n        this._private__crosshairMoved._internal_destroy();\n        this._private__clicked._internal_destroy();\n        this._private__dblClicked._internal_destroy();\n        this._private__uninstallObserver();\n    }\n    _internal_resize(width, height, forceRepaint = false) {\n        if (this._private__height === height && this._private__width === width) {\n            return;\n        }\n        const sizeHint = suggestChartSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width,\n            height\n        }));\n        this._private__height = sizeHint.height;\n        this._private__width = sizeHint.width;\n        const heightStr = this._private__height + \"px\";\n        const widthStr = this._private__width + \"px\";\n        ensureNotNull(this._private__element).style.height = heightStr;\n        ensureNotNull(this._private__element).style.width = widthStr;\n        this._private__tableElement.style.height = heightStr;\n        this._private__tableElement.style.width = widthStr;\n        if (forceRepaint) {\n            this._private__drawImpl(InvalidateMask._internal_full(), performance.now());\n        } else {\n            this._private__model._internal_fullUpdate();\n        }\n    }\n    _internal_paint(invalidateMask) {\n        if (invalidateMask === undefined) {\n            invalidateMask = InvalidateMask._internal_full();\n        }\n        for(let i = 0; i < this._private__paneWidgets.length; i++){\n            this._private__paneWidgets[i]._internal_paint(invalidateMask._internal_invalidateForPane(i)._internal_level);\n        }\n        if (this._private__options.timeScale.visible) {\n            this._private__timeAxisWidget._internal_paint(invalidateMask._internal_fullInvalidation());\n        }\n    }\n    _internal_applyOptions(options) {\n        const currentlyHasMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);\n        // we don't need to merge options here because it's done in chart model\n        // and since both model and widget share the same object it will be done automatically for widget as well\n        // not ideal solution for sure, but it work's for now Â¯\\_(ãƒ„)_/Â¯\n        this._private__model._internal_applyOptions(options);\n        const shouldHaveMouseWheelListener = shouldSubscribeMouseWheel(this._private__options);\n        if (shouldHaveMouseWheelListener !== currentlyHasMouseWheelListener) {\n            this._private__setMouseWheelEventListener(shouldHaveMouseWheelListener);\n        }\n        this._private__updateTimeAxisVisibility();\n        this._private__applyAutoSizeOptions(options);\n    }\n    _internal_clicked() {\n        return this._private__clicked;\n    }\n    _internal_dblClicked() {\n        return this._private__dblClicked;\n    }\n    _internal_crosshairMoved() {\n        return this._private__crosshairMoved;\n    }\n    _internal_takeScreenshot() {\n        if (this._private__invalidateMask !== null) {\n            this._private__drawImpl(this._private__invalidateMask, performance.now());\n            this._private__invalidateMask = null;\n        }\n        const screeshotBitmapSize = this._private__traverseLayout(null);\n        const screenshotCanvas = document.createElement(\"canvas\");\n        screenshotCanvas.width = screeshotBitmapSize.width;\n        screenshotCanvas.height = screeshotBitmapSize.height;\n        const ctx = ensureNotNull(screenshotCanvas.getContext(\"2d\"));\n        this._private__traverseLayout(ctx);\n        return screenshotCanvas;\n    }\n    _internal_getPriceAxisWidth(position) {\n        if (position === \"left\" && !this._private__isLeftAxisVisible()) {\n            return 0;\n        }\n        if (position === \"right\" && !this._private__isRightAxisVisible()) {\n            return 0;\n        }\n        if (this._private__paneWidgets.length === 0) {\n            return 0;\n        }\n        // we don't need to worry about exactly pane widget here\n        // because all pane widgets have the same width of price axis widget\n        // see _adjustSizeImpl\n        const priceAxisWidget = position === \"left\" ? this._private__paneWidgets[0]._internal_leftPriceAxisWidget() : this._private__paneWidgets[0]._internal_rightPriceAxisWidget();\n        return ensureNotNull(priceAxisWidget)._internal_getWidth();\n    }\n    _internal_autoSizeActive() {\n        return this._private__options.autoSize && this._private__observer !== null;\n    }\n    _internal_element() {\n        return this._private__element;\n    }\n    _internal_setCursorStyle(style) {\n        this._private__cursorStyleOverride = style;\n        if (this._private__cursorStyleOverride) {\n            this._internal_element().style.setProperty(\"cursor\", style);\n        } else {\n            this._internal_element().style.removeProperty(\"cursor\");\n        }\n    }\n    _internal_getCursorOverrideStyle() {\n        return this._private__cursorStyleOverride;\n    }\n    _internal_paneSize() {\n        // we currently only support a single pane.\n        return ensureDefined(this._private__paneWidgets[0])._internal_getSize();\n    }\n    // eslint-disable-next-line complexity\n    _private__applyAutoSizeOptions(options) {\n        if (options.autoSize === undefined && this._private__observer && (options.width !== undefined || options.height !== undefined)) {\n            warn(`You should turn autoSize off explicitly before specifying sizes; try adding options.autoSize: false to new options`);\n            return;\n        }\n        if (options.autoSize && !this._private__observer) {\n            // installing observer will override resize if successful\n            this._private__installObserver();\n        }\n        if (options.autoSize === false && this._private__observer !== null) {\n            this._private__uninstallObserver();\n        }\n        if (!options.autoSize && (options.width !== undefined || options.height !== undefined)) {\n            this._internal_resize(options.width || this._private__width, options.height || this._private__height);\n        }\n    }\n    /**\n     * Traverses the widget's layout (pane and axis child widgets),\n     * draws the screenshot (if rendering context is passed) and returns the screenshot bitmap size\n     *\n     * @param ctx - if passed, used to draw the screenshot of widget\n     * @returns screenshot bitmap size\n     */ _private__traverseLayout(ctx) {\n        let totalWidth = 0;\n        let totalHeight = 0;\n        const firstPane = this._private__paneWidgets[0];\n        const drawPriceAxises = (position, targetX)=>{\n            let targetY = 0;\n            for(let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++){\n                const paneWidget = this._private__paneWidgets[paneIndex];\n                const priceAxisWidget = ensureNotNull(position === \"left\" ? paneWidget._internal_leftPriceAxisWidget() : paneWidget._internal_rightPriceAxisWidget());\n                const bitmapSize = priceAxisWidget._internal_getBitmapSize();\n                if (ctx !== null) {\n                    priceAxisWidget._internal_drawBitmap(ctx, targetX, targetY);\n                }\n                targetY += bitmapSize.height;\n            // if (paneIndex < this._paneWidgets.length - 1) {\n            // \tconst separator = this._paneSeparators[paneIndex];\n            // \tconst separatorBitmapSize = separator.getBitmapSize();\n            // \tif (ctx !== null) {\n            // \t\tseparator.drawBitmap(ctx, targetX, targetY);\n            // \t}\n            // \ttargetY += separatorBitmapSize.height;\n            // }\n            }\n        };\n        // draw left price scale if exists\n        if (this._private__isLeftAxisVisible()) {\n            drawPriceAxises(\"left\", 0);\n            const leftAxisBitmapWidth = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getBitmapSize().width;\n            totalWidth += leftAxisBitmapWidth;\n        }\n        for(let paneIndex = 0; paneIndex < this._private__paneWidgets.length; paneIndex++){\n            const paneWidget = this._private__paneWidgets[paneIndex];\n            const bitmapSize = paneWidget._internal_getBitmapSize();\n            if (ctx !== null) {\n                paneWidget._internal_drawBitmap(ctx, totalWidth, totalHeight);\n            }\n            totalHeight += bitmapSize.height;\n        // if (paneIndex < this._paneWidgets.length - 1) {\n        // \tconst separator = this._paneSeparators[paneIndex];\n        // \tconst separatorBitmapSize = separator.getBitmapSize();\n        // \tif (ctx !== null) {\n        // \t\tseparator.drawBitmap(ctx, totalWidth, totalHeight);\n        // \t}\n        // \ttotalHeight += separatorBitmapSize.height;\n        // }\n        }\n        const firstPaneBitmapWidth = firstPane._internal_getBitmapSize().width;\n        totalWidth += firstPaneBitmapWidth;\n        // draw right price scale if exists\n        if (this._private__isRightAxisVisible()) {\n            drawPriceAxises(\"right\", totalWidth);\n            const rightAxisBitmapWidth = ensureNotNull(firstPane._internal_rightPriceAxisWidget())._internal_getBitmapSize().width;\n            totalWidth += rightAxisBitmapWidth;\n        }\n        const drawStub = (position, targetX, targetY)=>{\n            const stub = ensureNotNull(position === \"left\" ? this._private__timeAxisWidget._internal_leftStub() : this._private__timeAxisWidget._internal_rightStub());\n            stub._internal_drawBitmap(ensureNotNull(ctx), targetX, targetY);\n        };\n        // draw time scale and stubs\n        if (this._private__options.timeScale.visible) {\n            const timeAxisBitmapSize = this._private__timeAxisWidget._internal_getBitmapSize();\n            if (ctx !== null) {\n                let targetX = 0;\n                if (this._private__isLeftAxisVisible()) {\n                    drawStub(\"left\", targetX, totalHeight);\n                    targetX = ensureNotNull(firstPane._internal_leftPriceAxisWidget())._internal_getBitmapSize().width;\n                }\n                this._private__timeAxisWidget._internal_drawBitmap(ctx, targetX, totalHeight);\n                targetX += timeAxisBitmapSize.width;\n                if (this._private__isRightAxisVisible()) {\n                    drawStub(\"right\", targetX, totalHeight);\n                }\n            }\n            totalHeight += timeAxisBitmapSize.height;\n        }\n        return (0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: totalWidth,\n            height: totalHeight\n        });\n    }\n    // eslint-disable-next-line complexity\n    _private__adjustSizeImpl() {\n        let totalStretch = 0;\n        let leftPriceAxisWidth = 0;\n        let rightPriceAxisWidth = 0;\n        for (const paneWidget of this._private__paneWidgets){\n            if (this._private__isLeftAxisVisible()) {\n                leftPriceAxisWidth = Math.max(leftPriceAxisWidth, ensureNotNull(paneWidget._internal_leftPriceAxisWidget())._internal_optimalWidth(), this._private__options.leftPriceScale.minimumWidth);\n            }\n            if (this._private__isRightAxisVisible()) {\n                rightPriceAxisWidth = Math.max(rightPriceAxisWidth, ensureNotNull(paneWidget._internal_rightPriceAxisWidget())._internal_optimalWidth(), this._private__options.rightPriceScale.minimumWidth);\n            }\n            totalStretch += paneWidget._internal_stretchFactor();\n        }\n        leftPriceAxisWidth = suggestPriceScaleWidth(leftPriceAxisWidth);\n        rightPriceAxisWidth = suggestPriceScaleWidth(rightPriceAxisWidth);\n        const width = this._private__width;\n        const height = this._private__height;\n        const paneWidth = Math.max(width - leftPriceAxisWidth - rightPriceAxisWidth, 0);\n        // const separatorCount = this._paneSeparators.length;\n        // const separatorHeight = SEPARATOR_HEIGHT;\n        const separatorsHeight = 0; // separatorHeight * separatorCount;\n        const timeAxisVisible = this._private__options.timeScale.visible;\n        let timeAxisHeight = timeAxisVisible ? Math.max(this._private__timeAxisWidget._internal_optimalHeight(), this._private__options.timeScale.minimumHeight) : 0;\n        timeAxisHeight = suggestTimeScaleHeight(timeAxisHeight);\n        const otherWidgetHeight = separatorsHeight + timeAxisHeight;\n        const totalPaneHeight = height < otherWidgetHeight ? 0 : height - otherWidgetHeight;\n        const stretchPixels = totalPaneHeight / totalStretch;\n        let accumulatedHeight = 0;\n        for(let paneIndex = 0; paneIndex < this._private__paneWidgets.length; ++paneIndex){\n            const paneWidget = this._private__paneWidgets[paneIndex];\n            paneWidget._internal_setState(this._private__model._internal_panes()[paneIndex]);\n            let paneHeight = 0;\n            let calculatePaneHeight = 0;\n            if (paneIndex === this._private__paneWidgets.length - 1) {\n                calculatePaneHeight = totalPaneHeight - accumulatedHeight;\n            } else {\n                calculatePaneHeight = Math.round(paneWidget._internal_stretchFactor() * stretchPixels);\n            }\n            paneHeight = Math.max(calculatePaneHeight, 2);\n            accumulatedHeight += paneHeight;\n            paneWidget._internal_setSize((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n                width: paneWidth,\n                height: paneHeight\n            }));\n            if (this._private__isLeftAxisVisible()) {\n                paneWidget._internal_setPriceAxisSize(leftPriceAxisWidth, \"left\");\n            }\n            if (this._private__isRightAxisVisible()) {\n                paneWidget._internal_setPriceAxisSize(rightPriceAxisWidth, \"right\");\n            }\n            if (paneWidget._internal_state()) {\n                this._private__model._internal_setPaneHeight(paneWidget._internal_state(), paneHeight);\n            }\n        }\n        this._private__timeAxisWidget._internal_setSizes((0,fancy_canvas__WEBPACK_IMPORTED_MODULE_0__.size)({\n            width: timeAxisVisible ? paneWidth : 0,\n            height: timeAxisHeight\n        }), timeAxisVisible ? leftPriceAxisWidth : 0, timeAxisVisible ? rightPriceAxisWidth : 0);\n        this._private__model._internal_setWidth(paneWidth);\n        if (this._private__leftPriceAxisWidth !== leftPriceAxisWidth) {\n            this._private__leftPriceAxisWidth = leftPriceAxisWidth;\n        }\n        if (this._private__rightPriceAxisWidth !== rightPriceAxisWidth) {\n            this._private__rightPriceAxisWidth = rightPriceAxisWidth;\n        }\n    }\n    _private__setMouseWheelEventListener(add) {\n        if (add) {\n            this._private__element.addEventListener(\"wheel\", this._private__onWheelBound, {\n                passive: false\n            });\n            return;\n        }\n        this._private__element.removeEventListener(\"wheel\", this._private__onWheelBound);\n    }\n    _private__determineWheelSpeedAdjustment(event) {\n        switch(event.deltaMode){\n            case event.DOM_DELTA_PAGE:\n                // one screen at time scroll mode\n                return 120;\n            case event.DOM_DELTA_LINE:\n                // one line at time scroll mode\n                return 32;\n        }\n        if (!windowsChrome) {\n            return 1;\n        }\n        // Chromium on Windows has a bug where the scroll speed isn't correctly\n        // adjusted for high density displays. We need to correct for this so that\n        // scroll speed is consistent between browsers.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1001735\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1207308\n        return 1 / window.devicePixelRatio;\n    }\n    _private__onMousewheel(event) {\n        if ((event.deltaX === 0 || !this._private__options.handleScroll.mouseWheel) && (event.deltaY === 0 || !this._private__options.handleScale.mouseWheel)) {\n            return;\n        }\n        const scrollSpeedAdjustment = this._private__determineWheelSpeedAdjustment(event);\n        const deltaX = scrollSpeedAdjustment * event.deltaX / 100;\n        const deltaY = -(scrollSpeedAdjustment * event.deltaY / 100);\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        if (deltaY !== 0 && this._private__options.handleScale.mouseWheel) {\n            const zoomScale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));\n            const scrollPosition = event.clientX - this._private__element.getBoundingClientRect().left;\n            this._internal_model()._internal_zoomTime(scrollPosition, zoomScale);\n        }\n        if (deltaX !== 0 && this._private__options.handleScroll.mouseWheel) {\n            this._internal_model()._internal_scrollChart(deltaX * -80); // 80 is a made up coefficient, and minus is for the \"natural\" scroll\n        }\n    }\n    _private__drawImpl(invalidateMask, time) {\n        var _a;\n        const invalidationType = invalidateMask._internal_fullInvalidation();\n        // actions for full invalidation ONLY (not shared with light)\n        if (invalidationType === 3 /* InvalidationLevel.Full */ ) {\n            this._private__updateGui();\n        }\n        // light or full invalidate actions\n        if (invalidationType === 3 /* InvalidationLevel.Full */  || invalidationType === 2 /* InvalidationLevel.Light */ ) {\n            this._private__applyMomentaryAutoScale(invalidateMask);\n            this._private__applyTimeScaleInvalidations(invalidateMask, time);\n            this._private__timeAxisWidget._internal_update();\n            this._private__paneWidgets.forEach((pane)=>{\n                pane._internal_updatePriceAxisWidgets();\n            });\n            // In the case a full invalidation has been postponed during the draw, reapply\n            // the timescale invalidations. A full invalidation would mean there is a change\n            // in the timescale width (caused by price scale changes) that needs to be drawn\n            // right away to avoid flickering.\n            if (((_a = this._private__invalidateMask) === null || _a === void 0 ? void 0 : _a._internal_fullInvalidation()) === 3 /* InvalidationLevel.Full */ ) {\n                this._private__invalidateMask._internal_merge(invalidateMask);\n                this._private__updateGui();\n                this._private__applyMomentaryAutoScale(this._private__invalidateMask);\n                this._private__applyTimeScaleInvalidations(this._private__invalidateMask, time);\n                invalidateMask = this._private__invalidateMask;\n                this._private__invalidateMask = null;\n            }\n        }\n        this._internal_paint(invalidateMask);\n    }\n    _private__applyTimeScaleInvalidations(invalidateMask, time) {\n        for (const tsInvalidation of invalidateMask._internal_timeScaleInvalidations()){\n            this._private__applyTimeScaleInvalidation(tsInvalidation, time);\n        }\n    }\n    _private__applyMomentaryAutoScale(invalidateMask) {\n        const panes = this._private__model._internal_panes();\n        for(let i = 0; i < panes.length; i++){\n            if (invalidateMask._internal_invalidateForPane(i)._internal_autoScale) {\n                panes[i]._internal_momentaryAutoScale();\n            }\n        }\n    }\n    _private__applyTimeScaleInvalidation(invalidation, time) {\n        const timeScale = this._private__model._internal_timeScale();\n        switch(invalidation._internal_type){\n            case 0 /* TimeScaleInvalidationType.FitContent */ :\n                timeScale._internal_fitContent();\n                break;\n            case 1 /* TimeScaleInvalidationType.ApplyRange */ :\n                timeScale._internal_setLogicalRange(invalidation._internal_value);\n                break;\n            case 2 /* TimeScaleInvalidationType.ApplyBarSpacing */ :\n                timeScale._internal_setBarSpacing(invalidation._internal_value);\n                break;\n            case 3 /* TimeScaleInvalidationType.ApplyRightOffset */ :\n                timeScale._internal_setRightOffset(invalidation._internal_value);\n                break;\n            case 4 /* TimeScaleInvalidationType.Reset */ :\n                timeScale._internal_restoreDefault();\n                break;\n            case 5 /* TimeScaleInvalidationType.Animation */ :\n                if (!invalidation._internal_value._internal_finished(time)) {\n                    timeScale._internal_setRightOffset(invalidation._internal_value._internal_getPosition(time));\n                }\n                break;\n        }\n    }\n    _private__invalidateHandler(invalidateMask) {\n        if (this._private__invalidateMask !== null) {\n            this._private__invalidateMask._internal_merge(invalidateMask);\n        } else {\n            this._private__invalidateMask = invalidateMask;\n        }\n        if (!this._private__drawPlanned) {\n            this._private__drawPlanned = true;\n            this._private__drawRafId = window.requestAnimationFrame((time)=>{\n                this._private__drawPlanned = false;\n                this._private__drawRafId = 0;\n                if (this._private__invalidateMask !== null) {\n                    const mask = this._private__invalidateMask;\n                    this._private__invalidateMask = null;\n                    this._private__drawImpl(mask, time);\n                    for (const tsInvalidation of mask._internal_timeScaleInvalidations()){\n                        if (tsInvalidation._internal_type === 5 /* TimeScaleInvalidationType.Animation */  && !tsInvalidation._internal_value._internal_finished(time)) {\n                            this._internal_model()._internal_setTimeScaleAnimation(tsInvalidation._internal_value);\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    _private__updateGui() {\n        this._private__syncGuiWithModel();\n    }\n    // private _destroySeparator(separator: PaneSeparator): void {\n    // \tthis._tableElement.removeChild(separator.getElement());\n    // \tseparator.destroy();\n    // }\n    _private__syncGuiWithModel() {\n        const panes = this._private__model._internal_panes();\n        const targetPaneWidgetsCount = panes.length;\n        const actualPaneWidgetsCount = this._private__paneWidgets.length;\n        // Remove (if needed) pane widgets and separators\n        for(let i = targetPaneWidgetsCount; i < actualPaneWidgetsCount; i++){\n            const paneWidget = ensureDefined(this._private__paneWidgets.pop());\n            this._private__tableElement.removeChild(paneWidget._internal_getElement());\n            paneWidget._internal_clicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_dblClicked()._internal_unsubscribeAll(this);\n            paneWidget._internal_destroy();\n        // const paneSeparator = this._paneSeparators.pop();\n        // if (paneSeparator !== undefined) {\n        // \tthis._destroySeparator(paneSeparator);\n        // }\n        }\n        // Create (if needed) new pane widgets and separators\n        for(let i = actualPaneWidgetsCount; i < targetPaneWidgetsCount; i++){\n            const paneWidget = new PaneWidget(this, panes[i]);\n            paneWidget._internal_clicked()._internal_subscribe(this._private__onPaneWidgetClicked.bind(this), this);\n            paneWidget._internal_dblClicked()._internal_subscribe(this._private__onPaneWidgetDblClicked.bind(this), this);\n            this._private__paneWidgets.push(paneWidget);\n            // create and insert separator\n            // if (i > 1) {\n            // \tconst paneSeparator = new PaneSeparator(this, i - 1, i, true);\n            // \tthis._paneSeparators.push(paneSeparator);\n            // \tthis._tableElement.insertBefore(paneSeparator.getElement(), this._timeAxisWidget.getElement());\n            // }\n            // insert paneWidget\n            this._private__tableElement.insertBefore(paneWidget._internal_getElement(), this._private__timeAxisWidget._internal_getElement());\n        }\n        for(let i = 0; i < targetPaneWidgetsCount; i++){\n            const state = panes[i];\n            const paneWidget = this._private__paneWidgets[i];\n            if (paneWidget._internal_state() !== state) {\n                paneWidget._internal_setState(state);\n            } else {\n                paneWidget._internal_updatePriceAxisWidgetsStates();\n            }\n        }\n        this._private__updateTimeAxisVisibility();\n        this._private__adjustSizeImpl();\n    }\n    _private__getMouseEventParamsImpl(index, point, event) {\n        var _a;\n        const seriesData = new Map();\n        if (index !== null) {\n            const serieses = this._private__model._internal_serieses();\n            serieses.forEach((s)=>{\n                // TODO: replace with search left\n                const data = s._internal_bars()._internal_search(index);\n                if (data !== null) {\n                    seriesData.set(s, data);\n                }\n            });\n        }\n        let clientTime;\n        if (index !== null) {\n            const timePoint = (_a = this._private__model._internal_timeScale()._internal_indexToTimeScalePoint(index)) === null || _a === void 0 ? void 0 : _a.originalTime;\n            if (timePoint !== undefined) {\n                clientTime = timePoint;\n            }\n        }\n        const hoveredSource = this._internal_model()._internal_hoveredSource();\n        const hoveredSeries = hoveredSource !== null && hoveredSource._internal_source instanceof Series ? hoveredSource._internal_source : undefined;\n        const hoveredObject = hoveredSource !== null && hoveredSource._internal_object !== undefined ? hoveredSource._internal_object._internal_externalId : undefined;\n        return {\n            _internal_originalTime: clientTime,\n            _internal_index: index !== null && index !== void 0 ? index : undefined,\n            _internal_point: point !== null && point !== void 0 ? point : undefined,\n            _internal_hoveredSeries: hoveredSeries,\n            _internal_seriesData: seriesData,\n            _internal_hoveredObject: hoveredObject,\n            _internal_touchMouseEventData: event !== null && event !== void 0 ? event : undefined\n        };\n    }\n    _private__onPaneWidgetClicked(time, point, event) {\n        this._private__clicked._internal_fire(()=>this._private__getMouseEventParamsImpl(time, point, event));\n    }\n    _private__onPaneWidgetDblClicked(time, point, event) {\n        this._private__dblClicked._internal_fire(()=>this._private__getMouseEventParamsImpl(time, point, event));\n    }\n    _private__onPaneWidgetCrosshairMoved(time, point, event) {\n        this._private__crosshairMoved._internal_fire(()=>this._private__getMouseEventParamsImpl(time, point, event));\n    }\n    _private__updateTimeAxisVisibility() {\n        const display = this._private__options.timeScale.visible ? \"\" : \"none\";\n        this._private__timeAxisWidget._internal_getElement().style.display = display;\n    }\n    _private__isLeftAxisVisible() {\n        return this._private__paneWidgets[0]._internal_state()._internal_leftPriceScale()._internal_options().visible;\n    }\n    _private__isRightAxisVisible() {\n        return this._private__paneWidgets[0]._internal_state()._internal_rightPriceScale()._internal_options().visible;\n    }\n    _private__installObserver() {\n        // eslint-disable-next-line no-restricted-syntax\n        if (!(\"ResizeObserver\" in window)) {\n            warn('Options contains \"autoSize\" flag, but the browser does not support ResizeObserver feature. Please provide polyfill.');\n            return false;\n        } else {\n            this._private__observer = new ResizeObserver((entries)=>{\n                const containerEntry = entries.find((entry)=>entry.target === this._private__container);\n                if (!containerEntry) {\n                    return;\n                }\n                this._internal_resize(containerEntry.contentRect.width, containerEntry.contentRect.height);\n            });\n            this._private__observer.observe(this._private__container, {\n                box: \"border-box\"\n            });\n            return true;\n        }\n    }\n    _private__uninstallObserver() {\n        if (this._private__observer !== null) {\n            this._private__observer.disconnect();\n        }\n        this._private__observer = null;\n    }\n}\nfunction disableSelection(element) {\n    element.style.userSelect = \"none\";\n    // eslint-disable-next-line deprecation/deprecation\n    element.style.webkitUserSelect = \"none\";\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    element.style.msUserSelect = \"none\";\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    element.style.MozUserSelect = \"none\";\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    element.style.webkitTapHighlightColor = \"transparent\";\n}\nfunction shouldSubscribeMouseWheel(options) {\n    return Boolean(options.handleScroll.mouseWheel || options.handleScale.mouseWheel);\n}\nfunction isWhitespaceData(data) {\n    return data.open === undefined && data.value === undefined;\n}\nfunction isFulfilledData(data) {\n    return isFulfilledBarData(data) || isFulfilledLineData(data);\n}\nfunction isFulfilledBarData(data) {\n    return data.open !== undefined;\n}\nfunction isFulfilledLineData(data) {\n    return data.value !== undefined;\n}\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ function __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction getColoredLineBasedSeriesPlotRow(time, index, item, originalTime) {\n    const val = item.value;\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            val,\n            val,\n            val,\n            val\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.color !== undefined) {\n        res._internal_color = item.color;\n    }\n    return res;\n}\nfunction getAreaSeriesPlotRow(time, index, item, originalTime) {\n    const val = item.value;\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            val,\n            val,\n            val,\n            val\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.lineColor !== undefined) {\n        res._internal_lineColor = item.lineColor;\n    }\n    if (item.topColor !== undefined) {\n        res._internal_topColor = item.topColor;\n    }\n    if (item.bottomColor !== undefined) {\n        res._internal_bottomColor = item.bottomColor;\n    }\n    return res;\n}\nfunction getBaselineSeriesPlotRow(time, index, item, originalTime) {\n    const val = item.value;\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            val,\n            val,\n            val,\n            val\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.topLineColor !== undefined) {\n        res._internal_topLineColor = item.topLineColor;\n    }\n    if (item.bottomLineColor !== undefined) {\n        res._internal_bottomLineColor = item.bottomLineColor;\n    }\n    if (item.topFillColor1 !== undefined) {\n        res._internal_topFillColor1 = item.topFillColor1;\n    }\n    if (item.topFillColor2 !== undefined) {\n        res._internal_topFillColor2 = item.topFillColor2;\n    }\n    if (item.bottomFillColor1 !== undefined) {\n        res._internal_bottomFillColor1 = item.bottomFillColor1;\n    }\n    if (item.bottomFillColor2 !== undefined) {\n        res._internal_bottomFillColor2 = item.bottomFillColor2;\n    }\n    return res;\n}\nfunction getBarSeriesPlotRow(time, index, item, originalTime) {\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            item.open,\n            item.high,\n            item.low,\n            item.close\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.color !== undefined) {\n        res._internal_color = item.color;\n    }\n    return res;\n}\nfunction getCandlestickSeriesPlotRow(time, index, item, originalTime) {\n    const res = {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: [\n            item.open,\n            item.high,\n            item.low,\n            item.close\n        ],\n        _internal_originalTime: originalTime\n    };\n    if (item.color !== undefined) {\n        res._internal_color = item.color;\n    }\n    if (item.borderColor !== undefined) {\n        res._internal_borderColor = item.borderColor;\n    }\n    if (item.wickColor !== undefined) {\n        res._internal_wickColor = item.wickColor;\n    }\n    return res;\n}\nfunction getCustomSeriesPlotRow(time, index, item, originalTime, dataToPlotRow) {\n    const values = ensureDefined(dataToPlotRow)(item);\n    const max = Math.max(...values);\n    const min = Math.min(...values);\n    const last = values[values.length - 1];\n    const value = [\n        last,\n        max,\n        min,\n        last\n    ];\n    const _a = item, { time: excludedTime, color } = _a, data = __rest(_a, [\n        \"time\",\n        \"color\"\n    ]);\n    return {\n        _internal_index: index,\n        _internal_time: time,\n        _internal_value: value,\n        _internal_originalTime: originalTime,\n        _internal_data: data,\n        _internal_color: color\n    };\n}\nfunction isSeriesPlotRow(row) {\n    return row._internal_value !== undefined;\n}\nfunction wrapCustomValues(plotRow, bar) {\n    if (bar.customValues !== undefined) {\n        plotRow._internal_customValues = bar.customValues;\n    }\n    return plotRow;\n}\nfunction isWhitespaceDataWithCustomCheck(bar, customIsWhitespace) {\n    if (customIsWhitespace) {\n        return customIsWhitespace(bar);\n    }\n    return isWhitespaceData(bar);\n}\nfunction wrapWhitespaceData(createPlotRowFn) {\n    return (time, index, bar, originalTime, dataToPlotRow, customIsWhitespace)=>{\n        if (isWhitespaceDataWithCustomCheck(bar, customIsWhitespace)) {\n            return wrapCustomValues({\n                _internal_time: time,\n                _internal_index: index,\n                _internal_originalTime: originalTime\n            }, bar);\n        }\n        return wrapCustomValues(createPlotRowFn(time, index, bar, originalTime, dataToPlotRow), bar);\n    };\n}\nfunction getSeriesPlotRowCreator(seriesType) {\n    const seriesPlotRowFnMap = {\n        Candlestick: wrapWhitespaceData(getCandlestickSeriesPlotRow),\n        Bar: wrapWhitespaceData(getBarSeriesPlotRow),\n        Area: wrapWhitespaceData(getAreaSeriesPlotRow),\n        Baseline: wrapWhitespaceData(getBaselineSeriesPlotRow),\n        Histogram: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),\n        Line: wrapWhitespaceData(getColoredLineBasedSeriesPlotRow),\n        Custom: wrapWhitespaceData(getCustomSeriesPlotRow)\n    };\n    return seriesPlotRowFnMap[seriesType];\n}\n/// <reference types=\"_build-time-constants\" />\nfunction createEmptyTimePointData(timePoint) {\n    return {\n        _internal_index: 0,\n        _internal_mapping: new Map(),\n        _internal_timePoint: timePoint\n    };\n}\nfunction seriesRowsFirstAndLastTime(seriesRows, bh) {\n    if (seriesRows === undefined || seriesRows.length === 0) {\n        return undefined;\n    }\n    return {\n        _internal_firstTime: bh.key(seriesRows[0]._internal_time),\n        _internal_lastTime: bh.key(seriesRows[seriesRows.length - 1]._internal_time)\n    };\n}\nfunction seriesUpdateInfo(seriesRows, prevSeriesRows, bh) {\n    const firstAndLastTime = seriesRowsFirstAndLastTime(seriesRows, bh);\n    const prevFirstAndLastTime = seriesRowsFirstAndLastTime(prevSeriesRows, bh);\n    if (firstAndLastTime !== undefined && prevFirstAndLastTime !== undefined) {\n        return {\n            _internal_lastBarUpdatedOrNewBarsAddedToTheRight: firstAndLastTime._internal_lastTime >= prevFirstAndLastTime._internal_lastTime && firstAndLastTime._internal_firstTime >= prevFirstAndLastTime._internal_firstTime\n        };\n    }\n    return undefined;\n}\nfunction timeScalePointTime(mergedPointData) {\n    let result;\n    mergedPointData.forEach((v)=>{\n        if (result === undefined) {\n            result = v._internal_originalTime;\n        }\n    });\n    return ensureDefined(result);\n}\nfunction saveOriginalTime(data) {\n    if (data._internal_originalTime === undefined) {\n        data._internal_originalTime = data.time;\n    }\n}\nclass DataLayer {\n    constructor(horzScaleBehavior){\n        // note that _pointDataByTimePoint and _seriesRowsBySeries shares THE SAME objects in their values between each other\n        // it's just different kind of maps to make usages/perf better\n        this._private__pointDataByTimePoint = new Map();\n        this._private__seriesRowsBySeries = new Map();\n        this._private__seriesLastTimePoint = new Map();\n        // this is kind of \"dest\" values (in opposite to \"source\" ones) - we don't need to modify it manually, the only by calling _updateTimeScalePoints or updateSeriesData methods\n        this._private__sortedTimePoints = [];\n        this._private__horzScaleBehavior = horzScaleBehavior;\n    }\n    _internal_destroy() {\n        this._private__pointDataByTimePoint.clear();\n        this._private__seriesRowsBySeries.clear();\n        this._private__seriesLastTimePoint.clear();\n        this._private__sortedTimePoints = [];\n    }\n    _internal_setSeriesData(series, data) {\n        let needCleanupPoints = this._private__pointDataByTimePoint.size !== 0;\n        let isTimeScaleAffected = false;\n        // save previous series rows data before it's replaced inside this._setRowsToSeries\n        const prevSeriesRows = this._private__seriesRowsBySeries.get(series);\n        if (prevSeriesRows !== undefined) {\n            if (this._private__seriesRowsBySeries.size === 1) {\n                needCleanupPoints = false;\n                isTimeScaleAffected = true;\n                // perf optimization - if there is only 1 series, then we can just clear and fill everything from scratch\n                this._private__pointDataByTimePoint.clear();\n            } else {\n                // perf optimization - actually we have to use this._pointDataByTimePoint for going through here\n                // but as soon as this._sortedTimePoints is just a different form of _pointDataByTimePoint we can use it as well\n                for (const point of this._private__sortedTimePoints){\n                    if (point.pointData._internal_mapping.delete(series)) {\n                        isTimeScaleAffected = true;\n                    }\n                }\n            }\n        }\n        let seriesRows = [];\n        if (data.length !== 0) {\n            const originalTimes = data.map((d)=>d.time);\n            const timeConverter = this._private__horzScaleBehavior.createConverterToInternalObj(data);\n            const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());\n            const dataToPlotRow = series._internal_customSeriesPlotValuesBuilder();\n            const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\n            seriesRows = data.map((item, index)=>{\n                const time = timeConverter(item.time);\n                const horzItemKey = this._private__horzScaleBehavior.key(time);\n                let timePointData = this._private__pointDataByTimePoint.get(horzItemKey);\n                if (timePointData === undefined) {\n                    // the indexes will be sync later\n                    timePointData = createEmptyTimePointData(time);\n                    this._private__pointDataByTimePoint.set(horzItemKey, timePointData);\n                    isTimeScaleAffected = true;\n                }\n                const row = createPlotRow(time, timePointData._internal_index, item, originalTimes[index], dataToPlotRow, customWhitespaceChecker);\n                timePointData._internal_mapping.set(series, row);\n                return row;\n            });\n        }\n        if (needCleanupPoints) {\n            // we deleted the old data from mapping and added the new ones\n            // so there might be empty points now, let's remove them first\n            this._private__cleanupPointsData();\n        }\n        this._private__setRowsToSeries(series, seriesRows);\n        let firstChangedPointIndex = -1;\n        if (isTimeScaleAffected) {\n            // then generate the time scale points\n            // timeWeight will be updates in _updateTimeScalePoints later\n            const newTimeScalePoints = [];\n            this._private__pointDataByTimePoint.forEach((pointData)=>{\n                newTimeScalePoints.push({\n                    timeWeight: 0,\n                    time: pointData._internal_timePoint,\n                    pointData,\n                    originalTime: timeScalePointTime(pointData._internal_mapping)\n                });\n            });\n            newTimeScalePoints.sort((t1, t2)=>this._private__horzScaleBehavior.key(t1.time) - this._private__horzScaleBehavior.key(t2.time));\n            firstChangedPointIndex = this._private__replaceTimeScalePoints(newTimeScalePoints);\n        }\n        return this._private__getUpdateResponse(series, firstChangedPointIndex, seriesUpdateInfo(this._private__seriesRowsBySeries.get(series), prevSeriesRows, this._private__horzScaleBehavior));\n    }\n    _internal_removeSeries(series) {\n        return this._internal_setSeriesData(series, []);\n    }\n    _internal_updateSeriesData(series, data) {\n        const extendedData = data;\n        saveOriginalTime(extendedData);\n        // convertStringToBusinessDay(data);\n        this._private__horzScaleBehavior.preprocessData(data);\n        const timeConverter = this._private__horzScaleBehavior.createConverterToInternalObj([\n            data\n        ]);\n        const time = timeConverter(data.time);\n        const lastSeriesTime = this._private__seriesLastTimePoint.get(series);\n        if (lastSeriesTime !== undefined && this._private__horzScaleBehavior.key(time) < this._private__horzScaleBehavior.key(lastSeriesTime)) {\n            throw new Error(`Cannot update oldest data, last time=${lastSeriesTime}, new time=${time}`);\n        }\n        let pointDataAtTime = this._private__pointDataByTimePoint.get(this._private__horzScaleBehavior.key(time));\n        // if no point data found for the new data item\n        // that means that we need to update scale\n        const affectsTimeScale = pointDataAtTime === undefined;\n        if (pointDataAtTime === undefined) {\n            // the indexes will be sync later\n            pointDataAtTime = createEmptyTimePointData(time);\n            this._private__pointDataByTimePoint.set(this._private__horzScaleBehavior.key(time), pointDataAtTime);\n        }\n        const createPlotRow = getSeriesPlotRowCreator(series._internal_seriesType());\n        const dataToPlotRow = series._internal_customSeriesPlotValuesBuilder();\n        const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\n        const plotRow = createPlotRow(time, pointDataAtTime._internal_index, data, extendedData._internal_originalTime, dataToPlotRow, customWhitespaceChecker);\n        pointDataAtTime._internal_mapping.set(series, plotRow);\n        this._private__updateLastSeriesRow(series, plotRow);\n        const info = {\n            _internal_lastBarUpdatedOrNewBarsAddedToTheRight: isSeriesPlotRow(plotRow)\n        };\n        // if point already exist on the time scale - we don't need to make a full update and just make an incremental one\n        if (!affectsTimeScale) {\n            return this._private__getUpdateResponse(series, -1, info);\n        }\n        const newPoint = {\n            timeWeight: 0,\n            time: pointDataAtTime._internal_timePoint,\n            pointData: pointDataAtTime,\n            originalTime: timeScalePointTime(pointDataAtTime._internal_mapping)\n        };\n        const insertIndex = lowerBound(this._private__sortedTimePoints, this._private__horzScaleBehavior.key(newPoint.time), (a, b)=>this._private__horzScaleBehavior.key(a.time) < b);\n        // yes, I know that this array is readonly and this change is intended to make it performative\n        // we marked _sortedTimePoints array as readonly to avoid modifying this array anywhere else\n        // but this place is exceptional case due performance reasons, sorry\n        this._private__sortedTimePoints.splice(insertIndex, 0, newPoint);\n        for(let index = insertIndex; index < this._private__sortedTimePoints.length; ++index){\n            assignIndexToPointData(this._private__sortedTimePoints[index].pointData, index);\n        }\n        this._private__horzScaleBehavior.fillWeightsForPoints(this._private__sortedTimePoints, insertIndex);\n        return this._private__getUpdateResponse(series, insertIndex, info);\n    }\n    _private__updateLastSeriesRow(series, plotRow) {\n        let seriesData = this._private__seriesRowsBySeries.get(series);\n        if (seriesData === undefined) {\n            seriesData = [];\n            this._private__seriesRowsBySeries.set(series, seriesData);\n        }\n        const lastSeriesRow = seriesData.length !== 0 ? seriesData[seriesData.length - 1] : null;\n        if (lastSeriesRow === null || this._private__horzScaleBehavior.key(plotRow._internal_time) > this._private__horzScaleBehavior.key(lastSeriesRow._internal_time)) {\n            if (isSeriesPlotRow(plotRow)) {\n                seriesData.push(plotRow);\n            }\n        } else {\n            if (isSeriesPlotRow(plotRow)) {\n                seriesData[seriesData.length - 1] = plotRow;\n            } else {\n                seriesData.splice(-1, 1);\n            }\n        }\n        this._private__seriesLastTimePoint.set(series, plotRow._internal_time);\n    }\n    _private__setRowsToSeries(series, seriesRows) {\n        if (seriesRows.length !== 0) {\n            this._private__seriesRowsBySeries.set(series, seriesRows.filter(isSeriesPlotRow));\n            this._private__seriesLastTimePoint.set(series, seriesRows[seriesRows.length - 1]._internal_time);\n        } else {\n            this._private__seriesRowsBySeries.delete(series);\n            this._private__seriesLastTimePoint.delete(series);\n        }\n    }\n    _private__cleanupPointsData() {\n        // let's treat all current points as \"potentially removed\"\n        // we could create an array with actually potentially removed points\n        // but most likely this array will be similar to _sortedTimePoints so let's avoid using additional memory\n        // note that we can use _sortedTimePoints here since a point might be removed only it was here previously\n        for (const point of this._private__sortedTimePoints){\n            if (point.pointData._internal_mapping.size === 0) {\n                this._private__pointDataByTimePoint.delete(this._private__horzScaleBehavior.key(point.time));\n            }\n        }\n    }\n    /**\n     * Sets new time scale and make indexes valid for all series\n     *\n     * @returns The index of the first changed point or `-1` if there is no change.\n     */ _private__replaceTimeScalePoints(newTimePoints) {\n        let firstChangedPointIndex = -1;\n        // search the first different point and \"syncing\" time weight by the way\n        for(let index = 0; index < this._private__sortedTimePoints.length && index < newTimePoints.length; ++index){\n            const oldPoint = this._private__sortedTimePoints[index];\n            const newPoint = newTimePoints[index];\n            if (this._private__horzScaleBehavior.key(oldPoint.time) !== this._private__horzScaleBehavior.key(newPoint.time)) {\n                firstChangedPointIndex = index;\n                break;\n            }\n            // re-assign point's time weight for points if time is the same (and all prior times was the same)\n            newPoint.timeWeight = oldPoint.timeWeight;\n            assignIndexToPointData(newPoint.pointData, index);\n        }\n        if (firstChangedPointIndex === -1 && this._private__sortedTimePoints.length !== newTimePoints.length) {\n            // the common part of the prev and the new points are the same\n            // so the first changed point is the next after the common part\n            firstChangedPointIndex = Math.min(this._private__sortedTimePoints.length, newTimePoints.length);\n        }\n        if (firstChangedPointIndex === -1) {\n            // if no time scale changed, then do nothing\n            return -1;\n        }\n        // if time scale points are changed that means that we need to make full update to all series (with clearing points)\n        // but first we need to synchronize indexes and re-fill time weights\n        for(let index = firstChangedPointIndex; index < newTimePoints.length; ++index){\n            assignIndexToPointData(newTimePoints[index].pointData, index);\n        }\n        // re-fill time weights for point after the first changed one\n        this._private__horzScaleBehavior.fillWeightsForPoints(newTimePoints, firstChangedPointIndex);\n        this._private__sortedTimePoints = newTimePoints;\n        return firstChangedPointIndex;\n    }\n    _private__getBaseIndex() {\n        if (this._private__seriesRowsBySeries.size === 0) {\n            // if we have no data then 'reset' the base index to null\n            return null;\n        }\n        let baseIndex = 0;\n        this._private__seriesRowsBySeries.forEach((data)=>{\n            if (data.length !== 0) {\n                baseIndex = Math.max(baseIndex, data[data.length - 1]._internal_index);\n            }\n        });\n        return baseIndex;\n    }\n    _private__getUpdateResponse(updatedSeries, firstChangedPointIndex, info) {\n        const dataUpdateResponse = {\n            _internal_series: new Map(),\n            _internal_timeScale: {\n                _internal_baseIndex: this._private__getBaseIndex()\n            }\n        };\n        if (firstChangedPointIndex !== -1) {\n            // TODO: it's possible to make perf improvements by checking what series has data after firstChangedPointIndex\n            // but let's skip for now\n            this._private__seriesRowsBySeries.forEach((data, s)=>{\n                dataUpdateResponse._internal_series.set(s, {\n                    _internal_data: data,\n                    _internal_info: s === updatedSeries ? info : undefined\n                });\n            });\n            // if the series data was set to [] it will have already been removed from _seriesRowBySeries\n            // meaning the forEach above won't add the series to the data update response\n            // so we handle that case here\n            if (!this._private__seriesRowsBySeries.has(updatedSeries)) {\n                dataUpdateResponse._internal_series.set(updatedSeries, {\n                    _internal_data: [],\n                    _internal_info: info\n                });\n            }\n            dataUpdateResponse._internal_timeScale._internal_points = this._private__sortedTimePoints;\n            dataUpdateResponse._internal_timeScale._internal_firstChangedPointIndex = firstChangedPointIndex;\n        } else {\n            const seriesData = this._private__seriesRowsBySeries.get(updatedSeries);\n            // if no seriesData found that means that we just removed the series\n            dataUpdateResponse._internal_series.set(updatedSeries, {\n                _internal_data: seriesData || [],\n                _internal_info: info\n            });\n        }\n        return dataUpdateResponse;\n    }\n}\nfunction assignIndexToPointData(pointData, index) {\n    // first, nevertheless update index of point data (\"make it valid\")\n    pointData._internal_index = index;\n    // and then we need to sync indexes for all series\n    pointData._internal_mapping.forEach((seriesRow)=>{\n        seriesRow._internal_index = index;\n    });\n}\nfunction singleValueData(plotRow) {\n    const data = {\n        value: plotRow._internal_value[3 /* PlotRowValueIndex.Close */ ],\n        time: plotRow._internal_originalTime\n    };\n    if (plotRow._internal_customValues !== undefined) {\n        data.customValues = plotRow._internal_customValues;\n    }\n    return data;\n}\nfunction lineData(plotRow) {\n    const result = singleValueData(plotRow);\n    if (plotRow._internal_color !== undefined) {\n        result.color = plotRow._internal_color;\n    }\n    return result;\n}\nfunction areaData(plotRow) {\n    const result = singleValueData(plotRow);\n    if (plotRow._internal_lineColor !== undefined) {\n        result.lineColor = plotRow._internal_lineColor;\n    }\n    if (plotRow._internal_topColor !== undefined) {\n        result.topColor = plotRow._internal_topColor;\n    }\n    if (plotRow._internal_bottomColor !== undefined) {\n        result.bottomColor = plotRow._internal_bottomColor;\n    }\n    return result;\n}\nfunction baselineData(plotRow) {\n    const result = singleValueData(plotRow);\n    if (plotRow._internal_topLineColor !== undefined) {\n        result.topLineColor = plotRow._internal_topLineColor;\n    }\n    if (plotRow._internal_bottomLineColor !== undefined) {\n        result.bottomLineColor = plotRow._internal_bottomLineColor;\n    }\n    if (plotRow._internal_topFillColor1 !== undefined) {\n        result.topFillColor1 = plotRow._internal_topFillColor1;\n    }\n    if (plotRow._internal_topFillColor2 !== undefined) {\n        result.topFillColor2 = plotRow._internal_topFillColor2;\n    }\n    if (plotRow._internal_bottomFillColor1 !== undefined) {\n        result.bottomFillColor1 = plotRow._internal_bottomFillColor1;\n    }\n    if (plotRow._internal_bottomFillColor2 !== undefined) {\n        result.bottomFillColor2 = plotRow._internal_bottomFillColor2;\n    }\n    return result;\n}\nfunction ohlcData(plotRow) {\n    const data = {\n        open: plotRow._internal_value[0 /* PlotRowValueIndex.Open */ ],\n        high: plotRow._internal_value[1 /* PlotRowValueIndex.High */ ],\n        low: plotRow._internal_value[2 /* PlotRowValueIndex.Low */ ],\n        close: plotRow._internal_value[3 /* PlotRowValueIndex.Close */ ],\n        time: plotRow._internal_originalTime\n    };\n    if (plotRow._internal_customValues !== undefined) {\n        data.customValues = plotRow._internal_customValues;\n    }\n    return data;\n}\nfunction barData(plotRow) {\n    const result = ohlcData(plotRow);\n    if (plotRow._internal_color !== undefined) {\n        result.color = plotRow._internal_color;\n    }\n    return result;\n}\nfunction candlestickData(plotRow) {\n    const result = ohlcData(plotRow);\n    const { _internal_color: color, _internal_borderColor: borderColor, _internal_wickColor: wickColor } = plotRow;\n    if (color !== undefined) {\n        result.color = color;\n    }\n    if (borderColor !== undefined) {\n        result.borderColor = borderColor;\n    }\n    if (wickColor !== undefined) {\n        result.wickColor = wickColor;\n    }\n    return result;\n}\nfunction getSeriesDataCreator(seriesType) {\n    const seriesPlotRowToDataMap = {\n        Area: areaData,\n        Line: lineData,\n        Baseline: baselineData,\n        Histogram: lineData,\n        Bar: barData,\n        Candlestick: candlestickData,\n        Custom: customData\n    };\n    return seriesPlotRowToDataMap[seriesType];\n}\nfunction customData(plotRow) {\n    const time = plotRow._internal_originalTime;\n    return Object.assign(Object.assign({}, plotRow._internal_data), {\n        time\n    });\n}\nconst crosshairOptionsDefaults = {\n    vertLine: {\n        color: \"#9598A1\",\n        width: 1,\n        style: 3 /* LineStyle.LargeDashed */ ,\n        visible: true,\n        labelVisible: true,\n        labelBackgroundColor: \"#131722\"\n    },\n    horzLine: {\n        color: \"#9598A1\",\n        width: 1,\n        style: 3 /* LineStyle.LargeDashed */ ,\n        visible: true,\n        labelVisible: true,\n        labelBackgroundColor: \"#131722\"\n    },\n    mode: 1 /* CrosshairMode.Magnet */ \n};\nconst gridOptionsDefaults = {\n    vertLines: {\n        color: \"#D6DCDE\",\n        style: 0 /* LineStyle.Solid */ ,\n        visible: true\n    },\n    horzLines: {\n        color: \"#D6DCDE\",\n        style: 0 /* LineStyle.Solid */ ,\n        visible: true\n    }\n};\nconst layoutOptionsDefaults = {\n    background: {\n        type: \"solid\" /* ColorType.Solid */ ,\n        color: \"#FFFFFF\"\n    },\n    textColor: \"#191919\",\n    fontSize: 12,\n    fontFamily: defaultFontFamily,\n    attributionLogo: true\n};\nconst priceScaleOptionsDefaults = {\n    autoScale: true,\n    mode: 0 /* PriceScaleMode.Normal */ ,\n    invertScale: false,\n    alignLabels: true,\n    borderVisible: true,\n    borderColor: \"#2B2B43\",\n    entireTextOnly: false,\n    visible: false,\n    ticksVisible: false,\n    scaleMargins: {\n        bottom: 0.1,\n        top: 0.2\n    },\n    minimumWidth: 0\n};\nconst timeScaleOptionsDefaults = {\n    rightOffset: 0,\n    barSpacing: 6,\n    minBarSpacing: 0.5,\n    fixLeftEdge: false,\n    fixRightEdge: false,\n    lockVisibleTimeRangeOnResize: false,\n    rightBarStaysOnScroll: false,\n    borderVisible: true,\n    borderColor: \"#2B2B43\",\n    visible: true,\n    timeVisible: false,\n    secondsVisible: true,\n    shiftVisibleRangeOnNewBar: true,\n    allowShiftVisibleRangeOnWhitespaceReplacement: false,\n    ticksVisible: false,\n    uniformDistribution: false,\n    minimumHeight: 0,\n    allowBoldLabels: true\n};\nconst watermarkOptionsDefaults = {\n    color: \"rgba(0, 0, 0, 0)\",\n    visible: false,\n    fontSize: 48,\n    fontFamily: defaultFontFamily,\n    fontStyle: \"\",\n    text: \"\",\n    horzAlign: \"center\",\n    vertAlign: \"center\"\n};\nfunction chartOptionsDefaults() {\n    return {\n        width: 0,\n        height: 0,\n        autoSize: false,\n        layout: layoutOptionsDefaults,\n        crosshair: crosshairOptionsDefaults,\n        grid: gridOptionsDefaults,\n        overlayPriceScales: Object.assign({}, priceScaleOptionsDefaults),\n        leftPriceScale: Object.assign(Object.assign({}, priceScaleOptionsDefaults), {\n            visible: false\n        }),\n        rightPriceScale: Object.assign(Object.assign({}, priceScaleOptionsDefaults), {\n            visible: true\n        }),\n        timeScale: timeScaleOptionsDefaults,\n        watermark: watermarkOptionsDefaults,\n        localization: {\n            locale: isRunningOnClientSide ? navigator.language : \"\",\n            dateFormat: \"dd MMM 'yy\"\n        },\n        handleScroll: {\n            mouseWheel: true,\n            pressedMouseMove: true,\n            horzTouchDrag: true,\n            vertTouchDrag: true\n        },\n        handleScale: {\n            axisPressedMouseMove: {\n                time: true,\n                price: true\n            },\n            axisDoubleClickReset: {\n                time: true,\n                price: true\n            },\n            mouseWheel: true,\n            pinch: true\n        },\n        kineticScroll: {\n            mouse: false,\n            touch: true\n        },\n        trackingMode: {\n            exitMode: 1 /* TrackingModeExitMode.OnNextTap */ \n        }\n    };\n}\nclass PriceScaleApi {\n    constructor(chartWidget, priceScaleId){\n        this._private__chartWidget = chartWidget;\n        this._private__priceScaleId = priceScaleId;\n    }\n    applyOptions(options) {\n        this._private__chartWidget._internal_model()._internal_applyPriceScaleOptions(this._private__priceScaleId, options);\n    }\n    options() {\n        return this._private__priceScale()._internal_options();\n    }\n    width() {\n        if (!isDefaultPriceScale(this._private__priceScaleId)) {\n            return 0;\n        }\n        return this._private__chartWidget._internal_getPriceAxisWidth(this._private__priceScaleId);\n    }\n    _private__priceScale() {\n        return ensureNotNull(this._private__chartWidget._internal_model()._internal_findPriceScale(this._private__priceScaleId))._internal_priceScale;\n    }\n}\n/// <reference types=\"_build-time-constants\" />\nfunction checkPriceLineOptions(options) {\n    // eslint-disable-next-line @typescript-eslint/tslint/config\n    assert(typeof options.price === \"number\", `the type of 'price' price line's property must be a number, got '${typeof options.price}'`);\n}\nfunction checkItemsAreOrdered(data, bh, allowDuplicates = false) {\n    if (data.length === 0) {\n        return;\n    }\n    let prevTime = bh.key(data[0].time);\n    for(let i = 1; i < data.length; ++i){\n        const currentTime = bh.key(data[i].time);\n        const checkResult = allowDuplicates ? prevTime <= currentTime : prevTime < currentTime;\n        assert(checkResult, `data must be asc ordered by time, index=${i}, time=${currentTime}, prev time=${prevTime}`);\n        prevTime = currentTime;\n    }\n}\nfunction checkSeriesValuesType(type, data) {\n    data.forEach(getChecker(type));\n}\nfunction getChecker(type) {\n    switch(type){\n        case \"Bar\":\n        case \"Candlestick\":\n            return checkBarItem.bind(null, type);\n        case \"Area\":\n        case \"Baseline\":\n        case \"Line\":\n        case \"Histogram\":\n            return checkLineItem.bind(null, type);\n        case \"Custom\":\n            return checkCustomItem.bind(null, type);\n    }\n}\nfunction checkBarItem(type, barItem) {\n    if (!isFulfilledBarData(barItem)) {\n        return;\n    }\n    assert(// eslint-disable-next-line @typescript-eslint/tslint/config\n    typeof barItem.open === \"number\", `${type} series item data value of open must be a number, got=${typeof barItem.open}, value=${barItem.open}`);\n    assert(// eslint-disable-next-line @typescript-eslint/tslint/config\n    typeof barItem.high === \"number\", `${type} series item data value of high must be a number, got=${typeof barItem.high}, value=${barItem.high}`);\n    assert(// eslint-disable-next-line @typescript-eslint/tslint/config\n    typeof barItem.low === \"number\", `${type} series item data value of low must be a number, got=${typeof barItem.low}, value=${barItem.low}`);\n    assert(// eslint-disable-next-line @typescript-eslint/tslint/config\n    typeof barItem.close === \"number\", `${type} series item data value of close must be a number, got=${typeof barItem.close}, value=${barItem.close}`);\n}\nfunction checkLineItem(type, lineItem) {\n    if (!isFulfilledLineData(lineItem)) {\n        return;\n    }\n    assert(// eslint-disable-next-line @typescript-eslint/tslint/config\n    typeof lineItem.value === \"number\", `${type} series item data value must be a number, got=${typeof lineItem.value}, value=${lineItem.value}`);\n}\nfunction checkCustomItem() {\n    // Nothing to check yet...\n    return;\n}\nfunction convertSeriesMarker(sm, newTime, originalTime) {\n    const values = __rest(sm, [\n        \"time\",\n        \"originalTime\"\n    ]);\n    /* eslint-disable @typescript-eslint/consistent-type-assertions */ const res = Object.assign({\n        time: newTime\n    }, values);\n    /* eslint-enable @typescript-eslint/consistent-type-assertions */ if (originalTime !== undefined) {\n        res.originalTime = originalTime;\n    }\n    return res;\n}\nconst priceLineOptionsDefaults = {\n    color: \"#FF0000\",\n    price: 0,\n    lineStyle: 2 /* LineStyle.Dashed */ ,\n    lineWidth: 1,\n    lineVisible: true,\n    axisLabelVisible: true,\n    title: \"\",\n    axisLabelColor: \"\",\n    axisLabelTextColor: \"\"\n};\nclass PriceLine {\n    constructor(priceLine){\n        this._private__priceLine = priceLine;\n    }\n    applyOptions(options) {\n        this._private__priceLine._internal_applyOptions(options);\n    }\n    options() {\n        return this._private__priceLine._internal_options();\n    }\n    _internal_priceLine() {\n        return this._private__priceLine;\n    }\n}\nclass SeriesApi {\n    constructor(series, dataUpdatesConsumer, priceScaleApiProvider, chartApi, horzScaleBehavior){\n        this._private__dataChangedDelegate = new Delegate();\n        this._internal__series = series;\n        this._internal__dataUpdatesConsumer = dataUpdatesConsumer;\n        this._private__priceScaleApiProvider = priceScaleApiProvider;\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._internal__chartApi = chartApi;\n    }\n    _internal_destroy() {\n        this._private__dataChangedDelegate._internal_destroy();\n    }\n    priceFormatter() {\n        return this._internal__series._internal_formatter();\n    }\n    priceToCoordinate(price) {\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return null;\n        }\n        return this._internal__series._internal_priceScale()._internal_priceToCoordinate(price, firstValue._internal_value);\n    }\n    coordinateToPrice(coordinate) {\n        const firstValue = this._internal__series._internal_firstValue();\n        if (firstValue === null) {\n            return null;\n        }\n        return this._internal__series._internal_priceScale()._internal_coordinateToPrice(coordinate, firstValue._internal_value);\n    }\n    barsInLogicalRange(range) {\n        if (range === null) {\n            return null;\n        }\n        // we use TimeScaleVisibleRange here to convert LogicalRange to strict range properly\n        const correctedRange = new TimeScaleVisibleRange(new RangeImpl(range.from, range.to))._internal_strictRange();\n        const bars = this._internal__series._internal_bars();\n        if (bars._internal_isEmpty()) {\n            return null;\n        }\n        const dataFirstBarInRange = bars._internal_search(correctedRange._internal_left(), 1 /* MismatchDirection.NearestRight */ );\n        const dataLastBarInRange = bars._internal_search(correctedRange._internal_right(), -1 /* MismatchDirection.NearestLeft */ );\n        const dataFirstIndex = ensureNotNull(bars._internal_firstIndex());\n        const dataLastIndex = ensureNotNull(bars._internal_lastIndex());\n        // this means that we request data in the data gap\n        // e.g. let's say we have series with data [0..10, 30..60]\n        // and we request bars info in range [15, 25]\n        // thus, dataFirstBarInRange will be with index 30 and dataLastBarInRange with 10\n        if (dataFirstBarInRange !== null && dataLastBarInRange !== null && dataFirstBarInRange._internal_index > dataLastBarInRange._internal_index) {\n            return {\n                barsBefore: range.from - dataFirstIndex,\n                barsAfter: dataLastIndex - range.to\n            };\n        }\n        const barsBefore = dataFirstBarInRange === null || dataFirstBarInRange._internal_index === dataFirstIndex ? range.from - dataFirstIndex : dataFirstBarInRange._internal_index - dataFirstIndex;\n        const barsAfter = dataLastBarInRange === null || dataLastBarInRange._internal_index === dataLastIndex ? dataLastIndex - range.to : dataLastIndex - dataLastBarInRange._internal_index;\n        const result = {\n            barsBefore,\n            barsAfter\n        };\n        // actually they can't exist separately\n        if (dataFirstBarInRange !== null && dataLastBarInRange !== null) {\n            result.from = dataFirstBarInRange._internal_originalTime;\n            result.to = dataLastBarInRange._internal_originalTime;\n        }\n        return result;\n    }\n    setData(data) {\n        checkItemsAreOrdered(data, this._private__horzScaleBehavior);\n        checkSeriesValuesType(this._internal__series._internal_seriesType(), data);\n        this._internal__dataUpdatesConsumer._internal_applyNewData(this._internal__series, data);\n        this._private__onDataChanged(\"full\");\n    }\n    update(bar) {\n        checkSeriesValuesType(this._internal__series._internal_seriesType(), [\n            bar\n        ]);\n        this._internal__dataUpdatesConsumer._internal_updateData(this._internal__series, bar);\n        this._private__onDataChanged(\"update\");\n    }\n    dataByIndex(logicalIndex, mismatchDirection) {\n        const data = this._internal__series._internal_bars()._internal_search(logicalIndex, mismatchDirection);\n        if (data === null) {\n            // actually it can be a whitespace\n            return null;\n        }\n        const creator = getSeriesDataCreator(this.seriesType());\n        return creator(data);\n    }\n    data() {\n        const seriesCreator = getSeriesDataCreator(this.seriesType());\n        const rows = this._internal__series._internal_bars()._internal_rows();\n        return rows.map((row)=>seriesCreator(row));\n    }\n    subscribeDataChanged(handler) {\n        this._private__dataChangedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeDataChanged(handler) {\n        this._private__dataChangedDelegate._internal_unsubscribe(handler);\n    }\n    setMarkers(data) {\n        checkItemsAreOrdered(data, this._private__horzScaleBehavior, true);\n        const convertedMarkers = data.map((marker)=>convertSeriesMarker(marker, this._private__horzScaleBehavior.convertHorzItemToInternal(marker.time), marker.time));\n        this._internal__series._internal_setMarkers(convertedMarkers);\n    }\n    markers() {\n        return this._internal__series._internal_markers().map((internalItem)=>{\n            return convertSeriesMarker(internalItem, internalItem.originalTime, undefined);\n        });\n    }\n    applyOptions(options) {\n        this._internal__series._internal_applyOptions(options);\n    }\n    options() {\n        return clone(this._internal__series._internal_options());\n    }\n    priceScale() {\n        return this._private__priceScaleApiProvider.priceScale(this._internal__series._internal_priceScale()._internal_id());\n    }\n    createPriceLine(options) {\n        checkPriceLineOptions(options);\n        const strictOptions = merge(clone(priceLineOptionsDefaults), options);\n        const priceLine = this._internal__series._internal_createPriceLine(strictOptions);\n        return new PriceLine(priceLine);\n    }\n    removePriceLine(line) {\n        this._internal__series._internal_removePriceLine(line._internal_priceLine());\n    }\n    seriesType() {\n        return this._internal__series._internal_seriesType();\n    }\n    attachPrimitive(primitive) {\n        // at this point we cast the generic to unknown because we\n        // don't want the model to know the types of the API (â—‘_â—‘)\n        this._internal__series._internal_attachPrimitive(primitive);\n        if (primitive.attached) {\n            primitive.attached({\n                chart: this._internal__chartApi,\n                series: this,\n                requestUpdate: ()=>this._internal__series._internal_model()._internal_fullUpdate()\n            });\n        }\n    }\n    detachPrimitive(primitive) {\n        this._internal__series._internal_detachPrimitive(primitive);\n        if (primitive.detached) {\n            primitive.detached();\n        }\n    }\n    _private__onDataChanged(scope) {\n        if (this._private__dataChangedDelegate._internal_hasListeners()) {\n            this._private__dataChangedDelegate._internal_fire(scope);\n        }\n    }\n}\nclass TimeScaleApi {\n    constructor(model, timeAxisWidget, horzScaleBehavior){\n        this._private__timeRangeChanged = new Delegate();\n        this._private__logicalRangeChanged = new Delegate();\n        this._private__sizeChanged = new Delegate();\n        this._private__model = model;\n        this._private__timeScale = model._internal_timeScale();\n        this._private__timeAxisWidget = timeAxisWidget;\n        this._private__timeScale._internal_visibleBarsChanged()._internal_subscribe(this._private__onVisibleBarsChanged.bind(this));\n        this._private__timeScale._internal_logicalRangeChanged()._internal_subscribe(this._private__onVisibleLogicalRangeChanged.bind(this));\n        this._private__timeAxisWidget._internal_sizeChanged()._internal_subscribe(this._private__onSizeChanged.bind(this));\n        this._private__horzScaleBehavior = horzScaleBehavior;\n    }\n    _internal_destroy() {\n        this._private__timeScale._internal_visibleBarsChanged()._internal_unsubscribeAll(this);\n        this._private__timeScale._internal_logicalRangeChanged()._internal_unsubscribeAll(this);\n        this._private__timeAxisWidget._internal_sizeChanged()._internal_unsubscribeAll(this);\n        this._private__timeRangeChanged._internal_destroy();\n        this._private__logicalRangeChanged._internal_destroy();\n        this._private__sizeChanged._internal_destroy();\n    }\n    scrollPosition() {\n        return this._private__timeScale._internal_rightOffset();\n    }\n    scrollToPosition(position, animated) {\n        if (!animated) {\n            this._private__model._internal_setRightOffset(position);\n            return;\n        }\n        this._private__timeScale._internal_scrollToOffsetAnimated(position, 1000 /* Constants.AnimationDurationMs */ );\n    }\n    scrollToRealTime() {\n        this._private__timeScale._internal_scrollToRealTime();\n    }\n    getVisibleRange() {\n        const timeRange = this._private__timeScale._internal_visibleTimeRange();\n        if (timeRange === null) {\n            return null;\n        }\n        return {\n            from: timeRange.from.originalTime,\n            to: timeRange.to.originalTime\n        };\n    }\n    setVisibleRange(range) {\n        const convertedRange = {\n            from: this._private__horzScaleBehavior.convertHorzItemToInternal(range.from),\n            to: this._private__horzScaleBehavior.convertHorzItemToInternal(range.to)\n        };\n        const logicalRange = this._private__timeScale._internal_logicalRangeForTimeRange(convertedRange);\n        this._private__model._internal_setTargetLogicalRange(logicalRange);\n    }\n    getVisibleLogicalRange() {\n        const logicalRange = this._private__timeScale._internal_visibleLogicalRange();\n        if (logicalRange === null) {\n            return null;\n        }\n        return {\n            from: logicalRange._internal_left(),\n            to: logicalRange._internal_right()\n        };\n    }\n    setVisibleLogicalRange(range) {\n        assert(range.from <= range.to, \"The from index cannot be after the to index.\");\n        this._private__model._internal_setTargetLogicalRange(range);\n    }\n    resetTimeScale() {\n        this._private__model._internal_resetTimeScale();\n    }\n    fitContent() {\n        this._private__model._internal_fitContent();\n    }\n    logicalToCoordinate(logical) {\n        const timeScale = this._private__model._internal_timeScale();\n        if (timeScale._internal_isEmpty()) {\n            return null;\n        } else {\n            return timeScale._internal_indexToCoordinate(logical);\n        }\n    }\n    coordinateToLogical(x) {\n        if (this._private__timeScale._internal_isEmpty()) {\n            return null;\n        } else {\n            return this._private__timeScale._internal_coordinateToIndex(x);\n        }\n    }\n    timeToCoordinate(time) {\n        const timePoint = this._private__horzScaleBehavior.convertHorzItemToInternal(time);\n        const timePointIndex = this._private__timeScale._internal_timeToIndex(timePoint, false);\n        if (timePointIndex === null) {\n            return null;\n        }\n        return this._private__timeScale._internal_indexToCoordinate(timePointIndex);\n    }\n    coordinateToTime(x) {\n        const timeScale = this._private__model._internal_timeScale();\n        const timePointIndex = timeScale._internal_coordinateToIndex(x);\n        const timePoint = timeScale._internal_indexToTimeScalePoint(timePointIndex);\n        if (timePoint === null) {\n            return null;\n        }\n        return timePoint.originalTime;\n    }\n    width() {\n        return this._private__timeAxisWidget._internal_getSize().width;\n    }\n    height() {\n        return this._private__timeAxisWidget._internal_getSize().height;\n    }\n    subscribeVisibleTimeRangeChange(handler) {\n        this._private__timeRangeChanged._internal_subscribe(handler);\n    }\n    unsubscribeVisibleTimeRangeChange(handler) {\n        this._private__timeRangeChanged._internal_unsubscribe(handler);\n    }\n    subscribeVisibleLogicalRangeChange(handler) {\n        this._private__logicalRangeChanged._internal_subscribe(handler);\n    }\n    unsubscribeVisibleLogicalRangeChange(handler) {\n        this._private__logicalRangeChanged._internal_unsubscribe(handler);\n    }\n    subscribeSizeChange(handler) {\n        this._private__sizeChanged._internal_subscribe(handler);\n    }\n    unsubscribeSizeChange(handler) {\n        this._private__sizeChanged._internal_unsubscribe(handler);\n    }\n    applyOptions(options) {\n        this._private__timeScale._internal_applyOptions(options);\n    }\n    options() {\n        return Object.assign(Object.assign({}, clone(this._private__timeScale._internal_options())), {\n            barSpacing: this._private__timeScale._internal_barSpacing()\n        });\n    }\n    _private__onVisibleBarsChanged() {\n        if (this._private__timeRangeChanged._internal_hasListeners()) {\n            this._private__timeRangeChanged._internal_fire(this.getVisibleRange());\n        }\n    }\n    _private__onVisibleLogicalRangeChanged() {\n        if (this._private__logicalRangeChanged._internal_hasListeners()) {\n            this._private__logicalRangeChanged._internal_fire(this.getVisibleLogicalRange());\n        }\n    }\n    _private__onSizeChanged(size) {\n        this._private__sizeChanged._internal_fire(size.width, size.height);\n    }\n}\nfunction patchPriceFormat(priceFormat) {\n    if (priceFormat === undefined || priceFormat.type === \"custom\") {\n        return;\n    }\n    const priceFormatBuiltIn = priceFormat;\n    if (priceFormatBuiltIn.minMove !== undefined && priceFormatBuiltIn.precision === undefined) {\n        priceFormatBuiltIn.precision = precisionByMinMove(priceFormatBuiltIn.minMove);\n    }\n}\nfunction migrateHandleScaleScrollOptions(options) {\n    if (isBoolean(options.handleScale)) {\n        const handleScale = options.handleScale;\n        options.handleScale = {\n            axisDoubleClickReset: {\n                time: handleScale,\n                price: handleScale\n            },\n            axisPressedMouseMove: {\n                time: handleScale,\n                price: handleScale\n            },\n            mouseWheel: handleScale,\n            pinch: handleScale\n        };\n    } else if (options.handleScale !== undefined) {\n        const { axisPressedMouseMove, axisDoubleClickReset } = options.handleScale;\n        if (isBoolean(axisPressedMouseMove)) {\n            options.handleScale.axisPressedMouseMove = {\n                time: axisPressedMouseMove,\n                price: axisPressedMouseMove\n            };\n        }\n        if (isBoolean(axisDoubleClickReset)) {\n            options.handleScale.axisDoubleClickReset = {\n                time: axisDoubleClickReset,\n                price: axisDoubleClickReset\n            };\n        }\n    }\n    const handleScroll = options.handleScroll;\n    if (isBoolean(handleScroll)) {\n        options.handleScroll = {\n            horzTouchDrag: handleScroll,\n            vertTouchDrag: handleScroll,\n            mouseWheel: handleScroll,\n            pressedMouseMove: handleScroll\n        };\n    }\n}\nfunction toInternalOptions(options) {\n    migrateHandleScaleScrollOptions(options);\n    return options;\n}\nclass ChartApi {\n    constructor(container, horzScaleBehavior, options){\n        this._private__seriesMap = new Map();\n        this._private__seriesMapReversed = new Map();\n        this._private__clickedDelegate = new Delegate();\n        this._private__dblClickedDelegate = new Delegate();\n        this._private__crosshairMovedDelegate = new Delegate();\n        this._private__dataLayer = new DataLayer(horzScaleBehavior);\n        const internalOptions = options === undefined ? clone(chartOptionsDefaults()) : merge(clone(chartOptionsDefaults()), toInternalOptions(options));\n        this._private__horzScaleBehavior = horzScaleBehavior;\n        this._private__chartWidget = new ChartWidget(container, internalOptions, horzScaleBehavior);\n        this._private__chartWidget._internal_clicked()._internal_subscribe((paramSupplier)=>{\n            if (this._private__clickedDelegate._internal_hasListeners()) {\n                this._private__clickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\n            }\n        }, this);\n        this._private__chartWidget._internal_dblClicked()._internal_subscribe((paramSupplier)=>{\n            if (this._private__dblClickedDelegate._internal_hasListeners()) {\n                this._private__dblClickedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\n            }\n        }, this);\n        this._private__chartWidget._internal_crosshairMoved()._internal_subscribe((paramSupplier)=>{\n            if (this._private__crosshairMovedDelegate._internal_hasListeners()) {\n                this._private__crosshairMovedDelegate._internal_fire(this._private__convertMouseParams(paramSupplier()));\n            }\n        }, this);\n        const model = this._private__chartWidget._internal_model();\n        this._private__timeScaleApi = new TimeScaleApi(model, this._private__chartWidget._internal_timeAxisWidget(), this._private__horzScaleBehavior);\n    }\n    remove() {\n        this._private__chartWidget._internal_clicked()._internal_unsubscribeAll(this);\n        this._private__chartWidget._internal_dblClicked()._internal_unsubscribeAll(this);\n        this._private__chartWidget._internal_crosshairMoved()._internal_unsubscribeAll(this);\n        this._private__timeScaleApi._internal_destroy();\n        this._private__chartWidget._internal_destroy();\n        this._private__seriesMap.clear();\n        this._private__seriesMapReversed.clear();\n        this._private__clickedDelegate._internal_destroy();\n        this._private__dblClickedDelegate._internal_destroy();\n        this._private__crosshairMovedDelegate._internal_destroy();\n        this._private__dataLayer._internal_destroy();\n    }\n    resize(width, height, forceRepaint) {\n        if (this.autoSizeActive()) {\n            // We return early here instead of checking this within the actual _chartWidget.resize method\n            // because this should only apply to external resize requests.\n            warn(`Height and width values ignored because 'autoSize' option is enabled.`);\n            return;\n        }\n        this._private__chartWidget._internal_resize(width, height, forceRepaint);\n    }\n    addCustomSeries(customPaneView, options) {\n        const paneView = ensure(customPaneView);\n        const defaults = Object.assign(Object.assign({}, customStyleDefaults), paneView.defaultOptions());\n        return this._private__addSeriesImpl(\"Custom\", defaults, options, paneView);\n    }\n    addAreaSeries(options) {\n        return this._private__addSeriesImpl(\"Area\", areaStyleDefaults, options);\n    }\n    addBaselineSeries(options) {\n        return this._private__addSeriesImpl(\"Baseline\", baselineStyleDefaults, options);\n    }\n    addBarSeries(options) {\n        return this._private__addSeriesImpl(\"Bar\", barStyleDefaults, options);\n    }\n    addCandlestickSeries(options = {}) {\n        fillUpDownCandlesticksColors(options);\n        return this._private__addSeriesImpl(\"Candlestick\", candlestickStyleDefaults, options);\n    }\n    addHistogramSeries(options) {\n        return this._private__addSeriesImpl(\"Histogram\", histogramStyleDefaults, options);\n    }\n    addLineSeries(options) {\n        return this._private__addSeriesImpl(\"Line\", lineStyleDefaults, options);\n    }\n    removeSeries(seriesApi) {\n        const series = ensureDefined(this._private__seriesMap.get(seriesApi));\n        const update = this._private__dataLayer._internal_removeSeries(series);\n        const model = this._private__chartWidget._internal_model();\n        model._internal_removeSeries(series);\n        this._private__sendUpdateToChart(update);\n        this._private__seriesMap.delete(seriesApi);\n        this._private__seriesMapReversed.delete(series);\n    }\n    _internal_applyNewData(series, data) {\n        this._private__sendUpdateToChart(this._private__dataLayer._internal_setSeriesData(series, data));\n    }\n    _internal_updateData(series, data) {\n        this._private__sendUpdateToChart(this._private__dataLayer._internal_updateSeriesData(series, data));\n    }\n    subscribeClick(handler) {\n        this._private__clickedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeClick(handler) {\n        this._private__clickedDelegate._internal_unsubscribe(handler);\n    }\n    subscribeCrosshairMove(handler) {\n        this._private__crosshairMovedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeCrosshairMove(handler) {\n        this._private__crosshairMovedDelegate._internal_unsubscribe(handler);\n    }\n    subscribeDblClick(handler) {\n        this._private__dblClickedDelegate._internal_subscribe(handler);\n    }\n    unsubscribeDblClick(handler) {\n        this._private__dblClickedDelegate._internal_unsubscribe(handler);\n    }\n    priceScale(priceScaleId) {\n        return new PriceScaleApi(this._private__chartWidget, priceScaleId);\n    }\n    timeScale() {\n        return this._private__timeScaleApi;\n    }\n    applyOptions(options) {\n        this._private__chartWidget._internal_applyOptions(toInternalOptions(options));\n    }\n    options() {\n        return this._private__chartWidget._internal_options();\n    }\n    takeScreenshot() {\n        return this._private__chartWidget._internal_takeScreenshot();\n    }\n    autoSizeActive() {\n        return this._private__chartWidget._internal_autoSizeActive();\n    }\n    chartElement() {\n        return this._private__chartWidget._internal_element();\n    }\n    paneSize() {\n        const size = this._private__chartWidget._internal_paneSize();\n        return {\n            height: size.height,\n            width: size.width\n        };\n    }\n    setCrosshairPosition(price, horizontalPosition, seriesApi) {\n        const series = this._private__seriesMap.get(seriesApi);\n        if (series === undefined) {\n            return;\n        }\n        const pane = this._private__chartWidget._internal_model()._internal_paneForSource(series);\n        if (pane === null) {\n            return;\n        }\n        this._private__chartWidget._internal_model()._internal_setAndSaveSyntheticPosition(price, horizontalPosition, pane);\n    }\n    clearCrosshairPosition() {\n        this._private__chartWidget._internal_model()._internal_clearCurrentPosition(true);\n    }\n    _private__addSeriesImpl(type, styleDefaults, options = {}, customPaneView) {\n        patchPriceFormat(options.priceFormat);\n        const strictOptions = merge(clone(seriesOptionsDefaults), clone(styleDefaults), options);\n        const series = this._private__chartWidget._internal_model()._internal_createSeries(type, strictOptions, customPaneView);\n        const res = new SeriesApi(series, this, this, this, this._private__horzScaleBehavior);\n        this._private__seriesMap.set(res, series);\n        this._private__seriesMapReversed.set(series, res);\n        return res;\n    }\n    _private__sendUpdateToChart(update) {\n        const model = this._private__chartWidget._internal_model();\n        model._internal_updateTimeScale(update._internal_timeScale._internal_baseIndex, update._internal_timeScale._internal_points, update._internal_timeScale._internal_firstChangedPointIndex);\n        update._internal_series.forEach((value, series)=>series._internal_setData(value._internal_data, value._internal_info));\n        model._internal_recalculateAllPanes();\n    }\n    _private__mapSeriesToApi(series) {\n        return ensureDefined(this._private__seriesMapReversed.get(series));\n    }\n    _private__convertMouseParams(param) {\n        const seriesData = new Map();\n        param._internal_seriesData.forEach((plotRow, series)=>{\n            const seriesType = series._internal_seriesType();\n            const data = getSeriesDataCreator(seriesType)(plotRow);\n            if (seriesType !== \"Custom\") {\n                assert(isFulfilledData(data));\n            } else {\n                const customWhitespaceChecker = series._internal_customSeriesWhitespaceCheck();\n                assert(!customWhitespaceChecker || customWhitespaceChecker(data) === false);\n            }\n            seriesData.set(this._private__mapSeriesToApi(series), data);\n        });\n        const hoveredSeries = param._internal_hoveredSeries === undefined || !this._private__seriesMapReversed.has(param._internal_hoveredSeries) ? undefined : this._private__mapSeriesToApi(param._internal_hoveredSeries);\n        return {\n            time: param._internal_originalTime,\n            logical: param._internal_index,\n            point: param._internal_point,\n            hoveredSeries,\n            hoveredObjectId: param._internal_hoveredObject,\n            seriesData,\n            sourceEvent: param._internal_touchMouseEventData\n        };\n    }\n}\n/**\n * This function is the main entry point of the Lightweight Charting Library. If you are using time values\n * for the horizontal scale then it is recommended that you rather use the {@link createChart} function.\n *\n * @template HorzScaleItem - type of points on the horizontal scale\n * @template THorzScaleBehavior - type of horizontal axis strategy that encapsulate all the specific behaviors of the horizontal scale type\n *\n * @param container - ID of HTML element or element itself\n * @param horzScaleBehavior - Horizontal scale behavior\n * @param options - Any subset of options to be applied at start.\n * @returns An interface to the created chart\n */ function createChartEx(container, horzScaleBehavior, options) {\n    let htmlElement;\n    if (isString(container)) {\n        const element = document.getElementById(container);\n        assert(element !== null, `Cannot find element in DOM with id=${container}`);\n        htmlElement = element;\n    } else {\n        htmlElement = container;\n    }\n    const res = new ChartApi(htmlElement, horzScaleBehavior, options);\n    horzScaleBehavior.setOptions(res.options());\n    return res;\n}\n/**\n * This function is the simplified main entry point of the Lightweight Charting Library with time points for the horizontal scale.\n *\n * @param container - ID of HTML element or element itself\n * @param options - Any subset of options to be applied at start.\n * @returns An interface to the created chart\n */ function createChart(container, options) {\n    return createChartEx(container, new HorzScaleBehaviorTime(), HorzScaleBehaviorTime._internal_applyDefaults(options));\n}\n/**\n * Provides the default implementation of the horizontal scale (time-based) that can be used as a base for extending the horizontal scale with custom behavior.\n * This allows for the introduction of custom functionality without re-implementing the entire {@link IHorzScaleBehavior}&lt;{@link Time}&gt; interface.\n *\n * For further details, refer to the {@link createChartEx} chart constructor method.\n *\n * @returns An uninitialized class implementing the {@link IHorzScaleBehavior}&lt;{@link Time}&gt; interface\n */ function defaultHorzScaleBehavior() {\n    return HorzScaleBehaviorTime;\n}\n/// <reference types=\"_build-time-constants\" />\nconst customSeriesDefaultOptions = Object.assign(Object.assign({}, seriesOptionsDefaults), customStyleDefaults);\n/**\n * Returns the current version as a string. For example `'3.3.0'`.\n */ function version() {\n    return \"4.2.3\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xpZ2h0d2VpZ2h0LWNoYXJ0cy9kaXN0L2xpZ2h0d2VpZ2h0LWNoYXJ0cy5kZXZlbG9wbWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FDMEg7QUFFM0gsTUFBTUssMkJBQTJCO0lBQzdCQyxTQUFTO0lBQ1RDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxlQUFlO0lBQ2ZDLGFBQWE7SUFDYkMsZUFBZTtJQUNmQyxpQkFBaUI7SUFDakJDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxlQUFlO0FBQ25CO0FBQ0EsTUFBTUMsbUJBQW1CO0lBQ3JCVixTQUFTO0lBQ1RDLFdBQVc7SUFDWFUsYUFBYTtJQUNiQyxVQUFVO0FBQ2Q7QUFDQSxNQUFNQyxvQkFBb0I7SUFDdEJDLE9BQU87SUFDUEMsV0FBVyxFQUFFLG1CQUFtQjtJQUNoQ0MsV0FBVztJQUNYQyxVQUFVLEVBQUUsbUJBQW1CO0lBQy9CQyxhQUFhO0lBQ2JDLHdCQUF3QjtJQUN4QkMsdUJBQXVCO0lBQ3ZCQyw0QkFBNEI7SUFDNUJDLDRCQUE0QjtJQUM1QkMsZ0NBQWdDO0lBQ2hDQyxvQkFBb0IsRUFBRSxtQ0FBbUM7SUFDekRDLHFCQUFxQjtBQUN6QjtBQUNBLE1BQU1DLG9CQUFvQjtJQUN0QkMsVUFBVTtJQUNWQyxhQUFhO0lBQ2JDLGtCQUFrQjtJQUNsQkMsV0FBVztJQUNYZixXQUFXLEVBQUUsbUJBQW1CO0lBQ2hDQyxXQUFXO0lBQ1hDLFVBQVUsRUFBRSxtQkFBbUI7SUFDL0JDLGFBQWE7SUFDYkMsd0JBQXdCO0lBQ3hCQyx1QkFBdUI7SUFDdkJDLDRCQUE0QjtJQUM1QkMsNEJBQTRCO0lBQzVCQyxnQ0FBZ0M7SUFDaENDLG9CQUFvQixFQUFFLG1DQUFtQztJQUN6REMscUJBQXFCO0FBQ3pCO0FBQ0EsTUFBTU0sd0JBQXdCO0lBQzFCQyxXQUFXO1FBQ1BDLE1BQU07UUFDTkMsT0FBTztJQUNYO0lBQ0FDLGVBQWU7SUFD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LENBQUMsbUNBQW1DLEVBQUUzTCxVQUFVLENBQUM7UUFDMUU0eEIsY0FBY2ptQjtJQUNsQixPQUNLO1FBQ0RpbUIsY0FBYzV4QjtJQUNsQjtJQUNBLE1BQU12dkQsTUFBTSxJQUFJdStFLFNBQVM0QyxhQUFhMXRDLG1CQUFtQi9vQztJQUN6RCtvQyxrQkFBa0JnWCxVQUFVLENBQUN6cUQsSUFBSTBLLE9BQU87SUFDeEMsT0FBTzFLO0FBQ1g7QUFDQTs7Ozs7O0NBTUMsR0FDRCxTQUFTcWhGLFlBQVk5eEIsU0FBUyxFQUFFN2tELE9BQU87SUFDbkMsT0FBT3cyRSxjQUFjM3hCLFdBQVcsSUFBSS9FLHlCQUF5QkEsc0JBQXNCWSx1QkFBdUIsQ0FBQzFnRDtBQUMvRztBQUNBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTNDJFO0lBQ0wsT0FBTzkyQjtBQUNYO0FBRUEsK0NBQStDO0FBQy9DLE1BQU0rMkIsNkJBQTZCem9GLE9BQU9xa0IsTUFBTSxDQUFDcmtCLE9BQU9xa0IsTUFBTSxDQUFDLENBQUMsR0FBR3QxQix3QkFBd0JEO0FBQzNGOztDQUVDLEdBQ0QsU0FBUzQ1RjtJQUNMLE9BQU87QUFDWDtBQUVtUyIsInNvdXJjZXMiOlsid2VicGFjazovL2xvb3B0cmFkZS1kYXNoYm9hcmQvLi4vbm9kZV9tb2R1bGVzL2xpZ2h0d2VpZ2h0LWNoYXJ0cy9kaXN0L2xpZ2h0d2VpZ2h0LWNoYXJ0cy5kZXZlbG9wbWVudC5tanM/ZTFkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBUcmFkaW5nVmlldyBMaWdodHdlaWdodCBDaGFydHPihKIgdjQuMi4zXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUgVHJhZGluZ1ZpZXcsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIEFwYWNoZSBMaWNlbnNlIDIuMCBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKi9cbmltcG9ydCB7IHNpemUgYXMgc2l6ZSQxLCBiaW5kQ2FudmFzRWxlbWVudEJpdG1hcFNpemVUbywgZXF1YWxTaXplcywgdHJ5Q3JlYXRlQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQgfSBmcm9tICdmYW5jeS1jYW52YXMnO1xuXG5jb25zdCBjYW5kbGVzdGlja1N0eWxlRGVmYXVsdHMgPSB7XG4gICAgdXBDb2xvcjogJyMyNmE2OWEnLFxuICAgIGRvd25Db2xvcjogJyNlZjUzNTAnLFxuICAgIHdpY2tWaXNpYmxlOiB0cnVlLFxuICAgIGJvcmRlclZpc2libGU6IHRydWUsXG4gICAgYm9yZGVyQ29sb3I6ICcjMzc4NjU4JyxcbiAgICBib3JkZXJVcENvbG9yOiAnIzI2YTY5YScsXG4gICAgYm9yZGVyRG93bkNvbG9yOiAnI2VmNTM1MCcsXG4gICAgd2lja0NvbG9yOiAnIzczNzM3NScsXG4gICAgd2lja1VwQ29sb3I6ICcjMjZhNjlhJyxcbiAgICB3aWNrRG93bkNvbG9yOiAnI2VmNTM1MCcsXG59O1xuY29uc3QgYmFyU3R5bGVEZWZhdWx0cyA9IHtcbiAgICB1cENvbG9yOiAnIzI2YTY5YScsXG4gICAgZG93bkNvbG9yOiAnI2VmNTM1MCcsXG4gICAgb3BlblZpc2libGU6IHRydWUsXG4gICAgdGhpbkJhcnM6IHRydWUsXG59O1xuY29uc3QgbGluZVN0eWxlRGVmYXVsdHMgPSB7XG4gICAgY29sb3I6ICcjMjE5NmYzJyxcbiAgICBsaW5lU3R5bGU6IDAgLyogTGluZVN0eWxlLlNvbGlkICovLFxuICAgIGxpbmVXaWR0aDogMyxcbiAgICBsaW5lVHlwZTogMCAvKiBMaW5lVHlwZS5TaW1wbGUgKi8sXG4gICAgbGluZVZpc2libGU6IHRydWUsXG4gICAgY3Jvc3NoYWlyTWFya2VyVmlzaWJsZTogdHJ1ZSxcbiAgICBjcm9zc2hhaXJNYXJrZXJSYWRpdXM6IDQsXG4gICAgY3Jvc3NoYWlyTWFya2VyQm9yZGVyQ29sb3I6ICcnLFxuICAgIGNyb3NzaGFpck1hcmtlckJvcmRlcldpZHRoOiAyLFxuICAgIGNyb3NzaGFpck1hcmtlckJhY2tncm91bmRDb2xvcjogJycsXG4gICAgbGFzdFByaWNlQW5pbWF0aW9uOiAwIC8qIExhc3RQcmljZUFuaW1hdGlvbk1vZGUuRGlzYWJsZWQgKi8sXG4gICAgcG9pbnRNYXJrZXJzVmlzaWJsZTogZmFsc2UsXG59O1xuY29uc3QgYXJlYVN0eWxlRGVmYXVsdHMgPSB7XG4gICAgdG9wQ29sb3I6ICdyZ2JhKCA0NiwgMjIwLCAxMzUsIDAuNCknLFxuICAgIGJvdHRvbUNvbG9yOiAncmdiYSggNDAsIDIyMSwgMTAwLCAwKScsXG4gICAgaW52ZXJ0RmlsbGVkQXJlYTogZmFsc2UsXG4gICAgbGluZUNvbG9yOiAnIzMzRDc3OCcsXG4gICAgbGluZVN0eWxlOiAwIC8qIExpbmVTdHlsZS5Tb2xpZCAqLyxcbiAgICBsaW5lV2lkdGg6IDMsXG4gICAgbGluZVR5cGU6IDAgLyogTGluZVR5cGUuU2ltcGxlICovLFxuICAgIGxpbmVWaXNpYmxlOiB0cnVlLFxuICAgIGNyb3NzaGFpck1hcmtlclZpc2libGU6IHRydWUsXG4gICAgY3Jvc3NoYWlyTWFya2VyUmFkaXVzOiA0LFxuICAgIGNyb3NzaGFpck1hcmtlckJvcmRlckNvbG9yOiAnJyxcbiAgICBjcm9zc2hhaXJNYXJrZXJCb3JkZXJXaWR0aDogMixcbiAgICBjcm9zc2hhaXJNYXJrZXJCYWNrZ3JvdW5kQ29sb3I6ICcnLFxuICAgIGxhc3RQcmljZUFuaW1hdGlvbjogMCAvKiBMYXN0UHJpY2VBbmltYXRpb25Nb2RlLkRpc2FibGVkICovLFxuICAgIHBvaW50TWFya2Vyc1Zpc2libGU6IGZhbHNlLFxufTtcbmNvbnN0IGJhc2VsaW5lU3R5bGVEZWZhdWx0cyA9IHtcbiAgICBiYXNlVmFsdWU6IHtcbiAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgcHJpY2U6IDAsXG4gICAgfSxcbiAgICB0b3BGaWxsQ29sb3IxOiAncmdiYSgzOCwgMTY2LCAxNTQsIDAuMjgpJyxcbiAgICB0b3BGaWxsQ29sb3IyOiAncmdiYSgzOCwgMTY2LCAxNTQsIDAuMDUpJyxcbiAgICB0b3BMaW5lQ29sb3I6ICdyZ2JhKDM4LCAxNjYsIDE1NCwgMSknLFxuICAgIGJvdHRvbUZpbGxDb2xvcjE6ICdyZ2JhKDIzOSwgODMsIDgwLCAwLjA1KScsXG4gICAgYm90dG9tRmlsbENvbG9yMjogJ3JnYmEoMjM5LCA4MywgODAsIDAuMjgpJyxcbiAgICBib3R0b21MaW5lQ29sb3I6ICdyZ2JhKDIzOSwgODMsIDgwLCAxKScsXG4gICAgbGluZVdpZHRoOiAzLFxuICAgIGxpbmVTdHlsZTogMCAvKiBMaW5lU3R5bGUuU29saWQgKi8sXG4gICAgbGluZVR5cGU6IDAgLyogTGluZVR5cGUuU2ltcGxlICovLFxuICAgIGxpbmVWaXNpYmxlOiB0cnVlLFxuICAgIGNyb3NzaGFpck1hcmtlclZpc2libGU6IHRydWUsXG4gICAgY3Jvc3NoYWlyTWFya2VyUmFkaXVzOiA0LFxuICAgIGNyb3NzaGFpck1hcmtlckJvcmRlckNvbG9yOiAnJyxcbiAgICBjcm9zc2hhaXJNYXJrZXJCb3JkZXJXaWR0aDogMixcbiAgICBjcm9zc2hhaXJNYXJrZXJCYWNrZ3JvdW5kQ29sb3I6ICcnLFxuICAgIGxhc3RQcmljZUFuaW1hdGlvbjogMCAvKiBMYXN0UHJpY2VBbmltYXRpb25Nb2RlLkRpc2FibGVkICovLFxuICAgIHBvaW50TWFya2Vyc1Zpc2libGU6IGZhbHNlLFxufTtcbmNvbnN0IGhpc3RvZ3JhbVN0eWxlRGVmYXVsdHMgPSB7XG4gICAgY29sb3I6ICcjMjZhNjlhJyxcbiAgICBiYXNlOiAwLFxufTtcbmNvbnN0IGN1c3RvbVN0eWxlRGVmYXVsdHMgPSB7XG4gICAgY29sb3I6ICcjMjE5NmYzJyxcbn07XG5jb25zdCBzZXJpZXNPcHRpb25zRGVmYXVsdHMgPSB7XG4gICAgdGl0bGU6ICcnLFxuICAgIHZpc2libGU6IHRydWUsXG4gICAgbGFzdFZhbHVlVmlzaWJsZTogdHJ1ZSxcbiAgICBwcmljZUxpbmVWaXNpYmxlOiB0cnVlLFxuICAgIHByaWNlTGluZVNvdXJjZTogMCAvKiBQcmljZUxpbmVTb3VyY2UuTGFzdEJhciAqLyxcbiAgICBwcmljZUxpbmVXaWR0aDogMSxcbiAgICBwcmljZUxpbmVDb2xvcjogJycsXG4gICAgcHJpY2VMaW5lU3R5bGU6IDIgLyogTGluZVN0eWxlLkRhc2hlZCAqLyxcbiAgICBiYXNlTGluZVZpc2libGU6IHRydWUsXG4gICAgYmFzZUxpbmVXaWR0aDogMSxcbiAgICBiYXNlTGluZUNvbG9yOiAnI0IyQjVCRScsXG4gICAgYmFzZUxpbmVTdHlsZTogMCAvKiBMaW5lU3R5bGUuU29saWQgKi8sXG4gICAgcHJpY2VGb3JtYXQ6IHtcbiAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgcHJlY2lzaW9uOiAyLFxuICAgICAgICBtaW5Nb3ZlOiAwLjAxLFxuICAgIH0sXG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHBvc3NpYmxlIGxpbmUgdHlwZXMuXG4gKi9cbnZhciBMaW5lVHlwZTtcbihmdW5jdGlvbiAoTGluZVR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBBIGxpbmUuXG4gICAgICovXG4gICAgTGluZVR5cGVbTGluZVR5cGVbXCJTaW1wbGVcIl0gPSAwXSA9IFwiU2ltcGxlXCI7XG4gICAgLyoqXG4gICAgICogQSBzdGVwcGVkIGxpbmUuXG4gICAgICovXG4gICAgTGluZVR5cGVbTGluZVR5cGVbXCJXaXRoU3RlcHNcIl0gPSAxXSA9IFwiV2l0aFN0ZXBzXCI7XG4gICAgLyoqXG4gICAgICogQSBjdXJ2ZWQgbGluZS5cbiAgICAgKi9cbiAgICBMaW5lVHlwZVtMaW5lVHlwZVtcIkN1cnZlZFwiXSA9IDJdID0gXCJDdXJ2ZWRcIjtcbn0pKExpbmVUeXBlIHx8IChMaW5lVHlwZSA9IHt9KSk7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHBvc3NpYmxlIGxpbmUgc3R5bGVzLlxuICovXG52YXIgTGluZVN0eWxlO1xuKGZ1bmN0aW9uIChMaW5lU3R5bGUpIHtcbiAgICAvKipcbiAgICAgKiBBIHNvbGlkIGxpbmUuXG4gICAgICovXG4gICAgTGluZVN0eWxlW0xpbmVTdHlsZVtcIlNvbGlkXCJdID0gMF0gPSBcIlNvbGlkXCI7XG4gICAgLyoqXG4gICAgICogQSBkb3R0ZWQgbGluZS5cbiAgICAgKi9cbiAgICBMaW5lU3R5bGVbTGluZVN0eWxlW1wiRG90dGVkXCJdID0gMV0gPSBcIkRvdHRlZFwiO1xuICAgIC8qKlxuICAgICAqIEEgZGFzaGVkIGxpbmUuXG4gICAgICovXG4gICAgTGluZVN0eWxlW0xpbmVTdHlsZVtcIkRhc2hlZFwiXSA9IDJdID0gXCJEYXNoZWRcIjtcbiAgICAvKipcbiAgICAgKiBBIGRhc2hlZCBsaW5lIHdpdGggYmlnZ2VyIGRhc2hlcy5cbiAgICAgKi9cbiAgICBMaW5lU3R5bGVbTGluZVN0eWxlW1wiTGFyZ2VEYXNoZWRcIl0gPSAzXSA9IFwiTGFyZ2VEYXNoZWRcIjtcbiAgICAvKipcbiAgICAgKiBBIGRvdHRlZCBsaW5lIHdpdGggbW9yZSBzcGFjZSBiZXR3ZWVuIGRvdHMuXG4gICAgICovXG4gICAgTGluZVN0eWxlW0xpbmVTdHlsZVtcIlNwYXJzZURvdHRlZFwiXSA9IDRdID0gXCJTcGFyc2VEb3R0ZWRcIjtcbn0pKExpbmVTdHlsZSB8fCAoTGluZVN0eWxlID0ge30pKTtcbmZ1bmN0aW9uIHNldExpbmVTdHlsZShjdHgsIHN0eWxlKSB7XG4gICAgY29uc3QgZGFzaFBhdHRlcm5zID0ge1xuICAgICAgICBbMCAvKiBMaW5lU3R5bGUuU29saWQgKi9dOiBbXSxcbiAgICAgICAgWzEgLyogTGluZVN0eWxlLkRvdHRlZCAqL106IFtjdHgubGluZVdpZHRoLCBjdHgubGluZVdpZHRoXSxcbiAgICAgICAgWzIgLyogTGluZVN0eWxlLkRhc2hlZCAqL106IFsyICogY3R4LmxpbmVXaWR0aCwgMiAqIGN0eC5saW5lV2lkdGhdLFxuICAgICAgICBbMyAvKiBMaW5lU3R5bGUuTGFyZ2VEYXNoZWQgKi9dOiBbNiAqIGN0eC5saW5lV2lkdGgsIDYgKiBjdHgubGluZVdpZHRoXSxcbiAgICAgICAgWzQgLyogTGluZVN0eWxlLlNwYXJzZURvdHRlZCAqL106IFtjdHgubGluZVdpZHRoLCA0ICogY3R4LmxpbmVXaWR0aF0sXG4gICAgfTtcbiAgICBjb25zdCBkYXNoUGF0dGVybiA9IGRhc2hQYXR0ZXJuc1tzdHlsZV07XG4gICAgY3R4LnNldExpbmVEYXNoKGRhc2hQYXR0ZXJuKTtcbn1cbmZ1bmN0aW9uIGRyYXdIb3Jpem9udGFsTGluZShjdHgsIHksIGxlZnQsIHJpZ2h0KSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGNvbnN0IGNvcnJlY3Rpb24gPSAoY3R4LmxpbmVXaWR0aCAlIDIpID8gMC41IDogMDtcbiAgICBjdHgubW92ZVRvKGxlZnQsIHkgKyBjb3JyZWN0aW9uKTtcbiAgICBjdHgubGluZVRvKHJpZ2h0LCB5ICsgY29ycmVjdGlvbik7XG4gICAgY3R4LnN0cm9rZSgpO1xufVxuZnVuY3Rpb24gZHJhd1ZlcnRpY2FsTGluZShjdHgsIHgsIHRvcCwgYm90dG9tKSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGNvbnN0IGNvcnJlY3Rpb24gPSAoY3R4LmxpbmVXaWR0aCAlIDIpID8gMC41IDogMDtcbiAgICBjdHgubW92ZVRvKHggKyBjb3JyZWN0aW9uLCB0b3ApO1xuICAgIGN0eC5saW5lVG8oeCArIGNvcnJlY3Rpb24sIGJvdHRvbSk7XG4gICAgY3R4LnN0cm9rZSgpO1xufVxuZnVuY3Rpb24gc3Ryb2tlSW5QaXhlbChjdHgsIGRyYXdGdW5jdGlvbikge1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKGN0eC5saW5lV2lkdGggJSAyKSB7XG4gICAgICAgIGN0eC50cmFuc2xhdGUoMC41LCAwLjUpO1xuICAgIH1cbiAgICBkcmF3RnVuY3Rpb24oKTtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBhbiBhc3NlcnRpb24uIFRocm93cyBpZiB0aGUgYXNzZXJ0aW9uIGlzIGZhaWxlZC5cbiAqXG4gKiBAcGFyYW0gY29uZGl0aW9uIC0gUmVzdWx0IG9mIHRoZSBhc3NlcnRpb24gZXZhbHVhdGlvblxuICogQHBhcmFtIG1lc3NhZ2UgLSBUZXh0IHRvIGluY2x1ZGUgaW4gdGhlIGV4Y2VwdGlvbiBtZXNzYWdlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQnICsgKG1lc3NhZ2UgPyAnOiAnICsgbWVzc2FnZSA6ICcnKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZW5zdXJlRGVmaW5lZCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGVuc3VyZU5vdE51bGwodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWYWx1ZSBpcyBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGVuc3VyZSh2YWx1ZSkge1xuICAgIHJldHVybiBlbnN1cmVOb3ROdWxsKGVuc3VyZURlZmluZWQodmFsdWUpKTtcbn1cbi8qKlxuICogQ29tcGlsZSB0aW1lIGNoZWNrIGZvciBuZXZlclxuICovXG5mdW5jdGlvbiBlbnN1cmVOZXZlcih2YWx1ZSkgeyB9XG5cbi8qKlxuICogTm90ZSB0aGlzIG9iamVjdCBzaG91bGQgYmUgZXhwbGljaXRseSBtYXJrZWQgYXMgcHVibGljIHNvIHRoYXQgZHRzLWJ1bmRsZS1nZW5lcmF0b3IgZG9lcyBub3QgbWFuZ2xlIHRoZSBwcm9wZXJ0eSBuYW1lcy5cbiAqXG4gKiBAcHVibGljXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvcl92YWx1ZVxuICovXG5jb25zdCBuYW1lZENvbG9yUmdiSGV4U3RyaW5ncyA9IHtcbiAgICAvLyBUaGUgb3JkZXIgb2YgcHJvcGVydGllcyBpbiB0aGlzIFJlY29yZCBpcyBub3QgaW1wb3J0YW50IGZvciB0aGUgaW50ZXJuYWwgbG9naWMuXG4gICAgLy8gSXQncyBqdXN0IEdaSVBwZWQgYmV0dGVyIHdoZW4gcHJvcHMgZm9sbG93cyB0aGlzIG9yZGVyLlxuICAgIC8vIFBsZWFzZSBhZGQgbmV3IGNvbG9ycyB0byB0aGUgZW5kIG9mIHRoZSByZWNvcmQuXG4gICAga2hha2k6ICcjZjBlNjhjJyxcbiAgICBhenVyZTogJyNmMGZmZmYnLFxuICAgIGFsaWNlYmx1ZTogJyNmMGY4ZmYnLFxuICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICBnb2xkOiAnI2ZmZDcwMCcsXG4gICAgZ29sZGVucm9kOiAnI2RhYTUyMCcsXG4gICAgZ2FpbnNib3JvOiAnI2RjZGNkYycsXG4gICAgZ3JheTogJyM4MDgwODAnLFxuICAgIGdyZWVuOiAnIzAwODAwMCcsXG4gICAgaG9uZXlkZXc6ICcjZjBmZmYwJyxcbiAgICBmbG9yYWx3aGl0ZTogJyNmZmZhZjAnLFxuICAgIGxpZ2h0Ymx1ZTogJyNhZGQ4ZTYnLFxuICAgIGxpZ2h0Y29yYWw6ICcjZjA4MDgwJyxcbiAgICBsZW1vbmNoaWZmb246ICcjZmZmYWNkJyxcbiAgICBob3RwaW5rOiAnI2ZmNjliNCcsXG4gICAgbGlnaHR5ZWxsb3c6ICcjZmZmZmUwJyxcbiAgICBncmVlbnllbGxvdzogJyNhZGZmMmYnLFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAnI2ZhZmFkMicsXG4gICAgbGltZWdyZWVuOiAnIzMyY2QzMicsXG4gICAgbGluZW46ICcjZmFmMGU2JyxcbiAgICBsaWdodGN5YW46ICcjZTBmZmZmJyxcbiAgICBtYWdlbnRhOiAnI2YwZicsXG4gICAgbWFyb29uOiAnIzgwMDAwMCcsXG4gICAgb2xpdmU6ICcjODA4MDAwJyxcbiAgICBvcmFuZ2U6ICcjZmZhNTAwJyxcbiAgICBvbGRsYWNlOiAnI2ZkZjVlNicsXG4gICAgbWVkaXVtYmx1ZTogJyMwMDAwY2QnLFxuICAgIHRyYW5zcGFyZW50OiAnIzAwMDAnLFxuICAgIGxpbWU6ICcjMGYwJyxcbiAgICBsaWdodHBpbms6ICcjZmZiNmMxJyxcbiAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICBtb2NjYXNpbjogJyNmZmU0YjUnLFxuICAgIG1pZG5pZ2h0Ymx1ZTogJyMxOTE5NzAnLFxuICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgIG1lZGl1bXR1cnF1b2lzZTogJyM0OGQxY2MnLFxuICAgIG9yYW5nZXJlZDogJyNmZjQ1MDAnLFxuICAgIHJveWFsYmx1ZTogJyM0MTY5ZTEnLFxuICAgIHBvd2RlcmJsdWU6ICcjYjBlMGU2JyxcbiAgICByZWQ6ICcjZjAwJyxcbiAgICBjb3JhbDogJyNmZjdmNTAnLFxuICAgIHR1cnF1b2lzZTogJyM0MGUwZDAnLFxuICAgIHdoaXRlOiAnI2ZmZicsXG4gICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgIHdoZWF0OiAnI2Y1ZGViMycsXG4gICAgdGVhbDogJyMwMDgwODAnLFxuICAgIHN0ZWVsYmx1ZTogJyM0NjgyYjQnLFxuICAgIGJpc3F1ZTogJyNmZmU0YzQnLFxuICAgIGFxdWFtYXJpbmU6ICcjN2ZmZmQ0JyxcbiAgICBhcXVhOiAnIzBmZicsXG4gICAgc2llbm5hOiAnI2EwNTIyZCcsXG4gICAgc2lsdmVyOiAnI2MwYzBjMCcsXG4gICAgc3ByaW5nZ3JlZW46ICcjMDBmZjdmJyxcbiAgICBhbnRpcXVld2hpdGU6ICcjZmFlYmQ3JyxcbiAgICBidXJseXdvb2Q6ICcjZGViODg3JyxcbiAgICBicm93bjogJyNhNTJhMmEnLFxuICAgIGJlaWdlOiAnI2Y1ZjVkYycsXG4gICAgY2hvY29sYXRlOiAnI2QyNjkxZScsXG4gICAgY2hhcnRyZXVzZTogJyM3ZmZmMDAnLFxuICAgIGNvcm5mbG93ZXJibHVlOiAnIzY0OTVlZCcsXG4gICAgY29ybnNpbGs6ICcjZmZmOGRjJyxcbiAgICBjcmltc29uOiAnI2RjMTQzYycsXG4gICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgdG9tYXRvOiAnI2ZmNjM0NycsXG4gICAgZnVjaHNpYTogJyNmMGYnLFxuICAgIGJsdWU6ICcjMDBmJyxcbiAgICBzYWxtb246ICcjZmE4MDcyJyxcbiAgICBibGFuY2hlZGFsbW9uZDogJyNmZmViY2QnLFxuICAgIHNsYXRlYmx1ZTogJyM2YTVhY2QnLFxuICAgIHNsYXRlZ3JheTogJyM3MDgwOTAnLFxuICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICB0YW46ICcjZDJiNDhjJyxcbiAgICBjeWFuOiAnIzBmZicsXG4gICAgZGFya2JsdWU6ICcjMDAwMDhiJyxcbiAgICBkYXJrY3lhbjogJyMwMDhiOGInLFxuICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICBkYXJrZ3JheTogJyNhOWE5YTknLFxuICAgIGJsdWV2aW9sZXQ6ICcjOGEyYmUyJyxcbiAgICBibGFjazogJyMwMDAnLFxuICAgIGRhcmttYWdlbnRhOiAnIzhiMDA4YicsXG4gICAgZGFya3NsYXRlYmx1ZTogJyM0ODNkOGInLFxuICAgIGRhcmtraGFraTogJyNiZGI3NmInLFxuICAgIGRhcmtvcmNoaWQ6ICcjOTkzMmNjJyxcbiAgICBkYXJrb3JhbmdlOiAnI2ZmOGMwMCcsXG4gICAgZGFya2dyZWVuOiAnIzAwNjQwMCcsXG4gICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICBkYXJrc2xhdGVncmF5OiAnIzJmNGY0ZicsXG4gICAgZGltZ3JheTogJyM2OTY5NjknLFxuICAgIGRlZXBza3libHVlOiAnIzAwYmZmZicsXG4gICAgZmlyZWJyaWNrOiAnI2IyMjIyMicsXG4gICAgZm9yZXN0Z3JlZW46ICcjMjI4YjIyJyxcbiAgICBpbmRpZ286ICcjNGIwMDgyJyxcbiAgICBpdm9yeTogJyNmZmZmZjAnLFxuICAgIGxhdmVuZGVyYmx1c2g6ICcjZmZmMGY1JyxcbiAgICBmZWxkc3BhcjogJyNkMTkyNzUnLFxuICAgIGluZGlhbnJlZDogJyNjZDVjNWMnLFxuICAgIGxpZ2h0Z3JlZW46ICcjOTBlZTkwJyxcbiAgICBsaWdodGdyZXk6ICcjZDNkM2QzJyxcbiAgICBsaWdodHNreWJsdWU6ICcjODdjZWZhJyxcbiAgICBsaWdodHNsYXRlZ3JheTogJyM3ODknLFxuICAgIGxpZ2h0c2xhdGVibHVlOiAnIzg0NzBmZicsXG4gICAgc25vdzogJyNmZmZhZmEnLFxuICAgIGxpZ2h0c2VhZ3JlZW46ICcjMjBiMmFhJyxcbiAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgIGRhcmtzYWxtb246ICcjZTk5NjdhJyxcbiAgICBkYXJrdmlvbGV0OiAnIzk0MDBkMycsXG4gICAgbWVkaXVtcHVycGxlOiAnIzkzNzBkOCcsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogJyM2NmNkYWEnLFxuICAgIHNreWJsdWU6ICcjODdjZWViJyxcbiAgICBsYXZlbmRlcjogJyNlNmU2ZmEnLFxuICAgIGxpZ2h0c3RlZWxibHVlOiAnI2IwYzRkZScsXG4gICAgbWVkaXVtdmlvbGV0cmVkOiAnI2M3MTU4NScsXG4gICAgbWludGNyZWFtOiAnI2Y1ZmZmYScsXG4gICAgbmF2YWpvd2hpdGU6ICcjZmZkZWFkJyxcbiAgICBuYXZ5OiAnIzAwMDA4MCcsXG4gICAgb2xpdmVkcmFiOiAnIzZiOGUyMycsXG4gICAgcGFsZXZpb2xldHJlZDogJyNkODcwOTMnLFxuICAgIHZpb2xldHJlZDogJyNkMDIwOTAnLFxuICAgIHllbGxvdzogJyNmZjAnLFxuICAgIHllbGxvd2dyZWVuOiAnIzlhY2QzMicsXG4gICAgbGF3bmdyZWVuOiAnIzdjZmMwMCcsXG4gICAgcGluazogJyNmZmMwY2InLFxuICAgIHBhbGV0dXJxdW9pc2U6ICcjYWZlZWVlJyxcbiAgICBwYWxlZ29sZGVucm9kOiAnI2VlZThhYScsXG4gICAgZGFya29saXZlZ3JlZW46ICcjNTU2YjJmJyxcbiAgICBkYXJrc2VhZ3JlZW46ICcjOGZiYzhmJyxcbiAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgcGVhY2hwdWZmOiAnI2ZmZGFiOScsXG4gICAgZGVlcHBpbms6ICcjZmYxNDkzJyxcbiAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICBwYWxlZ3JlZW46ICcjOThmYjk4JyxcbiAgICBtZWRpdW1zZWFncmVlbjogJyMzY2IzNzEnLFxuICAgIHBlcnU6ICcjY2Q4NTNmJyxcbiAgICBzYWRkbGVicm93bjogJyM4YjQ1MTMnLFxuICAgIHNhbmR5YnJvd246ICcjZjRhNDYwJyxcbiAgICByb3N5YnJvd246ICcjYmM4ZjhmJyxcbiAgICBwdXJwbGU6ICcjODAwMDgwJyxcbiAgICBzZWFncmVlbjogJyMyZThiNTcnLFxuICAgIHNlYXNoZWxsOiAnI2ZmZjVlZScsXG4gICAgcGFwYXlhd2hpcDogJyNmZmVmZDUnLFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogJyM3YjY4ZWUnLFxuICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogJyMwMGZhOWEnLFxufTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJnYkNvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICBpZiAoY29tcG9uZW50IDwgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudCA+IDI1NSkge1xuICAgICAgICByZXR1cm4gMjU1O1xuICAgIH1cbiAgICAvLyBOYU4gdmFsdWVzIGFyZSB0cmVhdGVkIGFzIDBcbiAgICByZXR1cm4gKE1hdGgucm91bmQoY29tcG9uZW50KSB8fCAwKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFscGhhQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGlmIChjb21wb25lbnQgPD0gMCB8fCBjb21wb25lbnQgPiAxKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChjb21wb25lbnQsIDApLCAxKTtcbiAgICB9XG4gICAgLy8gbGltaXQgdGhlIHByZWNpc2lvbiBvZiBhbGwgbnVtYmVycyB0byBhdCBtb3N0IDQgZGlnaXRzIGluIGZyYWN0aW9uYWwgcGFydFxuICAgIHJldHVybiBNYXRoLnJvdW5kKGNvbXBvbmVudCAqIDEwMDAwKSAvIDEwMDAwO1xufVxuLyoqXG4gKiBAZXhhbXBsZVxuICogI2ZiMFxuICogQGV4YW1wbGVcbiAqICNmMGZcbiAqIEBleGFtcGxlXG4gKiAjZjBmYVxuICovXG5jb25zdCBzaG9ydEhleFJlID0gL14jKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pKFswLTlhLWZdKT8kL2k7XG4vKipcbiAqIEBleGFtcGxlXG4gKiAjMDBmZjAwXG4gKiBAZXhhbXBsZVxuICogIzMzNjY5OVxuICogQGV4YW1wbGVcbiAqICMzMzY2OTlGQVxuICovXG5jb25zdCBoZXhSZSA9IC9eIyhbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSk/JC9pO1xuLyoqXG4gKiBAZXhhbXBsZVxuICogcmdiKDEyMywgMjM0LCA0NSlcbiAqIEBleGFtcGxlXG4gKiByZ2IoMjU1LDIzNCwyNDUpXG4gKi9cbmNvbnN0IHJnYlJlID0gL15yZ2JcXChcXHMqKC0/XFxkezEsMTB9KVxccyosXFxzKigtP1xcZHsxLDEwfSlcXHMqLFxccyooLT9cXGR7MSwxMH0pXFxzKlxcKSQvO1xuLyoqXG4gKiBAZXhhbXBsZVxuICogcmdiYSgxMjMsIDIzNCwgNDUsIDEpXG4gKiBAZXhhbXBsZVxuICogcmdiYSgyNTUsMjM0LDI0NSwwLjEpXG4gKi9cbmNvbnN0IHJnYmFSZSA9IC9ecmdiYVxcKFxccyooLT9cXGR7MSwxMH0pXFxzKixcXHMqKC0/XFxkezEsMTB9KVxccyosXFxzKigtP1xcZHsxLDEwfSlcXHMqLFxccyooLT9cXGQqXFwuP1xcZCspXFxzKlxcKSQvO1xuZnVuY3Rpb24gY29sb3JTdHJpbmdUb1JnYmEoY29sb3JTdHJpbmcpIHtcbiAgICBjb2xvclN0cmluZyA9IGNvbG9yU3RyaW5nLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgaWYgKGNvbG9yU3RyaW5nIGluIG5hbWVkQ29sb3JSZ2JIZXhTdHJpbmdzKSB7XG4gICAgICAgIGNvbG9yU3RyaW5nID0gbmFtZWRDb2xvclJnYkhleFN0cmluZ3NbY29sb3JTdHJpbmddO1xuICAgIH1cbiAgICB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSByZ2JhUmUuZXhlYyhjb2xvclN0cmluZykgfHwgcmdiUmUuZXhlYyhjb2xvclN0cmluZyk7XG4gICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVJnYkNvbXBvbmVudChwYXJzZUludChtYXRjaGVzWzFdLCAxMCkpLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVJnYkNvbXBvbmVudChwYXJzZUludChtYXRjaGVzWzJdLCAxMCkpLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVJnYkNvbXBvbmVudChwYXJzZUludChtYXRjaGVzWzNdLCAxMCkpLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUFscGhhQ29tcG9uZW50KChtYXRjaGVzLmxlbmd0aCA8IDUgPyAxIDogcGFyc2VGbG9hdChtYXRjaGVzWzRdKSkpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBoZXhSZS5leGVjKGNvbG9yU3RyaW5nKTtcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUmdiQ29tcG9uZW50KHBhcnNlSW50KG1hdGNoZXNbMV0sIDE2KSksXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUmdiQ29tcG9uZW50KHBhcnNlSW50KG1hdGNoZXNbMl0sIDE2KSksXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUmdiQ29tcG9uZW50KHBhcnNlSW50KG1hdGNoZXNbM10sIDE2KSksXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICB9XG4gICAge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gc2hvcnRIZXhSZS5leGVjKGNvbG9yU3RyaW5nKTtcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUmdiQ29tcG9uZW50KHBhcnNlSW50KG1hdGNoZXNbMV0sIDE2KSAqIDB4MTEpLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVJnYkNvbXBvbmVudChwYXJzZUludChtYXRjaGVzWzJdLCAxNikgKiAweDExKSxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVSZ2JDb21wb25lbnQocGFyc2VJbnQobWF0Y2hlc1szXSwgMTYpICogMHgxMSksXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcGFyc2UgY29sb3I6ICR7Y29sb3JTdHJpbmd9YCk7XG59XG5mdW5jdGlvbiByZ2JhVG9HcmF5c2NhbGUocmdiVmFsdWUpIHtcbiAgICAvLyBPcmlnaW5hbGx5LCB0aGUgTlRTQyBSR0IgdG8gWVVWIGZvcm11bGFcbiAgICAvLyBwZXJmZWN0ZWQgYnkgQGV1Z2VuZS1rb3JvYmtvJ3MgYmxhY2sgbWFnaWNcbiAgICBjb25zdCByZWRDb21wb25lbnRHcmF5c2NhbGVXZWlnaHQgPSAwLjE5OTtcbiAgICBjb25zdCBncmVlbkNvbXBvbmVudEdyYXlzY2FsZVdlaWdodCA9IDAuNjg3O1xuICAgIGNvbnN0IGJsdWVDb21wb25lbnRHcmF5c2NhbGVXZWlnaHQgPSAwLjExNDtcbiAgICByZXR1cm4gKHJlZENvbXBvbmVudEdyYXlzY2FsZVdlaWdodCAqIHJnYlZhbHVlWzBdICtcbiAgICAgICAgZ3JlZW5Db21wb25lbnRHcmF5c2NhbGVXZWlnaHQgKiByZ2JWYWx1ZVsxXSArXG4gICAgICAgIGJsdWVDb21wb25lbnRHcmF5c2NhbGVXZWlnaHQgKiByZ2JWYWx1ZVsyXSk7XG59XG5mdW5jdGlvbiBhcHBseUFscGhhKGNvbG9yLCBhbHBoYSkge1xuICAgIC8vIHNwZWNpYWwgY2FzZSBvcHRpbWl6YXRpb25cbiAgICBpZiAoY29sb3IgPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICBjb25zdCBvcmlnaW5SZ2JhID0gY29sb3JTdHJpbmdUb1JnYmEoY29sb3IpO1xuICAgIGNvbnN0IG9yaWdpbkFscGhhID0gb3JpZ2luUmdiYVszXTtcbiAgICByZXR1cm4gYHJnYmEoJHtvcmlnaW5SZ2JhWzBdfSwgJHtvcmlnaW5SZ2JhWzFdfSwgJHtvcmlnaW5SZ2JhWzJdfSwgJHthbHBoYSAqIG9yaWdpbkFscGhhfSlgO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVDb250cmFzdENvbG9ycyhiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICBjb25zdCByZ2IgPSBjb2xvclN0cmluZ1RvUmdiYShiYWNrZ3JvdW5kQ29sb3IpO1xuICAgIHJldHVybiB7XG4gICAgICAgIF9pbnRlcm5hbF9iYWNrZ3JvdW5kOiBgcmdiKCR7cmdiWzBdfSwgJHtyZ2JbMV19LCAke3JnYlsyXX0pYCxcbiAgICAgICAgX2ludGVybmFsX2ZvcmVncm91bmQ6IHJnYmFUb0dyYXlzY2FsZShyZ2IpID4gMTYwID8gJ2JsYWNrJyA6ICd3aGl0ZScsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbG9yU3RyaW5nVG9HcmF5c2NhbGUoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgcmV0dXJuIHJnYmFUb0dyYXlzY2FsZShjb2xvclN0cmluZ1RvUmdiYShiYWNrZ3JvdW5kQ29sb3IpKTtcbn1cbmZ1bmN0aW9uIGdyYWRpZW50Q29sb3JBdFBlcmNlbnQodG9wQ29sb3IsIGJvdHRvbUNvbG9yLCBwZXJjZW50KSB7XG4gICAgY29uc3QgW3RvcFIsIHRvcEcsIHRvcEIsIHRvcEFdID0gY29sb3JTdHJpbmdUb1JnYmEodG9wQ29sb3IpO1xuICAgIGNvbnN0IFtib3R0b21SLCBib3R0b21HLCBib3R0b21CLCBib3R0b21BXSA9IGNvbG9yU3RyaW5nVG9SZ2JhKGJvdHRvbUNvbG9yKTtcbiAgICBjb25zdCByZXN1bHRSZ2JhID0gW1xuICAgICAgICBub3JtYWxpemVSZ2JDb21wb25lbnQodG9wUiArIHBlcmNlbnQgKiAoYm90dG9tUiAtIHRvcFIpKSxcbiAgICAgICAgbm9ybWFsaXplUmdiQ29tcG9uZW50KHRvcEcgKyBwZXJjZW50ICogKGJvdHRvbUcgLSB0b3BHKSksXG4gICAgICAgIG5vcm1hbGl6ZVJnYkNvbXBvbmVudCh0b3BCICsgcGVyY2VudCAqIChib3R0b21CIC0gdG9wQikpLFxuICAgICAgICBub3JtYWxpemVBbHBoYUNvbXBvbmVudCh0b3BBICsgcGVyY2VudCAqIChib3R0b21BIC0gdG9wQSkpLFxuICAgIF07XG4gICAgcmV0dXJuIGByZ2JhKCR7cmVzdWx0UmdiYVswXX0sICR7cmVzdWx0UmdiYVsxXX0sICR7cmVzdWx0UmdiYVsyXX0sICR7cmVzdWx0UmdiYVszXX0pYDtcbn1cblxuY2xhc3MgRGVsZWdhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19saXN0ZW5lcnMgPSBbXTtcbiAgICB9XG4gICAgX2ludGVybmFsX3N1YnNjcmliZShjYWxsYmFjaywgbGlua2VkT2JqZWN0LCBzaW5nbGVzaG90KSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2NhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5rZWRPYmplY3Q6IGxpbmtlZE9iamVjdCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9zaW5nbGVzaG90OiBzaW5nbGVzaG90ID09PSB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91bnN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX3ByaXZhdGVfX2xpc3RlbmVycy5maW5kSW5kZXgoKGxpc3RlbmVyKSA9PiBjYWxsYmFjayA9PT0gbGlzdGVuZXIuX2ludGVybmFsX2NhbGxiYWNrKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF91bnN1YnNjcmliZUFsbChsaW5rZWRPYmplY3QpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGlzdGVuZXJzID0gdGhpcy5fcHJpdmF0ZV9fbGlzdGVuZXJzLmZpbHRlcigobGlzdGVuZXIpID0+IGxpc3RlbmVyLl9pbnRlcm5hbF9saW5rZWRPYmplY3QgIT09IGxpbmtlZE9iamVjdCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9maXJlKHBhcmFtMSwgcGFyYW0yLCBwYXJhbTMpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzU25hcHNob3QgPSBbLi4udGhpcy5fcHJpdmF0ZV9fbGlzdGVuZXJzXTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGlzdGVuZXJzID0gdGhpcy5fcHJpdmF0ZV9fbGlzdGVuZXJzLmZpbHRlcigobGlzdGVuZXIpID0+ICFsaXN0ZW5lci5faW50ZXJuYWxfc2luZ2xlc2hvdCk7XG4gICAgICAgIGxpc3RlbmVyc1NuYXBzaG90LmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lci5faW50ZXJuYWxfY2FsbGJhY2socGFyYW0xLCBwYXJhbTIsIHBhcmFtMykpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaGFzTGlzdGVuZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbGlzdGVuZXJzLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19saXN0ZW5lcnMgPSBbXTtcbiAgICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBtZXJnZShkc3QsIC4uLnNvdXJjZXMpIHtcbiAgICBmb3IgKGNvbnN0IHNyYyBvZiBzb3VyY2VzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBmb3IgKGNvbnN0IGkgaW4gc3JjKSB7XG4gICAgICAgICAgICBpZiAoc3JjW2ldID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNyYywgaSkgfHxcbiAgICAgICAgICAgICAgICBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXS5pbmNsdWRlcyhpKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdvYmplY3QnICE9PSB0eXBlb2Ygc3JjW2ldIHx8IGRzdFtpXSA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkoc3JjW2ldKSkge1xuICAgICAgICAgICAgICAgIGRzdFtpXSA9IHNyY1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgbWVyZ2UoZHN0W2ldLCBzcmNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkc3Q7XG59XG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgJiYgKGlzRmluaXRlKHZhbHVlKSk7XG59XG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpICYmICgodmFsdWUgJSAxKSA9PT0gMCk7XG59XG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nO1xufVxuZnVuY3Rpb24gY2xvbmUob2JqZWN0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBvID0gb2JqZWN0O1xuICAgIGlmICghbyB8fCAnb2JqZWN0JyAhPT0gdHlwZW9mIG8pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgICAgIHJldHVybiBvO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCBjO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG8pKSB7XG4gICAgICAgIGMgPSBbXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGMgPSB7fTtcbiAgICB9XG4gICAgbGV0IHA7XG4gICAgbGV0IHY7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgZm9yIChwIGluIG8pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGwsbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICAgIGlmIChvLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICB2ID0gb1twXTtcbiAgICAgICAgICAgIGlmICh2ICYmICdvYmplY3QnID09PSB0eXBlb2Ygdikge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICBjW3BdID0gY2xvbmUodik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICAgICAgY1twXSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgcmV0dXJuIGM7XG59XG5mdW5jdGlvbiBub3ROdWxsKHQpIHtcbiAgICByZXR1cm4gdCAhPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIHVuZGVmaW5lZElmTnVsbCh0KSB7XG4gICAgcmV0dXJuICh0ID09PSBudWxsKSA/IHVuZGVmaW5lZCA6IHQ7XG59XG5cbi8qKlxuICogRGVmYXVsdCBmb250IGZhbWlseS5cbiAqIE11c3QgYmUgdXNlZCB0byBnZW5lcmF0ZSBmb250IHN0cmluZyB3aGVuIGZvbnQgaXMgbm90IHNwZWNpZmllZC5cbiAqL1xuY29uc3QgZGVmYXVsdEZvbnRGYW1pbHkgPSBgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnVHJlYnVjaGV0IE1TJywgUm9ib3RvLCBVYnVudHUsIHNhbnMtc2VyaWZgO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSBmb250IHN0cmluZywgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc2V0IGluIGNhbnZhcycgZm9udCBwcm9wZXJ0eS5cbiAqIElmIG5vIGZhbWlseSBwcm92aWRlZCwge0BsaW5rIGRlZmF1bHRGb250RmFtaWx5fSB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHBhcmFtIHNpemUgLSBGb250IHNpemUgaW4gcGl4ZWxzLlxuICogQHBhcmFtIGZhbWlseSAtIE9wdGlvbmFsIGZvbnQgZmFtaWx5LlxuICogQHBhcmFtIHN0eWxlIC0gT3B0aW9uYWwgZm9udCBzdHlsZS5cbiAqIEByZXR1cm5zIFRoZSBmb250IHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gbWFrZUZvbnQoc2l6ZSwgZmFtaWx5LCBzdHlsZSkge1xuICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlID0gYCR7c3R5bGV9IGA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHlsZSA9ICcnO1xuICAgIH1cbiAgICBpZiAoZmFtaWx5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHk7XG4gICAgfVxuICAgIHJldHVybiBgJHtzdHlsZX0ke3NpemV9cHggJHtmYW1pbHl9YDtcbn1cblxuY2xhc3MgUHJpY2VBeGlzUmVuZGVyZXJPcHRpb25zUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0TW9kZWwpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2JvcmRlclNpemU6IDEgLyogUmVuZGVyZXJDb25zdGFudHMuQm9yZGVyU2l6ZSAqLyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90aWNrTGVuZ3RoOiA1IC8qIFJlbmRlcmVyQ29uc3RhbnRzLlRpY2tMZW5ndGggKi8sXG4gICAgICAgICAgICBfaW50ZXJuYWxfZm9udFNpemU6IE5hTixcbiAgICAgICAgICAgIF9pbnRlcm5hbF9mb250OiAnJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9mb250RmFtaWx5OiAnJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9jb2xvcjogJycsXG4gICAgICAgICAgICBfaW50ZXJuYWxfcGFuZUJhY2tncm91bmRDb2xvcjogJycsXG4gICAgICAgICAgICBfaW50ZXJuYWxfcGFkZGluZ0JvdHRvbTogMCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9wYWRkaW5nSW5uZXI6IDAsXG4gICAgICAgICAgICBfaW50ZXJuYWxfcGFkZGluZ091dGVyOiAwLFxuICAgICAgICAgICAgX2ludGVybmFsX3BhZGRpbmdUb3A6IDAsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFzZWxpbmVPZmZzZXQ6IDAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0TW9kZWwgPSBjaGFydE1vZGVsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfb3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyZXJPcHRpb25zID0gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zO1xuICAgICAgICBjb25zdCBjdXJyZW50Rm9udFNpemUgPSB0aGlzLl9wcml2YXRlX19mb250U2l6ZSgpO1xuICAgICAgICBjb25zdCBjdXJyZW50Rm9udEZhbWlseSA9IHRoaXMuX3ByaXZhdGVfX2ZvbnRGYW1pbHkoKTtcbiAgICAgICAgaWYgKHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfZm9udFNpemUgIT09IGN1cnJlbnRGb250U2l6ZSB8fCByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2ZvbnRGYW1pbHkgIT09IGN1cnJlbnRGb250RmFtaWx5KSB7XG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2ZvbnRTaXplID0gY3VycmVudEZvbnRTaXplO1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250RmFtaWx5ID0gY3VycmVudEZvbnRGYW1pbHk7XG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2ZvbnQgPSBtYWtlRm9udChjdXJyZW50Rm9udFNpemUsIGN1cnJlbnRGb250RmFtaWx5KTtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ1RvcCA9IDIuNSAvIDEyICogY3VycmVudEZvbnRTaXplOyAvLyAyLjUgcHggZm9yIDEycHggZm9udFxuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nQm90dG9tID0gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nVG9wO1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nSW5uZXIgPSBjdXJyZW50Rm9udFNpemUgLyAxMiAqIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfdGlja0xlbmd0aDtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ091dGVyID0gY3VycmVudEZvbnRTaXplIC8gMTIgKiByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3RpY2tMZW5ndGg7XG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2Jhc2VsaW5lT2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2NvbG9yID0gdGhpcy5fcHJpdmF0ZV9fdGV4dENvbG9yKCk7XG4gICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFuZUJhY2tncm91bmRDb2xvciA9IHRoaXMuX3ByaXZhdGVfX3BhbmVCYWNrZ3JvdW5kQ29sb3IoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyT3B0aW9ucztcbiAgICB9XG4gICAgX3ByaXZhdGVfX3RleHRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NoYXJ0TW9kZWwuX2ludGVybmFsX29wdGlvbnMoKS5sYXlvdXQudGV4dENvbG9yO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fcGFuZUJhY2tncm91bmRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NoYXJ0TW9kZWwuX2ludGVybmFsX2JhY2tncm91bmRUb3BDb2xvcigpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZm9udFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jaGFydE1vZGVsLl9pbnRlcm5hbF9vcHRpb25zKCkubGF5b3V0LmZvbnRTaXplO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZm9udEZhbWlseSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NoYXJ0TW9kZWwuX2ludGVybmFsX29wdGlvbnMoKS5sYXlvdXQuZm9udEZhbWlseTtcbiAgICB9XG59XG5cbmNsYXNzIENvbXBvc2l0ZVJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJzID0gW107XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRSZW5kZXJlcnMocmVuZGVyZXJzKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVycyA9IHJlbmRlcmVycztcbiAgICB9XG4gICAgX2ludGVybmFsX2RyYXcodGFyZ2V0LCBpc0hvdmVyZWQsIGhpdFRlc3REYXRhKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVycy5mb3JFYWNoKChyKSA9PiB7XG4gICAgICAgICAgICByLl9pbnRlcm5hbF9kcmF3KHRhcmdldCwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgQml0bWFwQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIge1xuICAgIF9pbnRlcm5hbF9kcmF3KHRhcmdldCwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSkge1xuICAgICAgICB0YXJnZXQudXNlQml0bWFwQ29vcmRpbmF0ZVNwYWNlKChzY29wZSkgPT4gdGhpcy5faW50ZXJuYWxfX2RyYXdJbXBsKHNjb3BlLCBpc0hvdmVyZWQsIGhpdFRlc3REYXRhKSk7XG4gICAgfVxufVxuXG5jbGFzcyBQYW5lUmVuZGVyZXJNYXJrcyBleHRlbmRzIEJpdG1hcENvb3JkaW5hdGVzUGFuZVJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2RhdGEgPSBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgX2ludGVybmFsX19kcmF3SW1wbCh7IGNvbnRleHQ6IGN0eCwgaG9yaXpvbnRhbFBpeGVsUmF0aW8sIHZlcnRpY2FsUGl4ZWxSYXRpbyB9KSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9fZGF0YSA9PT0gbnVsbCB8fCB0aGlzLl9pbnRlcm5hbF9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlzaWJsZVJhbmdlID0gdGhpcy5faW50ZXJuYWxfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2ludGVybmFsX19kYXRhO1xuICAgICAgICBjb25zdCB0aWNrV2lkdGggPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKGhvcml6b250YWxQaXhlbFJhdGlvKSk7XG4gICAgICAgIGNvbnN0IGNvcnJlY3Rpb24gPSAodGlja1dpZHRoICUgMikgLyAyO1xuICAgICAgICBjb25zdCBkcmF3ID0gKHJhZGl1c01lZGlhKSA9PiB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdmlzaWJsZVJhbmdlLnRvIC0gMTsgaSA+PSB2aXNpYmxlUmFuZ2UuZnJvbTsgLS1pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBkYXRhLl9pbnRlcm5hbF9pdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gTWF0aC5yb3VuZChwb2ludC5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvKSArIGNvcnJlY3Rpb247IC8vIGNvcnJlY3QgeCBjb29yZGluYXRlIG9ubHlcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gcG9pbnQuX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW87XG4gICAgICAgICAgICAgICAgY29uc3QgcmFkaXVzID0gcmFkaXVzTWVkaWEgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8gKyBjb3JyZWN0aW9uO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgICAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChkYXRhLl9pbnRlcm5hbF9saW5lV2lkdGggPiAwKSB7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZGF0YS5faW50ZXJuYWxfYmFja0NvbG9yO1xuICAgICAgICAgICAgZHJhdyhkYXRhLl9pbnRlcm5hbF9yYWRpdXMgKyBkYXRhLl9pbnRlcm5hbF9saW5lV2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBkYXRhLl9pbnRlcm5hbF9saW5lQ29sb3I7XG4gICAgICAgIGRyYXcoZGF0YS5faW50ZXJuYWxfcmFkaXVzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5TWFya2VyRGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBfaW50ZXJuYWxfaXRlbXM6IFt7XG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3g6IDAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3k6IDAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3RpbWU6IDAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3ByaWNlOiAwLFxuICAgICAgICAgICAgfV0sXG4gICAgICAgIF9pbnRlcm5hbF9saW5lQ29sb3I6ICcnLFxuICAgICAgICBfaW50ZXJuYWxfYmFja0NvbG9yOiAnJyxcbiAgICAgICAgX2ludGVybmFsX3JhZGl1czogMCxcbiAgICAgICAgX2ludGVybmFsX2xpbmVXaWR0aDogMCxcbiAgICAgICAgX2ludGVybmFsX3Zpc2libGVSYW5nZTogbnVsbCxcbiAgICB9O1xufVxuY29uc3QgcmFuZ2VGb3JTaW5nbGVQb2ludCA9IHsgZnJvbTogMCwgdG86IDEgfTtcbmNsYXNzIENyb3NzaGFpck1hcmtzUGFuZVZpZXcge1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0TW9kZWwsIGNyb3NzaGFpcikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jb21wb3NpdGVSZW5kZXJlciA9IG5ldyBDb21wb3NpdGVSZW5kZXJlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrZXJzUmVuZGVyZXJzID0gW107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnNEYXRhID0gW107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRNb2RlbCA9IGNoYXJ0TW9kZWw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpciA9IGNyb3NzaGFpcjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29tcG9zaXRlUmVuZGVyZXIuX2ludGVybmFsX3NldFJlbmRlcmVycyh0aGlzLl9wcml2YXRlX19tYXJrZXJzUmVuZGVyZXJzKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZSh1cGRhdGVUeXBlKSB7XG4gICAgICAgIGNvbnN0IHNlcmllc2VzID0gdGhpcy5fcHJpdmF0ZV9fY2hhcnRNb2RlbC5faW50ZXJuYWxfc2VyaWVzZXMoKTtcbiAgICAgICAgaWYgKHNlcmllc2VzLmxlbmd0aCAhPT0gdGhpcy5fcHJpdmF0ZV9fbWFya2Vyc1JlbmRlcmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnNEYXRhID0gc2VyaWVzZXMubWFwKGNyZWF0ZUVtcHR5TWFya2VyRGF0YSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrZXJzUmVuZGVyZXJzID0gdGhpcy5fcHJpdmF0ZV9fbWFya2Vyc0RhdGEubWFwKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gbmV3IFBhbmVSZW5kZXJlck1hcmtzKCk7XG4gICAgICAgICAgICAgICAgcmVzLl9pbnRlcm5hbF9zZXREYXRhKGRhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvbXBvc2l0ZVJlbmRlcmVyLl9pbnRlcm5hbF9zZXRSZW5kZXJlcnModGhpcy5fcHJpdmF0ZV9fbWFya2Vyc1JlbmRlcmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVuZGVyZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXBkYXRlSW1wbCgpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY29tcG9zaXRlUmVuZGVyZXI7XG4gICAgfVxuICAgIF9wcml2YXRlX191cGRhdGVJbXBsKCkge1xuICAgICAgICBjb25zdCBmb3JjZUhpZGRlbiA9IHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpci5faW50ZXJuYWxfb3B0aW9ucygpLm1vZGUgPT09IDIgLyogQ3Jvc3NoYWlyTW9kZS5IaWRkZW4gKi87XG4gICAgICAgIGNvbnN0IHNlcmllc2VzID0gdGhpcy5fcHJpdmF0ZV9fY2hhcnRNb2RlbC5faW50ZXJuYWxfc2VyaWVzZXMoKTtcbiAgICAgICAgY29uc3QgdGltZVBvaW50SW5kZXggPSB0aGlzLl9wcml2YXRlX19jcm9zc2hhaXIuX2ludGVybmFsX2FwcGxpZWRJbmRleCgpO1xuICAgICAgICBjb25zdCB0aW1lU2NhbGUgPSB0aGlzLl9wcml2YXRlX19jaGFydE1vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKTtcbiAgICAgICAgc2VyaWVzZXMuZm9yRWFjaCgocywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9wcml2YXRlX19tYXJrZXJzRGF0YVtpbmRleF07XG4gICAgICAgICAgICBjb25zdCBzZXJpZXNEYXRhID0gcy5faW50ZXJuYWxfbWFya2VyRGF0YUF0SW5kZXgodGltZVBvaW50SW5kZXgpO1xuICAgICAgICAgICAgaWYgKGZvcmNlSGlkZGVuIHx8IHNlcmllc0RhdGEgPT09IG51bGwgfHwgIXMuX2ludGVybmFsX3Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgIGRhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IGVuc3VyZU5vdE51bGwocy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpKTtcbiAgICAgICAgICAgIGRhdGEuX2ludGVybmFsX2xpbmVDb2xvciA9IHNlcmllc0RhdGEuX2ludGVybmFsX2JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIGRhdGEuX2ludGVybmFsX3JhZGl1cyA9IHNlcmllc0RhdGEuX2ludGVybmFsX3JhZGl1cztcbiAgICAgICAgICAgIGRhdGEuX2ludGVybmFsX2xpbmVXaWR0aCA9IHNlcmllc0RhdGEuX2ludGVybmFsX2JvcmRlcldpZHRoO1xuICAgICAgICAgICAgZGF0YS5faW50ZXJuYWxfaXRlbXNbMF0uX2ludGVybmFsX3ByaWNlID0gc2VyaWVzRGF0YS5faW50ZXJuYWxfcHJpY2U7XG4gICAgICAgICAgICBkYXRhLl9pbnRlcm5hbF9pdGVtc1swXS5faW50ZXJuYWxfeSA9IHMuX2ludGVybmFsX3ByaWNlU2NhbGUoKS5faW50ZXJuYWxfcHJpY2VUb0Nvb3JkaW5hdGUoc2VyaWVzRGF0YS5faW50ZXJuYWxfcHJpY2UsIGZpcnN0VmFsdWUuX2ludGVybmFsX3ZhbHVlKTtcbiAgICAgICAgICAgIGRhdGEuX2ludGVybmFsX2JhY2tDb2xvciA9IChfYSA9IHNlcmllc0RhdGEuX2ludGVybmFsX2JvcmRlckNvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLl9wcml2YXRlX19jaGFydE1vZGVsLl9pbnRlcm5hbF9iYWNrZ3JvdW5kQ29sb3JBdFlQZXJjZW50RnJvbVRvcChkYXRhLl9pbnRlcm5hbF9pdGVtc1swXS5faW50ZXJuYWxfeSAvIHMuX2ludGVybmFsX3ByaWNlU2NhbGUoKS5faW50ZXJuYWxfaGVpZ2h0KCkpO1xuICAgICAgICAgICAgZGF0YS5faW50ZXJuYWxfaXRlbXNbMF0uX2ludGVybmFsX3RpbWUgPSB0aW1lUG9pbnRJbmRleDtcbiAgICAgICAgICAgIGRhdGEuX2ludGVybmFsX2l0ZW1zWzBdLl9pbnRlcm5hbF94ID0gdGltZVNjYWxlLl9pbnRlcm5hbF9pbmRleFRvQ29vcmRpbmF0ZSh0aW1lUG9pbnRJbmRleCk7XG4gICAgICAgICAgICBkYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UgPSByYW5nZUZvclNpbmdsZVBvaW50O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIENyb3NzaGFpclJlbmRlcmVyIGV4dGVuZHMgQml0bWFwQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZHJhd0ltcGwoeyBjb250ZXh0OiBjdHgsIGJpdG1hcFNpemUsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZlcnRMaW5lc1Zpc2libGUgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92ZXJ0TGluZS5faW50ZXJuYWxfdmlzaWJsZTtcbiAgICAgICAgY29uc3QgaG9yekxpbmVzVmlzaWJsZSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2hvcnpMaW5lLl9pbnRlcm5hbF92aXNpYmxlO1xuICAgICAgICBpZiAoIXZlcnRMaW5lc1Zpc2libGUgJiYgIWhvcnpMaW5lc1Zpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gTWF0aC5yb3VuZCh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF94ICogaG9yaXpvbnRhbFBpeGVsUmF0aW8pO1xuICAgICAgICBjb25zdCB5ID0gTWF0aC5yb3VuZCh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF95ICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgY3R4LmxpbmVDYXAgPSAnYnV0dCc7XG4gICAgICAgIGlmICh2ZXJ0TGluZXNWaXNpYmxlICYmIHggPj0gMCkge1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IE1hdGguZmxvb3IodGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmVydExpbmUuX2ludGVybmFsX2xpbmVXaWR0aCAqIGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3ZlcnRMaW5lLl9pbnRlcm5hbF9jb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92ZXJ0TGluZS5faW50ZXJuYWxfY29sb3I7XG4gICAgICAgICAgICBzZXRMaW5lU3R5bGUoY3R4LCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92ZXJ0TGluZS5faW50ZXJuYWxfbGluZVN0eWxlKTtcbiAgICAgICAgICAgIGRyYXdWZXJ0aWNhbExpbmUoY3R4LCB4LCAwLCBiaXRtYXBTaXplLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvcnpMaW5lc1Zpc2libGUgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gTWF0aC5mbG9vcih0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9ob3J6TGluZS5faW50ZXJuYWxfbGluZVdpZHRoICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2hvcnpMaW5lLl9pbnRlcm5hbF9jb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9ob3J6TGluZS5faW50ZXJuYWxfY29sb3I7XG4gICAgICAgICAgICBzZXRMaW5lU3R5bGUoY3R4LCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9ob3J6TGluZS5faW50ZXJuYWxfbGluZVN0eWxlKTtcbiAgICAgICAgICAgIGRyYXdIb3Jpem9udGFsTGluZShjdHgsIHksIDAsIGJpdG1hcFNpemUud2lkdGgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBDcm9zc2hhaXJQYW5lVmlldyB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJEYXRhID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX3ZlcnRMaW5lOiB7XG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2xpbmVXaWR0aDogMSxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfbGluZVN0eWxlOiAwLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9jb2xvcjogJycsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3Zpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ob3J6TGluZToge1xuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lV2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2xpbmVTdHlsZTogMCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfY29sb3I6ICcnLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW50ZXJuYWxfeDogMCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF95OiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlciA9IG5ldyBDcm9zc2hhaXJSZW5kZXJlcih0aGlzLl9wcml2YXRlX19yZW5kZXJlckRhdGEpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlbmRlcmVyKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZUltcGwoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fdXBkYXRlSW1wbCgpIHtcbiAgICAgICAgY29uc3QgdmlzaWJsZSA9IHRoaXMuX3ByaXZhdGVfX3NvdXJjZS5faW50ZXJuYWxfdmlzaWJsZSgpO1xuICAgICAgICBjb25zdCBwYW5lID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19zb3VyY2UuX2ludGVybmFsX3BhbmUoKSk7XG4gICAgICAgIGNvbnN0IGNyb3NzaGFpck9wdGlvbnMgPSBwYW5lLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9vcHRpb25zKCkuY3Jvc3NoYWlyO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJEYXRhO1xuICAgICAgICBpZiAoY3Jvc3NoYWlyT3B0aW9ucy5tb2RlID09PSAyIC8qIENyb3NzaGFpck1vZGUuSGlkZGVuICovKSB7XG4gICAgICAgICAgICBkYXRhLl9pbnRlcm5hbF9ob3J6TGluZS5faW50ZXJuYWxfdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgZGF0YS5faW50ZXJuYWxfdmVydExpbmUuX2ludGVybmFsX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLl9pbnRlcm5hbF9ob3J6TGluZS5faW50ZXJuYWxfdmlzaWJsZSA9IHZpc2libGUgJiYgdGhpcy5fcHJpdmF0ZV9fc291cmNlLl9pbnRlcm5hbF9ob3J6TGluZVZpc2libGUocGFuZSk7XG4gICAgICAgIGRhdGEuX2ludGVybmFsX3ZlcnRMaW5lLl9pbnRlcm5hbF92aXNpYmxlID0gdmlzaWJsZSAmJiB0aGlzLl9wcml2YXRlX19zb3VyY2UuX2ludGVybmFsX3ZlcnRMaW5lVmlzaWJsZSgpO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF9ob3J6TGluZS5faW50ZXJuYWxfbGluZVdpZHRoID0gY3Jvc3NoYWlyT3B0aW9ucy5ob3J6TGluZS53aWR0aDtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfaG9yekxpbmUuX2ludGVybmFsX2xpbmVTdHlsZSA9IGNyb3NzaGFpck9wdGlvbnMuaG9yekxpbmUuc3R5bGU7XG4gICAgICAgIGRhdGEuX2ludGVybmFsX2hvcnpMaW5lLl9pbnRlcm5hbF9jb2xvciA9IGNyb3NzaGFpck9wdGlvbnMuaG9yekxpbmUuY29sb3I7XG4gICAgICAgIGRhdGEuX2ludGVybmFsX3ZlcnRMaW5lLl9pbnRlcm5hbF9saW5lV2lkdGggPSBjcm9zc2hhaXJPcHRpb25zLnZlcnRMaW5lLndpZHRoO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF92ZXJ0TGluZS5faW50ZXJuYWxfbGluZVN0eWxlID0gY3Jvc3NoYWlyT3B0aW9ucy52ZXJ0TGluZS5zdHlsZTtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfdmVydExpbmUuX2ludGVybmFsX2NvbG9yID0gY3Jvc3NoYWlyT3B0aW9ucy52ZXJ0TGluZS5jb2xvcjtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfeCA9IHRoaXMuX3ByaXZhdGVfX3NvdXJjZS5faW50ZXJuYWxfYXBwbGllZFgoKTtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfeSA9IHRoaXMuX3ByaXZhdGVfX3NvdXJjZS5faW50ZXJuYWxfYXBwbGllZFkoKTtcbiAgICB9XG59XG5cbi8qKlxuICogRmlsbHMgcmVjdGFuZ2xlJ3MgaW5uZXIgYm9yZGVyIChzbywgYWxsIHRoZSBmaWxsZWQgYXJlYSBpcyBsaW1pdGVkIGJ5IHRoZSBbeCwgeCArIHdpZHRoXSpbeSwgeSArIGhlaWdodF0gcmVnaW9uKVxuICogYGBgXG4gKiAoeCwgeSlcbiAqIE8qKioqKioqKioqKioqKioqKioqKioqKnwqKioqKlxuICogfCAgICAgICAgYm9yZGVyICAgICAgICAgfCAgXlxuICogfCAgICoqKioqKioqKioqKioqKioqICAgfCAgfFxuICogfCAgIHwgICAgICAgICAgICAgICB8ICAgfCAgfFxuICogfCBiIHwgICAgICAgICAgICAgICB8IGIgfCAgaFxuICogfCBvIHwgICAgICAgICAgICAgICB8IG8gfCAgZVxuICogfCByIHwgICAgICAgICAgICAgICB8IHIgfCAgaVxuICogfCBkIHwgICAgICAgICAgICAgICB8IGQgfCAgZ1xuICogfCBlIHwgICAgICAgICAgICAgICB8IGUgfCAgaFxuICogfCByIHwgICAgICAgICAgICAgICB8IHIgfCAgdFxuICogfCAgIHwgICAgICAgICAgICAgICB8ICAgfCAgfFxuICogfCAgICoqKioqKioqKioqKioqKioqICAgfCAgfFxuICogfCAgICAgICAgYm9yZGVyICAgICAgICAgfCAgdlxuICogfCoqKioqKioqKioqKioqKioqKioqKioqfCoqKioqXG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8PC0tLS0tLS0gd2lkdGggLS0tLS0tLT58XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY3R4IC0gQ29udGV4dCB0byBkcmF3IG9uXG4gKiBAcGFyYW0geCAtIExlZnQgc2lkZSBvZiB0aGUgdGFyZ2V0IHJlY3RhbmdsZVxuICogQHBhcmFtIHkgLSBUb3Agc2lkZSBvZiB0aGUgdGFyZ2V0IHJlY3RhbmdsZVxuICogQHBhcmFtIHdpZHRoIC0gV2lkdGggb2YgdGhlIHRhcmdldCByZWN0YW5nbGVcbiAqIEBwYXJhbSBoZWlnaHQgLSBIZWlnaHQgb2YgdGhlIHRhcmdldCByZWN0YW5nbGVcbiAqIEBwYXJhbSBib3JkZXJXaWR0aCAtIFdpZHRoIG9mIGJvcmRlciB0byBmaWxsLCBtdXN0IGJlIGxlc3MgdGhhbiB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSB0YXJnZXQgcmVjdGFuZ2xlXG4gKi9cbmZ1bmN0aW9uIGZpbGxSZWN0SW5uZXJCb3JkZXIoY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXJXaWR0aCkge1xuICAgIC8vIGhvcml6b250YWwgKHRvcCBhbmQgYm90dG9tKSBlZGdlc1xuICAgIGN0eC5maWxsUmVjdCh4ICsgYm9yZGVyV2lkdGgsIHksIHdpZHRoIC0gYm9yZGVyV2lkdGggKiAyLCBib3JkZXJXaWR0aCk7XG4gICAgY3R4LmZpbGxSZWN0KHggKyBib3JkZXJXaWR0aCwgeSArIGhlaWdodCAtIGJvcmRlcldpZHRoLCB3aWR0aCAtIGJvcmRlcldpZHRoICogMiwgYm9yZGVyV2lkdGgpO1xuICAgIC8vIHZlcnRpY2FsIChsZWZ0IGFuZCByaWdodCkgZWRnZXNcbiAgICBjdHguZmlsbFJlY3QoeCwgeSwgYm9yZGVyV2lkdGgsIGhlaWdodCk7XG4gICAgY3R4LmZpbGxSZWN0KHggKyB3aWR0aCAtIGJvcmRlcldpZHRoLCB5LCBib3JkZXJXaWR0aCwgaGVpZ2h0KTtcbn1cbmZ1bmN0aW9uIGNsZWFyUmVjdChjdHgsIHgsIHksIHcsIGgsIGNsZWFyQ29sb3IpIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnY29weSc7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGNsZWFyQ29sb3I7XG4gICAgY3R4LmZpbGxSZWN0KHgsIHksIHcsIGgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjaGFuZ2VCb3JkZXJSYWRpdXMoYm9yZGVyUmFkaXVzLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gYm9yZGVyUmFkaXVzLm1hcCgoeCkgPT4geCA9PT0gMCA/IHggOiB4ICsgb2Zmc2V0KTtcbn1cbmZ1bmN0aW9uIGRyYXdSb3VuZFJlY3QoXG4vLyBlc2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LXBhcmFtc1xuY3R4LCB4LCB5LCB3LCBoLCByYWRpaSkge1xuICAgIC8qKlxuICAgICAqIEFzIG9mIE1heSAyMDIzLCBhbGwgb2YgdGhlIG1ham9yIGJyb3dzZXJzIG5vdyBzdXBwb3J0IGN0eC5yb3VuZFJlY3QoKSBzbyB3ZSBzaG91bGRcbiAgICAgKiBiZSBhYmxlIHRvIHN3aXRjaCB0byB0aGUgbmF0aXZlIHZlcnNpb24gc29vbi5cbiAgICAgKi9cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgaWYgKGN0eC5yb3VuZFJlY3QpIHtcbiAgICAgICAgY3R4LnJvdW5kUmVjdCh4LCB5LCB3LCBoLCByYWRpaSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLypcbiAgICAgKiBEZXByZWNhdGUgdGhlIHJlc3QgaW4gdjUuXG4gICAgICovXG4gICAgY3R4LmxpbmVUbyh4ICsgdyAtIHJhZGlpWzFdLCB5KTtcbiAgICBpZiAocmFkaWlbMV0gIT09IDApIHtcbiAgICAgICAgY3R4LmFyY1RvKHggKyB3LCB5LCB4ICsgdywgeSArIHJhZGlpWzFdLCByYWRpaVsxXSk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBoIC0gcmFkaWlbMl0pO1xuICAgIGlmIChyYWRpaVsyXSAhPT0gMCkge1xuICAgICAgICBjdHguYXJjVG8oeCArIHcsIHkgKyBoLCB4ICsgdyAtIHJhZGlpWzJdLCB5ICsgaCwgcmFkaWlbMl0pO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHggKyByYWRpaVszXSwgeSArIGgpO1xuICAgIGlmIChyYWRpaVszXSAhPT0gMCkge1xuICAgICAgICBjdHguYXJjVG8oeCwgeSArIGgsIHgsIHkgKyBoIC0gcmFkaWlbM10sIHJhZGlpWzNdKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4LCB5ICsgcmFkaWlbMF0pO1xuICAgIGlmIChyYWRpaVswXSAhPT0gMCkge1xuICAgICAgICBjdHguYXJjVG8oeCwgeSwgeCArIHJhZGlpWzBdLCB5LCByYWRpaVswXSk7XG4gICAgfVxufVxuLyoqXG4gKiBEcmF3cyBhIHJvdW5kZWQgcmVjdCB3aXRoIGEgYm9yZGVyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IHRoZSBjb2xvcnMgd2lsbCBiZSBzb2xpZCwgd2l0aG91dFxuICogYW55IGFscGhhLiAoVGhpcyBhbGxvd3MgdXMgdG8gZml4IGEgcmVuZGVyaW5nIGFydGVmYWN0LilcbiAqXG4gKiBAcGFyYW0gb3V0ZXJCb3JkZXJSYWRpdXMgLSBUaGUgcmFkaXVzIG9mIHRoZSBib3JkZXIgKG91dGVyIGVkZ2UpXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5mdW5jdGlvbiBkcmF3Um91bmRSZWN0V2l0aEJvcmRlcihjdHgsIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCwgYmFja2dyb3VuZENvbG9yLCBib3JkZXJXaWR0aCA9IDAsIG91dGVyQm9yZGVyUmFkaXVzID0gWzAsIDAsIDAsIDBdLCBib3JkZXJDb2xvciA9ICcnKSB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBpZiAoIWJvcmRlcldpZHRoIHx8ICFib3JkZXJDb2xvciB8fCBib3JkZXJDb2xvciA9PT0gYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIGRyYXdSb3VuZFJlY3QoY3R4LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIG91dGVyQm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoYWxmQm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCAvIDI7XG4gICAgY29uc3QgcmFkaWkgPSBjaGFuZ2VCb3JkZXJSYWRpdXMob3V0ZXJCb3JkZXJSYWRpdXMsIC1oYWxmQm9yZGVyV2lkdGgpO1xuICAgIGRyYXdSb3VuZFJlY3QoY3R4LCBsZWZ0ICsgaGFsZkJvcmRlcldpZHRoLCB0b3AgKyBoYWxmQm9yZGVyV2lkdGgsIHdpZHRoIC0gYm9yZGVyV2lkdGgsIGhlaWdodCAtIGJvcmRlcldpZHRoLCByYWRpaSk7XG4gICAgaWYgKGJhY2tncm91bmRDb2xvciAhPT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgIH1cbiAgICBpZiAoYm9yZGVyQ29sb3IgIT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuZnVuY3Rpb24gY2xlYXJSZWN0V2l0aEdyYWRpZW50KGN0eCwgeCwgeSwgdywgaCwgdG9wQ29sb3IsIGJvdHRvbUNvbG9yKSB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2NvcHknO1xuICAgIGNvbnN0IGdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIDAsIGgpO1xuICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCB0b3BDb2xvcik7XG4gICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsIGJvdHRvbUNvbG9yKTtcbiAgICBjdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgY3R4LmZpbGxSZWN0KHgsIHksIHcsIGgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5cbmNsYXNzIFByaWNlQXhpc1ZpZXdSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgY29tbW9uRGF0YSkge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXREYXRhKGRhdGEsIGNvbW1vbkRhdGEpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0RGF0YShkYXRhLCBjb21tb25EYXRhKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jb21tb25EYXRhID0gY29tbW9uRGF0YTtcbiAgICB9XG4gICAgX2ludGVybmFsX2hlaWdodChyZW5kZXJlck9wdGlvbnMsIHVzZVNlY29uZExpbmUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250U2l6ZSArIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ1RvcCArIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ0JvdHRvbTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RyYXcodGFyZ2V0LCByZW5kZXJlck9wdGlvbnMsIHRleHRXaWR0aENhY2hlLCBhbGlnbikge1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGUgfHwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0ZXh0Q29sb3IgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9jb2xvcjtcbiAgICAgICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gdGhpcy5fcHJpdmF0ZV9fY29tbW9uRGF0YS5faW50ZXJuYWxfYmFja2dyb3VuZDtcbiAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSB0YXJnZXQudXNlQml0bWFwQ29vcmRpbmF0ZVNwYWNlKChzY29wZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gc2NvcGUuY29udGV4dDtcbiAgICAgICAgICAgIGN0eC5mb250ID0gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250O1xuICAgICAgICAgICAgY29uc3QgZ2VvbSA9IHRoaXMuX3ByaXZhdGVfX2NhbGN1bGF0ZUdlb21ldHJ5KHNjb3BlLCByZW5kZXJlck9wdGlvbnMsIHRleHRXaWR0aENhY2hlLCBhbGlnbik7XG4gICAgICAgICAgICBjb25zdCBnYiA9IGdlb20uX2ludGVybmFsX2JpdG1hcDtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgZHJhdyBsYWJlbC4gYmFja2dyb3VuZENvbG9yIHdpbGwgYWx3YXlzIGJlIGEgc29saWQgY29sb3IgKG5vIGFscGhhKSBbc2VlIGdlbmVyYXRlQ29udHJhc3RDb2xvcnMgaW4gY29sb3IudHNdLlxuICAgICAgICAgICAgIFRoZXJlZm9yZSB3ZSBjYW4gZHJhdyB0aGUgcm91bmRlZCBsYWJlbCB1c2luZyBzaW1wbGlmaWVkIGNvZGUgKGRyYXdSb3VuZFJlY3RXaXRoQm9yZGVyKSB0aGF0IGRvZXNuJ3QgbmVlZCB0byBlbnN1cmUgdGhlIGJhY2tncm91bmQgYW5kIHRoZSBib3JkZXIgZG9uJ3Qgb3ZlcmxhcC5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoZ2VvbS5faW50ZXJuYWxfYWxpZ25SaWdodCkge1xuICAgICAgICAgICAgICAgIGRyYXdSb3VuZFJlY3RXaXRoQm9yZGVyKGN0eCwgZ2IuX2ludGVybmFsX3hPdXRzaWRlLCBnYi5faW50ZXJuYWxfeVRvcCwgZ2IuX2ludGVybmFsX3RvdGFsV2lkdGgsIGdiLl9pbnRlcm5hbF90b3RhbEhlaWdodCwgYmFja2dyb3VuZENvbG9yLCBnYi5faW50ZXJuYWxfaG9yekJvcmRlciwgW2diLl9pbnRlcm5hbF9yYWRpdXMsIDAsIDAsIGdiLl9pbnRlcm5hbF9yYWRpdXNdLCBiYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZHJhd1JvdW5kUmVjdFdpdGhCb3JkZXIoY3R4LCBnYi5faW50ZXJuYWxfeEluc2lkZSwgZ2IuX2ludGVybmFsX3lUb3AsIGdiLl9pbnRlcm5hbF90b3RhbFdpZHRoLCBnYi5faW50ZXJuYWxfdG90YWxIZWlnaHQsIGJhY2tncm91bmRDb2xvciwgZ2IuX2ludGVybmFsX2hvcnpCb3JkZXIsIFswLCBnYi5faW50ZXJuYWxfcmFkaXVzLCBnYi5faW50ZXJuYWxfcmFkaXVzLCAwXSwgYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRyYXcgdGlja1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3RpY2tWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoZ2IuX2ludGVybmFsX3hJbnNpZGUsIGdiLl9pbnRlcm5hbF95TWlkLCBnYi5faW50ZXJuYWxfeFRpY2sgLSBnYi5faW50ZXJuYWxfeEluc2lkZSwgZ2IuX2ludGVybmFsX3RpY2tIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZHJhdyBzZXBhcmF0b3JcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9ib3JkZXJWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFuZUJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoZ2VvbS5faW50ZXJuYWxfYWxpZ25SaWdodCA/IGdiLl9pbnRlcm5hbF9yaWdodCAtIGdiLl9pbnRlcm5hbF9ob3J6Qm9yZGVyIDogMCwgZ2IuX2ludGVybmFsX3lUb3AsIGdiLl9pbnRlcm5hbF9ob3J6Qm9yZGVyLCBnYi5faW50ZXJuYWxfeUJvdHRvbSAtIGdiLl9pbnRlcm5hbF95VG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZW9tO1xuICAgICAgICB9KTtcbiAgICAgICAgdGFyZ2V0LnVzZU1lZGlhQ29vcmRpbmF0ZVNwYWNlKCh7IGNvbnRleHQ6IGN0eCB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBnbSA9IGdlb21ldHJ5Ll9pbnRlcm5hbF9tZWRpYTtcbiAgICAgICAgICAgIGN0eC5mb250ID0gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250O1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IGdlb21ldHJ5Ll9pbnRlcm5hbF9hbGlnblJpZ2h0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQodGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdGV4dCwgZ20uX2ludGVybmFsX3hUZXh0LCAoZ20uX2ludGVybmFsX3lUb3AgKyBnbS5faW50ZXJuYWxfeUJvdHRvbSkgLyAyICsgZ20uX2ludGVybmFsX3RleHRNaWRDb3JyZWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9wcml2YXRlX19jYWxjdWxhdGVHZW9tZXRyeShzY29wZSwgcmVuZGVyZXJPcHRpb25zLCB0ZXh0V2lkdGhDYWNoZSwgYWxpZ24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGNvbnRleHQ6IGN0eCwgYml0bWFwU2l6ZSwgbWVkaWFTaXplLCBob3Jpem9udGFsUGl4ZWxSYXRpbywgdmVydGljYWxQaXhlbFJhdGlvIH0gPSBzY29wZTtcbiAgICAgICAgY29uc3QgdGlja1NpemUgPSAodGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdGlja1Zpc2libGUgfHwgIXRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX21vdmVUZXh0VG9JbnZpc2libGVUaWNrKSA/IHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfdGlja0xlbmd0aCA6IDA7XG4gICAgICAgIGNvbnN0IGhvcnpCb3JkZXIgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9zZXBhcmF0b3JWaXNpYmxlID8gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9ib3JkZXJTaXplIDogMDtcbiAgICAgICAgY29uc3QgcGFkZGluZ1RvcCA9IHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ1RvcCArIHRoaXMuX3ByaXZhdGVfX2NvbW1vbkRhdGEuX2ludGVybmFsX2FkZGl0aW9uYWxQYWRkaW5nVG9wO1xuICAgICAgICBjb25zdCBwYWRkaW5nQm90dG9tID0gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nQm90dG9tICsgdGhpcy5fcHJpdmF0ZV9fY29tbW9uRGF0YS5faW50ZXJuYWxfYWRkaXRpb25hbFBhZGRpbmdCb3R0b207XG4gICAgICAgIGNvbnN0IHBhZGRpbmdJbm5lciA9IHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ0lubmVyO1xuICAgICAgICBjb25zdCBwYWRkaW5nT3V0ZXIgPSByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3BhZGRpbmdPdXRlcjtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3RleHQ7XG4gICAgICAgIGNvbnN0IGFjdHVhbFRleHRIZWlnaHQgPSByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2ZvbnRTaXplO1xuICAgICAgICBjb25zdCB0ZXh0TWlkQ29ycmVjdGlvbiA9IHRleHRXaWR0aENhY2hlLl9pbnRlcm5hbF95TWlkQ29ycmVjdGlvbihjdHgsIHRleHQpO1xuICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBNYXRoLmNlaWwodGV4dFdpZHRoQ2FjaGUuX2ludGVybmFsX21lYXN1cmVUZXh0KGN0eCwgdGV4dCkpO1xuICAgICAgICBjb25zdCB0b3RhbEhlaWdodCA9IGFjdHVhbFRleHRIZWlnaHQgKyBwYWRkaW5nVG9wICsgcGFkZGluZ0JvdHRvbTtcbiAgICAgICAgY29uc3QgdG90YWxXaWR0aCA9IHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfYm9yZGVyU2l6ZSArIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciArIHRleHRXaWR0aCArIHRpY2tTaXplO1xuICAgICAgICBjb25zdCB0aWNrSGVpZ2h0Qml0bWFwID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcih2ZXJ0aWNhbFBpeGVsUmF0aW8pKTtcbiAgICAgICAgbGV0IHRvdGFsSGVpZ2h0Qml0bWFwID0gTWF0aC5yb3VuZCh0b3RhbEhlaWdodCAqIHZlcnRpY2FsUGl4ZWxSYXRpbyk7XG4gICAgICAgIGlmICh0b3RhbEhlaWdodEJpdG1hcCAlIDIgIT09IHRpY2tIZWlnaHRCaXRtYXAgJSAyKSB7XG4gICAgICAgICAgICB0b3RhbEhlaWdodEJpdG1hcCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvcnpCb3JkZXJCaXRtYXAgPSBob3J6Qm9yZGVyID4gMCA/IE1hdGgubWF4KDEsIE1hdGguZmxvb3IoaG9yekJvcmRlciAqIGhvcml6b250YWxQaXhlbFJhdGlvKSkgOiAwO1xuICAgICAgICBjb25zdCB0b3RhbFdpZHRoQml0bWFwID0gTWF0aC5yb3VuZCh0b3RhbFdpZHRoICogaG9yaXpvbnRhbFBpeGVsUmF0aW8pO1xuICAgICAgICAvLyB0aWNrIG92ZXJsYXBzIHNjYWxlIGJvcmRlclxuICAgICAgICBjb25zdCB0aWNrU2l6ZUJpdG1hcCA9IE1hdGgucm91bmQodGlja1NpemUgKiBob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgIGNvbnN0IHlNaWQgPSAoX2EgPSB0aGlzLl9wcml2YXRlX19jb21tb25EYXRhLl9pbnRlcm5hbF9maXhlZENvb3JkaW5hdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuX3ByaXZhdGVfX2NvbW1vbkRhdGEuX2ludGVybmFsX2Nvb3JkaW5hdGU7XG4gICAgICAgIGNvbnN0IHlNaWRCaXRtYXAgPSBNYXRoLnJvdW5kKHlNaWQgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pIC0gTWF0aC5mbG9vcih2ZXJ0aWNhbFBpeGVsUmF0aW8gKiAwLjUpO1xuICAgICAgICBjb25zdCB5VG9wQml0bWFwID0gTWF0aC5mbG9vcih5TWlkQml0bWFwICsgdGlja0hlaWdodEJpdG1hcCAvIDIgLSB0b3RhbEhlaWdodEJpdG1hcCAvIDIpO1xuICAgICAgICBjb25zdCB5Qm90dG9tQml0bWFwID0geVRvcEJpdG1hcCArIHRvdGFsSGVpZ2h0Qml0bWFwO1xuICAgICAgICBjb25zdCBhbGlnblJpZ2h0ID0gYWxpZ24gPT09ICdyaWdodCc7XG4gICAgICAgIGNvbnN0IHhJbnNpZGUgPSBhbGlnblJpZ2h0ID8gbWVkaWFTaXplLndpZHRoIC0gaG9yekJvcmRlciA6IGhvcnpCb3JkZXI7XG4gICAgICAgIGNvbnN0IHhJbnNpZGVCaXRtYXAgPSBhbGlnblJpZ2h0ID8gYml0bWFwU2l6ZS53aWR0aCAtIGhvcnpCb3JkZXJCaXRtYXAgOiBob3J6Qm9yZGVyQml0bWFwO1xuICAgICAgICBsZXQgeE91dHNpZGVCaXRtYXA7XG4gICAgICAgIGxldCB4VGlja0JpdG1hcDtcbiAgICAgICAgbGV0IHhUZXh0O1xuICAgICAgICBpZiAoYWxpZ25SaWdodCkge1xuICAgICAgICAgICAgLy8gMiAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgNiAgNVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIDMgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICB4T3V0c2lkZUJpdG1hcCA9IHhJbnNpZGVCaXRtYXAgLSB0b3RhbFdpZHRoQml0bWFwO1xuICAgICAgICAgICAgeFRpY2tCaXRtYXAgPSB4SW5zaWRlQml0bWFwIC0gdGlja1NpemVCaXRtYXA7XG4gICAgICAgICAgICB4VGV4dCA9IHhJbnNpZGUgLSB0aWNrU2l6ZSAtIHBhZGRpbmdJbm5lciAtIGhvcnpCb3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyAxICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIDYgIDVcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyA0ICAgICAgICAgICAgICAgM1xuICAgICAgICAgICAgeE91dHNpZGVCaXRtYXAgPSB4SW5zaWRlQml0bWFwICsgdG90YWxXaWR0aEJpdG1hcDtcbiAgICAgICAgICAgIHhUaWNrQml0bWFwID0geEluc2lkZUJpdG1hcCArIHRpY2tTaXplQml0bWFwO1xuICAgICAgICAgICAgeFRleHQgPSB4SW5zaWRlICsgdGlja1NpemUgKyBwYWRkaW5nSW5uZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9hbGlnblJpZ2h0OiBhbGlnblJpZ2h0LFxuICAgICAgICAgICAgX2ludGVybmFsX2JpdG1hcDoge1xuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF95VG9wOiB5VG9wQml0bWFwLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF95TWlkOiB5TWlkQml0bWFwLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF95Qm90dG9tOiB5Qm90dG9tQml0bWFwLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF90b3RhbFdpZHRoOiB0b3RhbFdpZHRoQml0bWFwLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF90b3RhbEhlaWdodDogdG90YWxIZWlnaHRCaXRtYXAsXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaXQgaXMgYmV0dGVyIHRvIGhhdmUgZGlmZmVyZW50IGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHJhZGlpXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3JhZGl1czogMiAqIGhvcml6b250YWxQaXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9ob3J6Qm9yZGVyOiBob3J6Qm9yZGVyQml0bWFwLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF94T3V0c2lkZTogeE91dHNpZGVCaXRtYXAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3hJbnNpZGU6IHhJbnNpZGVCaXRtYXAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3hUaWNrOiB4VGlja0JpdG1hcCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdGlja0hlaWdodDogdGlja0hlaWdodEJpdG1hcCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfcmlnaHQ6IGJpdG1hcFNpemUud2lkdGgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2ludGVybmFsX21lZGlhOiB7XG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3lUb3A6IHlUb3BCaXRtYXAgLyB2ZXJ0aWNhbFBpeGVsUmF0aW8sXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3lCb3R0b206IHlCb3R0b21CaXRtYXAgLyB2ZXJ0aWNhbFBpeGVsUmF0aW8sXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3hUZXh0OiB4VGV4dCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdGV4dE1pZENvcnJlY3Rpb246IHRleHRNaWRDb3JyZWN0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmNsYXNzIFByaWNlQXhpc1ZpZXcge1xuICAgIGNvbnN0cnVjdG9yKGN0b3IpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29tbW9uUmVuZGVyZXJEYXRhID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2Nvb3JkaW5hdGU6IDAsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFja2dyb3VuZDogJyMwMDAnLFxuICAgICAgICAgICAgX2ludGVybmFsX2FkZGl0aW9uYWxQYWRkaW5nQm90dG9tOiAwLFxuICAgICAgICAgICAgX2ludGVybmFsX2FkZGl0aW9uYWxQYWRkaW5nVG9wOiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19heGlzUmVuZGVyZXJEYXRhID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX3RleHQ6ICcnLFxuICAgICAgICAgICAgX2ludGVybmFsX3Zpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgX2ludGVybmFsX3RpY2tWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgX2ludGVybmFsX21vdmVUZXh0VG9JbnZpc2libGVUaWNrOiBmYWxzZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ib3JkZXJDb2xvcjogJycsXG4gICAgICAgICAgICBfaW50ZXJuYWxfY29sb3I6ICcjRkZGJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ib3JkZXJWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9zZXBhcmF0b3JWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVJlbmRlcmVyRGF0YSA9IHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF90ZXh0OiAnJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90aWNrVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbW92ZVRleHRUb0ludmlzaWJsZVRpY2s6IHRydWUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYm9yZGVyQ29sb3I6ICcnLFxuICAgICAgICAgICAgX2ludGVybmFsX2NvbG9yOiAnI0ZGRicsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYm9yZGVyVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9zZXBhcmF0b3JWaXNpYmxlOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2F4aXNSZW5kZXJlciA9IG5ldyAoY3RvciB8fCBQcmljZUF4aXNWaWV3UmVuZGVyZXIpKHRoaXMuX3ByaXZhdGVfX2F4aXNSZW5kZXJlckRhdGEsIHRoaXMuX3ByaXZhdGVfX2NvbW1vblJlbmRlcmVyRGF0YSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVSZW5kZXJlciA9IG5ldyAoY3RvciB8fCBQcmljZUF4aXNWaWV3UmVuZGVyZXIpKHRoaXMuX3ByaXZhdGVfX3BhbmVSZW5kZXJlckRhdGEsIHRoaXMuX3ByaXZhdGVfX2NvbW1vblJlbmRlcmVyRGF0YSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF90ZXh0KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX191cGRhdGVSZW5kZXJlckRhdGFJZk5lZWRlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYXhpc1JlbmRlcmVyRGF0YS5faW50ZXJuYWxfdGV4dDtcbiAgICB9XG4gICAgX2ludGVybmFsX2Nvb3JkaW5hdGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZVJlbmRlcmVyRGF0YUlmTmVlZGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2Nvb3JkaW5hdGU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2hlaWdodChyZW5kZXJlck9wdGlvbnMsIHVzZVNlY29uZExpbmUgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5fcHJpdmF0ZV9fYXhpc1JlbmRlcmVyLl9pbnRlcm5hbF9oZWlnaHQocmVuZGVyZXJPcHRpb25zLCB1c2VTZWNvbmRMaW5lKSwgdGhpcy5fcHJpdmF0ZV9fcGFuZVJlbmRlcmVyLl9pbnRlcm5hbF9oZWlnaHQocmVuZGVyZXJPcHRpb25zLCB1c2VTZWNvbmRMaW5lKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9nZXRGaXhlZENvb3JkaW5hdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2ZpeGVkQ29vcmRpbmF0ZSB8fCAwO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0Rml4ZWRDb29yZGluYXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvbW1vblJlbmRlcmVyRGF0YS5faW50ZXJuYWxfZml4ZWRDb29yZGluYXRlID0gdmFsdWU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9pc1Zpc2libGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZVJlbmRlcmVyRGF0YUlmTmVlZGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19heGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlIHx8IHRoaXMuX3ByaXZhdGVfX3BhbmVSZW5kZXJlckRhdGEuX2ludGVybmFsX3Zpc2libGU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9pc0F4aXNMYWJlbFZpc2libGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZVJlbmRlcmVyRGF0YUlmTmVlZGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19heGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVuZGVyZXIocHJpY2VTY2FsZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX191cGRhdGVSZW5kZXJlckRhdGFJZk5lZWRlZCgpO1xuICAgICAgICAvLyBmb3JjZSB1cGRhdGUgdGlja1Zpc2libGUgc3RhdGUgZnJvbSBwcmljZSBzY2FsZSBvcHRpb25zXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBhbmQgd2UgY2FuJ3QgaGF2ZSBwcmljZSBheGlzIGluIG90aGVyIG1ldGhvZHNcbiAgICAgICAgLy8gKGxpa2UgcGFuZVJlbmRlcmVyIG9yIGFueSBvdGhlciB3aG8gY2FsbCBfdXBkYXRlUmVuZGVyZXJEYXRhSWZOZWVkZWQpXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2F4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX3RpY2tWaXNpYmxlID0gdGhpcy5fcHJpdmF0ZV9fYXhpc1JlbmRlcmVyRGF0YS5faW50ZXJuYWxfdGlja1Zpc2libGUgJiYgcHJpY2VTY2FsZS5faW50ZXJuYWxfb3B0aW9ucygpLnRpY2tzVmlzaWJsZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVJlbmRlcmVyRGF0YS5faW50ZXJuYWxfdGlja1Zpc2libGUgPSB0aGlzLl9wcml2YXRlX19wYW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF90aWNrVmlzaWJsZSAmJiBwcmljZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCkudGlja3NWaXNpYmxlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19heGlzUmVuZGVyZXIuX2ludGVybmFsX3NldERhdGEodGhpcy5fcHJpdmF0ZV9fYXhpc1JlbmRlcmVyRGF0YSwgdGhpcy5fcHJpdmF0ZV9fY29tbW9uUmVuZGVyZXJEYXRhKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVJlbmRlcmVyLl9pbnRlcm5hbF9zZXREYXRhKHRoaXMuX3ByaXZhdGVfX3BhbmVSZW5kZXJlckRhdGEsIHRoaXMuX3ByaXZhdGVfX2NvbW1vblJlbmRlcmVyRGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19heGlzUmVuZGVyZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wYW5lUmVuZGVyZXIoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZVJlbmRlcmVyRGF0YUlmTmVlZGVkKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2F4aXNSZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YSh0aGlzLl9wcml2YXRlX19heGlzUmVuZGVyZXJEYXRhLCB0aGlzLl9wcml2YXRlX19jb21tb25SZW5kZXJlckRhdGEpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lUmVuZGVyZXIuX2ludGVybmFsX3NldERhdGEodGhpcy5fcHJpdmF0ZV9fcGFuZVJlbmRlcmVyRGF0YSwgdGhpcy5fcHJpdmF0ZV9fY29tbW9uUmVuZGVyZXJEYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3BhbmVSZW5kZXJlcjtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3VwZGF0ZVJlbmRlcmVyRGF0YUlmTmVlZGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2F4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX3RpY2tWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVSZW5kZXJlckRhdGEuX2ludGVybmFsX3RpY2tWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9fdXBkYXRlUmVuZGVyZXJEYXRhKHRoaXMuX3ByaXZhdGVfX2F4aXNSZW5kZXJlckRhdGEsIHRoaXMuX3ByaXZhdGVfX3BhbmVSZW5kZXJlckRhdGEsIHRoaXMuX3ByaXZhdGVfX2NvbW1vblJlbmRlcmVyRGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIENyb3NzaGFpclByaWNlQXhpc1ZpZXcgZXh0ZW5kcyBQcmljZUF4aXNWaWV3IHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UsIHByaWNlU2NhbGUsIHZhbHVlUHJvdmlkZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID0gcHJpY2VTY2FsZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmFsdWVQcm92aWRlciA9IHZhbHVlUHJvdmlkZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fdXBkYXRlUmVuZGVyZXJEYXRhKGF4aXNSZW5kZXJlckRhdGEsIHBhbmVSZW5kZXJlckRhdGEsIGNvbW1vblJlbmRlcmVyRGF0YSkge1xuICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zb3VyY2UuX2ludGVybmFsX29wdGlvbnMoKS5tb2RlID09PSAyIC8qIENyb3NzaGFpck1vZGUuSGlkZGVuICovKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX3NvdXJjZS5faW50ZXJuYWxfb3B0aW9ucygpLmhvcnpMaW5lO1xuICAgICAgICBpZiAoIW9wdGlvbnMubGFiZWxWaXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX2ZpcnN0VmFsdWUoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19zb3VyY2UuX2ludGVybmFsX3Zpc2libGUoKSB8fCB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9pc0VtcHR5KCkgfHwgKGZpcnN0VmFsdWUgPT09IG51bGwpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sb3JzID0gZ2VuZXJhdGVDb250cmFzdENvbG9ycyhvcHRpb25zLmxhYmVsQmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgY29tbW9uUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9iYWNrZ3JvdW5kID0gY29sb3JzLl9pbnRlcm5hbF9iYWNrZ3JvdW5kO1xuICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9jb2xvciA9IGNvbG9ycy5faW50ZXJuYWxfZm9yZWdyb3VuZDtcbiAgICAgICAgY29uc3QgYWRkaXRpb25hbFBhZGRpbmcgPSAyIC8gMTIgKiB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9mb250U2l6ZSgpO1xuICAgICAgICBjb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2FkZGl0aW9uYWxQYWRkaW5nVG9wID0gYWRkaXRpb25hbFBhZGRpbmc7XG4gICAgICAgIGNvbW1vblJlbmRlcmVyRGF0YS5faW50ZXJuYWxfYWRkaXRpb25hbFBhZGRpbmdCb3R0b20gPSBhZGRpdGlvbmFsUGFkZGluZztcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9wcml2YXRlX192YWx1ZVByb3ZpZGVyKHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUpO1xuICAgICAgICBjb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2Nvb3JkaW5hdGUgPSB2YWx1ZS5faW50ZXJuYWxfY29vcmRpbmF0ZTtcbiAgICAgICAgYXhpc1JlbmRlcmVyRGF0YS5faW50ZXJuYWxfdGV4dCA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX2Zvcm1hdFByaWNlKHZhbHVlLl9pbnRlcm5hbF9wcmljZSwgZmlyc3RWYWx1ZSk7XG4gICAgICAgIGF4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX3Zpc2libGUgPSB0cnVlO1xuICAgIH1cbn1cblxuY29uc3Qgb3B0aW1pemF0aW9uUmVwbGFjZW1lbnRSZSA9IC9bMS05XS9nO1xuY29uc3QgcmFkaXVzJDEgPSAyO1xuY2xhc3MgVGltZUF4aXNWaWV3UmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldERhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RyYXcodGFyZ2V0LCByZW5kZXJlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2RhdGEgPT09IG51bGwgfHwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZSA9PT0gZmFsc2UgfHwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSB0YXJnZXQudXNlTWVkaWFDb29yZGluYXRlU3BhY2UoKHsgY29udGV4dDogY3R4IH0pID0+IHtcbiAgICAgICAgICAgIGN0eC5mb250ID0gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250O1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF93aWR0aENhY2hlLl9pbnRlcm5hbF9tZWFzdXJlVGV4dChjdHgsIGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fZGF0YSkuX2ludGVybmFsX3RleHQsIG9wdGltaXphdGlvblJlcGxhY2VtZW50UmUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0ZXh0V2lkdGggPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvcnpNYXJnaW4gPSByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3BhZGRpbmdIb3Jpem9udGFsO1xuICAgICAgICBjb25zdCBsYWJlbFdpZHRoID0gdGV4dFdpZHRoICsgMiAqIGhvcnpNYXJnaW47XG4gICAgICAgIGNvbnN0IGxhYmVsV2lkdGhIYWxmID0gbGFiZWxXaWR0aCAvIDI7XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZVdpZHRoID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfd2lkdGg7XG4gICAgICAgIGxldCBjb29yZGluYXRlID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfY29vcmRpbmF0ZTtcbiAgICAgICAgbGV0IHgxID0gTWF0aC5mbG9vcihjb29yZGluYXRlIC0gbGFiZWxXaWR0aEhhbGYpICsgMC41O1xuICAgICAgICBpZiAoeDEgPCAwKSB7XG4gICAgICAgICAgICBjb29yZGluYXRlID0gY29vcmRpbmF0ZSArIE1hdGguYWJzKDAgLSB4MSk7XG4gICAgICAgICAgICB4MSA9IE1hdGguZmxvb3IoY29vcmRpbmF0ZSAtIGxhYmVsV2lkdGhIYWxmKSArIDAuNTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh4MSArIGxhYmVsV2lkdGggPiB0aW1lU2NhbGVXaWR0aCkge1xuICAgICAgICAgICAgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGUgLSBNYXRoLmFicyh0aW1lU2NhbGVXaWR0aCAtICh4MSArIGxhYmVsV2lkdGgpKTtcbiAgICAgICAgICAgIHgxID0gTWF0aC5mbG9vcihjb29yZGluYXRlIC0gbGFiZWxXaWR0aEhhbGYpICsgMC41O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHgyID0geDEgKyBsYWJlbFdpZHRoO1xuICAgICAgICBjb25zdCB5MSA9IDA7XG4gICAgICAgIGNvbnN0IHkyID0gTWF0aC5jZWlsKHkxICtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfYm9yZGVyU2l6ZSArXG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3RpY2tMZW5ndGggK1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nVG9wICtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfZm9udFNpemUgK1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nQm90dG9tKTtcbiAgICAgICAgdGFyZ2V0LnVzZUJpdG1hcENvb3JkaW5hdGVTcGFjZSgoeyBjb250ZXh0OiBjdHgsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fZGF0YSk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZGF0YS5faW50ZXJuYWxfYmFja2dyb3VuZDtcbiAgICAgICAgICAgIGNvbnN0IHgxc2NhbGVkID0gTWF0aC5yb3VuZCh4MSAqIGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IHkxc2NhbGVkID0gTWF0aC5yb3VuZCh5MSAqIHZlcnRpY2FsUGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICBjb25zdCB4MnNjYWxlZCA9IE1hdGgucm91bmQoeDIgKiBob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICBjb25zdCB5MnNjYWxlZCA9IE1hdGgucm91bmQoeTIgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgY29uc3QgcmFkaXVzU2NhbGVkID0gTWF0aC5yb3VuZChyYWRpdXMkMSAqIGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeDFzY2FsZWQsIHkxc2NhbGVkKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeDFzY2FsZWQsIHkyc2NhbGVkIC0gcmFkaXVzU2NhbGVkKTtcbiAgICAgICAgICAgIGN0eC5hcmNUbyh4MXNjYWxlZCwgeTJzY2FsZWQsIHgxc2NhbGVkICsgcmFkaXVzU2NhbGVkLCB5MnNjYWxlZCwgcmFkaXVzU2NhbGVkKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeDJzY2FsZWQgLSByYWRpdXNTY2FsZWQsIHkyc2NhbGVkKTtcbiAgICAgICAgICAgIGN0eC5hcmNUbyh4MnNjYWxlZCwgeTJzY2FsZWQsIHgyc2NhbGVkLCB5MnNjYWxlZCAtIHJhZGl1c1NjYWxlZCwgcmFkaXVzU2NhbGVkKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeDJzY2FsZWQsIHkxc2NhbGVkKTtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICBpZiAoZGF0YS5faW50ZXJuYWxfdGlja1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrWCA9IE1hdGgucm91bmQoZGF0YS5faW50ZXJuYWxfY29vcmRpbmF0ZSAqIGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrVG9wID0geTFzY2FsZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlja0JvdHRvbSA9IE1hdGgucm91bmQoKHRpY2tUb3AgKyByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3RpY2tMZW5ndGgpICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZGF0YS5faW50ZXJuYWxfY29sb3I7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlja1dpZHRoID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihob3Jpem9udGFsUGl4ZWxSYXRpbykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpY2tPZmZzZXQgPSBNYXRoLmZsb29yKGhvcml6b250YWxQaXhlbFJhdGlvICogMC41KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QodGlja1ggLSB0aWNrT2Zmc2V0LCB0aWNrVG9wLCB0aWNrV2lkdGgsIHRpY2tCb3R0b20gLSB0aWNrVG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRhcmdldC51c2VNZWRpYUNvb3JkaW5hdGVTcGFjZSgoeyBjb250ZXh0OiBjdHggfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fZGF0YSk7XG4gICAgICAgICAgICBjb25zdCB5VGV4dCA9IHkxICtcbiAgICAgICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2JvcmRlclNpemUgK1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfdGlja0xlbmd0aCArXG4gICAgICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nVG9wICtcbiAgICAgICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2ZvbnRTaXplIC8gMjtcbiAgICAgICAgICAgIGN0eC5mb250ID0gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250O1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBkYXRhLl9pbnRlcm5hbF9jb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHRleHRZQ29ycmVjdGlvbiA9IHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfd2lkdGhDYWNoZS5faW50ZXJuYWxfeU1pZENvcnJlY3Rpb24oY3R4LCAnQXByMCcpO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh4MSArIGhvcnpNYXJnaW4sIHlUZXh0ICsgdGV4dFlDb3JyZWN0aW9uKTtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChkYXRhLl9pbnRlcm5hbF90ZXh0LCAwLCAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBDcm9zc2hhaXJUaW1lQXhpc1ZpZXcge1xuICAgIGNvbnN0cnVjdG9yKGNyb3NzaGFpciwgbW9kZWwsIHZhbHVlUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlciA9IG5ldyBUaW1lQXhpc1ZpZXdSZW5kZXJlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlckRhdGEgPSB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFja2dyb3VuZDogJyM0YzUyNWUnLFxuICAgICAgICAgICAgX2ludGVybmFsX2NvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgX2ludGVybmFsX3RleHQ6ICcnLFxuICAgICAgICAgICAgX2ludGVybmFsX3dpZHRoOiAwLFxuICAgICAgICAgICAgX2ludGVybmFsX2Nvb3JkaW5hdGU6IE5hTixcbiAgICAgICAgICAgIF9pbnRlcm5hbF90aWNrVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyID0gY3Jvc3NoYWlyO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbCA9IG1vZGVsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX192YWx1ZVByb3ZpZGVyID0gdmFsdWVQcm92aWRlcjtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVuZGVyZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXBkYXRlSW1wbCgpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YSh0aGlzLl9wcml2YXRlX19yZW5kZXJlckRhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXI7XG4gICAgfVxuICAgIF9wcml2YXRlX191cGRhdGVJbXBsKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJEYXRhO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19jcm9zc2hhaXIuX2ludGVybmFsX29wdGlvbnMoKS5tb2RlID09PSAyIC8qIENyb3NzaGFpck1vZGUuSGlkZGVuICovKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpci5faW50ZXJuYWxfb3B0aW9ucygpLnZlcnRMaW5lO1xuICAgICAgICBpZiAoIW9wdGlvbnMubGFiZWxWaXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGltZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpO1xuICAgICAgICBpZiAodGltZVNjYWxlLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLl9pbnRlcm5hbF93aWR0aCA9IHRpbWVTY2FsZS5faW50ZXJuYWxfd2lkdGgoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9wcml2YXRlX192YWx1ZVByb3ZpZGVyKCk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuX2ludGVybmFsX2Nvb3JkaW5hdGUgPSB2YWx1ZS5faW50ZXJuYWxfY29vcmRpbmF0ZTtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSB0aW1lU2NhbGUuX2ludGVybmFsX2luZGV4VG9UaW1lU2NhbGVQb2ludCh0aGlzLl9wcml2YXRlX19jcm9zc2hhaXIuX2ludGVybmFsX2FwcGxpZWRJbmRleCgpKTtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfdGV4dCA9IHRpbWVTY2FsZS5faW50ZXJuYWxfZm9ybWF0RGF0ZVRpbWUoZW5zdXJlTm90TnVsbChjdXJyZW50VGltZSkpO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgY29sb3JzID0gZ2VuZXJhdGVDb250cmFzdENvbG9ycyhvcHRpb25zLmxhYmVsQmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfYmFja2dyb3VuZCA9IGNvbG9ycy5faW50ZXJuYWxfYmFja2dyb3VuZDtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfY29sb3IgPSBjb2xvcnMuX2ludGVybmFsX2ZvcmVncm91bmQ7XG4gICAgICAgIGRhdGEuX2ludGVybmFsX3RpY2tWaXNpYmxlID0gdGltZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCkudGlja3NWaXNpYmxlO1xuICAgIH1cbn1cblxuY2xhc3MgRGF0YVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19wcmljZVNjYWxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fem9yZGVyID0gMDtcbiAgICB9XG4gICAgX2ludGVybmFsX3pvcmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3pvcmRlcjtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFpvcmRlcih6b3JkZXIpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fem9yZGVyID0gem9yZGVyO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX19wcmljZVNjYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UHJpY2VTY2FsZShwcmljZVNjYWxlKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19wcmljZVNjYWxlID0gcHJpY2VTY2FsZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2xhYmVsUGFuZVZpZXdzKHBhbmUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdGltZUF4aXNWaWV3cygpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGNyb3NzaGFpciBtb2RlLlxuICovXG52YXIgQ3Jvc3NoYWlyTW9kZTtcbihmdW5jdGlvbiAoQ3Jvc3NoYWlyTW9kZSkge1xuICAgIC8qKlxuICAgICAqIFRoaXMgbW9kZSBhbGxvd3MgY3Jvc3NoYWlyIHRvIG1vdmUgZnJlZWx5IG9uIHRoZSBjaGFydC5cbiAgICAgKi9cbiAgICBDcm9zc2hhaXJNb2RlW0Nyb3NzaGFpck1vZGVbXCJOb3JtYWxcIl0gPSAwXSA9IFwiTm9ybWFsXCI7XG4gICAgLyoqXG4gICAgICogVGhpcyBtb2RlIHN0aWNrcyBjcm9zc2hhaXIncyBob3Jpem9udGFsIGxpbmUgdG8gdGhlIHByaWNlIHZhbHVlIG9mIGEgc2luZ2xlLXZhbHVlIHNlcmllcyBvciB0byB0aGUgY2xvc2UgcHJpY2Ugb2YgT0hMQy1iYXNlZCBzZXJpZXMuXG4gICAgICovXG4gICAgQ3Jvc3NoYWlyTW9kZVtDcm9zc2hhaXJNb2RlW1wiTWFnbmV0XCJdID0gMV0gPSBcIk1hZ25ldFwiO1xuICAgIC8qKlxuICAgICAqIFRoaXMgbW9kZSBkaXNhYmxlcyByZW5kZXJpbmcgb2YgdGhlIGNyb3NzaGFpci5cbiAgICAgKi9cbiAgICBDcm9zc2hhaXJNb2RlW0Nyb3NzaGFpck1vZGVbXCJIaWRkZW5cIl0gPSAyXSA9IFwiSGlkZGVuXCI7XG59KShDcm9zc2hhaXJNb2RlIHx8IChDcm9zc2hhaXJNb2RlID0ge30pKTtcbmNsYXNzIENyb3NzaGFpciBleHRlbmRzIERhdGFTb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZSA9IE5hTjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX192aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3MgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9feCA9IE5hTjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9feSA9IE5hTjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3JpZ2luWCA9IE5hTjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3JpZ2luWSA9IE5hTjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnNQYW5lVmlldyA9IG5ldyBDcm9zc2hhaXJNYXJrc1BhbmVWaWV3KG1vZGVsLCB0aGlzKTtcbiAgICAgICAgY29uc3QgdmFsdWVQcmljZVByb3ZpZGVyID0gKHJhd1ByaWNlUHJvdmlkZXIsIHJhd0Nvb3JkaW5hdGVQcm92aWRlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChwcmljZVNjYWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHJhd0Nvb3JkaW5hdGVQcm92aWRlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ByaWNlID0gcmF3UHJpY2VQcm92aWRlcigpO1xuICAgICAgICAgICAgICAgIGlmIChwcmljZVNjYWxlID09PSBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX3BhbmUpLl9pbnRlcm5hbF9kZWZhdWx0UHJpY2VTY2FsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHByaWNlIG11c3QgYmUgZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBfaW50ZXJuYWxfcHJpY2U6IHJhd1ByaWNlLCBfaW50ZXJuYWxfY29vcmRpbmF0ZTogY29vcmRpbmF0ZSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWx3YXlzIGNvbnZlcnQgZnJvbSBjb29yZGluYXRlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBlbnN1cmVOb3ROdWxsKHByaWNlU2NhbGUuX2ludGVybmFsX2ZpcnN0VmFsdWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gcHJpY2VTY2FsZS5faW50ZXJuYWxfY29vcmRpbmF0ZVRvUHJpY2UoY29vcmRpbmF0ZSwgZmlyc3RWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IF9pbnRlcm5hbF9wcmljZTogcHJpY2UsIF9pbnRlcm5hbF9jb29yZGluYXRlOiBjb29yZGluYXRlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdmFsdWVUaW1lUHJvdmlkZXIgPSAocmF3SW5kZXhQcm92aWRlciwgcmF3Q29vcmRpbmF0ZVByb3ZpZGVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2luZGV4VG9UaW1lKHJhd0luZGV4UHJvdmlkZXIoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHJhd0Nvb3JkaW5hdGVQcm92aWRlcigpO1xuICAgICAgICAgICAgICAgIGlmICghdGltZSB8fCAhTnVtYmVyLmlzRmluaXRlKGNvb3JkaW5hdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdGltZTogdGltZSxcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX2Nvb3JkaW5hdGU6IGNvb3JkaW5hdGUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8vIGZvciBjdXJyZW50IHBvc2l0aW9uIGFsd2F5cyByZXR1cm4gYm90aCBwcmljZSBhbmQgY29vcmRpbmF0ZVxuICAgICAgICB0aGlzLl9wcml2YXRlX19jdXJyZW50UG9zUHJpY2VQcm92aWRlciA9IHZhbHVlUHJpY2VQcm92aWRlcigoKSA9PiB0aGlzLl9wcml2YXRlX19wcmljZSwgKCkgPT4gdGhpcy5fcHJpdmF0ZV9feSk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3NUaW1lUHJvdmlkZXIgPSB2YWx1ZVRpbWVQcm92aWRlcigoKSA9PiB0aGlzLl9wcml2YXRlX19pbmRleCwgKCkgPT4gdGhpcy5faW50ZXJuYWxfYXBwbGllZFgoKSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVBeGlzVmlldyA9IG5ldyBDcm9zc2hhaXJUaW1lQXhpc1ZpZXcodGhpcywgbW9kZWwsIGN1cnJlbnRQb3NUaW1lUHJvdmlkZXIpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lVmlldyA9IG5ldyBDcm9zc2hhaXJQYW5lVmlldyh0aGlzKTtcbiAgICB9XG4gICAgX2ludGVybmFsX29wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2F2ZU9yaWdpbkNvb3JkKHgsIHkpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3JpZ2luWCA9IHg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29yaWdpblkgPSB5O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfY2xlYXJPcmlnaW5Db29yZCgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3JpZ2luWCA9IE5hTjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3JpZ2luWSA9IE5hTjtcbiAgICB9XG4gICAgX2ludGVybmFsX29yaWdpbkNvb3JkWCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29yaWdpblg7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9vcmlnaW5Db29yZFkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcmlnaW5ZO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UG9zaXRpb24oaW5kZXgsIHByaWNlLCBwYW5lKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RyeVRvVXBkYXRlVmlld3MoaW5kZXgsIHByaWNlLCBwYW5lKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2FwcGxpZWRJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2luZGV4O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXBwbGllZFgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX194O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXBwbGllZFkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX195O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3Zpc2libGU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jbGVhclBvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX192aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NldEluZGV4VG9MYXN0U2VyaWVzQmFySW5kZXgoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2UgPSBOYU47XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ggPSBOYU47XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3kgPSBOYU47XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9jbGVhck9yaWdpbkNvb3JkKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wYW5lVmlld3MocGFuZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcGFuZSAhPT0gbnVsbCA/IFt0aGlzLl9wcml2YXRlX19wYW5lVmlldywgdGhpcy5fcHJpdmF0ZV9fbWFya2Vyc1BhbmVWaWV3XSA6IFtdO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaG9yekxpbmVWaXNpYmxlKHBhbmUpIHtcbiAgICAgICAgcmV0dXJuIHBhbmUgPT09IHRoaXMuX3ByaXZhdGVfX3BhbmUgJiYgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5ob3J6TGluZS52aXNpYmxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdmVydExpbmVWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy52ZXJ0TGluZS52aXNpYmxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VBeGlzVmlld3MocGFuZSwgcHJpY2VTY2FsZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX3Zpc2libGUgfHwgdGhpcy5fcHJpdmF0ZV9fcGFuZSAhPT0gcGFuZSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3MuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3cyA9IFtdO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcGFuZSA9PT0gcGFuZSkge1xuICAgICAgICAgICAgdmlld3MucHVzaCh0aGlzLl9wcml2YXRlX19jcmVhdGVQcmljZUF4aXNWaWV3T25EZW1hbmQodGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3MsIHByaWNlU2NhbGUsIHRoaXMuX3ByaXZhdGVfX2N1cnJlbnRQb3NQcmljZVByb3ZpZGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXdzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdGltZUF4aXNWaWV3cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3Zpc2libGUgPyBbdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNWaWV3XSA6IFtdO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFuZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3BhbmU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGVBbGxWaWV3cygpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVZpZXcuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3cy5mb3JFYWNoKCh2YWx1ZSkgPT4gdmFsdWUuX2ludGVybmFsX3VwZGF0ZSgpKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNWaWV3Ll9pbnRlcm5hbF91cGRhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya2Vyc1BhbmVWaWV3Ll9pbnRlcm5hbF91cGRhdGUoKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3ByaWNlU2NhbGVCeVBhbmUocGFuZSkge1xuICAgICAgICBpZiAocGFuZSAmJiAhcGFuZS5faW50ZXJuYWxfZGVmYXVsdFByaWNlU2NhbGUoKS5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFuZS5faW50ZXJuYWxfZGVmYXVsdFByaWNlU2NhbGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3RyeVRvVXBkYXRlVmlld3MoaW5kZXgsIHByaWNlLCBwYW5lKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX190cnlUb1VwZGF0ZURhdGEoaW5kZXgsIHByaWNlLCBwYW5lKSkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlQWxsVmlld3MoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fdHJ5VG9VcGRhdGVEYXRhKG5ld0luZGV4LCBuZXdQcmljZSwgbmV3UGFuZSkge1xuICAgICAgICBjb25zdCBvbGRYID0gdGhpcy5fcHJpdmF0ZV9feDtcbiAgICAgICAgY29uc3Qgb2xkWSA9IHRoaXMuX3ByaXZhdGVfX3k7XG4gICAgICAgIGNvbnN0IG9sZFByaWNlID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2U7XG4gICAgICAgIGNvbnN0IG9sZEluZGV4ID0gdGhpcy5fcHJpdmF0ZV9faW5kZXg7XG4gICAgICAgIGNvbnN0IG9sZFBhbmUgPSB0aGlzLl9wcml2YXRlX19wYW5lO1xuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZUJ5UGFuZShuZXdQYW5lKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW5kZXggPSBuZXdJbmRleDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9feCA9IGlzTmFOKG5ld0luZGV4KSA/IE5hTiA6IHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfaW5kZXhUb0Nvb3JkaW5hdGUobmV3SW5kZXgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lID0gbmV3UGFuZTtcbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IHByaWNlU2NhbGUgIT09IG51bGwgPyBwcmljZVNjYWxlLl9pbnRlcm5hbF9maXJzdFZhbHVlKCkgOiBudWxsO1xuICAgICAgICBpZiAocHJpY2VTY2FsZSAhPT0gbnVsbCAmJiBmaXJzdFZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZSA9IG5ld1ByaWNlO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9feSA9IHByaWNlU2NhbGUuX2ludGVybmFsX3ByaWNlVG9Db29yZGluYXRlKG5ld1ByaWNlLCBmaXJzdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlID0gTmFOO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9feSA9IE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG9sZFggIT09IHRoaXMuX3ByaXZhdGVfX3ggfHwgb2xkWSAhPT0gdGhpcy5fcHJpdmF0ZV9feSB8fCBvbGRJbmRleCAhPT0gdGhpcy5fcHJpdmF0ZV9faW5kZXggfHxcbiAgICAgICAgICAgIG9sZFByaWNlICE9PSB0aGlzLl9wcml2YXRlX19wcmljZSB8fCBvbGRQYW5lICE9PSB0aGlzLl9wcml2YXRlX19wYW5lKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3NldEluZGV4VG9MYXN0U2VyaWVzQmFySW5kZXgoKSB7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleGVzID0gdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3Nlcmllc2VzKClcbiAgICAgICAgICAgIC5tYXAoKHMpID0+IHMuX2ludGVybmFsX2JhcnMoKS5faW50ZXJuYWxfbGFzdEluZGV4KCkpXG4gICAgICAgICAgICAuZmlsdGVyKG5vdE51bGwpO1xuICAgICAgICBjb25zdCBsYXN0QmFySW5kZXggPSAobGFzdEluZGV4ZXMubGVuZ3RoID09PSAwKSA/IG51bGwgOiBNYXRoLm1heCguLi5sYXN0SW5kZXhlcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2luZGV4ID0gbGFzdEJhckluZGV4ICE9PSBudWxsID8gbGFzdEJhckluZGV4IDogTmFOO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fY3JlYXRlUHJpY2VBeGlzVmlld09uRGVtYW5kKG1hcCwgcHJpY2VTY2FsZSwgdmFsdWVQcm92aWRlcikge1xuICAgICAgICBsZXQgdmlldyA9IG1hcC5nZXQocHJpY2VTY2FsZSk7XG4gICAgICAgIGlmICh2aWV3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZpZXcgPSBuZXcgQ3Jvc3NoYWlyUHJpY2VBeGlzVmlldyh0aGlzLCBwcmljZVNjYWxlLCB2YWx1ZVByb3ZpZGVyKTtcbiAgICAgICAgICAgIG1hcC5zZXQocHJpY2VTY2FsZSwgdmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0RlZmF1bHRQcmljZVNjYWxlKHByaWNlU2NhbGVJZCkge1xuICAgIHJldHVybiBwcmljZVNjYWxlSWQgPT09IFwibGVmdFwiIC8qIERlZmF1bHRQcmljZVNjYWxlSWQuTGVmdCAqLyB8fCBwcmljZVNjYWxlSWQgPT09IFwicmlnaHRcIiAvKiBEZWZhdWx0UHJpY2VTY2FsZUlkLlJpZ2h0ICovO1xufVxuXG5mdW5jdGlvbiBtZXJnZVBhbmVJbnZhbGlkYXRpb24oYmVmb3JlVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgaWYgKGJlZm9yZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBsZXZlbCA9IE1hdGgubWF4KGJlZm9yZVZhbHVlLl9pbnRlcm5hbF9sZXZlbCwgbmV3VmFsdWUuX2ludGVybmFsX2xldmVsKTtcbiAgICBjb25zdCBhdXRvU2NhbGUgPSBiZWZvcmVWYWx1ZS5faW50ZXJuYWxfYXV0b1NjYWxlIHx8IG5ld1ZhbHVlLl9pbnRlcm5hbF9hdXRvU2NhbGU7XG4gICAgcmV0dXJuIHsgX2ludGVybmFsX2xldmVsOiBsZXZlbCwgX2ludGVybmFsX2F1dG9TY2FsZTogYXV0b1NjYWxlIH07XG59XG5jbGFzcyBJbnZhbGlkYXRlTWFzayB7XG4gICAgY29uc3RydWN0b3IoZ2xvYmFsTGV2ZWwpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWRQYW5lcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19nbG9iYWxMZXZlbCA9IGdsb2JhbExldmVsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaW52YWxpZGF0ZVBhbmUocGFuZUluZGV4LCBpbnZhbGlkYXRpb24pIHtcbiAgICAgICAgY29uc3QgcHJldlZhbHVlID0gdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWRQYW5lcy5nZXQocGFuZUluZGV4KTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBtZXJnZVBhbmVJbnZhbGlkYXRpb24ocHJldlZhbHVlLCBpbnZhbGlkYXRpb24pO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZFBhbmVzLnNldChwYW5lSW5kZXgsIG5ld1ZhbHVlKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2Z1bGxJbnZhbGlkYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19nbG9iYWxMZXZlbDtcbiAgICB9XG4gICAgX2ludGVybmFsX2ludmFsaWRhdGVGb3JQYW5lKHBhbmVJbmRleCkge1xuICAgICAgICBjb25zdCBwYW5lSW52YWxpZGF0aW9uID0gdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWRQYW5lcy5nZXQocGFuZUluZGV4KTtcbiAgICAgICAgaWYgKHBhbmVJbnZhbGlkYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfbGV2ZWw6IHRoaXMuX3ByaXZhdGVfX2dsb2JhbExldmVsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX2ludGVybmFsX2xldmVsOiBNYXRoLm1heCh0aGlzLl9wcml2YXRlX19nbG9iYWxMZXZlbCwgcGFuZUludmFsaWRhdGlvbi5faW50ZXJuYWxfbGV2ZWwpLFxuICAgICAgICAgICAgX2ludGVybmFsX2F1dG9TY2FsZTogcGFuZUludmFsaWRhdGlvbi5faW50ZXJuYWxfYXV0b1NjYWxlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0Rml0Q29udGVudCgpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfc3RvcFRpbWVTY2FsZUFuaW1hdGlvbigpO1xuICAgICAgICAvLyBtb2RpZmllcyBib3RoIGJhciBzcGFjaW5nIGFuZCByaWdodCBvZmZzZXRcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucyA9IFt7IF9pbnRlcm5hbF90eXBlOiAwIC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuRml0Q29udGVudCAqLyB9XTtcbiAgICB9XG4gICAgX2ludGVybmFsX2FwcGx5UmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfc3RvcFRpbWVTY2FsZUFuaW1hdGlvbigpO1xuICAgICAgICAvLyBtb2RpZmllcyBib3RoIGJhciBzcGFjaW5nIGFuZCByaWdodCBvZmZzZXRcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucyA9IFt7IF9pbnRlcm5hbF90eXBlOiAxIC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuQXBwbHlSYW5nZSAqLywgX2ludGVybmFsX3ZhbHVlOiByYW5nZSB9XTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFRpbWVTY2FsZUFuaW1hdGlvbihhbmltYXRpb24pIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVtb3ZlVGltZVNjYWxlQW5pbWF0aW9uKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZUludmFsaWRhdGlvbnMucHVzaCh7IF9pbnRlcm5hbF90eXBlOiA1IC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuQW5pbWF0aW9uICovLCBfaW50ZXJuYWxfdmFsdWU6IGFuaW1hdGlvbiB9KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3N0b3BUaW1lU2NhbGVBbmltYXRpb24oKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbW92ZVRpbWVTY2FsZUFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGVJbnZhbGlkYXRpb25zLnB1c2goeyBfaW50ZXJuYWxfdHlwZTogNiAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLlN0b3BBbmltYXRpb24gKi8gfSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZXNldFRpbWVTY2FsZSgpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfc3RvcFRpbWVTY2FsZUFuaW1hdGlvbigpO1xuICAgICAgICAvLyBtb2RpZmllcyBib3RoIGJhciBzcGFjaW5nIGFuZCByaWdodCBvZmZzZXRcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucyA9IFt7IF9pbnRlcm5hbF90eXBlOiA0IC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuUmVzZXQgKi8gfV07XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRCYXJTcGFjaW5nKGJhclNwYWNpbmcpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfc3RvcFRpbWVTY2FsZUFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGVJbnZhbGlkYXRpb25zLnB1c2goeyBfaW50ZXJuYWxfdHlwZTogMiAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLkFwcGx5QmFyU3BhY2luZyAqLywgX2ludGVybmFsX3ZhbHVlOiBiYXJTcGFjaW5nIH0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UmlnaHRPZmZzZXQob2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3N0b3BUaW1lU2NhbGVBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucy5wdXNoKHsgX2ludGVybmFsX3R5cGU6IDMgLyogVGltZVNjYWxlSW52YWxpZGF0aW9uVHlwZS5BcHBseVJpZ2h0T2Zmc2V0ICovLCBfaW50ZXJuYWxfdmFsdWU6IG9mZnNldCB9KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3RpbWVTY2FsZUludmFsaWRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX190aW1lU2NhbGVJbnZhbGlkYXRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbWVyZ2Uob3RoZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCB0c0ludmFsaWRhdGlvbiBvZiBvdGhlci5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXBwbHlUaW1lU2NhbGVJbnZhbGlkYXRpb24odHNJbnZhbGlkYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2dsb2JhbExldmVsID0gTWF0aC5tYXgodGhpcy5fcHJpdmF0ZV9fZ2xvYmFsTGV2ZWwsIG90aGVyLl9wcml2YXRlX19nbG9iYWxMZXZlbCk7XG4gICAgICAgIG90aGVyLl9wcml2YXRlX19pbnZhbGlkYXRlZFBhbmVzLmZvckVhY2goKGludmFsaWRhdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX2ludmFsaWRhdGVQYW5lKGluZGV4LCBpbnZhbGlkYXRpb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIF9pbnRlcm5hbF9saWdodCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnZhbGlkYXRlTWFzaygyIC8qIEludmFsaWRhdGlvbkxldmVsLkxpZ2h0ICovKTtcbiAgICB9XG4gICAgc3RhdGljIF9pbnRlcm5hbF9mdWxsKCkge1xuICAgICAgICByZXR1cm4gbmV3IEludmFsaWRhdGVNYXNrKDMgLyogSW52YWxpZGF0aW9uTGV2ZWwuRnVsbCAqLyk7XG4gICAgfVxuICAgIF9wcml2YXRlX19hcHBseVRpbWVTY2FsZUludmFsaWRhdGlvbihpbnZhbGlkYXRpb24pIHtcbiAgICAgICAgc3dpdGNoIChpbnZhbGlkYXRpb24uX2ludGVybmFsX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLkZpdENvbnRlbnQgKi86XG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfc2V0Rml0Q29udGVudCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxIC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuQXBwbHlSYW5nZSAqLzpcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9hcHBseVJhbmdlKGludmFsaWRhdGlvbi5faW50ZXJuYWxfdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyIC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuQXBwbHlCYXJTcGFjaW5nICovOlxuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3NldEJhclNwYWNpbmcoaW52YWxpZGF0aW9uLl9pbnRlcm5hbF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDMgLyogVGltZVNjYWxlSW52YWxpZGF0aW9uVHlwZS5BcHBseVJpZ2h0T2Zmc2V0ICovOlxuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3NldFJpZ2h0T2Zmc2V0KGludmFsaWRhdGlvbi5faW50ZXJuYWxfdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0IC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuUmVzZXQgKi86XG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfcmVzZXRUaW1lU2NhbGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNSAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLkFuaW1hdGlvbiAqLzpcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRUaW1lU2NhbGVBbmltYXRpb24oaW52YWxpZGF0aW9uLl9pbnRlcm5hbF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDYgLyogVGltZVNjYWxlSW52YWxpZGF0aW9uVHlwZS5TdG9wQW5pbWF0aW9uICovOlxuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbW92ZVRpbWVTY2FsZUFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19yZW1vdmVUaW1lU2NhbGVBbmltYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucy5maW5kSW5kZXgoKGludikgPT4gaW52Ll9pbnRlcm5hbF90eXBlID09PSA1IC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuQW5pbWF0aW9uICovKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlSW52YWxpZGF0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIF9pbnRlcm5hbF9kZWNpbWFsU2lnbjogJy4nLFxuICAgIF9pbnRlcm5hbF9kZWNpbWFsU2lnbkZyYWN0aW9uYWw6ICdcXCcnLFxufTtcbi8qKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIG51bWJlciBvZiBjb252ZXJ0LlxuICogQHBhcmFtIGxlbmd0aCAtIFRoZSBsZW5ndGguIE11c3QgYmUgYmV0d2VlbiAwIGFuZCAxNiBpbmNsdXNpdmUuXG4gKi9cbmZ1bmN0aW9uIG51bWJlclRvU3RyaW5nV2l0aExlYWRpbmdaZXJvKHZhbHVlLCBsZW5ndGgpIHtcbiAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ24vYSc7XG4gICAgfVxuICAgIGlmICghaXNJbnRlZ2VyKGxlbmd0aCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBsZW5ndGgnKTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA8IDAgfHwgbGVuZ3RoID4gMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBsZW5ndGgnKTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgY29uc3QgZHVtbXlTdHJpbmcgPSAnMDAwMDAwMDAwMDAwMDAwMCc7XG4gICAgcmV0dXJuIChkdW1teVN0cmluZyArIHZhbHVlLnRvU3RyaW5nKCkpLnNsaWNlKC1sZW5ndGgpO1xufVxuY2xhc3MgUHJpY2VGb3JtYXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaWNlU2NhbGUsIG1pbk1vdmUpIHtcbiAgICAgICAgaWYgKCFtaW5Nb3ZlKSB7XG4gICAgICAgICAgICBtaW5Nb3ZlID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTnVtYmVyKHByaWNlU2NhbGUpIHx8ICFpc0ludGVnZXIocHJpY2VTY2FsZSkpIHtcbiAgICAgICAgICAgIHByaWNlU2NhbGUgPSAxMDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaWNlU2NhbGUgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGJhc2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID0gcHJpY2VTY2FsZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWluTW92ZSA9IG1pbk1vdmU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbGN1bGF0ZURlY2ltYWwoKTtcbiAgICB9XG4gICAgZm9ybWF0KHByaWNlKSB7XG4gICAgICAgIC8vIFxcdTIyMTIgaXMgdW5pY29kZSdzIG1pbnVzIHNpZ24gaHR0cHM6Ly93d3cuZmlsZWZvcm1hdC5pbmZvL2luZm8vdW5pY29kZS9jaGFyLzIyMTIvaW5kZXguaHRtXG4gICAgICAgIC8vIHdlIHNob3VsZCB1c2UgaXQgYmVjYXVzZSBpdCBoYXMgdGhlIHNhbWUgd2lkdGggYXMgcGx1cyBzaWduICtcbiAgICAgICAgY29uc3Qgc2lnbiA9IHByaWNlIDwgMCA/ICdcXHUyMjEyJyA6ICcnO1xuICAgICAgICBwcmljZSA9IE1hdGguYWJzKHByaWNlKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKyB0aGlzLl9wcml2YXRlX19mb3JtYXRBc0RlY2ltYWwocHJpY2UpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fY2FsY3VsYXRlRGVjaW1hbCgpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcy5fYmFzZSBpcyBwb3dlciBvZiAxMFxuICAgICAgICAvLyBmb3IgZG91YmxlIGZyYWN0aW9uYWwgX2ZyYWN0aW9uYWxMZW5ndGggaWYgZm9yIHRoZSBtYWluIGZyYWN0aW9uYWwgb25seVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fZnJhY3Rpb25hbExlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID4gMCAmJiB0aGlzLl9wcml2YXRlX19taW5Nb3ZlID4gMCkge1xuICAgICAgICAgICAgbGV0IGJhc2UgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlO1xuICAgICAgICAgICAgd2hpbGUgKGJhc2UgPiAxKSB7XG4gICAgICAgICAgICAgICAgYmFzZSAvPSAxMDtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9fZnJhY3Rpb25hbExlbmd0aCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19mb3JtYXRBc0RlY2ltYWwocHJpY2UpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUgLyB0aGlzLl9wcml2YXRlX19taW5Nb3ZlO1xuICAgICAgICBsZXQgaW50UGFydCA9IE1hdGguZmxvb3IocHJpY2UpO1xuICAgICAgICBsZXQgZnJhY1N0cmluZyA9ICcnO1xuICAgICAgICBjb25zdCBmcmFjTGVuZ3RoID0gdGhpcy5faW50ZXJuYWxfX2ZyYWN0aW9uYWxMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2ludGVybmFsX19mcmFjdGlvbmFsTGVuZ3RoIDogTmFOO1xuICAgICAgICBpZiAoYmFzZSA+IDEpIHtcbiAgICAgICAgICAgIGxldCBmcmFjUGFydCA9ICsoTWF0aC5yb3VuZChwcmljZSAqIGJhc2UpIC0gaW50UGFydCAqIGJhc2UpLnRvRml4ZWQodGhpcy5faW50ZXJuYWxfX2ZyYWN0aW9uYWxMZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGZyYWNQYXJ0ID49IGJhc2UpIHtcbiAgICAgICAgICAgICAgICBmcmFjUGFydCAtPSBiYXNlO1xuICAgICAgICAgICAgICAgIGludFBhcnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYWNTdHJpbmcgPSBmb3JtYXR0ZXJPcHRpb25zLl9pbnRlcm5hbF9kZWNpbWFsU2lnbiArIG51bWJlclRvU3RyaW5nV2l0aExlYWRpbmdaZXJvKCtmcmFjUGFydC50b0ZpeGVkKHRoaXMuX2ludGVybmFsX19mcmFjdGlvbmFsTGVuZ3RoKSAqIHRoaXMuX3ByaXZhdGVfX21pbk1vdmUsIGZyYWNMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gc2hvdWxkIHJvdW5kIGludCBwYXJ0IHRvIG1pbiBtb3ZlXG4gICAgICAgICAgICBpbnRQYXJ0ID0gTWF0aC5yb3VuZChpbnRQYXJ0ICogYmFzZSkgLyBiYXNlO1xuICAgICAgICAgICAgLy8gaWYgbWluIG1vdmUgPiAxLCBmcmFjdGlvbmFsIHBhcnQgaXMgYWx3YXlzID0gMFxuICAgICAgICAgICAgaWYgKGZyYWNMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZnJhY1N0cmluZyA9IGZvcm1hdHRlck9wdGlvbnMuX2ludGVybmFsX2RlY2ltYWxTaWduICsgbnVtYmVyVG9TdHJpbmdXaXRoTGVhZGluZ1plcm8oMCwgZnJhY0xlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludFBhcnQudG9GaXhlZCgwKSArIGZyYWNTdHJpbmc7XG4gICAgfVxufVxuXG5jbGFzcyBQZXJjZW50YWdlRm9ybWF0dGVyIGV4dGVuZHMgUHJpY2VGb3JtYXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaWNlU2NhbGUgPSAxMDApIHtcbiAgICAgICAgc3VwZXIocHJpY2VTY2FsZSk7XG4gICAgfVxuICAgIGZvcm1hdChwcmljZSkge1xuICAgICAgICByZXR1cm4gYCR7c3VwZXIuZm9ybWF0KHByaWNlKX0lYDtcbiAgICB9XG59XG5cbmNsYXNzIFZvbHVtZUZvcm1hdHRlciB7XG4gICAgY29uc3RydWN0b3IocHJlY2lzaW9uKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICB9XG4gICAgZm9ybWF0KHZvbCkge1xuICAgICAgICBsZXQgc2lnbiA9ICcnO1xuICAgICAgICBpZiAodm9sIDwgMCkge1xuICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIHZvbCA9IC12b2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZvbCA8IDk5NSkge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyB0aGlzLl9wcml2YXRlX19mb3JtYXROdW1iZXIodm9sKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2b2wgPCA5OTk5OTUpIHtcbiAgICAgICAgICAgIHJldHVybiBzaWduICsgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0TnVtYmVyKHZvbCAvIDEwMDApICsgJ0snO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZvbCA8IDk5OTk5OTk5NSkge1xuICAgICAgICAgICAgdm9sID0gMTAwMCAqIE1hdGgucm91bmQodm9sIC8gMTAwMCk7XG4gICAgICAgICAgICByZXR1cm4gc2lnbiArIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdE51bWJlcih2b2wgLyAxMDAwMDAwKSArICdNJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZvbCA9IDEwMDAwMDAgKiBNYXRoLnJvdW5kKHZvbCAvIDEwMDAwMDApO1xuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyB0aGlzLl9wcml2YXRlX19mb3JtYXROdW1iZXIodm9sIC8gMTAwMDAwMDAwMCkgKyAnQic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2Zvcm1hdE51bWJlcih2YWx1ZSkge1xuICAgICAgICBsZXQgcmVzO1xuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gTWF0aC5wb3coMTAsIHRoaXMuX3ByaXZhdGVfX3ByZWNpc2lvbik7XG4gICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIHByaWNlU2NhbGUpIC8gcHJpY2VTY2FsZTtcbiAgICAgICAgaWYgKHZhbHVlID49IDFlLTE1ICYmIHZhbHVlIDwgMSkge1xuICAgICAgICAgICAgcmVzID0gdmFsdWUudG9GaXhlZCh0aGlzLl9wcml2YXRlX19wcmVjaXNpb24pLnJlcGxhY2UoL1xcLj8wKyQvLCAnJyk7IC8vIHJlZ2V4IHJlbW92ZXMgdHJhaWxpbmcgemVyb2VzXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXMucmVwbGFjZSgvKFxcLlsxLTldKikwKyQvLCAoZSwgcDEpID0+IHAxKTtcbiAgICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zLCBjb21wbGV4aXR5XG5mdW5jdGlvbiB3YWxrTGluZShyZW5kZXJpbmdTY29wZSwgaXRlbXMsIGxpbmVUeXBlLCB2aXNpYmxlUmFuZ2UsIGJhcldpZHRoLCBcbi8vIHRoZSB2YWx1ZXMgcmV0dXJuZWQgYnkgc3R5bGVHZXR0ZXIgYXJlIGNvbXBhcmVkIHVzaW5nIHRoZSBvcGVyYXRvciAhPT0sXG4vLyBzbyBpZiBzdHlsZUdldHRlciByZXR1cm5zIG9iamVjdHMsIHRoZW4gc3R5bGVHZXR0ZXIgc2hvdWxkIHJldHVybiB0aGUgc2FtZSBvYmplY3QgZm9yIGVxdWFsIHN0eWxlc1xuc3R5bGVHZXR0ZXIsIGZpbmlzaFN0eWxlZEFyZWEpIHtcbiAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwIHx8IHZpc2libGVSYW5nZS5mcm9tID49IGl0ZW1zLmxlbmd0aCB8fCB2aXNpYmxlUmFuZ2UudG8gPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgY29udGV4dDogY3R4LCBob3Jpem9udGFsUGl4ZWxSYXRpbywgdmVydGljYWxQaXhlbFJhdGlvIH0gPSByZW5kZXJpbmdTY29wZTtcbiAgICBjb25zdCBmaXJzdEl0ZW0gPSBpdGVtc1t2aXNpYmxlUmFuZ2UuZnJvbV07XG4gICAgbGV0IGN1cnJlbnRTdHlsZSA9IHN0eWxlR2V0dGVyKHJlbmRlcmluZ1Njb3BlLCBmaXJzdEl0ZW0pO1xuICAgIGxldCBjdXJyZW50U3R5bGVGaXJzdEl0ZW0gPSBmaXJzdEl0ZW07XG4gICAgaWYgKHZpc2libGVSYW5nZS50byAtIHZpc2libGVSYW5nZS5mcm9tIDwgMikge1xuICAgICAgICBjb25zdCBoYWxmQmFyV2lkdGggPSBiYXJXaWR0aCAvIDI7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29uc3QgaXRlbTEgPSB7IF9pbnRlcm5hbF94OiBmaXJzdEl0ZW0uX2ludGVybmFsX3ggLSBoYWxmQmFyV2lkdGgsIF9pbnRlcm5hbF95OiBmaXJzdEl0ZW0uX2ludGVybmFsX3kgfTtcbiAgICAgICAgY29uc3QgaXRlbTIgPSB7IF9pbnRlcm5hbF94OiBmaXJzdEl0ZW0uX2ludGVybmFsX3ggKyBoYWxmQmFyV2lkdGgsIF9pbnRlcm5hbF95OiBmaXJzdEl0ZW0uX2ludGVybmFsX3kgfTtcbiAgICAgICAgY3R4Lm1vdmVUbyhpdGVtMS5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvLCBpdGVtMS5faW50ZXJuYWxfeSAqIHZlcnRpY2FsUGl4ZWxSYXRpbyk7XG4gICAgICAgIGN0eC5saW5lVG8oaXRlbTIuX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbywgaXRlbTIuX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICBmaW5pc2hTdHlsZWRBcmVhKHJlbmRlcmluZ1Njb3BlLCBjdXJyZW50U3R5bGUsIGl0ZW0xLCBpdGVtMik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBjaGFuZ2VTdHlsZSA9IChuZXdTdHlsZSwgY3VycmVudEl0ZW0pID0+IHtcbiAgICAgICAgICAgIGZpbmlzaFN0eWxlZEFyZWEocmVuZGVyaW5nU2NvcGUsIGN1cnJlbnRTdHlsZSwgY3VycmVudFN0eWxlRmlyc3RJdGVtLCBjdXJyZW50SXRlbSk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdXJyZW50U3R5bGUgPSBuZXdTdHlsZTtcbiAgICAgICAgICAgIGN1cnJlbnRTdHlsZUZpcnN0SXRlbSA9IGN1cnJlbnRJdGVtO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgY3VycmVudEl0ZW0gPSBjdXJyZW50U3R5bGVGaXJzdEl0ZW07XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhmaXJzdEl0ZW0uX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbywgZmlyc3RJdGVtLl9pbnRlcm5hbF95ICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHZpc2libGVSYW5nZS5mcm9tICsgMTsgaSA8IHZpc2libGVSYW5nZS50bzsgKytpKSB7XG4gICAgICAgICAgICBjdXJyZW50SXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3QgaXRlbVN0eWxlID0gc3R5bGVHZXR0ZXIocmVuZGVyaW5nU2NvcGUsIGN1cnJlbnRJdGVtKTtcbiAgICAgICAgICAgIHN3aXRjaCAobGluZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDAgLyogTGluZVR5cGUuU2ltcGxlICovOlxuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKGN1cnJlbnRJdGVtLl9pbnRlcm5hbF94ICogaG9yaXpvbnRhbFBpeGVsUmF0aW8sIGN1cnJlbnRJdGVtLl9pbnRlcm5hbF95ICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIExpbmVUeXBlLldpdGhTdGVwcyAqLzpcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhjdXJyZW50SXRlbS5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvLCBpdGVtc1tpIC0gMV0uX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVN0eWxlICE9PSBjdXJyZW50U3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVN0eWxlKGl0ZW1TdHlsZSwgY3VycmVudEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhjdXJyZW50SXRlbS5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvLCBpdGVtc1tpIC0gMV0uX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oY3VycmVudEl0ZW0uX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbywgY3VycmVudEl0ZW0uX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIgLyogTGluZVR5cGUuQ3VydmVkICovOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtjcDEsIGNwMl0gPSBnZXRDb250cm9sUG9pbnRzKGl0ZW1zLCBpIC0gMSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGNwMS5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvLCBjcDEuX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8sIGNwMi5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvLCBjcDIuX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8sIGN1cnJlbnRJdGVtLl9pbnRlcm5hbF94ICogaG9yaXpvbnRhbFBpeGVsUmF0aW8sIGN1cnJlbnRJdGVtLl9pbnRlcm5hbF95ICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpbmVUeXBlICE9PSAxIC8qIExpbmVUeXBlLldpdGhTdGVwcyAqLyAmJiBpdGVtU3R5bGUgIT09IGN1cnJlbnRTdHlsZSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZVN0eWxlKGl0ZW1TdHlsZSwgY3VycmVudEl0ZW0pO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oY3VycmVudEl0ZW0uX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbywgY3VycmVudEl0ZW0uX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50U3R5bGVGaXJzdEl0ZW0gIT09IGN1cnJlbnRJdGVtIHx8IGN1cnJlbnRTdHlsZUZpcnN0SXRlbSA9PT0gY3VycmVudEl0ZW0gJiYgbGluZVR5cGUgPT09IDEgLyogTGluZVR5cGUuV2l0aFN0ZXBzICovKSB7XG4gICAgICAgICAgICBmaW5pc2hTdHlsZWRBcmVhKHJlbmRlcmluZ1Njb3BlLCBjdXJyZW50U3R5bGUsIGN1cnJlbnRTdHlsZUZpcnN0SXRlbSwgY3VycmVudEl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgY3VydmVUZW5zaW9uID0gNjtcbmZ1bmN0aW9uIHN1YnRyYWN0KHAxLCBwMikge1xuICAgIHJldHVybiB7IF9pbnRlcm5hbF94OiBwMS5faW50ZXJuYWxfeCAtIHAyLl9pbnRlcm5hbF94LCBfaW50ZXJuYWxfeTogcDEuX2ludGVybmFsX3kgLSBwMi5faW50ZXJuYWxfeSB9O1xufVxuZnVuY3Rpb24gYWRkKHAxLCBwMikge1xuICAgIHJldHVybiB7IF9pbnRlcm5hbF94OiBwMS5faW50ZXJuYWxfeCArIHAyLl9pbnRlcm5hbF94LCBfaW50ZXJuYWxfeTogcDEuX2ludGVybmFsX3kgKyBwMi5faW50ZXJuYWxfeSB9O1xufVxuZnVuY3Rpb24gZGl2aWRlKHAxLCBuKSB7XG4gICAgcmV0dXJuIHsgX2ludGVybmFsX3g6IHAxLl9pbnRlcm5hbF94IC8gbiwgX2ludGVybmFsX3k6IHAxLl9pbnRlcm5hbF95IC8gbiB9O1xufVxuLyoqXG4gKiBAcmV0dXJucyBUd28gY29udHJvbCBwb2ludHMgdGhhdCBjYW4gYmUgdXNlZCBhcyBhcmd1bWVudHMgdG8ge0BsaW5rIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5iZXppZXJDdXJ2ZVRvfSB0byBkcmF3IGEgY3VydmVkIGxpbmUgYmV0d2VlbiBgcG9pbnRzW2Zyb21Qb2ludEluZGV4XWAgYW5kIGBwb2ludHNbdG9Qb2ludEluZGV4XWAuXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRyb2xQb2ludHMocG9pbnRzLCBmcm9tUG9pbnRJbmRleCwgdG9Qb2ludEluZGV4KSB7XG4gICAgY29uc3QgYmVmb3JlRnJvbVBvaW50SW5kZXggPSBNYXRoLm1heCgwLCBmcm9tUG9pbnRJbmRleCAtIDEpO1xuICAgIGNvbnN0IGFmdGVyVG9Qb2ludEluZGV4ID0gTWF0aC5taW4ocG9pbnRzLmxlbmd0aCAtIDEsIHRvUG9pbnRJbmRleCArIDEpO1xuICAgIGNvbnN0IGNwMSA9IGFkZChwb2ludHNbZnJvbVBvaW50SW5kZXhdLCBkaXZpZGUoc3VidHJhY3QocG9pbnRzW3RvUG9pbnRJbmRleF0sIHBvaW50c1tiZWZvcmVGcm9tUG9pbnRJbmRleF0pLCBjdXJ2ZVRlbnNpb24pKTtcbiAgICBjb25zdCBjcDIgPSBzdWJ0cmFjdChwb2ludHNbdG9Qb2ludEluZGV4XSwgZGl2aWRlKHN1YnRyYWN0KHBvaW50c1thZnRlclRvUG9pbnRJbmRleF0sIHBvaW50c1tmcm9tUG9pbnRJbmRleF0pLCBjdXJ2ZVRlbnNpb24pKTtcbiAgICByZXR1cm4gW2NwMSwgY3AyXTtcbn1cblxuZnVuY3Rpb24gZmluaXNoU3R5bGVkQXJlYSQxKGJhc2VMZXZlbENvb3JkaW5hdGUsIHNjb3BlLCBzdHlsZSwgYXJlYUZpcnN0SXRlbSwgbmV3QXJlYUZpcnN0SXRlbSkge1xuICAgIGNvbnN0IHsgY29udGV4dCwgaG9yaXpvbnRhbFBpeGVsUmF0aW8sIHZlcnRpY2FsUGl4ZWxSYXRpbyB9ID0gc2NvcGU7XG4gICAgY29udGV4dC5saW5lVG8obmV3QXJlYUZpcnN0SXRlbS5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvLCBiYXNlTGV2ZWxDb29yZGluYXRlICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LmxpbmVUbyhhcmVhRmlyc3RJdGVtLl9pbnRlcm5hbF94ICogaG9yaXpvbnRhbFBpeGVsUmF0aW8sIGJhc2VMZXZlbENvb3JkaW5hdGUgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBzdHlsZTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbn1cbmNsYXNzIFBhbmVSZW5kZXJlckFyZWFCYXNlIGV4dGVuZHMgQml0bWFwQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fZGF0YSA9IG51bGw7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXREYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2RhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2RyYXdJbXBsKHJlbmRlcmluZ1Njb3BlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX19kYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxfaXRlbXM6IGl0ZW1zLCBfaW50ZXJuYWxfdmlzaWJsZVJhbmdlOiB2aXNpYmxlUmFuZ2UsIF9pbnRlcm5hbF9iYXJXaWR0aDogYmFyV2lkdGgsIF9pbnRlcm5hbF9saW5lV2lkdGg6IGxpbmVXaWR0aCwgX2ludGVybmFsX2xpbmVTdHlsZTogbGluZVN0eWxlLCBfaW50ZXJuYWxfbGluZVR5cGU6IGxpbmVUeXBlIH0gPSB0aGlzLl9pbnRlcm5hbF9fZGF0YTtcbiAgICAgICAgY29uc3QgYmFzZUxldmVsQ29vcmRpbmF0ZSA9IChfYSA9IHRoaXMuX2ludGVybmFsX19kYXRhLl9pbnRlcm5hbF9iYXNlTGV2ZWxDb29yZGluYXRlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAodGhpcy5faW50ZXJuYWxfX2RhdGEuX2ludGVybmFsX2ludmVydEZpbGxlZEFyZWEgPyAwIDogcmVuZGVyaW5nU2NvcGUubWVkaWFTaXplLmhlaWdodCk7XG4gICAgICAgIGlmICh2aXNpYmxlUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdHggPSByZW5kZXJpbmdTY29wZS5jb250ZXh0O1xuICAgICAgICBjdHgubGluZUNhcCA9ICdidXR0JztcbiAgICAgICAgY3R4LmxpbmVKb2luID0gJ3JvdW5kJztcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgc2V0TGluZVN0eWxlKGN0eCwgbGluZVN0eWxlKTtcbiAgICAgICAgLy8gd2FsayBsaW5lcyB3aXRoIHdpZHRoPTEgdG8gaGF2ZSBtb3JlIGFjY3VyYXRlIGdyYWRpZW50J3MgZmlsbGluZ1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgd2Fsa0xpbmUocmVuZGVyaW5nU2NvcGUsIGl0ZW1zLCBsaW5lVHlwZSwgdmlzaWJsZVJhbmdlLCBiYXJXaWR0aCwgdGhpcy5faW50ZXJuYWxfX2ZpbGxTdHlsZS5iaW5kKHRoaXMpLCBmaW5pc2hTdHlsZWRBcmVhJDEuYmluZChudWxsLCBiYXNlTGV2ZWxDb29yZGluYXRlKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluVmFsLCBtYXhWYWwpIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIG1pblZhbCksIG1heFZhbCk7XG59XG5mdW5jdGlvbiBpc0Jhc2VEZWNpbWFsKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGN1cnJlbnQgPSB2YWx1ZTsgY3VycmVudCA+IDE7IGN1cnJlbnQgLz0gMTApIHtcbiAgICAgICAgaWYgKChjdXJyZW50ICUgMTApICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBncmVhdGVyT3JFcXVhbCh4MSwgeDIsIGVwc2lsb24pIHtcbiAgICByZXR1cm4gKHgyIC0geDEpIDw9IGVwc2lsb247XG59XG5mdW5jdGlvbiBlcXVhbCh4MSwgeDIsIGVwc2lsb24pIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeDEgLSB4MikgPCBlcHNpbG9uO1xufVxuLy8gV2UgY2FuJ3QgdXNlIE1hdGgubWluKC4uLmFycikgYmVjYXVzZSB0aGF0IHdvdWxkIG9ubHkgc3VwcG9ydCBhcnJheXMgc2hvcnRlciB0aGFuIDY1NTM2IGl0ZW1zLlxuZnVuY3Rpb24gbWluKGFycikge1xuICAgIGlmIChhcnIubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBFcnJvcignYXJyYXkgaXMgZW1wdHknKTtcbiAgICB9XG4gICAgbGV0IG1pblZhbCA9IGFyclswXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYXJyW2ldIDwgbWluVmFsKSB7XG4gICAgICAgICAgICBtaW5WYWwgPSBhcnJbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pblZhbDtcbn1cbmZ1bmN0aW9uIGNlaWxlZEV2ZW4oeCkge1xuICAgIGNvbnN0IGNlaWxlZCA9IE1hdGguY2VpbCh4KTtcbiAgICByZXR1cm4gKGNlaWxlZCAlIDIgIT09IDApID8gY2VpbGVkIC0gMSA6IGNlaWxlZDtcbn1cbmZ1bmN0aW9uIGNlaWxlZE9kZCh4KSB7XG4gICAgY29uc3QgY2VpbGVkID0gTWF0aC5jZWlsKHgpO1xuICAgIHJldHVybiAoY2VpbGVkICUgMiA9PT0gMCkgPyBjZWlsZWQgLSAxIDogY2VpbGVkO1xufVxuXG5jbGFzcyBHcmFkaWVudFN0eWxlQ2FjaGUge1xuICAgIF9pbnRlcm5hbF9nZXQoc2NvcGUsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBjYWNoZWRQYXJhbXMgPSB0aGlzLl9wcml2YXRlX19wYXJhbXM7XG4gICAgICAgIGNvbnN0IHsgX2ludGVybmFsX3RvcENvbG9yMTogdG9wQ29sb3IxLCBfaW50ZXJuYWxfdG9wQ29sb3IyOiB0b3BDb2xvcjIsIF9pbnRlcm5hbF9ib3R0b21Db2xvcjE6IGJvdHRvbUNvbG9yMSwgX2ludGVybmFsX2JvdHRvbUNvbG9yMjogYm90dG9tQ29sb3IyLCBfaW50ZXJuYWxfYm90dG9tOiBib3R0b20sIF9pbnRlcm5hbF9iYXNlTGV2ZWxDb29yZGluYXRlOiBiYXNlTGV2ZWxDb29yZGluYXRlIH0gPSBwYXJhbXM7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19jYWNoZWRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBjYWNoZWRQYXJhbXMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgY2FjaGVkUGFyYW1zLl9pbnRlcm5hbF90b3BDb2xvcjEgIT09IHRvcENvbG9yMSB8fFxuICAgICAgICAgICAgY2FjaGVkUGFyYW1zLl9pbnRlcm5hbF90b3BDb2xvcjIgIT09IHRvcENvbG9yMiB8fFxuICAgICAgICAgICAgY2FjaGVkUGFyYW1zLl9pbnRlcm5hbF9ib3R0b21Db2xvcjEgIT09IGJvdHRvbUNvbG9yMSB8fFxuICAgICAgICAgICAgY2FjaGVkUGFyYW1zLl9pbnRlcm5hbF9ib3R0b21Db2xvcjIgIT09IGJvdHRvbUNvbG9yMiB8fFxuICAgICAgICAgICAgY2FjaGVkUGFyYW1zLl9pbnRlcm5hbF9iYXNlTGV2ZWxDb29yZGluYXRlICE9PSBiYXNlTGV2ZWxDb29yZGluYXRlIHx8XG4gICAgICAgICAgICBjYWNoZWRQYXJhbXMuX2ludGVybmFsX2JvdHRvbSAhPT0gYm90dG9tKSB7XG4gICAgICAgICAgICBjb25zdCBncmFkaWVudCA9IHNjb3BlLmNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgMCwgYm90dG9tKTtcbiAgICAgICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCB0b3BDb2xvcjEpO1xuICAgICAgICAgICAgaWYgKGJhc2VMZXZlbENvb3JkaW5hdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VsaW5lUGVyY2VudCA9IGNsYW1wKGJhc2VMZXZlbENvb3JkaW5hdGUgKiBzY29wZS52ZXJ0aWNhbFBpeGVsUmF0aW8gLyBib3R0b20sIDAsIDEpO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcChiYXNlbGluZVBlcmNlbnQsIHRvcENvbG9yMik7XG4gICAgICAgICAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKGJhc2VsaW5lUGVyY2VudCwgYm90dG9tQ29sb3IxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCBib3R0b21Db2xvcjIpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FjaGVkVmFsdWUgPSBncmFkaWVudDtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2FjaGVkVmFsdWU7XG4gICAgfVxufVxuXG5jbGFzcyBQYW5lUmVuZGVyZXJBcmVhIGV4dGVuZHMgUGFuZVJlbmRlcmVyQXJlYUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19maWxsQ2FjaGUgPSBuZXcgR3JhZGllbnRTdHlsZUNhY2hlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZmlsbFN0eWxlKHJlbmRlcmluZ1Njb3BlLCBpdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19maWxsQ2FjaGUuX2ludGVybmFsX2dldChyZW5kZXJpbmdTY29wZSwge1xuICAgICAgICAgICAgX2ludGVybmFsX3RvcENvbG9yMTogaXRlbS5faW50ZXJuYWxfdG9wQ29sb3IsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdG9wQ29sb3IyOiAnJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ib3R0b21Db2xvcjE6ICcnLFxuICAgICAgICAgICAgX2ludGVybmFsX2JvdHRvbUNvbG9yMjogaXRlbS5faW50ZXJuYWxfYm90dG9tQ29sb3IsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYm90dG9tOiByZW5kZXJpbmdTY29wZS5iaXRtYXBTaXplLmhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3U2VyaWVzUG9pbnRNYXJrZXJzKHJlbmRlcmluZ1Njb3BlLCBpdGVtcywgcG9pbnRNYXJrZXJzUmFkaXVzLCB2aXNpYmxlUmFuZ2UsIFxuLy8gdGhlIHZhbHVlcyByZXR1cm5lZCBieSBzdHlsZUdldHRlciBhcmUgY29tcGFyZWQgdXNpbmcgdGhlIG9wZXJhdG9yICE9PSxcbi8vIHNvIGlmIHN0eWxlR2V0dGVyIHJldHVybnMgb2JqZWN0cywgdGhlbiBzdHlsZUdldHRlciBzaG91bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBmb3IgZXF1YWwgc3R5bGVzXG5zdHlsZUdldHRlcikge1xuICAgIGNvbnN0IHsgaG9yaXpvbnRhbFBpeGVsUmF0aW8sIHZlcnRpY2FsUGl4ZWxSYXRpbywgY29udGV4dCB9ID0gcmVuZGVyaW5nU2NvcGU7XG4gICAgbGV0IHByZXZTdHlsZSA9IG51bGw7XG4gICAgY29uc3QgdGlja1dpZHRoID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihob3Jpem9udGFsUGl4ZWxSYXRpbykpO1xuICAgIGNvbnN0IGNvcnJlY3Rpb24gPSAodGlja1dpZHRoICUgMikgLyAyO1xuICAgIGNvbnN0IHJhZGl1cyA9IHBvaW50TWFya2Vyc1JhZGl1cyAqIHZlcnRpY2FsUGl4ZWxSYXRpbyArIGNvcnJlY3Rpb247XG4gICAgZm9yIChsZXQgaSA9IHZpc2libGVSYW5nZS50byAtIDE7IGkgPj0gdmlzaWJsZVJhbmdlLmZyb207IC0taSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IGl0ZW1zW2ldO1xuICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gc3R5bGVHZXR0ZXIocmVuZGVyaW5nU2NvcGUsIHBvaW50KTtcbiAgICAgICAgICAgIGlmIChzdHlsZSAhPT0gcHJldlN0eWxlKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldlN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHN0eWxlO1xuICAgICAgICAgICAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IE1hdGgucm91bmQocG9pbnQuX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbykgKyBjb3JyZWN0aW9uOyAvLyBjb3JyZWN0IHggY29vcmRpbmF0ZSBvbmx5XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gcG9pbnQuX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW87XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnRleHQuZmlsbCgpO1xufVxuXG5mdW5jdGlvbiBmaW5pc2hTdHlsZWRBcmVhKHNjb3BlLCBzdHlsZSkge1xuICAgIGNvbnN0IGN0eCA9IHNjb3BlLmNvbnRleHQ7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGU7XG4gICAgY3R4LnN0cm9rZSgpO1xufVxuY2xhc3MgUGFuZVJlbmRlcmVyTGluZUJhc2UgZXh0ZW5kcyBCaXRtYXBDb29yZGluYXRlc1BhbmVSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19kYXRhID0gbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldERhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZHJhd0ltcGwocmVuZGVyaW5nU2NvcGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX19kYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxfaXRlbXM6IGl0ZW1zLCBfaW50ZXJuYWxfdmlzaWJsZVJhbmdlOiB2aXNpYmxlUmFuZ2UsIF9pbnRlcm5hbF9iYXJXaWR0aDogYmFyV2lkdGgsIF9pbnRlcm5hbF9saW5lVHlwZTogbGluZVR5cGUsIF9pbnRlcm5hbF9saW5lV2lkdGg6IGxpbmVXaWR0aCwgX2ludGVybmFsX2xpbmVTdHlsZTogbGluZVN0eWxlLCBfaW50ZXJuYWxfcG9pbnRNYXJrZXJzUmFkaXVzOiBwb2ludE1hcmtlcnNSYWRpdXMgfSA9IHRoaXMuX2ludGVybmFsX19kYXRhO1xuICAgICAgICBpZiAodmlzaWJsZVJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3R4ID0gcmVuZGVyaW5nU2NvcGUuY29udGV4dDtcbiAgICAgICAgY3R4LmxpbmVDYXAgPSAnYnV0dCc7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGggKiByZW5kZXJpbmdTY29wZS52ZXJ0aWNhbFBpeGVsUmF0aW87XG4gICAgICAgIHNldExpbmVTdHlsZShjdHgsIGxpbmVTdHlsZSk7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9ICdyb3VuZCc7XG4gICAgICAgIGNvbnN0IHN0eWxlR2V0dGVyID0gdGhpcy5faW50ZXJuYWxfX3N0cm9rZVN0eWxlLmJpbmQodGhpcyk7XG4gICAgICAgIGlmIChsaW5lVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3YWxrTGluZShyZW5kZXJpbmdTY29wZSwgaXRlbXMsIGxpbmVUeXBlLCB2aXNpYmxlUmFuZ2UsIGJhcldpZHRoLCBzdHlsZUdldHRlciwgZmluaXNoU3R5bGVkQXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50TWFya2Vyc1JhZGl1cykge1xuICAgICAgICAgICAgZHJhd1Nlcmllc1BvaW50TWFya2VycyhyZW5kZXJpbmdTY29wZSwgaXRlbXMsIHBvaW50TWFya2Vyc1JhZGl1cywgdmlzaWJsZVJhbmdlLCBzdHlsZUdldHRlcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFBhbmVSZW5kZXJlckxpbmUgZXh0ZW5kcyBQYW5lUmVuZGVyZXJMaW5lQmFzZSB7XG4gICAgX2ludGVybmFsX19zdHJva2VTdHlsZShyZW5kZXJpbmdTY29wZSwgaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5faW50ZXJuYWxfbGluZUNvbG9yO1xuICAgIH1cbn1cblxuLyoqXG4gKiBCaW5hcnkgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHR3byBhcmd1bWVudHMgKHRoZSBmaXJzdCBvZiB0aGUgdHlwZSBvZiBhcnJheSBlbGVtZW50cywgYW5kIHRoZSBzZWNvbmQgaXMgYWx3YXlzIHZhbCksIGFuZCByZXR1cm5zIGEgdmFsdWUgY29udmVydGlibGUgdG8gYm9vbC5cbiAqIFRoZSB2YWx1ZSByZXR1cm5lZCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZmlyc3QgYXJndW1lbnQgaXMgY29uc2lkZXJlZCB0byBnbyBiZWZvcmUgdGhlIHNlY29uZC5cbiAqIFRoZSBmdW5jdGlvbiBzaGFsbCBub3QgbW9kaWZ5IGFueSBvZiBpdHMgYXJndW1lbnRzLlxuICovXG5mdW5jdGlvbiBib3VuZENvbXBhcmUobG93ZXIsIGFyciwgdmFsdWUsIGNvbXBhcmUsIHN0YXJ0ID0gMCwgdG8gPSBhcnIubGVuZ3RoKSB7XG4gICAgbGV0IGNvdW50ID0gdG8gLSBzdGFydDtcbiAgICB3aGlsZSAoMCA8IGNvdW50KSB7XG4gICAgICAgIGNvbnN0IGNvdW50MiA9IChjb3VudCA+PiAxKTtcbiAgICAgICAgY29uc3QgbWlkID0gc3RhcnQgKyBjb3VudDI7XG4gICAgICAgIGlmIChjb21wYXJlKGFyclttaWRdLCB2YWx1ZSkgPT09IGxvd2VyKSB7XG4gICAgICAgICAgICBzdGFydCA9IG1pZCArIDE7XG4gICAgICAgICAgICBjb3VudCAtPSBjb3VudDIgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY291bnQgPSBjb3VudDI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0O1xufVxuY29uc3QgbG93ZXJCb3VuZCA9IGJvdW5kQ29tcGFyZS5iaW5kKG51bGwsIHRydWUpO1xuY29uc3QgdXBwZXJCb3VuZCA9IGJvdW5kQ29tcGFyZS5iaW5kKG51bGwsIGZhbHNlKTtcblxuZnVuY3Rpb24gbG93ZXJCb3VuZEl0ZW1zQ29tcGFyZShpdGVtLCB0aW1lKSB7XG4gICAgcmV0dXJuIGl0ZW0uX2ludGVybmFsX3RpbWUgPCB0aW1lO1xufVxuZnVuY3Rpb24gdXBwZXJCb3VuZEl0ZW1zQ29tcGFyZShpdGVtLCB0aW1lKSB7XG4gICAgcmV0dXJuIHRpbWUgPCBpdGVtLl9pbnRlcm5hbF90aW1lO1xufVxuZnVuY3Rpb24gdmlzaWJsZVRpbWVkVmFsdWVzKGl0ZW1zLCByYW5nZSwgZXh0ZW5kZWRSYW5nZSkge1xuICAgIGNvbnN0IGZpcnN0QmFyID0gcmFuZ2UuX2ludGVybmFsX2xlZnQoKTtcbiAgICBjb25zdCBsYXN0QmFyID0gcmFuZ2UuX2ludGVybmFsX3JpZ2h0KCk7XG4gICAgY29uc3QgZnJvbSA9IGxvd2VyQm91bmQoaXRlbXMsIGZpcnN0QmFyLCBsb3dlckJvdW5kSXRlbXNDb21wYXJlKTtcbiAgICBjb25zdCB0byA9IHVwcGVyQm91bmQoaXRlbXMsIGxhc3RCYXIsIHVwcGVyQm91bmRJdGVtc0NvbXBhcmUpO1xuICAgIGlmICghZXh0ZW5kZWRSYW5nZSkge1xuICAgICAgICByZXR1cm4geyBmcm9tLCB0byB9O1xuICAgIH1cbiAgICBsZXQgZXh0ZW5kZWRGcm9tID0gZnJvbTtcbiAgICBsZXQgZXh0ZW5kZWRUbyA9IHRvO1xuICAgIGlmIChmcm9tID4gMCAmJiBmcm9tIDwgaXRlbXMubGVuZ3RoICYmIGl0ZW1zW2Zyb21dLl9pbnRlcm5hbF90aW1lID49IGZpcnN0QmFyKSB7XG4gICAgICAgIGV4dGVuZGVkRnJvbSA9IGZyb20gLSAxO1xuICAgIH1cbiAgICBpZiAodG8gPiAwICYmIHRvIDwgaXRlbXMubGVuZ3RoICYmIGl0ZW1zW3RvIC0gMV0uX2ludGVybmFsX3RpbWUgPD0gbGFzdEJhcikge1xuICAgICAgICBleHRlbmRlZFRvID0gdG8gKyAxO1xuICAgIH1cbiAgICByZXR1cm4geyBmcm9tOiBleHRlbmRlZEZyb20sIHRvOiBleHRlbmRlZFRvIH07XG59XG5cbmNsYXNzIFNlcmllc1BhbmVWaWV3QmFzZSB7XG4gICAgY29uc3RydWN0b3Ioc2VyaWVzLCBtb2RlbCwgZXh0ZW5kZWRWaXNpYmxlUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2RhdGFJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19vcHRpb25zSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9faXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2l0ZW1zVmlzaWJsZVJhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX3NlcmllcyA9IHNlcmllcztcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX21vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2V4dGVuZGVkVmlzaWJsZVJhbmdlID0gZXh0ZW5kZWRWaXNpYmxlUmFuZ2U7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGUodXBkYXRlVHlwZSkge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodXBkYXRlVHlwZSA9PT0gJ2RhdGEnKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9fZGF0YUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlVHlwZSA9PT0gJ29wdGlvbnMnKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9fb3B0aW9uc0ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVuZGVyZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfdmlzaWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tYWtlVmFsaWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9pbnRlcm5hbF9fcmVuZGVyZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fdXBkYXRlT3B0aW9ucygpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2l0ZW1zID0gdGhpcy5faW50ZXJuYWxfX2l0ZW1zLm1hcCgoaXRlbSkgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaXRlbSksIHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2JhckNvbG9yZXIoKS5faW50ZXJuYWxfYmFyU3R5bGUoaXRlbS5faW50ZXJuYWxfdGltZSkpKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fY2xlYXJWaXNpYmxlUmFuZ2UoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSA9IG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX19tYWtlVmFsaWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9fZGF0YUludmFsaWRhdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9fZmlsbFJhd1BvaW50cygpO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfX2RhdGFJbnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9fb3B0aW9uc0ludmFsaWRhdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9fdXBkYXRlT3B0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfX29wdGlvbnNJbnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9faW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21ha2VWYWxpZEltcGwoKTtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX19pbnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19tYWtlVmFsaWRJbXBsKCkge1xuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpO1xuICAgICAgICBjb25zdCB0aW1lU2NhbGUgPSB0aGlzLl9pbnRlcm5hbF9fbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fY2xlYXJWaXNpYmxlUmFuZ2UoKTtcbiAgICAgICAgaWYgKHRpbWVTY2FsZS5faW50ZXJuYWxfaXNFbXB0eSgpIHx8IHByaWNlU2NhbGUuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpc2libGVCYXJzID0gdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgaWYgKHZpc2libGVCYXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2JhcnMoKS5faW50ZXJuYWxfc2l6ZSgpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2ZpcnN0VmFsdWUoKTtcbiAgICAgICAgaWYgKGZpcnN0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF9faXRlbXNWaXNpYmxlUmFuZ2UgPSB2aXNpYmxlVGltZWRWYWx1ZXModGhpcy5faW50ZXJuYWxfX2l0ZW1zLCB2aXNpYmxlQmFycywgdGhpcy5fcHJpdmF0ZV9fZXh0ZW5kZWRWaXNpYmxlUmFuZ2UpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fY29udmVydFRvQ29vcmRpbmF0ZXMocHJpY2VTY2FsZSwgdGltZVNjYWxlLCBmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19wcmVwYXJlUmVuZGVyZXJEYXRhKCk7XG4gICAgfVxufVxuXG5jbGFzcyBMaW5lUGFuZVZpZXdCYXNlIGV4dGVuZHMgU2VyaWVzUGFuZVZpZXdCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJpZXMsIG1vZGVsKSB7XG4gICAgICAgIHN1cGVyKHNlcmllcywgbW9kZWwsIHRydWUpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2NvbnZlcnRUb0Nvb3JkaW5hdGVzKHByaWNlU2NhbGUsIHRpbWVTY2FsZSwgZmlyc3RWYWx1ZSkge1xuICAgICAgICB0aW1lU2NhbGUuX2ludGVybmFsX2luZGV4ZXNUb0Nvb3JkaW5hdGVzKHRoaXMuX2ludGVybmFsX19pdGVtcywgdW5kZWZpbmVkSWZOdWxsKHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSkpO1xuICAgICAgICBwcmljZVNjYWxlLl9pbnRlcm5hbF9wb2ludHNBcnJheVRvQ29vcmRpbmF0ZXModGhpcy5faW50ZXJuYWxfX2l0ZW1zLCBmaXJzdFZhbHVlLCB1bmRlZmluZWRJZk51bGwodGhpcy5faW50ZXJuYWxfX2l0ZW1zVmlzaWJsZVJhbmdlKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fY3JlYXRlUmF3SXRlbUJhc2UodGltZSwgcHJpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF90aW1lOiB0aW1lLFxuICAgICAgICAgICAgX2ludGVybmFsX3ByaWNlOiBwcmljZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF94OiBOYU4sXG4gICAgICAgICAgICBfaW50ZXJuYWxfeTogTmFOLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2ZpbGxSYXdQb2ludHMoKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yZXIgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9iYXJDb2xvcmVyKCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19pdGVtcyA9IHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2JhcnMoKS5faW50ZXJuYWxfcm93cygpLm1hcCgocm93KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJvdy5faW50ZXJuYWxfdmFsdWVbMyAvKiBQbG90Um93VmFsdWVJbmRleC5DbG9zZSAqL107XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJuYWxfX2NyZWF0ZVJhd0l0ZW0ocm93Ll9pbnRlcm5hbF9pbmRleCwgdmFsdWUsIGNvbG9yZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFNlcmllc0FyZWFQYW5lVmlldyBleHRlbmRzIExpbmVQYW5lVmlld0Jhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllcywgbW9kZWwpIHtcbiAgICAgICAgc3VwZXIoc2VyaWVzLCBtb2RlbCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19yZW5kZXJlciA9IG5ldyBDb21wb3NpdGVSZW5kZXJlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19hcmVhUmVuZGVyZXIgPSBuZXcgUGFuZVJlbmRlcmVyQXJlYSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19saW5lUmVuZGVyZXIgPSBuZXcgUGFuZVJlbmRlcmVyTGluZSgpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fcmVuZGVyZXIuX2ludGVybmFsX3NldFJlbmRlcmVycyhbdGhpcy5fcHJpdmF0ZV9fYXJlYVJlbmRlcmVyLCB0aGlzLl9wcml2YXRlX19saW5lUmVuZGVyZXJdKTtcbiAgICB9XG4gICAgX2ludGVybmFsX19jcmVhdGVSYXdJdGVtKHRpbWUsIHByaWNlLCBjb2xvcmVyKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2ludGVybmFsX19jcmVhdGVSYXdJdGVtQmFzZSh0aW1lLCBwcmljZSkpLCBjb2xvcmVyLl9pbnRlcm5hbF9iYXJTdHlsZSh0aW1lKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fcHJlcGFyZVJlbmRlcmVyRGF0YSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX29wdGlvbnMoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXJlYVJlbmRlcmVyLl9pbnRlcm5hbF9zZXREYXRhKHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lVHlwZTogb3B0aW9ucy5saW5lVHlwZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9pdGVtczogdGhpcy5faW50ZXJuYWxfX2l0ZW1zLFxuICAgICAgICAgICAgX2ludGVybmFsX2xpbmVTdHlsZTogb3B0aW9ucy5saW5lU3R5bGUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbGluZVdpZHRoOiBvcHRpb25zLmxpbmVXaWR0aCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXNlTGV2ZWxDb29yZGluYXRlOiBudWxsLFxuICAgICAgICAgICAgX2ludGVybmFsX2ludmVydEZpbGxlZEFyZWE6IG9wdGlvbnMuaW52ZXJ0RmlsbGVkQXJlYSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlUmFuZ2U6IHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJXaWR0aDogdGhpcy5faW50ZXJuYWxfX21vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfYmFyU3BhY2luZygpLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGluZVJlbmRlcmVyLl9pbnRlcm5hbF9zZXREYXRhKHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lVHlwZTogb3B0aW9ucy5saW5lVmlzaWJsZSA/IG9wdGlvbnMubGluZVR5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBfaW50ZXJuYWxfaXRlbXM6IHRoaXMuX2ludGVybmFsX19pdGVtcyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lU3R5bGU6IG9wdGlvbnMubGluZVN0eWxlLFxuICAgICAgICAgICAgX2ludGVybmFsX2xpbmVXaWR0aDogb3B0aW9ucy5saW5lV2lkdGgsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdmlzaWJsZVJhbmdlOiB0aGlzLl9pbnRlcm5hbF9faXRlbXNWaXNpYmxlUmFuZ2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyV2lkdGg6IHRoaXMuX2ludGVybmFsX19tb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2JhclNwYWNpbmcoKSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9wb2ludE1hcmtlcnNSYWRpdXM6IG9wdGlvbnMucG9pbnRNYXJrZXJzVmlzaWJsZSA/IChvcHRpb25zLnBvaW50TWFya2Vyc1JhZGl1cyB8fCBvcHRpb25zLmxpbmVXaWR0aCAvIDIgKyAyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvcHRpbWFsQmFyV2lkdGgoYmFyU3BhY2luZywgcGl4ZWxSYXRpbykge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGJhclNwYWNpbmcgKiAwLjMgKiBwaXhlbFJhdGlvKTtcbn1cbmZ1bmN0aW9uIG9wdGltYWxDYW5kbGVzdGlja1dpZHRoKGJhclNwYWNpbmcsIHBpeGVsUmF0aW8pIHtcbiAgICBjb25zdCBiYXJTcGFjaW5nU3BlY2lhbENhc2VGcm9tID0gMi41O1xuICAgIGNvbnN0IGJhclNwYWNpbmdTcGVjaWFsQ2FzZVRvID0gNDtcbiAgICBjb25zdCBiYXJTcGFjaW5nU3BlY2lhbENhc2VDb2VmZiA9IDM7XG4gICAgaWYgKGJhclNwYWNpbmcgPj0gYmFyU3BhY2luZ1NwZWNpYWxDYXNlRnJvbSAmJiBiYXJTcGFjaW5nIDw9IGJhclNwYWNpbmdTcGVjaWFsQ2FzZVRvKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGJhclNwYWNpbmdTcGVjaWFsQ2FzZUNvZWZmICogcGl4ZWxSYXRpbyk7XG4gICAgfVxuICAgIC8vIGNvZWZmIHNob3VsZCBiZSAxIG9uIHNtYWxsIGJhcnNwYWNpbmcgYW5kIGdvIHRvIDAuOCB3aGlsZSBncm9pbmcgYmFyIHNwYWNpbmdcbiAgICBjb25zdCBiYXJTcGFjaW5nUmVkdWNpbmdDb2VmZiA9IDAuMjtcbiAgICBjb25zdCBjb2VmZiA9IDEgLSBiYXJTcGFjaW5nUmVkdWNpbmdDb2VmZiAqIE1hdGguYXRhbihNYXRoLm1heChiYXJTcGFjaW5nU3BlY2lhbENhc2VUbywgYmFyU3BhY2luZykgLSBiYXJTcGFjaW5nU3BlY2lhbENhc2VUbykgLyAoTWF0aC5QSSAqIDAuNSk7XG4gICAgY29uc3QgcmVzID0gTWF0aC5mbG9vcihiYXJTcGFjaW5nICogY29lZmYgKiBwaXhlbFJhdGlvKTtcbiAgICBjb25zdCBzY2FsZWRCYXJTcGFjaW5nID0gTWF0aC5mbG9vcihiYXJTcGFjaW5nICogcGl4ZWxSYXRpbyk7XG4gICAgY29uc3Qgb3B0aW1hbCA9IE1hdGgubWluKHJlcywgc2NhbGVkQmFyU3BhY2luZyk7XG4gICAgcmV0dXJuIE1hdGgubWF4KE1hdGguZmxvb3IocGl4ZWxSYXRpbyksIG9wdGltYWwpO1xufVxuXG5jbGFzcyBQYW5lUmVuZGVyZXJCYXJzIGV4dGVuZHMgQml0bWFwQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXJMaW5lV2lkdGggPSAwO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGEgPSBkYXRhO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICAgIF9pbnRlcm5hbF9fZHJhd0ltcGwoeyBjb250ZXh0OiBjdHgsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9iYXJzLmxlbmd0aCA9PT0gMCB8fCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXJXaWR0aCA9IHRoaXMuX3ByaXZhdGVfX2NhbGNCYXJXaWR0aChob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgIC8vIGdyaWQgYW5kIGNyb3NzaGFpciBoYXZlIGxpbmUgd2lkdGggPSBNYXRoLmZsb29yKHBpeGVsUmF0aW8pXG4gICAgICAgIC8vIGlmIHRoaXMgdmFsdWUgaXMgb2RkLCB3ZSBoYXZlIHRvIG1ha2UgYmFycycgd2lkdGggb2RkXG4gICAgICAgIC8vIGlmIHRoaXMgdmFsdWUgaXMgZXZlbiwgd2UgaGF2ZSB0byBtYWtlIGJhcnMnIHdpZHRoIGV2ZW5cbiAgICAgICAgLy8gaW4gb3JkZXIgb2Yga2VlcGluZyBjcm9zc2hhaXItb3Zlci1iYXIgZHJhd2luZyBzeW1tZXRyaWNcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2JhcldpZHRoID49IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IoaG9yaXpvbnRhbFBpeGVsUmF0aW8pKTtcbiAgICAgICAgICAgIGlmICgobGluZVdpZHRoICUgMikgIT09ICh0aGlzLl9wcml2YXRlX19iYXJXaWR0aCAlIDIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBzY2FsZSBpcyBjb21wcmVzc2VkLCBiYXIgY291bGQgYmVjb21lIGxlc3MgdGhhbiAxIENTUyBwaXhlbFxuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXJMaW5lV2lkdGggPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF90aGluQmFycyA/IE1hdGgubWluKHRoaXMuX3ByaXZhdGVfX2JhcldpZHRoLCBNYXRoLmZsb29yKGhvcml6b250YWxQaXhlbFJhdGlvKSkgOiB0aGlzLl9wcml2YXRlX19iYXJXaWR0aDtcbiAgICAgICAgbGV0IHByZXZDb2xvciA9IG51bGw7XG4gICAgICAgIGNvbnN0IGRyYXdPcGVuQ2xvc2UgPSB0aGlzLl9wcml2YXRlX19iYXJMaW5lV2lkdGggPD0gdGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGggJiYgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfYmFyU3BhY2luZyA+PSBNYXRoLmZsb29yKDEuNSAqIGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZS5mcm9tOyBpIDwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLnRvOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGJhciA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2JhcnNbaV07XG4gICAgICAgICAgICBpZiAocHJldkNvbG9yICE9PSBiYXIuX2ludGVybmFsX2JhckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhci5faW50ZXJuYWxfYmFyQ29sb3I7XG4gICAgICAgICAgICAgICAgcHJldkNvbG9yID0gYmFyLl9pbnRlcm5hbF9iYXJDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJvZHlXaWR0aEhhbGYgPSBNYXRoLmZsb29yKHRoaXMuX3ByaXZhdGVfX2JhckxpbmVXaWR0aCAqIDAuNSk7XG4gICAgICAgICAgICBjb25zdCBib2R5Q2VudGVyID0gTWF0aC5yb3VuZChiYXIuX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICBjb25zdCBib2R5TGVmdCA9IGJvZHlDZW50ZXIgLSBib2R5V2lkdGhIYWxmO1xuICAgICAgICAgICAgY29uc3QgYm9keVdpZHRoID0gdGhpcy5fcHJpdmF0ZV9fYmFyTGluZVdpZHRoO1xuICAgICAgICAgICAgY29uc3QgYm9keVJpZ2h0ID0gYm9keUxlZnQgKyBib2R5V2lkdGggLSAxO1xuICAgICAgICAgICAgY29uc3QgaGlnaCA9IE1hdGgubWluKGJhci5faW50ZXJuYWxfaGlnaFksIGJhci5faW50ZXJuYWxfbG93WSk7XG4gICAgICAgICAgICBjb25zdCBsb3cgPSBNYXRoLm1heChiYXIuX2ludGVybmFsX2hpZ2hZLCBiYXIuX2ludGVybmFsX2xvd1kpO1xuICAgICAgICAgICAgY29uc3QgYm9keVRvcCA9IE1hdGgucm91bmQoaGlnaCAqIHZlcnRpY2FsUGl4ZWxSYXRpbykgLSBib2R5V2lkdGhIYWxmO1xuICAgICAgICAgICAgY29uc3QgYm9keUJvdHRvbSA9IE1hdGgucm91bmQobG93ICogdmVydGljYWxQaXhlbFJhdGlvKSArIGJvZHlXaWR0aEhhbGY7XG4gICAgICAgICAgICBjb25zdCBib2R5SGVpZ2h0ID0gTWF0aC5tYXgoKGJvZHlCb3R0b20gLSBib2R5VG9wKSwgdGhpcy5fcHJpdmF0ZV9fYmFyTGluZVdpZHRoKTtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChib2R5TGVmdCwgYm9keVRvcCwgYm9keVdpZHRoLCBib2R5SGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnN0IHNpZGVXaWR0aCA9IE1hdGguY2VpbCh0aGlzLl9wcml2YXRlX19iYXJXaWR0aCAqIDEuNSk7XG4gICAgICAgICAgICBpZiAoZHJhd09wZW5DbG9zZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9vcGVuVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVuTGVmdCA9IGJvZHlDZW50ZXIgLSBzaWRlV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvcGVuVG9wID0gTWF0aC5tYXgoYm9keVRvcCwgTWF0aC5yb3VuZChiYXIuX2ludGVybmFsX29wZW5ZICogdmVydGljYWxQaXhlbFJhdGlvKSAtIGJvZHlXaWR0aEhhbGYpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3BlbkJvdHRvbSA9IG9wZW5Ub3AgKyBib2R5V2lkdGggLSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3BlbkJvdHRvbSA+IGJvZHlUb3AgKyBib2R5SGVpZ2h0IC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkJvdHRvbSA9IGJvZHlUb3AgKyBib2R5SGVpZ2h0IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5Ub3AgPSBvcGVuQm90dG9tIC0gYm9keVdpZHRoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3Qob3BlbkxlZnQsIG9wZW5Ub3AsIGJvZHlMZWZ0IC0gb3BlbkxlZnQsIG9wZW5Cb3R0b20gLSBvcGVuVG9wICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNsb3NlUmlnaHQgPSBib2R5Q2VudGVyICsgc2lkZVdpZHRoO1xuICAgICAgICAgICAgICAgIGxldCBjbG9zZVRvcCA9IE1hdGgubWF4KGJvZHlUb3AsIE1hdGgucm91bmQoYmFyLl9pbnRlcm5hbF9jbG9zZVkgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pIC0gYm9keVdpZHRoSGFsZik7XG4gICAgICAgICAgICAgICAgbGV0IGNsb3NlQm90dG9tID0gY2xvc2VUb3AgKyBib2R5V2lkdGggLSAxO1xuICAgICAgICAgICAgICAgIGlmIChjbG9zZUJvdHRvbSA+IGJvZHlUb3AgKyBib2R5SGVpZ2h0IC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZUJvdHRvbSA9IGJvZHlUb3AgKyBib2R5SGVpZ2h0IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VUb3AgPSBjbG9zZUJvdHRvbSAtIGJvZHlXaWR0aCArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChib2R5UmlnaHQgKyAxLCBjbG9zZVRvcCwgY2xvc2VSaWdodCAtIGJvZHlSaWdodCwgY2xvc2VCb3R0b20gLSBjbG9zZVRvcCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19jYWxjQmFyV2lkdGgocGl4ZWxSYXRpbykge1xuICAgICAgICBjb25zdCBsaW1pdCA9IE1hdGguZmxvb3IocGl4ZWxSYXRpbyk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChsaW1pdCwgTWF0aC5mbG9vcihvcHRpbWFsQmFyV2lkdGgoZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19kYXRhKS5faW50ZXJuYWxfYmFyU3BhY2luZywgcGl4ZWxSYXRpbykpKTtcbiAgICB9XG59XG5cbmNsYXNzIEJhcnNQYW5lVmlld0Jhc2UgZXh0ZW5kcyBTZXJpZXNQYW5lVmlld0Jhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllcywgbW9kZWwpIHtcbiAgICAgICAgc3VwZXIoc2VyaWVzLCBtb2RlbCwgZmFsc2UpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2NvbnZlcnRUb0Nvb3JkaW5hdGVzKHByaWNlU2NhbGUsIHRpbWVTY2FsZSwgZmlyc3RWYWx1ZSkge1xuICAgICAgICB0aW1lU2NhbGUuX2ludGVybmFsX2luZGV4ZXNUb0Nvb3JkaW5hdGVzKHRoaXMuX2ludGVybmFsX19pdGVtcywgdW5kZWZpbmVkSWZOdWxsKHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSkpO1xuICAgICAgICBwcmljZVNjYWxlLl9pbnRlcm5hbF9iYXJQcmljZXNUb0Nvb3JkaW5hdGVzKHRoaXMuX2ludGVybmFsX19pdGVtcywgZmlyc3RWYWx1ZSwgdW5kZWZpbmVkSWZOdWxsKHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2NyZWF0ZURlZmF1bHRJdGVtKHRpbWUsIGJhciwgY29sb3Jlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX2ludGVybmFsX3RpbWU6IHRpbWUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfb3BlbjogYmFyLl9pbnRlcm5hbF92YWx1ZVswIC8qIFBsb3RSb3dWYWx1ZUluZGV4Lk9wZW4gKi9dLFxuICAgICAgICAgICAgX2ludGVybmFsX2hpZ2g6IGJhci5faW50ZXJuYWxfdmFsdWVbMSAvKiBQbG90Um93VmFsdWVJbmRleC5IaWdoICovXSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9sb3c6IGJhci5faW50ZXJuYWxfdmFsdWVbMiAvKiBQbG90Um93VmFsdWVJbmRleC5Mb3cgKi9dLFxuICAgICAgICAgICAgX2ludGVybmFsX2Nsb3NlOiBiYXIuX2ludGVybmFsX3ZhbHVlWzMgLyogUGxvdFJvd1ZhbHVlSW5kZXguQ2xvc2UgKi9dLFxuICAgICAgICAgICAgX2ludGVybmFsX3g6IE5hTixcbiAgICAgICAgICAgIF9pbnRlcm5hbF9vcGVuWTogTmFOLFxuICAgICAgICAgICAgX2ludGVybmFsX2hpZ2hZOiBOYU4sXG4gICAgICAgICAgICBfaW50ZXJuYWxfbG93WTogTmFOLFxuICAgICAgICAgICAgX2ludGVybmFsX2Nsb3NlWTogTmFOLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2ZpbGxSYXdQb2ludHMoKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yZXIgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9iYXJDb2xvcmVyKCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19pdGVtcyA9IHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2JhcnMoKS5faW50ZXJuYWxfcm93cygpLm1hcCgocm93KSA9PiB0aGlzLl9pbnRlcm5hbF9fY3JlYXRlUmF3SXRlbShyb3cuX2ludGVybmFsX2luZGV4LCByb3csIGNvbG9yZXIpKTtcbiAgICB9XG59XG5cbmNsYXNzIFNlcmllc0JhcnNQYW5lVmlldyBleHRlbmRzIEJhcnNQYW5lVmlld0Jhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fcmVuZGVyZXIgPSBuZXcgUGFuZVJlbmRlcmVyQmFycygpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2NyZWF0ZVJhd0l0ZW0odGltZSwgYmFyLCBjb2xvcmVyKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2ludGVybmFsX19jcmVhdGVEZWZhdWx0SXRlbSh0aW1lLCBiYXIsIGNvbG9yZXIpKSwgY29sb3Jlci5faW50ZXJuYWxfYmFyU3R5bGUodGltZSkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX3ByZXBhcmVSZW5kZXJlckRhdGEoKSB7XG4gICAgICAgIGNvbnN0IGJhclN0eWxlUHJvcHMgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19yZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YSh7XG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyczogdGhpcy5faW50ZXJuYWxfX2l0ZW1zLFxuICAgICAgICAgICAgX2ludGVybmFsX2JhclNwYWNpbmc6IHRoaXMuX2ludGVybmFsX19tb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2JhclNwYWNpbmcoKSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9vcGVuVmlzaWJsZTogYmFyU3R5bGVQcm9wcy5vcGVuVmlzaWJsZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90aGluQmFyczogYmFyU3R5bGVQcm9wcy50aGluQmFycyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlUmFuZ2U6IHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBQYW5lUmVuZGVyZXJCYXNlbGluZUFyZWEgZXh0ZW5kcyBQYW5lUmVuZGVyZXJBcmVhQmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZpbGxDYWNoZSA9IG5ldyBHcmFkaWVudFN0eWxlQ2FjaGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX19maWxsU3R5bGUocmVuZGVyaW5nU2NvcGUsIGl0ZW0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2ludGVybmFsX19kYXRhO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZmlsbENhY2hlLl9pbnRlcm5hbF9nZXQocmVuZGVyaW5nU2NvcGUsIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF90b3BDb2xvcjE6IGl0ZW0uX2ludGVybmFsX3RvcEZpbGxDb2xvcjEsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdG9wQ29sb3IyOiBpdGVtLl9pbnRlcm5hbF90b3BGaWxsQ29sb3IyLFxuICAgICAgICAgICAgX2ludGVybmFsX2JvdHRvbUNvbG9yMTogaXRlbS5faW50ZXJuYWxfYm90dG9tRmlsbENvbG9yMSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ib3R0b21Db2xvcjI6IGl0ZW0uX2ludGVybmFsX2JvdHRvbUZpbGxDb2xvcjIsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYm90dG9tOiByZW5kZXJpbmdTY29wZS5iaXRtYXBTaXplLmhlaWdodCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXNlTGV2ZWxDb29yZGluYXRlOiBkYXRhLl9pbnRlcm5hbF9iYXNlTGV2ZWxDb29yZGluYXRlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFBhbmVSZW5kZXJlckJhc2VsaW5lTGluZSBleHRlbmRzIFBhbmVSZW5kZXJlckxpbmVCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3Ryb2tlQ2FjaGUgPSBuZXcgR3JhZGllbnRTdHlsZUNhY2hlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fc3Ryb2tlU3R5bGUocmVuZGVyaW5nU2NvcGUsIGl0ZW0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2ludGVybmFsX19kYXRhO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fc3Ryb2tlQ2FjaGUuX2ludGVybmFsX2dldChyZW5kZXJpbmdTY29wZSwge1xuICAgICAgICAgICAgX2ludGVybmFsX3RvcENvbG9yMTogaXRlbS5faW50ZXJuYWxfdG9wTGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX3RvcENvbG9yMjogaXRlbS5faW50ZXJuYWxfdG9wTGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX2JvdHRvbUNvbG9yMTogaXRlbS5faW50ZXJuYWxfYm90dG9tTGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX2JvdHRvbUNvbG9yMjogaXRlbS5faW50ZXJuYWxfYm90dG9tTGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX2JvdHRvbTogcmVuZGVyaW5nU2NvcGUuYml0bWFwU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFzZUxldmVsQ29vcmRpbmF0ZTogZGF0YS5faW50ZXJuYWxfYmFzZUxldmVsQ29vcmRpbmF0ZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBTZXJpZXNCYXNlbGluZVBhbmVWaWV3IGV4dGVuZHMgTGluZVBhbmVWaWV3QmFzZSB7XG4gICAgY29uc3RydWN0b3Ioc2VyaWVzLCBtb2RlbCkge1xuICAgICAgICBzdXBlcihzZXJpZXMsIG1vZGVsKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX3JlbmRlcmVyID0gbmV3IENvbXBvc2l0ZVJlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Jhc2VsaW5lQXJlYVJlbmRlcmVyID0gbmV3IFBhbmVSZW5kZXJlckJhc2VsaW5lQXJlYSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlbGluZUxpbmVSZW5kZXJlciA9IG5ldyBQYW5lUmVuZGVyZXJCYXNlbGluZUxpbmUoKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX3JlbmRlcmVyLl9pbnRlcm5hbF9zZXRSZW5kZXJlcnMoW3RoaXMuX3ByaXZhdGVfX2Jhc2VsaW5lQXJlYVJlbmRlcmVyLCB0aGlzLl9wcml2YXRlX19iYXNlbGluZUxpbmVSZW5kZXJlcl0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2NyZWF0ZVJhd0l0ZW0odGltZSwgcHJpY2UsIGNvbG9yZXIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5faW50ZXJuYWxfX2NyZWF0ZVJhd0l0ZW1CYXNlKHRpbWUsIHByaWNlKSksIGNvbG9yZXIuX2ludGVybmFsX2JhclN0eWxlKHRpbWUpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX19wcmVwYXJlUmVuZGVyZXJEYXRhKCkge1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IGJhc2VMZXZlbENvb3JkaW5hdGUgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCkuX2ludGVybmFsX3ByaWNlVG9Db29yZGluYXRlKG9wdGlvbnMuYmFzZVZhbHVlLnByaWNlLCBmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSk7XG4gICAgICAgIGNvbnN0IGJhcldpZHRoID0gdGhpcy5faW50ZXJuYWxfX21vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfYmFyU3BhY2luZygpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlbGluZUFyZWFSZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YSh7XG4gICAgICAgICAgICBfaW50ZXJuYWxfaXRlbXM6IHRoaXMuX2ludGVybmFsX19pdGVtcyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lV2lkdGg6IG9wdGlvbnMubGluZVdpZHRoLFxuICAgICAgICAgICAgX2ludGVybmFsX2xpbmVTdHlsZTogb3B0aW9ucy5saW5lU3R5bGUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbGluZVR5cGU6IG9wdGlvbnMubGluZVR5cGUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFzZUxldmVsQ29vcmRpbmF0ZTogYmFzZUxldmVsQ29vcmRpbmF0ZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9pbnZlcnRGaWxsZWRBcmVhOiBmYWxzZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlUmFuZ2U6IHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlbGluZUxpbmVSZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YSh7XG4gICAgICAgICAgICBfaW50ZXJuYWxfaXRlbXM6IHRoaXMuX2ludGVybmFsX19pdGVtcyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lV2lkdGg6IG9wdGlvbnMubGluZVdpZHRoLFxuICAgICAgICAgICAgX2ludGVybmFsX2xpbmVTdHlsZTogb3B0aW9ucy5saW5lU3R5bGUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbGluZVR5cGU6IG9wdGlvbnMubGluZVZpc2libGUgPyBvcHRpb25zLmxpbmVUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgX2ludGVybmFsX3BvaW50TWFya2Vyc1JhZGl1czogb3B0aW9ucy5wb2ludE1hcmtlcnNWaXNpYmxlID8gKG9wdGlvbnMucG9pbnRNYXJrZXJzUmFkaXVzIHx8IG9wdGlvbnMubGluZVdpZHRoIC8gMiArIDIpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgX2ludGVybmFsX2Jhc2VMZXZlbENvb3JkaW5hdGU6IGJhc2VMZXZlbENvb3JkaW5hdGUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdmlzaWJsZVJhbmdlOiB0aGlzLl9pbnRlcm5hbF9faXRlbXNWaXNpYmxlUmFuZ2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyV2lkdGg6IGJhcldpZHRoLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFBhbmVSZW5kZXJlckNhbmRsZXN0aWNrcyBleHRlbmRzIEJpdG1hcENvb3JkaW5hdGVzUGFuZVJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YSA9IG51bGw7XG4gICAgICAgIC8vIHNjYWxlZCB3aXRoIHBpeGVsUmF0aW9cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGggPSAwO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2RyYXdJbXBsKHJlbmRlcmluZ1Njb3BlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhID09PSBudWxsIHx8IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2JhcnMubGVuZ3RoID09PSAwIHx8IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgaG9yaXpvbnRhbFBpeGVsUmF0aW8gfSA9IHJlbmRlcmluZ1Njb3BlO1xuICAgICAgICAvLyBub3cgd2Uga25vdyBwaXhlbFJhdGlvIGFuZCB3ZSBjb3VsZCBjYWxjdWxhdGUgYmFyV2lkdGggZWZmZWN0aXZlbHlcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGggPSBvcHRpbWFsQ2FuZGxlc3RpY2tXaWR0aCh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9iYXJTcGFjaW5nLCBob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgIC8vIGdyaWQgYW5kIGNyb3NzaGFpciBoYXZlIGxpbmUgd2lkdGggPSBNYXRoLmZsb29yKHBpeGVsUmF0aW8pXG4gICAgICAgIC8vIGlmIHRoaXMgdmFsdWUgaXMgb2RkLCB3ZSBoYXZlIHRvIG1ha2UgY2FuZGxlc3RpY2tzJyB3aWR0aCBvZGRcbiAgICAgICAgLy8gaWYgdGhpcyB2YWx1ZSBpcyBldmVuLCB3ZSBoYXZlIHRvIG1ha2UgY2FuZGxlc3RpY2tzJyB3aWR0aCBldmVuXG4gICAgICAgIC8vIGluIG9yZGVyIG9mIGtlZXBpbmcgY3Jvc3NoYWlyLW92ZXItY2FuZGxlc3RpY2tzIGRyYXdpbmcgc3ltbWV0cmljXG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19iYXJXaWR0aCA+PSAyKSB7XG4gICAgICAgICAgICBjb25zdCB3aWNrV2lkdGggPSBNYXRoLmZsb29yKGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGlmICgod2lja1dpZHRoICUgMikgIT09ICh0aGlzLl9wcml2YXRlX19iYXJXaWR0aCAlIDIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJzID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfYmFycztcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3dpY2tWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3V2lja3MocmVuZGVyaW5nU2NvcGUsIGJhcnMsIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2JvcmRlclZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdCb3JkZXIocmVuZGVyaW5nU2NvcGUsIGJhcnMsIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0aGlzLl9wcml2YXRlX19jYWxjdWxhdGVCb3JkZXJXaWR0aChob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfYm9yZGVyVmlzaWJsZSB8fCB0aGlzLl9wcml2YXRlX19iYXJXaWR0aCA+IGJvcmRlcldpZHRoICogMikge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0NhbmRsZXMocmVuZGVyaW5nU2NvcGUsIGJhcnMsIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdXaWNrcyhyZW5kZXJpbmdTY29wZSwgYmFycywgdmlzaWJsZVJhbmdlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBjb250ZXh0OiBjdHgsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSA9IHJlbmRlcmluZ1Njb3BlO1xuICAgICAgICBsZXQgcHJldldpY2tDb2xvciA9ICcnO1xuICAgICAgICBsZXQgd2lja1dpZHRoID0gTWF0aC5taW4oTWF0aC5mbG9vcihob3Jpem9udGFsUGl4ZWxSYXRpbyksIE1hdGguZmxvb3IodGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfYmFyU3BhY2luZyAqIGhvcml6b250YWxQaXhlbFJhdGlvKSk7XG4gICAgICAgIHdpY2tXaWR0aCA9IE1hdGgubWF4KE1hdGguZmxvb3IoaG9yaXpvbnRhbFBpeGVsUmF0aW8pLCBNYXRoLm1pbih3aWNrV2lkdGgsIHRoaXMuX3ByaXZhdGVfX2JhcldpZHRoKSk7XG4gICAgICAgIGNvbnN0IHdpY2tPZmZzZXQgPSBNYXRoLmZsb29yKHdpY2tXaWR0aCAqIDAuNSk7XG4gICAgICAgIGxldCBwcmV2RWRnZSA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSB2aXNpYmxlUmFuZ2UuZnJvbTsgaSA8IHZpc2libGVSYW5nZS50bzsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBiYXIgPSBiYXJzW2ldO1xuICAgICAgICAgICAgaWYgKGJhci5faW50ZXJuYWxfYmFyV2lja0NvbG9yICE9PSBwcmV2V2lja0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhci5faW50ZXJuYWxfYmFyV2lja0NvbG9yO1xuICAgICAgICAgICAgICAgIHByZXZXaWNrQ29sb3IgPSBiYXIuX2ludGVybmFsX2JhcldpY2tDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IE1hdGgucm91bmQoTWF0aC5taW4oYmFyLl9pbnRlcm5hbF9vcGVuWSwgYmFyLl9pbnRlcm5hbF9jbG9zZVkpICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IE1hdGgucm91bmQoTWF0aC5tYXgoYmFyLl9pbnRlcm5hbF9vcGVuWSwgYmFyLl9pbnRlcm5hbF9jbG9zZVkpICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGhpZ2ggPSBNYXRoLnJvdW5kKGJhci5faW50ZXJuYWxfaGlnaFkgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgY29uc3QgbG93ID0gTWF0aC5yb3VuZChiYXIuX2ludGVybmFsX2xvd1kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVkWCA9IE1hdGgucm91bmQoaG9yaXpvbnRhbFBpeGVsUmF0aW8gKiBiYXIuX2ludGVybmFsX3gpO1xuICAgICAgICAgICAgbGV0IGxlZnQgPSBzY2FsZWRYIC0gd2lja09mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gbGVmdCArIHdpY2tXaWR0aCAtIDE7XG4gICAgICAgICAgICBpZiAocHJldkVkZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gTWF0aC5tYXgocHJldkVkZ2UgKyAxLCBsZWZ0KTtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gTWF0aC5taW4obGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQgKyAxO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIGhpZ2gsIHdpZHRoLCB0b3AgLSBoaWdoKTtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChsZWZ0LCBib3R0b20gKyAxLCB3aWR0aCwgbG93IC0gYm90dG9tKTtcbiAgICAgICAgICAgIHByZXZFZGdlID0gcmlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2NhbGN1bGF0ZUJvcmRlcldpZHRoKHBpeGVsUmF0aW8pIHtcbiAgICAgICAgbGV0IGJvcmRlcldpZHRoID0gTWF0aC5mbG9vcigxIC8qIENvbnN0YW50cy5CYXJCb3JkZXJXaWR0aCAqLyAqIHBpeGVsUmF0aW8pO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGggPD0gMiAqIGJvcmRlcldpZHRoKSB7XG4gICAgICAgICAgICBib3JkZXJXaWR0aCA9IE1hdGguZmxvb3IoKHRoaXMuX3ByaXZhdGVfX2JhcldpZHRoIC0gMSkgKiAwLjUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IE1hdGgubWF4KE1hdGguZmxvb3IocGl4ZWxSYXRpbyksIGJvcmRlcldpZHRoKTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2JhcldpZHRoIDw9IHJlcyAqIDIpIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdCBkcmF3IGJvZGllcywgcmVzdG9yZSBvcmlnaW5hbCB2YWx1ZVxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGguZmxvb3IocGl4ZWxSYXRpbyksIE1hdGguZmxvb3IoMSAvKiBDb25zdGFudHMuQmFyQm9yZGVyV2lkdGggKi8gKiBwaXhlbFJhdGlvKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdCb3JkZXIocmVuZGVyaW5nU2NvcGUsIGJhcnMsIHZpc2libGVSYW5nZSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgY29udGV4dDogY3R4LCBob3Jpem9udGFsUGl4ZWxSYXRpbywgdmVydGljYWxQaXhlbFJhdGlvIH0gPSByZW5kZXJpbmdTY29wZTtcbiAgICAgICAgbGV0IHByZXZCb3JkZXJDb2xvciA9ICcnO1xuICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRoaXMuX3ByaXZhdGVfX2NhbGN1bGF0ZUJvcmRlcldpZHRoKGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgbGV0IHByZXZFZGdlID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHZpc2libGVSYW5nZS5mcm9tOyBpIDwgdmlzaWJsZVJhbmdlLnRvOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGJhciA9IGJhcnNbaV07XG4gICAgICAgICAgICBpZiAoYmFyLl9pbnRlcm5hbF9iYXJCb3JkZXJDb2xvciAhPT0gcHJldkJvcmRlckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhci5faW50ZXJuYWxfYmFyQm9yZGVyQ29sb3I7XG4gICAgICAgICAgICAgICAgcHJldkJvcmRlckNvbG9yID0gYmFyLl9pbnRlcm5hbF9iYXJCb3JkZXJDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBsZWZ0ID0gTWF0aC5yb3VuZChiYXIuX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbykgLSBNYXRoLmZsb29yKHRoaXMuX3ByaXZhdGVfX2JhcldpZHRoICogMC41KTtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IHRvIGNhbGN1bGF0ZSByaWdodCBiZWZvcmUgcGF0Y2hpbmcgbGVmdFxuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBsZWZ0ICsgdGhpcy5fcHJpdmF0ZV9fYmFyV2lkdGggLSAxO1xuICAgICAgICAgICAgY29uc3QgdG9wID0gTWF0aC5yb3VuZChNYXRoLm1pbihiYXIuX2ludGVybmFsX29wZW5ZLCBiYXIuX2ludGVybmFsX2Nsb3NlWSkgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgY29uc3QgYm90dG9tID0gTWF0aC5yb3VuZChNYXRoLm1heChiYXIuX2ludGVybmFsX29wZW5ZLCBiYXIuX2ludGVybmFsX2Nsb3NlWSkgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgaWYgKHByZXZFZGdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IE1hdGgubWF4KHByZXZFZGdlICsgMSwgbGVmdCk7XG4gICAgICAgICAgICAgICAgbGVmdCA9IE1hdGgubWluKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9iYXJTcGFjaW5nICogaG9yaXpvbnRhbFBpeGVsUmF0aW8gPiAyICogYm9yZGVyV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBmaWxsUmVjdElubmVyQm9yZGVyKGN0eCwgbGVmdCwgdG9wLCByaWdodCAtIGxlZnQgKyAxLCBib3R0b20gLSB0b3AgKyAxLCBib3JkZXJXaWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdCArIDE7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGJvdHRvbSAtIHRvcCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldkVkZ2UgPSByaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fZHJhd0NhbmRsZXMocmVuZGVyaW5nU2NvcGUsIGJhcnMsIHZpc2libGVSYW5nZSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgY29udGV4dDogY3R4LCBob3Jpem9udGFsUGl4ZWxSYXRpbywgdmVydGljYWxQaXhlbFJhdGlvIH0gPSByZW5kZXJpbmdTY29wZTtcbiAgICAgICAgbGV0IHByZXZCYXJDb2xvciA9ICcnO1xuICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRoaXMuX3ByaXZhdGVfX2NhbGN1bGF0ZUJvcmRlcldpZHRoKGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHZpc2libGVSYW5nZS5mcm9tOyBpIDwgdmlzaWJsZVJhbmdlLnRvOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGJhciA9IGJhcnNbaV07XG4gICAgICAgICAgICBsZXQgdG9wID0gTWF0aC5yb3VuZChNYXRoLm1pbihiYXIuX2ludGVybmFsX29wZW5ZLCBiYXIuX2ludGVybmFsX2Nsb3NlWSkgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgbGV0IGJvdHRvbSA9IE1hdGgucm91bmQoTWF0aC5tYXgoYmFyLl9pbnRlcm5hbF9vcGVuWSwgYmFyLl9pbnRlcm5hbF9jbG9zZVkpICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGxldCBsZWZ0ID0gTWF0aC5yb3VuZChiYXIuX2ludGVybmFsX3ggKiBob3Jpem9udGFsUGl4ZWxSYXRpbykgLSBNYXRoLmZsb29yKHRoaXMuX3ByaXZhdGVfX2JhcldpZHRoICogMC41KTtcbiAgICAgICAgICAgIGxldCByaWdodCA9IGxlZnQgKyB0aGlzLl9wcml2YXRlX19iYXJXaWR0aCAtIDE7XG4gICAgICAgICAgICBpZiAoYmFyLl9pbnRlcm5hbF9iYXJDb2xvciAhPT0gcHJldkJhckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFyQ29sb3IgPSBiYXIuX2ludGVybmFsX2JhckNvbG9yO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYXJDb2xvcjtcbiAgICAgICAgICAgICAgICBwcmV2QmFyQ29sb3IgPSBiYXJDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9ib3JkZXJWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgbGVmdCArPSBib3JkZXJXaWR0aDtcbiAgICAgICAgICAgICAgICB0b3AgKz0gYm9yZGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgcmlnaHQgLT0gYm9yZGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgYm90dG9tIC09IGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvcCA+IGJvdHRvbSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgcmlnaHQgLSBsZWZ0ICsgMSwgYm90dG9tIC0gdG9wICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFNlcmllc0NhbmRsZXN0aWNrc1BhbmVWaWV3IGV4dGVuZHMgQmFyc1BhbmVWaWV3QmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19yZW5kZXJlciA9IG5ldyBQYW5lUmVuZGVyZXJDYW5kbGVzdGlja3MoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX19jcmVhdGVSYXdJdGVtKHRpbWUsIGJhciwgY29sb3Jlcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9pbnRlcm5hbF9fY3JlYXRlRGVmYXVsdEl0ZW0odGltZSwgYmFyLCBjb2xvcmVyKSksIGNvbG9yZXIuX2ludGVybmFsX2JhclN0eWxlKHRpbWUpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX19wcmVwYXJlUmVuZGVyZXJEYXRhKCkge1xuICAgICAgICBjb25zdCBjYW5kbGVzdGlja1N0eWxlUHJvcHMgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19yZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YSh7XG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyczogdGhpcy5faW50ZXJuYWxfX2l0ZW1zLFxuICAgICAgICAgICAgX2ludGVybmFsX2JhclNwYWNpbmc6IHRoaXMuX2ludGVybmFsX19tb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2JhclNwYWNpbmcoKSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF93aWNrVmlzaWJsZTogY2FuZGxlc3RpY2tTdHlsZVByb3BzLndpY2tWaXNpYmxlLFxuICAgICAgICAgICAgX2ludGVybmFsX2JvcmRlclZpc2libGU6IGNhbmRsZXN0aWNrU3R5bGVQcm9wcy5ib3JkZXJWaXNpYmxlLFxuICAgICAgICAgICAgX2ludGVybmFsX3Zpc2libGVSYW5nZTogdGhpcy5faW50ZXJuYWxfX2l0ZW1zVmlzaWJsZVJhbmdlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIEN1c3RvbVNlcmllc1BhbmVSZW5kZXJlcldyYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZVJlbmRlcmVyLCBwcmljZVNjYWxlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NvdXJjZVJlbmRlcmVyID0gc291cmNlUmVuZGVyZXI7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUgPSBwcmljZVNjYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZHJhdyh0YXJnZXQsIGlzSG92ZXJlZCwgaGl0VGVzdERhdGEpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc291cmNlUmVuZGVyZXIuZHJhdyh0YXJnZXQsIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUsIGlzSG92ZXJlZCwgaGl0VGVzdERhdGEpO1xuICAgIH1cbn1cbmNsYXNzIFNlcmllc0N1c3RvbVBhbmVWaWV3IGV4dGVuZHMgU2VyaWVzUGFuZVZpZXdCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJpZXMsIG1vZGVsLCBwYW5lVmlldykge1xuICAgICAgICBzdXBlcihzZXJpZXMsIG1vZGVsLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3ID0gcGFuZVZpZXc7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19yZW5kZXJlciA9IG5ldyBDdXN0b21TZXJpZXNQYW5lUmVuZGVyZXJXcmFwcGVyKHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3LnJlbmRlcmVyKCksIChwcmljZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IHNlcmllcy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKGZpcnN0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXJpZXMuX2ludGVybmFsX3ByaWNlU2NhbGUoKS5faW50ZXJuYWxfcHJpY2VUb0Nvb3JkaW5hdGUocHJpY2UsIGZpcnN0VmFsdWUuX2ludGVybmFsX3ZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wcmljZVZhbHVlQnVpbGRlcihwbG90Um93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lVmlldy5wcmljZVZhbHVlQnVpbGRlcihwbG90Um93KTtcbiAgICB9XG4gICAgX2ludGVybmFsX2lzV2hpdGVzcGFjZShkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lVmlldy5pc1doaXRlc3BhY2UoZGF0YSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZmlsbFJhd1BvaW50cygpIHtcbiAgICAgICAgY29uc3QgY29sb3JlciA9IHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2JhckNvbG9yZXIoKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2l0ZW1zID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfYmFycygpLl9pbnRlcm5hbF9yb3dzKClcbiAgICAgICAgICAgIC5tYXAoKHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IF9pbnRlcm5hbF90aW1lOiByb3cuX2ludGVybmFsX2luZGV4LCBfaW50ZXJuYWxfeDogTmFOIH0sIGNvbG9yZXIuX2ludGVybmFsX2JhclN0eWxlKHJvdy5faW50ZXJuYWxfaW5kZXgpKSwgeyBfaW50ZXJuYWxfb3JpZ2luYWxEYXRhOiByb3cuX2ludGVybmFsX2RhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2NvbnZlcnRUb0Nvb3JkaW5hdGVzKHByaWNlU2NhbGUsIHRpbWVTY2FsZSkge1xuICAgICAgICB0aW1lU2NhbGUuX2ludGVybmFsX2luZGV4ZXNUb0Nvb3JkaW5hdGVzKHRoaXMuX2ludGVybmFsX19pdGVtcywgdW5kZWZpbmVkSWZOdWxsKHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX3ByZXBhcmVSZW5kZXJlckRhdGEoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3LnVwZGF0ZSh7XG4gICAgICAgICAgICBiYXJzOiB0aGlzLl9pbnRlcm5hbF9faXRlbXMubWFwKHVud3JhcEl0ZW1EYXRhKSxcbiAgICAgICAgICAgIGJhclNwYWNpbmc6IHRoaXMuX2ludGVybmFsX19tb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2JhclNwYWNpbmcoKSxcbiAgICAgICAgICAgIHZpc2libGVSYW5nZTogdGhpcy5faW50ZXJuYWxfX2l0ZW1zVmlzaWJsZVJhbmdlLFxuICAgICAgICB9LCB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVud3JhcEl0ZW1EYXRhKGl0ZW0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBpdGVtLl9pbnRlcm5hbF94LFxuICAgICAgICB0aW1lOiBpdGVtLl9pbnRlcm5hbF90aW1lLFxuICAgICAgICBvcmlnaW5hbERhdGE6IGl0ZW0uX2ludGVybmFsX29yaWdpbmFsRGF0YSxcbiAgICAgICAgYmFyQ29sb3I6IGl0ZW0uX2ludGVybmFsX2JhckNvbG9yLFxuICAgIH07XG59XG5cbmNvbnN0IHNob3dTcGFjaW5nTWluaW1hbEJhcldpZHRoID0gMTtcbmNvbnN0IGFsaWduVG9NaW5pbWFsV2lkdGhMaW1pdCA9IDQ7XG5jbGFzcyBQYW5lUmVuZGVyZXJIaXN0b2dyYW0gZXh0ZW5kcyBCaXRtYXBDb29yZGluYXRlc1BhbmVSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmVjYWxjdWxhdGVkQ2FjaGUgPSBbXTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldERhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJlY2FsY3VsYXRlZENhY2hlID0gW107XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZHJhd0ltcGwoeyBjb250ZXh0OiBjdHgsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9pdGVtcy5sZW5ndGggPT09IDAgfHwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19wcmVjYWxjdWxhdGVkQ2FjaGUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19maWxsUHJlY2FsY3VsYXRlZENhY2hlKGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aWNrV2lkdGggPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHZlcnRpY2FsUGl4ZWxSYXRpbykpO1xuICAgICAgICBjb25zdCBoaXN0b2dyYW1CYXNlID0gTWF0aC5yb3VuZCgodGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfaGlzdG9ncmFtQmFzZSkgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICBjb25zdCB0b3BIaXN0b2dyYW1CYXNlID0gaGlzdG9ncmFtQmFzZSAtIE1hdGguZmxvb3IodGlja1dpZHRoIC8gMik7XG4gICAgICAgIGNvbnN0IGJvdHRvbUhpc3RvZ3JhbUJhc2UgPSB0b3BIaXN0b2dyYW1CYXNlICsgdGlja1dpZHRoO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLmZyb207IGkgPCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UudG87IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2l0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuX3ByaXZhdGVfX3ByZWNhbGN1bGF0ZWRDYWNoZVtpIC0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLmZyb21dO1xuICAgICAgICAgICAgY29uc3QgeSA9IE1hdGgucm91bmQoaXRlbS5faW50ZXJuYWxfeSAqIHZlcnRpY2FsUGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gaXRlbS5faW50ZXJuYWxfYmFyQ29sb3I7XG4gICAgICAgICAgICBsZXQgdG9wO1xuICAgICAgICAgICAgbGV0IGJvdHRvbTtcbiAgICAgICAgICAgIGlmICh5IDw9IHRvcEhpc3RvZ3JhbUJhc2UpIHtcbiAgICAgICAgICAgICAgICB0b3AgPSB5O1xuICAgICAgICAgICAgICAgIGJvdHRvbSA9IGJvdHRvbUhpc3RvZ3JhbUJhc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b3AgPSB0b3BIaXN0b2dyYW1CYXNlO1xuICAgICAgICAgICAgICAgIGJvdHRvbSA9IHkgLSBNYXRoLmZsb29yKHRpY2tXaWR0aCAvIDIpICsgdGlja1dpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGN1cnJlbnQuX2ludGVybmFsX2xlZnQsIHRvcCwgY3VycmVudC5faW50ZXJuYWxfcmlnaHQgLSBjdXJyZW50Ll9pbnRlcm5hbF9sZWZ0ICsgMSwgYm90dG9tIC0gdG9wKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICAgIF9wcml2YXRlX19maWxsUHJlY2FsY3VsYXRlZENhY2hlKHBpeGVsUmF0aW8pIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2RhdGEgPT09IG51bGwgfHwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfaXRlbXMubGVuZ3RoID09PSAwIHx8IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJlY2FsY3VsYXRlZENhY2hlID0gW107XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3BhY2luZyA9IE1hdGguY2VpbCh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9iYXJTcGFjaW5nICogcGl4ZWxSYXRpbykgPD0gc2hvd1NwYWNpbmdNaW5pbWFsQmFyV2lkdGggPyAwIDogTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihwaXhlbFJhdGlvKSk7XG4gICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gTWF0aC5yb3VuZCh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9iYXJTcGFjaW5nICogcGl4ZWxSYXRpbykgLSBzcGFjaW5nO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmVjYWxjdWxhdGVkQ2FjaGUgPSBuZXcgQXJyYXkodGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLnRvIC0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLmZyb20pO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLmZyb207IGkgPCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UudG87IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2l0ZW1zW2ldO1xuICAgICAgICAgICAgLy8gZm9yY2UgY2FzdCB0byBhdm9pZCBlbnN1cmVEZWZpbmVkIGNhbGxcbiAgICAgICAgICAgIGNvbnN0IHggPSBNYXRoLnJvdW5kKGl0ZW0uX2ludGVybmFsX3ggKiBwaXhlbFJhdGlvKTtcbiAgICAgICAgICAgIGxldCBsZWZ0O1xuICAgICAgICAgICAgbGV0IHJpZ2h0O1xuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRoICUgMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IChjb2x1bW5XaWR0aCAtIDEpIC8gMjtcbiAgICAgICAgICAgICAgICBsZWZ0ID0geCAtIGhhbGZXaWR0aDtcbiAgICAgICAgICAgICAgICByaWdodCA9IHggKyBoYWxmV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzaGlmdCBwaXhlbCB0byBsZWZ0XG4gICAgICAgICAgICAgICAgY29uc3QgaGFsZldpZHRoID0gY29sdW1uV2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIGxlZnQgPSB4IC0gaGFsZldpZHRoO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0geCArIGhhbGZXaWR0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wcmVjYWxjdWxhdGVkQ2FjaGVbaSAtIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZS5mcm9tXSA9IHtcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfbGVmdDogbGVmdCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfcmlnaHQ6IHJpZ2h0LFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9yb3VuZGVkQ2VudGVyOiB4LFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9jZW50ZXI6IChpdGVtLl9pbnRlcm5hbF94ICogcGl4ZWxSYXRpbyksXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3RpbWU6IGl0ZW0uX2ludGVybmFsX3RpbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvcnJlY3QgcG9zaXRpb25zXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UuZnJvbSArIDE7IGkgPCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UudG87IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuX3ByaXZhdGVfX3ByZWNhbGN1bGF0ZWRDYWNoZVtpIC0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLmZyb21dO1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuX3ByaXZhdGVfX3ByZWNhbGN1bGF0ZWRDYWNoZVtpIC0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLmZyb20gLSAxXTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Ll9pbnRlcm5hbF90aW1lICE9PSBwcmV2Ll9pbnRlcm5hbF90aW1lICsgMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnQuX2ludGVybmFsX2xlZnQgLSBwcmV2Ll9pbnRlcm5hbF9yaWdodCAhPT0gKHNwYWNpbmcgKyAxKSkge1xuICAgICAgICAgICAgICAgIC8vIGhhdmUgdG8gYWxpZ25cbiAgICAgICAgICAgICAgICBpZiAocHJldi5faW50ZXJuYWxfcm91bmRlZENlbnRlciA+IHByZXYuX2ludGVybmFsX2NlbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBwcmV2IHdhc3NoaWZ0ZWQgdG8gbGVmdCwgc28gYWRkIHBpeGVsIHRvIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgIHByZXYuX2ludGVybmFsX3JpZ2h0ID0gY3VycmVudC5faW50ZXJuYWxfbGVmdCAtIHNwYWNpbmcgLSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXh0ZW5kIGN1cnJlbnQgdG8gbGVmdFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Ll9pbnRlcm5hbF9sZWZ0ID0gcHJldi5faW50ZXJuYWxfcmlnaHQgKyBzcGFjaW5nICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1pbldpZHRoID0gTWF0aC5jZWlsKHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2JhclNwYWNpbmcgKiBwaXhlbFJhdGlvKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZS5mcm9tOyBpIDwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLnRvOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLl9wcml2YXRlX19wcmVjYWxjdWxhdGVkQ2FjaGVbaSAtIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZS5mcm9tXTtcbiAgICAgICAgICAgIC8vIHRoaXMgY291bGQgaGFwcGVuIGlmIGJhcnNwYWNpbmcgPCAxXG4gICAgICAgICAgICBpZiAoY3VycmVudC5faW50ZXJuYWxfcmlnaHQgPCBjdXJyZW50Ll9pbnRlcm5hbF9sZWZ0KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC5faW50ZXJuYWxfcmlnaHQgPSBjdXJyZW50Ll9pbnRlcm5hbF9sZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjdXJyZW50Ll9pbnRlcm5hbF9yaWdodCAtIGN1cnJlbnQuX2ludGVybmFsX2xlZnQgKyAxO1xuICAgICAgICAgICAgbWluV2lkdGggPSBNYXRoLm1pbih3aWR0aCwgbWluV2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGFjaW5nID4gMCAmJiBtaW5XaWR0aCA8IGFsaWduVG9NaW5pbWFsV2lkdGhMaW1pdCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZS5mcm9tOyBpIDwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLnRvOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5fcHJpdmF0ZV9fcHJlY2FsY3VsYXRlZENhY2hlW2kgLSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UuZnJvbV07XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjdXJyZW50Ll9pbnRlcm5hbF9yaWdodCAtIGN1cnJlbnQuX2ludGVybmFsX2xlZnQgKyAxO1xuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IG1pbldpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Ll9pbnRlcm5hbF9yb3VuZGVkQ2VudGVyID4gY3VycmVudC5faW50ZXJuYWxfY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Ll9pbnRlcm5hbF9yaWdodCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5faW50ZXJuYWxfbGVmdCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBTZXJpZXNIaXN0b2dyYW1QYW5lVmlldyBleHRlbmRzIExpbmVQYW5lVmlld0Jhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fcmVuZGVyZXIgPSBuZXcgUGFuZVJlbmRlcmVySGlzdG9ncmFtKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fY3JlYXRlUmF3SXRlbSh0aW1lLCBwcmljZSwgY29sb3Jlcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9pbnRlcm5hbF9fY3JlYXRlUmF3SXRlbUJhc2UodGltZSwgcHJpY2UpKSwgY29sb3Jlci5faW50ZXJuYWxfYmFyU3R5bGUodGltZSkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX3ByZXBhcmVSZW5kZXJlckRhdGEoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfaXRlbXM6IHRoaXMuX2ludGVybmFsX19pdGVtcyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJTcGFjaW5nOiB0aGlzLl9pbnRlcm5hbF9fbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpLl9pbnRlcm5hbF9iYXJTcGFjaW5nKCksXG4gICAgICAgICAgICBfaW50ZXJuYWxfdmlzaWJsZVJhbmdlOiB0aGlzLl9pbnRlcm5hbF9faXRlbXNWaXNpYmxlUmFuZ2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfaGlzdG9ncmFtQmFzZTogdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpLl9pbnRlcm5hbF9wcmljZVRvQ29vcmRpbmF0ZSh0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCkuYmFzZSwgZW5zdXJlTm90TnVsbCh0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9maXJzdFZhbHVlKCkpLl9pbnRlcm5hbF92YWx1ZSksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19yZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YShkYXRhKTtcbiAgICB9XG59XG5cbmNsYXNzIFNlcmllc0xpbmVQYW5lVmlldyBleHRlbmRzIExpbmVQYW5lVmlld0Jhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fcmVuZGVyZXIgPSBuZXcgUGFuZVJlbmRlcmVyTGluZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2NyZWF0ZVJhd0l0ZW0odGltZSwgcHJpY2UsIGNvbG9yZXIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5faW50ZXJuYWxfX2NyZWF0ZVJhd0l0ZW1CYXNlKHRpbWUsIHByaWNlKSksIGNvbG9yZXIuX2ludGVybmFsX2JhclN0eWxlKHRpbWUpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX19wcmVwYXJlUmVuZGVyZXJEYXRhKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2l0ZW1zOiB0aGlzLl9pbnRlcm5hbF9faXRlbXMsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbGluZVN0eWxlOiBvcHRpb25zLmxpbmVTdHlsZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lVHlwZTogb3B0aW9ucy5saW5lVmlzaWJsZSA/IG9wdGlvbnMubGluZVR5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbGluZVdpZHRoOiBvcHRpb25zLmxpbmVXaWR0aCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9wb2ludE1hcmtlcnNSYWRpdXM6IG9wdGlvbnMucG9pbnRNYXJrZXJzVmlzaWJsZSA/IChvcHRpb25zLnBvaW50TWFya2Vyc1JhZGl1cyB8fCBvcHRpb25zLmxpbmVXaWR0aCAvIDIgKyAyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlUmFuZ2U6IHRoaXMuX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJXaWR0aDogdGhpcy5faW50ZXJuYWxfX21vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfYmFyU3BhY2luZygpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fcmVuZGVyZXIuX2ludGVybmFsX3NldERhdGEoZGF0YSk7XG4gICAgfVxufVxuXG5jb25zdCBkZWZhdWx0UmVwbGFjZW1lbnRSZSA9IC9bMi05XS9nO1xuY2xhc3MgVGV4dFdpZHRoQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKHNpemUgPSA1MCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19hY3R1YWxTaXplID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrID0gMTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb2xkZXN0VGljayA9IDE7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpY2syTGFiZWxzID0ge307XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXhTaXplID0gc2l6ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Jlc2V0KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19hY3R1YWxTaXplID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrID0gMTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb2xkZXN0VGljayA9IDE7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpY2syTGFiZWxzID0ge307XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tZWFzdXJlVGV4dChjdHgsIHRleHQsIG9wdGltaXphdGlvblJlcGxhY2VtZW50UmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2dldE1ldHJpY3MoY3R4LCB0ZXh0LCBvcHRpbWl6YXRpb25SZXBsYWNlbWVudFJlKS53aWR0aDtcbiAgICB9XG4gICAgX2ludGVybmFsX3lNaWRDb3JyZWN0aW9uKGN0eCwgdGV4dCwgb3B0aW1pemF0aW9uUmVwbGFjZW1lbnRSZSkge1xuICAgICAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5fcHJpdmF0ZV9fZ2V0TWV0cmljcyhjdHgsIHRleHQsIG9wdGltaXphdGlvblJlcGxhY2VtZW50UmUpO1xuICAgICAgICAvLyBpZiBhY3R1YWxCb3VuZGluZ0JveEFzY2VudC9hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQgYXJlIG5vdCBzdXBwb3J0ZWQgd2UgdXNlIDAgYXMgYSBmYWxsYmFja1xuICAgICAgICByZXR1cm4gKChtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50IHx8IDApIC0gKG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IHx8IDApKSAvIDI7XG4gICAgfVxuICAgIF9wcml2YXRlX19nZXRNZXRyaWNzKGN0eCwgdGV4dCwgb3B0aW1pemF0aW9uUmVwbGFjZW1lbnRSZSkge1xuICAgICAgICBjb25zdCByZSA9IG9wdGltaXphdGlvblJlcGxhY2VtZW50UmUgfHwgZGVmYXVsdFJlcGxhY2VtZW50UmU7XG4gICAgICAgIGNvbnN0IGNhY2hlU3RyaW5nID0gU3RyaW5nKHRleHQpLnJlcGxhY2UocmUsICcwJyk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19jYWNoZS5oYXMoY2FjaGVTdHJpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5zdXJlRGVmaW5lZCh0aGlzLl9wcml2YXRlX19jYWNoZS5nZXQoY2FjaGVTdHJpbmcpKS5faW50ZXJuYWxfbWV0cmljcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fYWN0dWFsU2l6ZSA9PT0gdGhpcy5fcHJpdmF0ZV9fbWF4U2l6ZSkge1xuICAgICAgICAgICAgY29uc3Qgb2xkZXN0VmFsdWUgPSB0aGlzLl9wcml2YXRlX190aWNrMkxhYmVsc1t0aGlzLl9wcml2YXRlX19vbGRlc3RUaWNrXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wcml2YXRlX190aWNrMkxhYmVsc1t0aGlzLl9wcml2YXRlX19vbGRlc3RUaWNrXTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhY2hlLmRlbGV0ZShvbGRlc3RWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19vbGRlc3RUaWNrKys7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hY3R1YWxTaXplLS07XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KGNhY2hlU3RyaW5nKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgaWYgKG1ldHJpY3Mud2lkdGggPT09IDAgJiYgISF0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gbWVhc3VyZVRleHQgY2FuIHJldHVybiAwIGluIEZGIGRlcGVuZGluZyBvbiBhIGNhbnZhcyBzaXplLCBkb24ndCBjYWNoZSBpdFxuICAgICAgICAgICAgcmV0dXJuIG1ldHJpY3M7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FjaGUuc2V0KGNhY2hlU3RyaW5nLCB7IF9pbnRlcm5hbF9tZXRyaWNzOiBtZXRyaWNzLCBfaW50ZXJuYWxfdGljazogdGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrIH0pO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aWNrMkxhYmVsc1t0aGlzLl9wcml2YXRlX191c2FnZVRpY2tdID0gY2FjaGVTdHJpbmc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FjdHVhbFNpemUrKztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrKys7XG4gICAgICAgIHJldHVybiBtZXRyaWNzO1xuICAgIH1cbn1cblxuY2xhc3MgUGFuZVByaWNlQXhpc1ZpZXdSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3IodGV4dFdpZHRoQ2FjaGUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld1JlbmRlcmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190ZXh0V2lkdGhDYWNoZSA9IHRleHRXaWR0aENhY2hlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UGFyYW1zKHByaWNlQXhpc1ZpZXdSZW5kZXJlciwgcmVuZGVyZXJPcHRpb25zLCBhbGlnbikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3UmVuZGVyZXIgPSBwcmljZUF4aXNWaWV3UmVuZGVyZXI7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyT3B0aW9ucyA9IHJlbmRlcmVyT3B0aW9ucztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYWxpZ24gPSBhbGlnbjtcbiAgICB9XG4gICAgX2ludGVybmFsX2RyYXcodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19yZW5kZXJlck9wdGlvbnMgPT09IG51bGwgfHwgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld1JlbmRlcmVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld1JlbmRlcmVyLl9pbnRlcm5hbF9kcmF3KHRhcmdldCwgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zLCB0aGlzLl9wcml2YXRlX190ZXh0V2lkdGhDYWNoZSwgdGhpcy5fcHJpdmF0ZV9fYWxpZ24pO1xuICAgIH1cbn1cbmNsYXNzIFBhbmVQcmljZUF4aXNWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihwcmljZUF4aXNWaWV3LCBkYXRhU291cmNlLCBjaGFydE1vZGVsKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlQXhpc1ZpZXcgPSBwcmljZUF4aXNWaWV3O1xuICAgICAgICB0aGlzLl9wcml2YXRlX190ZXh0V2lkdGhDYWNoZSA9IG5ldyBUZXh0V2lkdGhDYWNoZSg1MCk7IC8vIHdoZW4gc2hvdWxkIHdlIGNsZWFyIGNhY2hlP1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhU291cmNlID0gZGF0YVNvdXJjZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRNb2RlbCA9IGNoYXJ0TW9kZWw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZvbnRTaXplID0gLTE7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyID0gbmV3IFBhbmVQcmljZUF4aXNWaWV3UmVuZGVyZXIodGhpcy5fcHJpdmF0ZV9fdGV4dFdpZHRoQ2FjaGUpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVuZGVyZXIoKSB7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLl9wcml2YXRlX19jaGFydE1vZGVsLl9pbnRlcm5hbF9wYW5lRm9yU291cmNlKHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2UpO1xuICAgICAgICBpZiAocGFuZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBwcmljZSBzY2FsZSB3aWxsIGJlIHVzZWQgdG8gZmluZCBsYWJlbCBwbGFjZW1lbnQgb25seSAobGVmdCwgcmlnaHQsIG5vbmUpXG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSBwYW5lLl9pbnRlcm5hbF9pc092ZXJsYXkodGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZSkgPyBwYW5lLl9pbnRlcm5hbF9kZWZhdWx0VmlzaWJsZVByaWNlU2NhbGUoKSA6IHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2UuX2ludGVybmFsX3ByaWNlU2NhbGUoKTtcbiAgICAgICAgaWYgKHByaWNlU2NhbGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcGFuZS5faW50ZXJuYWxfcHJpY2VTY2FsZVBvc2l0aW9uKHByaWNlU2NhbGUpO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdvdmVybGF5Jykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0TW9kZWwuX2ludGVybmFsX3ByaWNlQXhpc1JlbmRlcmVyT3B0aW9ucygpO1xuICAgICAgICBpZiAob3B0aW9ucy5faW50ZXJuYWxfZm9udFNpemUgIT09IHRoaXMuX3ByaXZhdGVfX2ZvbnRTaXplKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19mb250U2l6ZSA9IG9wdGlvbnMuX2ludGVybmFsX2ZvbnRTaXplO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGV4dFdpZHRoQ2FjaGUuX2ludGVybmFsX3Jlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXIuX2ludGVybmFsX3NldFBhcmFtcyh0aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3Ll9pbnRlcm5hbF9wYW5lUmVuZGVyZXIoKSwgb3B0aW9ucywgcG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXI7XG4gICAgfVxufVxuXG5jbGFzcyBIb3Jpem9udGFsTGluZVJlbmRlcmVyIGV4dGVuZHMgQml0bWFwQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldERhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgX2ludGVybmFsX2hpdFRlc3QoeCwgeSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghKChfYSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5faW50ZXJuYWxfdmlzaWJsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgX2ludGVybmFsX3k6IGl0ZW1ZLCBfaW50ZXJuYWxfbGluZVdpZHRoOiBsaW5lV2lkdGgsIF9pbnRlcm5hbF9leHRlcm5hbElkOiBleHRlcm5hbElkIH0gPSB0aGlzLl9wcml2YXRlX19kYXRhO1xuICAgICAgICAvLyBhZGQgYSBmaXhlZCBhcmVhIHRocmVzaG9sZCBhcm91bmQgbGluZSAoWSArIHdpZHRoKSBmb3IgaGl0IHRlc3RcbiAgICAgICAgaWYgKHkgPj0gaXRlbVkgLSBsaW5lV2lkdGggLSA3IC8qIENvbnN0YW50cy5IaXRUZXN0VGhyZXNob2xkICovICYmIHkgPD0gaXRlbVkgKyBsaW5lV2lkdGggKyA3IC8qIENvbnN0YW50cy5IaXRUZXN0VGhyZXNob2xkICovKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9oaXRUZXN0RGF0YTogdGhpcy5fcHJpdmF0ZV9fZGF0YSxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfZXh0ZXJuYWxJZDogZXh0ZXJuYWxJZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZHJhd0ltcGwoeyBjb250ZXh0OiBjdHgsIGJpdG1hcFNpemUsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHkgPSBNYXRoLnJvdW5kKHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3kgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICBpZiAoeSA8IDAgfHwgeSA+IGJpdG1hcFNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVDYXAgPSAnYnV0dCc7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2NvbG9yO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gTWF0aC5mbG9vcih0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9saW5lV2lkdGggKiBob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgIHNldExpbmVTdHlsZShjdHgsIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2xpbmVTdHlsZSk7XG4gICAgICAgIGRyYXdIb3Jpem9udGFsTGluZShjdHgsIHksIDAsIGJpdG1hcFNpemUud2lkdGgpO1xuICAgIH1cbn1cblxuY2xhc3MgU2VyaWVzSG9yaXpvbnRhbExpbmVQYW5lVmlldyB7XG4gICAgY29uc3RydWN0b3Ioc2VyaWVzKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX3k6IDAsXG4gICAgICAgICAgICBfaW50ZXJuYWxfY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lV2lkdGg6IDEsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbGluZVN0eWxlOiAwIC8qIExpbmVTdHlsZS5Tb2xpZCAqLyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2xpbmVSZW5kZXJlciA9IG5ldyBIb3Jpem9udGFsTGluZVJlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX3NlcmllcyA9IHNlcmllcztcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX21vZGVsID0gc2VyaWVzLl9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fbGluZVJlbmRlcmVyLl9pbnRlcm5hbF9zZXREYXRhKHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVuZGVyZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfdmlzaWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX191cGRhdGVJbXBsKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbF9fbGluZVJlbmRlcmVyO1xuICAgIH1cbn1cblxuY2xhc3MgU2VyaWVzSG9yaXpvbnRhbEJhc2VMaW5lUGFuZVZpZXcgZXh0ZW5kcyBTZXJpZXNIb3Jpem9udGFsTGluZVBhbmVWaWV3IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jb25zdHJ1Y3RvclxuICAgIGNvbnN0cnVjdG9yKHNlcmllcykge1xuICAgICAgICBzdXBlcihzZXJpZXMpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX3VwZGF0ZUltcGwoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IG1vZGUgPSBwcmljZVNjYWxlLl9pbnRlcm5hbF9tb2RlKCkuX2ludGVybmFsX21vZGU7XG4gICAgICAgIGlmIChtb2RlICE9PSAyIC8qIFByaWNlU2NhbGVNb2RlLlBlcmNlbnRhZ2UgKi8gJiYgbW9kZSAhPT0gMyAvKiBQcmljZVNjYWxlTW9kZS5JbmRleGVkVG8xMDAgKi8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZXJpZXNPcHRpb25zID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICBpZiAoIXNlcmllc09wdGlvbnMuYmFzZUxpbmVWaXNpYmxlIHx8ICF0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF92aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2xpbmVSZW5kZXJlckRhdGEuX2ludGVybmFsX3kgPSBwcmljZVNjYWxlLl9pbnRlcm5hbF9wcmljZVRvQ29vcmRpbmF0ZShmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSwgZmlyc3RWYWx1ZS5faW50ZXJuYWxfdmFsdWUpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fbGluZVJlbmRlcmVyRGF0YS5faW50ZXJuYWxfY29sb3IgPSBzZXJpZXNPcHRpb25zLmJhc2VMaW5lQ29sb3I7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9saW5lV2lkdGggPSBzZXJpZXNPcHRpb25zLmJhc2VMaW5lV2lkdGg7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9saW5lU3R5bGUgPSBzZXJpZXNPcHRpb25zLmJhc2VMaW5lU3R5bGU7XG4gICAgfVxufVxuXG5jbGFzcyBTZXJpZXNMYXN0UHJpY2VBbmltYXRpb25SZW5kZXJlciBleHRlbmRzIEJpdG1hcENvb3JkaW5hdGVzUGFuZVJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YSA9IG51bGw7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXREYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZGF0YTtcbiAgICB9XG4gICAgX2ludGVybmFsX19kcmF3SW1wbCh7IGNvbnRleHQ6IGN0eCwgaG9yaXpvbnRhbFBpeGVsUmF0aW8sIHZlcnRpY2FsUGl4ZWxSYXRpbyB9KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9wcml2YXRlX19kYXRhO1xuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpY2tXaWR0aCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IoaG9yaXpvbnRhbFBpeGVsUmF0aW8pKTtcbiAgICAgICAgY29uc3QgY29ycmVjdGlvbiA9ICh0aWNrV2lkdGggJSAyKSAvIDI7XG4gICAgICAgIGNvbnN0IGNlbnRlclggPSBNYXRoLnJvdW5kKGRhdGEuX2ludGVybmFsX2NlbnRlci54ICogaG9yaXpvbnRhbFBpeGVsUmF0aW8pICsgY29ycmVjdGlvbjsgLy8gY29ycmVjdCB4IGNvb3JkaW5hdGUgb25seVxuICAgICAgICBjb25zdCBjZW50ZXJZID0gZGF0YS5faW50ZXJuYWxfY2VudGVyLnkgKiB2ZXJ0aWNhbFBpeGVsUmF0aW87XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBkYXRhLl9pbnRlcm5hbF9zZXJpZXNMaW5lQ29sb3I7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgLy8gVE9ETzogaXQgaXMgYmV0dGVyIHRvIGhhdmUgZGlmZmVyZW50IGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHJhZGlpXG4gICAgICAgIGNvbnN0IGNlbnRlclBvaW50UmFkaXVzID0gTWF0aC5tYXgoMiwgZGF0YS5faW50ZXJuYWxfc2VyaWVzTGluZVdpZHRoICogMS41KSAqIGhvcml6b250YWxQaXhlbFJhdGlvO1xuICAgICAgICBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIGNlbnRlclBvaW50UmFkaXVzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gZGF0YS5faW50ZXJuYWxfZmlsbENvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgZGF0YS5faW50ZXJuYWxfcmFkaXVzICogaG9yaXpvbnRhbFBpeGVsUmF0aW8sIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aWNrV2lkdGg7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGRhdGEuX2ludGVybmFsX3N0cm9rZUNvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgZGF0YS5faW50ZXJuYWxfcmFkaXVzICogaG9yaXpvbnRhbFBpeGVsUmF0aW8gKyB0aWNrV2lkdGggLyAyLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuXG5jb25zdCBhbmltYXRpb25TdGFnZXNEYXRhID0gW1xuICAgIHtcbiAgICAgICAgX2ludGVybmFsX3N0YXJ0OiAwLFxuICAgICAgICBfaW50ZXJuYWxfZW5kOiAwLjI1IC8qIENvbnN0YW50cy5TdGFnZTFQZXJpb2QgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9zdGFydFJhZGl1czogNCAvKiBDb25zdGFudHMuU3RhZ2UxU3RhcnRDaXJjbGVSYWRpdXMgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9lbmRSYWRpdXM6IDEwIC8qIENvbnN0YW50cy5TdGFnZTFFbmRDaXJjbGVSYWRpdXMgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9zdGFydEZpbGxBbHBoYTogMC4yNSAvKiBDb25zdGFudHMuU3RhZ2UxU3RhcnRGaWxsQWxwaGEgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9lbmRGaWxsQWxwaGE6IDAgLyogQ29uc3RhbnRzLlN0YWdlMUVuZEZpbGxBbHBoYSAqLyxcbiAgICAgICAgX2ludGVybmFsX3N0YXJ0U3Ryb2tlQWxwaGE6IDAuNCAvKiBDb25zdGFudHMuU3RhZ2UxU3RhcnRTdHJva2VBbHBoYSAqLyxcbiAgICAgICAgX2ludGVybmFsX2VuZFN0cm9rZUFscGhhOiAwLjggLyogQ29uc3RhbnRzLlN0YWdlMUVuZFN0cm9rZUFscGhhICovLFxuICAgIH0sXG4gICAge1xuICAgICAgICBfaW50ZXJuYWxfc3RhcnQ6IDAuMjUgLyogQ29uc3RhbnRzLlN0YWdlMVBlcmlvZCAqLyxcbiAgICAgICAgX2ludGVybmFsX2VuZDogMC4yNSAvKiBDb25zdGFudHMuU3RhZ2UxUGVyaW9kICovICsgMC4yNzUgLyogQ29uc3RhbnRzLlN0YWdlMlBlcmlvZCAqLyxcbiAgICAgICAgX2ludGVybmFsX3N0YXJ0UmFkaXVzOiAxMCAvKiBDb25zdGFudHMuU3RhZ2UyU3RhcnRDaXJjbGVSYWRpdXMgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9lbmRSYWRpdXM6IDE0IC8qIENvbnN0YW50cy5TdGFnZTJFbmRDaXJjbGVSYWRpdXMgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9zdGFydEZpbGxBbHBoYTogMCAvKiBDb25zdGFudHMuU3RhZ2UyU3RhcnRGaWxsQWxwaGEgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9lbmRGaWxsQWxwaGE6IDAgLyogQ29uc3RhbnRzLlN0YWdlMkVuZEZpbGxBbHBoYSAqLyxcbiAgICAgICAgX2ludGVybmFsX3N0YXJ0U3Ryb2tlQWxwaGE6IDAuOCAvKiBDb25zdGFudHMuU3RhZ2UyU3RhcnRTdHJva2VBbHBoYSAqLyxcbiAgICAgICAgX2ludGVybmFsX2VuZFN0cm9rZUFscGhhOiAwIC8qIENvbnN0YW50cy5TdGFnZTJFbmRTdHJva2VBbHBoYSAqLyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgX2ludGVybmFsX3N0YXJ0OiAwLjI1IC8qIENvbnN0YW50cy5TdGFnZTFQZXJpb2QgKi8gKyAwLjI3NSAvKiBDb25zdGFudHMuU3RhZ2UyUGVyaW9kICovLFxuICAgICAgICBfaW50ZXJuYWxfZW5kOiAwLjI1IC8qIENvbnN0YW50cy5TdGFnZTFQZXJpb2QgKi8gKyAwLjI3NSAvKiBDb25zdGFudHMuU3RhZ2UyUGVyaW9kICovICsgMC40NzUgLyogQ29uc3RhbnRzLlN0YWdlM1BlcmlvZCAqLyxcbiAgICAgICAgX2ludGVybmFsX3N0YXJ0UmFkaXVzOiAxNCAvKiBDb25zdGFudHMuU3RhZ2UzU3RhcnRDaXJjbGVSYWRpdXMgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9lbmRSYWRpdXM6IDE0IC8qIENvbnN0YW50cy5TdGFnZTNFbmRDaXJjbGVSYWRpdXMgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9zdGFydEZpbGxBbHBoYTogMCAvKiBDb25zdGFudHMuU3RhZ2UzU3RhcnRGaWxsQWxwaGEgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9lbmRGaWxsQWxwaGE6IDAgLyogQ29uc3RhbnRzLlN0YWdlM0VuZEZpbGxBbHBoYSAqLyxcbiAgICAgICAgX2ludGVybmFsX3N0YXJ0U3Ryb2tlQWxwaGE6IDAgLyogQ29uc3RhbnRzLlN0YWdlM1N0YXJ0U3Ryb2tlQWxwaGEgKi8sXG4gICAgICAgIF9pbnRlcm5hbF9lbmRTdHJva2VBbHBoYTogMCAvKiBDb25zdGFudHMuU3RhZ2UzRW5kU3Ryb2tlQWxwaGEgKi8sXG4gICAgfSxcbl07XG5mdW5jdGlvbiBjb2xvcihzZXJpZXNMaW5lQ29sb3IsIHN0YWdlLCBzdGFydEFscGhhLCBlbmRBbHBoYSkge1xuICAgIGNvbnN0IGFscGhhID0gc3RhcnRBbHBoYSArIChlbmRBbHBoYSAtIHN0YXJ0QWxwaGEpICogc3RhZ2U7XG4gICAgcmV0dXJuIGFwcGx5QWxwaGEoc2VyaWVzTGluZUNvbG9yLCBhbHBoYSk7XG59XG5mdW5jdGlvbiByYWRpdXMoc3RhZ2UsIHN0YXJ0UmFkaXVzLCBlbmRSYWRpdXMpIHtcbiAgICByZXR1cm4gc3RhcnRSYWRpdXMgKyAoZW5kUmFkaXVzIC0gc3RhcnRSYWRpdXMpICogc3RhZ2U7XG59XG5mdW5jdGlvbiBhbmltYXRpb25EYXRhKGR1cmF0aW9uU2luY2VTdGFydCwgbGluZUNvbG9yKSB7XG4gICAgY29uc3QgZ2xvYmFsU3RhZ2UgPSAoZHVyYXRpb25TaW5jZVN0YXJ0ICUgMjYwMCAvKiBDb25zdGFudHMuQW5pbWF0aW9uUGVyaW9kICovKSAvIDI2MDAgLyogQ29uc3RhbnRzLkFuaW1hdGlvblBlcmlvZCAqLztcbiAgICBsZXQgY3VycmVudFN0YWdlRGF0YTtcbiAgICBmb3IgKGNvbnN0IHN0YWdlRGF0YSBvZiBhbmltYXRpb25TdGFnZXNEYXRhKSB7XG4gICAgICAgIGlmIChnbG9iYWxTdGFnZSA+PSBzdGFnZURhdGEuX2ludGVybmFsX3N0YXJ0ICYmIGdsb2JhbFN0YWdlIDw9IHN0YWdlRGF0YS5faW50ZXJuYWxfZW5kKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RhZ2VEYXRhID0gc3RhZ2VEYXRhO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXNzZXJ0KGN1cnJlbnRTdGFnZURhdGEgIT09IHVuZGVmaW5lZCwgJ0xhc3QgcHJpY2UgYW5pbWF0aW9uIGludGVybmFsIGxvZ2ljIGVycm9yJyk7XG4gICAgY29uc3Qgc3ViU3RhZ2UgPSAoZ2xvYmFsU3RhZ2UgLSBjdXJyZW50U3RhZ2VEYXRhLl9pbnRlcm5hbF9zdGFydCkgLyAoY3VycmVudFN0YWdlRGF0YS5faW50ZXJuYWxfZW5kIC0gY3VycmVudFN0YWdlRGF0YS5faW50ZXJuYWxfc3RhcnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIF9pbnRlcm5hbF9maWxsQ29sb3I6IGNvbG9yKGxpbmVDb2xvciwgc3ViU3RhZ2UsIGN1cnJlbnRTdGFnZURhdGEuX2ludGVybmFsX3N0YXJ0RmlsbEFscGhhLCBjdXJyZW50U3RhZ2VEYXRhLl9pbnRlcm5hbF9lbmRGaWxsQWxwaGEpLFxuICAgICAgICBfaW50ZXJuYWxfc3Ryb2tlQ29sb3I6IGNvbG9yKGxpbmVDb2xvciwgc3ViU3RhZ2UsIGN1cnJlbnRTdGFnZURhdGEuX2ludGVybmFsX3N0YXJ0U3Ryb2tlQWxwaGEsIGN1cnJlbnRTdGFnZURhdGEuX2ludGVybmFsX2VuZFN0cm9rZUFscGhhKSxcbiAgICAgICAgX2ludGVybmFsX3JhZGl1czogcmFkaXVzKHN1YlN0YWdlLCBjdXJyZW50U3RhZ2VEYXRhLl9pbnRlcm5hbF9zdGFydFJhZGl1cywgY3VycmVudFN0YWdlRGF0YS5faW50ZXJuYWxfZW5kUmFkaXVzKSxcbiAgICB9O1xufVxuY2xhc3MgU2VyaWVzTGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXcge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllcykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlciA9IG5ldyBTZXJpZXNMYXN0UHJpY2VBbmltYXRpb25SZW5kZXJlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YWdlSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZW5kVGltZSA9IHRoaXMuX3ByaXZhdGVfX3N0YXJ0VGltZSAtIDE7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NlcmllcyA9IHNlcmllcztcbiAgICB9XG4gICAgX2ludGVybmFsX29uRGF0YUNsZWFyZWQoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VuZFRpbWUgPSB0aGlzLl9wcml2YXRlX19zdGFydFRpbWUgLSAxO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF91cGRhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX29uTmV3UmVhbHRpbWVEYXRhUmVjZWl2ZWQoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCkubGFzdFByaWNlQW5pbWF0aW9uID09PSAyIC8qIExhc3RQcmljZUFuaW1hdGlvbk1vZGUuT25EYXRhVXBkYXRlICovKSB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVUb0FuaW1hdGlvbkVuZCA9IHRoaXMuX3ByaXZhdGVfX2VuZFRpbWUgLSBub3c7XG4gICAgICAgICAgICBpZiAodGltZVRvQW5pbWF0aW9uRW5kID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lVG9BbmltYXRpb25FbmQgPCAyNjAwIC8qIENvbnN0YW50cy5BbmltYXRpb25QZXJpb2QgKi8gLyA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2VuZFRpbWUgKz0gMjYwMCAvKiBDb25zdGFudHMuQW5pbWF0aW9uUGVyaW9kICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFydFRpbWUgPSBub3c7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19lbmRUaW1lID0gbm93ICsgMjYwMCAvKiBDb25zdGFudHMuQW5pbWF0aW9uUGVyaW9kICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2ludmFsaWRhdGVTdGFnZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3RhZ2VJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF92aXNpYmxlKCkge1xuICAgICAgICAvLyBjZW50ZXIgcG9pbnQgaXMgYWx3YXlzIHZpc2libGUgaWYgbGFzdFByaWNlQW5pbWF0aW9uIGlzIG5vdCBMYXN0UHJpY2VBbmltYXRpb25Nb2RlLkRpc2FibGVkXG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19zZXJpZXMuX2ludGVybmFsX29wdGlvbnMoKS5sYXN0UHJpY2VBbmltYXRpb24gIT09IDAgLyogTGFzdFByaWNlQW5pbWF0aW9uTW9kZS5EaXNhYmxlZCAqLztcbiAgICB9XG4gICAgX2ludGVybmFsX2FuaW1hdGlvbkFjdGl2ZSgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9wcml2YXRlX19zZXJpZXMuX2ludGVybmFsX29wdGlvbnMoKS5sYXN0UHJpY2VBbmltYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBMYXN0UHJpY2VBbmltYXRpb25Nb2RlLkRpc2FibGVkICovOlxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgMSAvKiBMYXN0UHJpY2VBbmltYXRpb25Nb2RlLkNvbnRpbnVvdXMgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBjYXNlIDIgLyogTGFzdFByaWNlQW5pbWF0aW9uTW9kZS5PbkRhdGFVcGRhdGUgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpIDw9IHRoaXMuX3ByaXZhdGVfX2VuZFRpbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX3JlbmRlcmVyKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZUltcGwoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFnZUludmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhZ2VJbnZhbGlkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXBkYXRlUmVuZGVyZXJEYXRhU3RhZ2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YWdlSW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXI7XG4gICAgfVxuICAgIF9wcml2YXRlX191cGRhdGVJbXBsKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YShudWxsKTtcbiAgICAgICAgY29uc3QgdGltZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF90aW1lU2NhbGUoKTtcbiAgICAgICAgY29uc3QgdmlzaWJsZVJhbmdlID0gdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAodmlzaWJsZVJhbmdlID09PSBudWxsIHx8IGZpcnN0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0VmFsdWUgPSB0aGlzLl9wcml2YXRlX19zZXJpZXMuX2ludGVybmFsX2xhc3RWYWx1ZURhdGEodHJ1ZSk7XG4gICAgICAgIGlmIChsYXN0VmFsdWUuX2ludGVybmFsX25vRGF0YSB8fCAhdmlzaWJsZVJhbmdlLl9pbnRlcm5hbF9jb250YWlucyhsYXN0VmFsdWUuX2ludGVybmFsX2luZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RWYWx1ZVBvaW50ID0ge1xuICAgICAgICAgICAgeDogdGltZVNjYWxlLl9pbnRlcm5hbF9pbmRleFRvQ29vcmRpbmF0ZShsYXN0VmFsdWUuX2ludGVybmFsX2luZGV4KSxcbiAgICAgICAgICAgIHk6IHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpLl9pbnRlcm5hbF9wcmljZVRvQ29vcmRpbmF0ZShsYXN0VmFsdWUuX2ludGVybmFsX3ByaWNlLCBmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNlcmllc0xpbmVDb2xvciA9IGxhc3RWYWx1ZS5faW50ZXJuYWxfY29sb3I7XG4gICAgICAgIGNvbnN0IHNlcmllc0xpbmVXaWR0aCA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfb3B0aW9ucygpLmxpbmVXaWR0aDtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFuaW1hdGlvbkRhdGEodGhpcy5fcHJpdmF0ZV9fZHVyYXRpb24oKSwgc2VyaWVzTGluZUNvbG9yKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXIuX2ludGVybmFsX3NldERhdGEoe1xuICAgICAgICAgICAgX2ludGVybmFsX3Nlcmllc0xpbmVDb2xvcjogc2VyaWVzTGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX3Nlcmllc0xpbmVXaWR0aDogc2VyaWVzTGluZVdpZHRoLFxuICAgICAgICAgICAgX2ludGVybmFsX2ZpbGxDb2xvcjogZGF0YS5faW50ZXJuYWxfZmlsbENvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX3N0cm9rZUNvbG9yOiBkYXRhLl9pbnRlcm5hbF9zdHJva2VDb2xvcixcbiAgICAgICAgICAgIF9pbnRlcm5hbF9yYWRpdXM6IGRhdGEuX2ludGVybmFsX3JhZGl1cyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9jZW50ZXI6IGxhc3RWYWx1ZVBvaW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3VwZGF0ZVJlbmRlcmVyRGF0YVN0YWdlKCkge1xuICAgICAgICBjb25zdCByZW5kZXJlckRhdGEgPSB0aGlzLl9wcml2YXRlX19yZW5kZXJlci5faW50ZXJuYWxfZGF0YSgpO1xuICAgICAgICBpZiAocmVuZGVyZXJEYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYW5pbWF0aW9uRGF0YSh0aGlzLl9wcml2YXRlX19kdXJhdGlvbigpLCByZW5kZXJlckRhdGEuX2ludGVybmFsX3Nlcmllc0xpbmVDb2xvcik7XG4gICAgICAgICAgICByZW5kZXJlckRhdGEuX2ludGVybmFsX2ZpbGxDb2xvciA9IGRhdGEuX2ludGVybmFsX2ZpbGxDb2xvcjtcbiAgICAgICAgICAgIHJlbmRlcmVyRGF0YS5faW50ZXJuYWxfc3Ryb2tlQ29sb3IgPSBkYXRhLl9pbnRlcm5hbF9zdHJva2VDb2xvcjtcbiAgICAgICAgICAgIHJlbmRlcmVyRGF0YS5faW50ZXJuYWxfcmFkaXVzID0gZGF0YS5faW50ZXJuYWxfcmFkaXVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19kdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX2FuaW1hdGlvbkFjdGl2ZSgpID8gcGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLl9wcml2YXRlX19zdGFydFRpbWUgOiAyNjAwIC8qIENvbnN0YW50cy5BbmltYXRpb25QZXJpb2QgKi8gLSAxO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2l6ZShiYXJTcGFjaW5nLCBjb2VmZikge1xuICAgIGNvbnN0IHJlc3VsdCA9IE1hdGgubWluKE1hdGgubWF4KGJhclNwYWNpbmcsIDEyIC8qIENvbnN0YW50cy5NaW5TaGFwZVNpemUgKi8pLCAzMCAvKiBDb25zdGFudHMuTWF4U2hhcGVTaXplICovKSAqIGNvZWZmO1xuICAgIHJldHVybiBjZWlsZWRPZGQocmVzdWx0KTtcbn1cbmZ1bmN0aW9uIHNoYXBlU2l6ZShzaGFwZSwgb3JpZ2luYWxTaXplKSB7XG4gICAgc3dpdGNoIChzaGFwZSkge1xuICAgICAgICBjYXNlICdhcnJvd0Rvd24nOlxuICAgICAgICBjYXNlICdhcnJvd1VwJzpcbiAgICAgICAgICAgIHJldHVybiBzaXplKG9yaWdpbmFsU2l6ZSwgMSk7XG4gICAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgICAgICByZXR1cm4gc2l6ZShvcmlnaW5hbFNpemUsIDAuOCk7XG4gICAgICAgIGNhc2UgJ3NxdWFyZSc6XG4gICAgICAgICAgICByZXR1cm4gc2l6ZShvcmlnaW5hbFNpemUsIDAuNyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2FsY3VsYXRlU2hhcGVIZWlnaHQoYmFyU3BhY2luZykge1xuICAgIHJldHVybiBjZWlsZWRFdmVuKHNpemUoYmFyU3BhY2luZywgMSkpO1xufVxuZnVuY3Rpb24gc2hhcGVNYXJnaW4oYmFyU3BhY2luZykge1xuICAgIHJldHVybiBNYXRoLm1heChzaXplKGJhclNwYWNpbmcsIDAuMSksIDMgLyogQ29uc3RhbnRzLk1pblNoYXBlTWFyZ2luICovKTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUFkanVzdGVkTWFyZ2luKG1hcmdpbiwgaGFzU2lkZSwgaGFzSW5CYXIpIHtcbiAgICBpZiAoaGFzU2lkZSkge1xuICAgICAgICByZXR1cm4gbWFyZ2luO1xuICAgIH1cbiAgICBlbHNlIGlmIChoYXNJbkJhcikge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG1hcmdpbiAvIDIpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gZHJhd1NxdWFyZShjdHgsIGNvb3Jkcywgc2l6ZSkge1xuICAgIGNvbnN0IHNxdWFyZVNpemUgPSBzaGFwZVNpemUoJ3NxdWFyZScsIHNpemUpO1xuICAgIGNvbnN0IGhhbGZTaXplID0gKChzcXVhcmVTaXplIC0gMSkgKiBjb29yZHMuX2ludGVybmFsX3BpeGVsUmF0aW8pIC8gMjtcbiAgICBjb25zdCBsZWZ0ID0gY29vcmRzLl9pbnRlcm5hbF94IC0gaGFsZlNpemU7XG4gICAgY29uc3QgdG9wID0gY29vcmRzLl9pbnRlcm5hbF95IC0gaGFsZlNpemU7XG4gICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgc3F1YXJlU2l6ZSAqIGNvb3Jkcy5faW50ZXJuYWxfcGl4ZWxSYXRpbywgc3F1YXJlU2l6ZSAqIGNvb3Jkcy5faW50ZXJuYWxfcGl4ZWxSYXRpbyk7XG59XG5mdW5jdGlvbiBoaXRUZXN0U3F1YXJlKGNlbnRlclgsIGNlbnRlclksIHNpemUsIHgsIHkpIHtcbiAgICBjb25zdCBzcXVhcmVTaXplID0gc2hhcGVTaXplKCdzcXVhcmUnLCBzaXplKTtcbiAgICBjb25zdCBoYWxmU2l6ZSA9IChzcXVhcmVTaXplIC0gMSkgLyAyO1xuICAgIGNvbnN0IGxlZnQgPSBjZW50ZXJYIC0gaGFsZlNpemU7XG4gICAgY29uc3QgdG9wID0gY2VudGVyWSAtIGhhbGZTaXplO1xuICAgIHJldHVybiB4ID49IGxlZnQgJiYgeCA8PSBsZWZ0ICsgc3F1YXJlU2l6ZSAmJlxuICAgICAgICB5ID49IHRvcCAmJiB5IDw9IHRvcCArIHNxdWFyZVNpemU7XG59XG5cbmZ1bmN0aW9uIGRyYXdBcnJvdyh1cCwgY3R4LCBjb29yZHMsIHNpemUpIHtcbiAgICBjb25zdCBhcnJvd1NpemUgPSBzaGFwZVNpemUoJ2Fycm93VXAnLCBzaXplKTtcbiAgICBjb25zdCBoYWxmQXJyb3dTaXplID0gKChhcnJvd1NpemUgLSAxKSAvIDIpICogY29vcmRzLl9pbnRlcm5hbF9waXhlbFJhdGlvO1xuICAgIGNvbnN0IGJhc2VTaXplID0gY2VpbGVkT2RkKHNpemUgLyAyKTtcbiAgICBjb25zdCBoYWxmQmFzZVNpemUgPSAoKGJhc2VTaXplIC0gMSkgLyAyKSAqIGNvb3Jkcy5faW50ZXJuYWxfcGl4ZWxSYXRpbztcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgaWYgKHVwKSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oY29vcmRzLl9pbnRlcm5hbF94IC0gaGFsZkFycm93U2l6ZSwgY29vcmRzLl9pbnRlcm5hbF95KTtcbiAgICAgICAgY3R4LmxpbmVUbyhjb29yZHMuX2ludGVybmFsX3gsIGNvb3Jkcy5faW50ZXJuYWxfeSAtIGhhbGZBcnJvd1NpemUpO1xuICAgICAgICBjdHgubGluZVRvKGNvb3Jkcy5faW50ZXJuYWxfeCArIGhhbGZBcnJvd1NpemUsIGNvb3Jkcy5faW50ZXJuYWxfeSk7XG4gICAgICAgIGN0eC5saW5lVG8oY29vcmRzLl9pbnRlcm5hbF94ICsgaGFsZkJhc2VTaXplLCBjb29yZHMuX2ludGVybmFsX3kpO1xuICAgICAgICBjdHgubGluZVRvKGNvb3Jkcy5faW50ZXJuYWxfeCArIGhhbGZCYXNlU2l6ZSwgY29vcmRzLl9pbnRlcm5hbF95ICsgaGFsZkFycm93U2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oY29vcmRzLl9pbnRlcm5hbF94IC0gaGFsZkJhc2VTaXplLCBjb29yZHMuX2ludGVybmFsX3kgKyBoYWxmQXJyb3dTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyhjb29yZHMuX2ludGVybmFsX3ggLSBoYWxmQmFzZVNpemUsIGNvb3Jkcy5faW50ZXJuYWxfeSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjdHgubW92ZVRvKGNvb3Jkcy5faW50ZXJuYWxfeCAtIGhhbGZBcnJvd1NpemUsIGNvb3Jkcy5faW50ZXJuYWxfeSk7XG4gICAgICAgIGN0eC5saW5lVG8oY29vcmRzLl9pbnRlcm5hbF94LCBjb29yZHMuX2ludGVybmFsX3kgKyBoYWxmQXJyb3dTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyhjb29yZHMuX2ludGVybmFsX3ggKyBoYWxmQXJyb3dTaXplLCBjb29yZHMuX2ludGVybmFsX3kpO1xuICAgICAgICBjdHgubGluZVRvKGNvb3Jkcy5faW50ZXJuYWxfeCArIGhhbGZCYXNlU2l6ZSwgY29vcmRzLl9pbnRlcm5hbF95KTtcbiAgICAgICAgY3R4LmxpbmVUbyhjb29yZHMuX2ludGVybmFsX3ggKyBoYWxmQmFzZVNpemUsIGNvb3Jkcy5faW50ZXJuYWxfeSAtIGhhbGZBcnJvd1NpemUpO1xuICAgICAgICBjdHgubGluZVRvKGNvb3Jkcy5faW50ZXJuYWxfeCAtIGhhbGZCYXNlU2l6ZSwgY29vcmRzLl9pbnRlcm5hbF95IC0gaGFsZkFycm93U2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oY29vcmRzLl9pbnRlcm5hbF94IC0gaGFsZkJhc2VTaXplLCBjb29yZHMuX2ludGVybmFsX3kpO1xuICAgIH1cbiAgICBjdHguZmlsbCgpO1xufVxuZnVuY3Rpb24gaGl0VGVzdEFycm93KHVwLCBjZW50ZXJYLCBjZW50ZXJZLCBzaXplLCB4LCB5KSB7XG4gICAgLy8gVE9ETzogaW1wbGVtZW50IGFycm93IGhpdCB0ZXN0XG4gICAgcmV0dXJuIGhpdFRlc3RTcXVhcmUoY2VudGVyWCwgY2VudGVyWSwgc2l6ZSwgeCwgeSk7XG59XG5cbmZ1bmN0aW9uIGRyYXdDaXJjbGUoY3R4LCBjb29yZHMsIHNpemUpIHtcbiAgICBjb25zdCBjaXJjbGVTaXplID0gc2hhcGVTaXplKCdjaXJjbGUnLCBzaXplKTtcbiAgICBjb25zdCBoYWxmU2l6ZSA9IChjaXJjbGVTaXplIC0gMSkgLyAyO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKGNvb3Jkcy5faW50ZXJuYWxfeCwgY29vcmRzLl9pbnRlcm5hbF95LCBoYWxmU2l6ZSAqIGNvb3Jkcy5faW50ZXJuYWxfcGl4ZWxSYXRpbywgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICBjdHguZmlsbCgpO1xufVxuZnVuY3Rpb24gaGl0VGVzdENpcmNsZShjZW50ZXJYLCBjZW50ZXJZLCBzaXplLCB4LCB5KSB7XG4gICAgY29uc3QgY2lyY2xlU2l6ZSA9IHNoYXBlU2l6ZSgnY2lyY2xlJywgc2l6ZSk7XG4gICAgY29uc3QgdG9sZXJhbmNlID0gMiArIGNpcmNsZVNpemUgLyAyO1xuICAgIGNvbnN0IHhPZmZzZXQgPSBjZW50ZXJYIC0geDtcbiAgICBjb25zdCB5T2Zmc2V0ID0gY2VudGVyWSAtIHk7XG4gICAgY29uc3QgZGlzdCA9IE1hdGguc3FydCh4T2Zmc2V0ICogeE9mZnNldCArIHlPZmZzZXQgKiB5T2Zmc2V0KTtcbiAgICByZXR1cm4gZGlzdCA8PSB0b2xlcmFuY2U7XG59XG5cbmZ1bmN0aW9uIGRyYXdUZXh0KGN0eCwgdGV4dCwgeCwgeSwgaG9yaXpvbnRhbFBpeGVsUmF0aW8sIHZlcnRpY2FsUGl4ZWxSYXRpbykge1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnNjYWxlKGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgIGN0eC5maWxsVGV4dCh0ZXh0LCB4LCB5KTtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gaGl0VGVzdFRleHQodGV4dFgsIHRleHRZLCB0ZXh0V2lkdGgsIHRleHRIZWlnaHQsIHgsIHkpIHtcbiAgICBjb25zdCBoYWxmSGVpZ2h0ID0gdGV4dEhlaWdodCAvIDI7XG4gICAgcmV0dXJuIHggPj0gdGV4dFggJiYgeCA8PSB0ZXh0WCArIHRleHRXaWR0aCAmJlxuICAgICAgICB5ID49IHRleHRZIC0gaGFsZkhlaWdodCAmJiB5IDw9IHRleHRZICsgaGFsZkhlaWdodDtcbn1cblxuY2xhc3MgU2VyaWVzTWFya2Vyc1JlbmRlcmVyIGV4dGVuZHMgQml0bWFwQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGV4dFdpZHRoQ2FjaGUgPSBuZXcgVGV4dFdpZHRoQ2FjaGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9udFNpemUgPSAtMTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9udEZhbWlseSA9ICcnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19mb250ID0gJyc7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXREYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRQYXJhbXMoZm9udFNpemUsIGZvbnRGYW1pbHkpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2ZvbnRTaXplICE9PSBmb250U2l6ZSB8fCB0aGlzLl9wcml2YXRlX19mb250RmFtaWx5ICE9PSBmb250RmFtaWx5KSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19mb250U2l6ZSA9IGZvbnRTaXplO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19mb250ID0gbWFrZUZvbnQoZm9udFNpemUsIGZvbnRGYW1pbHkpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGV4dFdpZHRoQ2FjaGUuX2ludGVybmFsX3Jlc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX2hpdFRlc3QoeCwgeSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UuZnJvbTsgaSA8IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZS50bzsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoaGl0VGVzdEl0ZW0oaXRlbSwgeCwgeSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBfaW50ZXJuYWxfaGl0VGVzdERhdGE6IGl0ZW0uX2ludGVybmFsX2ludGVybmFsSWQsXG4gICAgICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9leHRlcm5hbElkOiBpdGVtLl9pbnRlcm5hbF9leHRlcm5hbElkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZHJhd0ltcGwoeyBjb250ZXh0OiBjdHgsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5mb250ID0gdGhpcy5fcHJpdmF0ZV9fZm9udDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZS5mcm9tOyBpIDwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLnRvOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChpdGVtLl9pbnRlcm5hbF90ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpdGVtLl9pbnRlcm5hbF90ZXh0Ll9pbnRlcm5hbF93aWR0aCA9IHRoaXMuX3ByaXZhdGVfX3RleHRXaWR0aENhY2hlLl9pbnRlcm5hbF9tZWFzdXJlVGV4dChjdHgsIGl0ZW0uX2ludGVybmFsX3RleHQuX2ludGVybmFsX2NvbnRlbnQpO1xuICAgICAgICAgICAgICAgIGl0ZW0uX2ludGVybmFsX3RleHQuX2ludGVybmFsX2hlaWdodCA9IHRoaXMuX3ByaXZhdGVfX2ZvbnRTaXplO1xuICAgICAgICAgICAgICAgIGl0ZW0uX2ludGVybmFsX3RleHQuX2ludGVybmFsX3ggPSBpdGVtLl9pbnRlcm5hbF94IC0gaXRlbS5faW50ZXJuYWxfdGV4dC5faW50ZXJuYWxfd2lkdGggLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHJhd0l0ZW0oaXRlbSwgY3R4LCBob3Jpem9udGFsUGl4ZWxSYXRpbywgdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGJpdG1hcFNoYXBlSXRlbUNvb3JkaW5hdGVzKGl0ZW0sIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8pIHtcbiAgICBjb25zdCB0aWNrV2lkdGggPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKGhvcml6b250YWxQaXhlbFJhdGlvKSk7XG4gICAgY29uc3QgY29ycmVjdGlvbiA9ICh0aWNrV2lkdGggJSAyKSAvIDI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2ludGVybmFsX3g6IE1hdGgucm91bmQoaXRlbS5faW50ZXJuYWxfeCAqIGhvcml6b250YWxQaXhlbFJhdGlvKSArIGNvcnJlY3Rpb24sXG4gICAgICAgIF9pbnRlcm5hbF95OiBpdGVtLl9pbnRlcm5hbF95ICogdmVydGljYWxQaXhlbFJhdGlvLFxuICAgICAgICBfaW50ZXJuYWxfcGl4ZWxSYXRpbzogaG9yaXpvbnRhbFBpeGVsUmF0aW8sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRyYXdJdGVtKGl0ZW0sIGN0eCwgaG9yaXpvbnRhbFBpeGVsUmF0aW8sIHZlcnRpY2FsUGl4ZWxSYXRpbykge1xuICAgIGN0eC5maWxsU3R5bGUgPSBpdGVtLl9pbnRlcm5hbF9jb2xvcjtcbiAgICBpZiAoaXRlbS5faW50ZXJuYWxfdGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRyYXdUZXh0KGN0eCwgaXRlbS5faW50ZXJuYWxfdGV4dC5faW50ZXJuYWxfY29udGVudCwgaXRlbS5faW50ZXJuYWxfdGV4dC5faW50ZXJuYWxfeCwgaXRlbS5faW50ZXJuYWxfdGV4dC5faW50ZXJuYWxfeSwgaG9yaXpvbnRhbFBpeGVsUmF0aW8sIHZlcnRpY2FsUGl4ZWxSYXRpbyk7XG4gICAgfVxuICAgIGRyYXdTaGFwZShpdGVtLCBjdHgsIGJpdG1hcFNoYXBlSXRlbUNvb3JkaW5hdGVzKGl0ZW0sIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8pKTtcbn1cbmZ1bmN0aW9uIGRyYXdTaGFwZShpdGVtLCBjdHgsIGNvb3JkaW5hdGVzKSB7XG4gICAgaWYgKGl0ZW0uX2ludGVybmFsX3NpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGl0ZW0uX2ludGVybmFsX3NoYXBlKSB7XG4gICAgICAgIGNhc2UgJ2Fycm93RG93bic6XG4gICAgICAgICAgICBkcmF3QXJyb3coZmFsc2UsIGN0eCwgY29vcmRpbmF0ZXMsIGl0ZW0uX2ludGVybmFsX3NpemUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlICdhcnJvd1VwJzpcbiAgICAgICAgICAgIGRyYXdBcnJvdyh0cnVlLCBjdHgsIGNvb3JkaW5hdGVzLCBpdGVtLl9pbnRlcm5hbF9zaXplKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSAnY2lyY2xlJzpcbiAgICAgICAgICAgIGRyYXdDaXJjbGUoY3R4LCBjb29yZGluYXRlcywgaXRlbS5faW50ZXJuYWxfc2l6ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgJ3NxdWFyZSc6XG4gICAgICAgICAgICBkcmF3U3F1YXJlKGN0eCwgY29vcmRpbmF0ZXMsIGl0ZW0uX2ludGVybmFsX3NpemUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbnN1cmVOZXZlcihpdGVtLl9pbnRlcm5hbF9zaGFwZSk7XG59XG5mdW5jdGlvbiBoaXRUZXN0SXRlbShpdGVtLCB4LCB5KSB7XG4gICAgaWYgKGl0ZW0uX2ludGVybmFsX3RleHQgIT09IHVuZGVmaW5lZCAmJiBoaXRUZXN0VGV4dChpdGVtLl9pbnRlcm5hbF90ZXh0Ll9pbnRlcm5hbF94LCBpdGVtLl9pbnRlcm5hbF90ZXh0Ll9pbnRlcm5hbF95LCBpdGVtLl9pbnRlcm5hbF90ZXh0Ll9pbnRlcm5hbF93aWR0aCwgaXRlbS5faW50ZXJuYWxfdGV4dC5faW50ZXJuYWxfaGVpZ2h0LCB4LCB5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhpdFRlc3RTaGFwZShpdGVtLCB4LCB5KTtcbn1cbmZ1bmN0aW9uIGhpdFRlc3RTaGFwZShpdGVtLCB4LCB5KSB7XG4gICAgaWYgKGl0ZW0uX2ludGVybmFsX3NpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzd2l0Y2ggKGl0ZW0uX2ludGVybmFsX3NoYXBlKSB7XG4gICAgICAgIGNhc2UgJ2Fycm93RG93bic6XG4gICAgICAgICAgICByZXR1cm4gaGl0VGVzdEFycm93KHRydWUsIGl0ZW0uX2ludGVybmFsX3gsIGl0ZW0uX2ludGVybmFsX3ksIGl0ZW0uX2ludGVybmFsX3NpemUsIHgsIHkpO1xuICAgICAgICBjYXNlICdhcnJvd1VwJzpcbiAgICAgICAgICAgIHJldHVybiBoaXRUZXN0QXJyb3coZmFsc2UsIGl0ZW0uX2ludGVybmFsX3gsIGl0ZW0uX2ludGVybmFsX3ksIGl0ZW0uX2ludGVybmFsX3NpemUsIHgsIHkpO1xuICAgICAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgICAgICAgcmV0dXJuIGhpdFRlc3RDaXJjbGUoaXRlbS5faW50ZXJuYWxfeCwgaXRlbS5faW50ZXJuYWxfeSwgaXRlbS5faW50ZXJuYWxfc2l6ZSwgeCwgeSk7XG4gICAgICAgIGNhc2UgJ3NxdWFyZSc6XG4gICAgICAgICAgICByZXR1cm4gaGl0VGVzdFNxdWFyZShpdGVtLl9pbnRlcm5hbF94LCBpdGVtLl9pbnRlcm5hbF95LCBpdGVtLl9pbnRlcm5hbF9zaXplLCB4LCB5KTtcbiAgICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5mdW5jdGlvbiBmaWxsU2l6ZUFuZFkocmVuZGVyZXJJdGVtLCBtYXJrZXIsIHNlcmllc0RhdGEsIG9mZnNldHMsIHRleHRIZWlnaHQsIHNoYXBlTWFyZ2luLCBwcmljZVNjYWxlLCB0aW1lU2NhbGUsIGZpcnN0VmFsdWUpIHtcbiAgICBjb25zdCBpbkJhclByaWNlID0gaXNOdW1iZXIoc2VyaWVzRGF0YSkgPyBzZXJpZXNEYXRhIDogc2VyaWVzRGF0YS5faW50ZXJuYWxfY2xvc2U7XG4gICAgY29uc3QgaGlnaFByaWNlID0gaXNOdW1iZXIoc2VyaWVzRGF0YSkgPyBzZXJpZXNEYXRhIDogc2VyaWVzRGF0YS5faW50ZXJuYWxfaGlnaDtcbiAgICBjb25zdCBsb3dQcmljZSA9IGlzTnVtYmVyKHNlcmllc0RhdGEpID8gc2VyaWVzRGF0YSA6IHNlcmllc0RhdGEuX2ludGVybmFsX2xvdztcbiAgICBjb25zdCBzaXplTXVsdGlwbGllciA9IGlzTnVtYmVyKG1hcmtlci5zaXplKSA/IE1hdGgubWF4KG1hcmtlci5zaXplLCAwKSA6IDE7XG4gICAgY29uc3Qgc2hhcGVTaXplID0gY2FsY3VsYXRlU2hhcGVIZWlnaHQodGltZVNjYWxlLl9pbnRlcm5hbF9iYXJTcGFjaW5nKCkpICogc2l6ZU11bHRpcGxpZXI7XG4gICAgY29uc3QgaGFsZlNpemUgPSBzaGFwZVNpemUgLyAyO1xuICAgIHJlbmRlcmVySXRlbS5faW50ZXJuYWxfc2l6ZSA9IHNoYXBlU2l6ZTtcbiAgICBzd2l0Y2ggKG1hcmtlci5wb3NpdGlvbikge1xuICAgICAgICBjYXNlICdpbkJhcic6IHtcbiAgICAgICAgICAgIHJlbmRlcmVySXRlbS5faW50ZXJuYWxfeSA9IHByaWNlU2NhbGUuX2ludGVybmFsX3ByaWNlVG9Db29yZGluYXRlKGluQmFyUHJpY2UsIGZpcnN0VmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlbmRlcmVySXRlbS5faW50ZXJuYWxfdGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXJJdGVtLl9pbnRlcm5hbF90ZXh0Ll9pbnRlcm5hbF95ID0gcmVuZGVyZXJJdGVtLl9pbnRlcm5hbF95ICsgaGFsZlNpemUgKyBzaGFwZU1hcmdpbiArIHRleHRIZWlnaHQgKiAoMC41ICsgMC4xIC8qIENvbnN0YW50cy5UZXh0TWFyZ2luICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdhYm92ZUJhcic6IHtcbiAgICAgICAgICAgIHJlbmRlcmVySXRlbS5faW50ZXJuYWxfeSA9IChwcmljZVNjYWxlLl9pbnRlcm5hbF9wcmljZVRvQ29vcmRpbmF0ZShoaWdoUHJpY2UsIGZpcnN0VmFsdWUpIC0gaGFsZlNpemUgLSBvZmZzZXRzLl9pbnRlcm5hbF9hYm92ZUJhcik7XG4gICAgICAgICAgICBpZiAocmVuZGVyZXJJdGVtLl9pbnRlcm5hbF90ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlckl0ZW0uX2ludGVybmFsX3RleHQuX2ludGVybmFsX3kgPSByZW5kZXJlckl0ZW0uX2ludGVybmFsX3kgLSBoYWxmU2l6ZSAtIHRleHRIZWlnaHQgKiAoMC41ICsgMC4xIC8qIENvbnN0YW50cy5UZXh0TWFyZ2luICovKTtcbiAgICAgICAgICAgICAgICBvZmZzZXRzLl9pbnRlcm5hbF9hYm92ZUJhciArPSB0ZXh0SGVpZ2h0ICogKDEgKyAyICogMC4xIC8qIENvbnN0YW50cy5UZXh0TWFyZ2luICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldHMuX2ludGVybmFsX2Fib3ZlQmFyICs9IHNoYXBlU2l6ZSArIHNoYXBlTWFyZ2luO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2JlbG93QmFyJzoge1xuICAgICAgICAgICAgcmVuZGVyZXJJdGVtLl9pbnRlcm5hbF95ID0gKHByaWNlU2NhbGUuX2ludGVybmFsX3ByaWNlVG9Db29yZGluYXRlKGxvd1ByaWNlLCBmaXJzdFZhbHVlKSArIGhhbGZTaXplICsgb2Zmc2V0cy5faW50ZXJuYWxfYmVsb3dCYXIpO1xuICAgICAgICAgICAgaWYgKHJlbmRlcmVySXRlbS5faW50ZXJuYWxfdGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXJJdGVtLl9pbnRlcm5hbF90ZXh0Ll9pbnRlcm5hbF95ID0gcmVuZGVyZXJJdGVtLl9pbnRlcm5hbF95ICsgaGFsZlNpemUgKyBzaGFwZU1hcmdpbiArIHRleHRIZWlnaHQgKiAoMC41ICsgMC4xIC8qIENvbnN0YW50cy5UZXh0TWFyZ2luICovKTtcbiAgICAgICAgICAgICAgICBvZmZzZXRzLl9pbnRlcm5hbF9iZWxvd0JhciArPSB0ZXh0SGVpZ2h0ICogKDEgKyAyICogMC4xIC8qIENvbnN0YW50cy5UZXh0TWFyZ2luICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldHMuX2ludGVybmFsX2JlbG93QmFyICs9IHNoYXBlU2l6ZSArIHNoYXBlTWFyZ2luO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVuc3VyZU5ldmVyKG1hcmtlci5wb3NpdGlvbik7XG59XG5jbGFzcyBTZXJpZXNNYXJrZXJzUGFuZVZpZXcge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllcywgbW9kZWwpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19hdXRvU2NhbGVNYXJnaW5zSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19hdXRvU2NhbGVNYXJnaW5zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya2Vyc1Bvc2l0aW9ucyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyID0gbmV3IFNlcmllc01hcmtlcnNSZW5kZXJlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGEgPSB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfaXRlbXM6IFtdLFxuICAgICAgICAgICAgX2ludGVybmFsX3Zpc2libGVSYW5nZTogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZSh1cGRhdGVUeXBlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXV0b1NjYWxlTWFyZ2luc0ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHVwZGF0ZVR5cGUgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnNQb3NpdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZW5kZXJlcihhZGRBbmNob3JzKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF92aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfX21ha2VWYWxpZCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxheW91dCA9IHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9vcHRpb25zKCkubGF5b3V0O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlci5faW50ZXJuYWxfc2V0UGFyYW1zKGxheW91dC5mb250U2l6ZSwgbGF5b3V0LmZvbnRGYW1pbHkpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YSh0aGlzLl9wcml2YXRlX19kYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXV0b1NjYWxlTWFyZ2lucygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2F1dG9TY2FsZU1hcmdpbnNJbnZhbGlkYXRlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfaW5kZXhlZE1hcmtlcnMoKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFyU3BhY2luZyA9IHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfYmFyU3BhY2luZygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoYXBlTWFyZ2luJDEgPSBzaGFwZU1hcmdpbihiYXJTcGFjaW5nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJnaW5WYWx1ZSA9IGNhbGN1bGF0ZVNoYXBlSGVpZ2h0KGJhclNwYWNpbmcpICogMS41ICsgc2hhcGVNYXJnaW4kMSAqIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5faW50ZXJuYWxfX2dldE1hcmtlclBvc2l0aW9ucygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2F1dG9TY2FsZU1hcmdpbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFib3ZlOiBjYWxjdWxhdGVBZGp1c3RlZE1hcmdpbihtYXJnaW5WYWx1ZSwgcG9zaXRpb25zLmFib3ZlQmFyLCBwb3NpdGlvbnMuaW5CYXIpLFxuICAgICAgICAgICAgICAgICAgICBiZWxvdzogY2FsY3VsYXRlQWRqdXN0ZWRNYXJnaW4obWFyZ2luVmFsdWUsIHBvc2l0aW9ucy5iZWxvd0JhciwgcG9zaXRpb25zLmluQmFyKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXV0b1NjYWxlTWFyZ2lucyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hdXRvU2NhbGVNYXJnaW5zSW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYXV0b1NjYWxlTWFyZ2lucztcbiAgICB9XG4gICAgX2ludGVybmFsX19nZXRNYXJrZXJQb3NpdGlvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19tYXJrZXJzUG9zaXRpb25zID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrZXJzUG9zaXRpb25zID0gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF9pbmRleGVkTWFya2VycygpLnJlZHVjZSgoYWNjLCBtYXJrZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY1ttYXJrZXIucG9zaXRpb25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY1ttYXJrZXIucG9zaXRpb25dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBpbkJhcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWJvdmVCYXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGJlbG93QmFyOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19tYXJrZXJzUG9zaXRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX21ha2VWYWxpZCgpIHtcbiAgICAgICAgY29uc3QgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpO1xuICAgICAgICBjb25zdCB0aW1lU2NhbGUgPSB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IHNlcmllc01hcmtlcnMgPSB0aGlzLl9wcml2YXRlX19zZXJpZXMuX2ludGVybmFsX2luZGV4ZWRNYXJrZXJzKCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhSW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2l0ZW1zID0gc2VyaWVzTWFya2Vycy5tYXAoKG1hcmtlcikgPT4gKHtcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdGltZTogbWFya2VyLnRpbWUsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3g6IDAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3k6IDAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3NpemU6IDAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3NoYXBlOiBtYXJrZXIuc2hhcGUsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2NvbG9yOiBtYXJrZXIuY29sb3IsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2ludGVybmFsSWQ6IG1hcmtlci5faW50ZXJuYWxfaW50ZXJuYWxJZCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfZXh0ZXJuYWxJZDogbWFya2VyLmlkLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF90ZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhSW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXlvdXRPcHRpb25zID0gdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX29wdGlvbnMoKS5sYXlvdXQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX3Zpc2libGVSYW5nZSA9IG51bGw7XG4gICAgICAgIGNvbnN0IHZpc2libGVCYXJzID0gdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgaWYgKHZpc2libGVCYXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9pdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJldlRpbWVJbmRleCA9IE5hTjtcbiAgICAgICAgY29uc3Qgc2hhcGVNYXJnaW4kMSA9IHNoYXBlTWFyZ2luKHRpbWVTY2FsZS5faW50ZXJuYWxfYmFyU3BhY2luZygpKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9hYm92ZUJhcjogc2hhcGVNYXJnaW4kMSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iZWxvd0Jhcjogc2hhcGVNYXJnaW4kMSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlID0gdmlzaWJsZVRpbWVkVmFsdWVzKHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2l0ZW1zLCB2aXNpYmxlQmFycywgdHJ1ZSk7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLmZyb207IGluZGV4IDwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmlzaWJsZVJhbmdlLnRvOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBzZXJpZXNNYXJrZXJzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChtYXJrZXIudGltZSAhPT0gcHJldlRpbWVJbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIG5ldyBiYXIsIHJlc2V0IHN0YWNrIGNvdW50ZXJcbiAgICAgICAgICAgICAgICBvZmZzZXRzLl9pbnRlcm5hbF9hYm92ZUJhciA9IHNoYXBlTWFyZ2luJDE7XG4gICAgICAgICAgICAgICAgb2Zmc2V0cy5faW50ZXJuYWxfYmVsb3dCYXIgPSBzaGFwZU1hcmdpbiQxO1xuICAgICAgICAgICAgICAgIHByZXZUaW1lSW5kZXggPSBtYXJrZXIudGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVySXRlbSA9IHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2l0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIHJlbmRlcmVySXRlbS5faW50ZXJuYWxfeCA9IHRpbWVTY2FsZS5faW50ZXJuYWxfaW5kZXhUb0Nvb3JkaW5hdGUobWFya2VyLnRpbWUpO1xuICAgICAgICAgICAgaWYgKG1hcmtlci50ZXh0ICE9PSB1bmRlZmluZWQgJiYgbWFya2VyLnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVySXRlbS5faW50ZXJuYWxfdGV4dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX2NvbnRlbnQ6IG1hcmtlci50ZXh0LFxuICAgICAgICAgICAgICAgICAgICBfaW50ZXJuYWxfeDogMCxcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX3k6IDAsXG4gICAgICAgICAgICAgICAgICAgIF9pbnRlcm5hbF93aWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX2hlaWdodDogMCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGF0YUF0ID0gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF9kYXRhQXQobWFya2VyLnRpbWUpO1xuICAgICAgICAgICAgaWYgKGRhdGFBdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsbFNpemVBbmRZKHJlbmRlcmVySXRlbSwgbWFya2VyLCBkYXRhQXQsIG9mZnNldHMsIGxheW91dE9wdGlvbnMuZm9udFNpemUsIHNoYXBlTWFyZ2luJDEsIHByaWNlU2NhbGUsIHRpbWVTY2FsZSwgZmlyc3RWYWx1ZS5faW50ZXJuYWxfdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gZmFsc2U7XG4gICAgfVxufVxuXG5jbGFzcyBTZXJpZXNQcmljZUxpbmVQYW5lVmlldyBleHRlbmRzIFNlcmllc0hvcml6b250YWxMaW5lUGFuZVZpZXcge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3Ioc2VyaWVzKSB7XG4gICAgICAgIHN1cGVyKHNlcmllcyk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fdXBkYXRlSW1wbCgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHNlcmllc09wdGlvbnMgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIGlmICghc2VyaWVzT3B0aW9ucy5wcmljZUxpbmVWaXNpYmxlIHx8ICF0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF92aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0VmFsdWVEYXRhID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfbGFzdFZhbHVlRGF0YShzZXJpZXNPcHRpb25zLnByaWNlTGluZVNvdXJjZSA9PT0gMCAvKiBQcmljZUxpbmVTb3VyY2UuTGFzdEJhciAqLyk7XG4gICAgICAgIGlmIChsYXN0VmFsdWVEYXRhLl9pbnRlcm5hbF9ub0RhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfeSA9IGxhc3RWYWx1ZURhdGEuX2ludGVybmFsX2Nvb3JkaW5hdGU7XG4gICAgICAgIGRhdGEuX2ludGVybmFsX2NvbG9yID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfcHJpY2VMaW5lQ29sb3IobGFzdFZhbHVlRGF0YS5faW50ZXJuYWxfY29sb3IpO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF9saW5lV2lkdGggPSBzZXJpZXNPcHRpb25zLnByaWNlTGluZVdpZHRoO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF9saW5lU3R5bGUgPSBzZXJpZXNPcHRpb25zLnByaWNlTGluZVN0eWxlO1xuICAgIH1cbn1cblxuY2xhc3MgU2VyaWVzUHJpY2VBeGlzVmlldyBleHRlbmRzIFByaWNlQXhpc1ZpZXcge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fdXBkYXRlUmVuZGVyZXJEYXRhKGF4aXNSZW5kZXJlckRhdGEsIHBhbmVSZW5kZXJlckRhdGEsIGNvbW1vblJlbmRlcmVyRGF0YSkge1xuICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHBhbmVSZW5kZXJlckRhdGEuX2ludGVybmFsX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5fcHJpdmF0ZV9fc291cmNlO1xuICAgICAgICBpZiAoIXNvdXJjZS5faW50ZXJuYWxfdmlzaWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VyaWVzT3B0aW9ucyA9IHNvdXJjZS5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICBjb25zdCBzaG93U2VyaWVzTGFzdFZhbHVlID0gc2VyaWVzT3B0aW9ucy5sYXN0VmFsdWVWaXNpYmxlO1xuICAgICAgICBjb25zdCBzaG93U3ltYm9sTGFiZWwgPSBzb3VyY2UuX2ludGVybmFsX3RpdGxlKCkgIT09ICcnO1xuICAgICAgICBjb25zdCBzaG93UHJpY2VBbmRQZXJjZW50YWdlID0gc2VyaWVzT3B0aW9ucy5zZXJpZXNMYXN0VmFsdWVNb2RlID09PSAwIC8qIFByaWNlQXhpc0xhc3RWYWx1ZU1vZGUuTGFzdFByaWNlQW5kUGVyY2VudGFnZVZhbHVlICovO1xuICAgICAgICBjb25zdCBsYXN0VmFsdWVEYXRhID0gc291cmNlLl9pbnRlcm5hbF9sYXN0VmFsdWVEYXRhKGZhbHNlKTtcbiAgICAgICAgaWYgKGxhc3RWYWx1ZURhdGEuX2ludGVybmFsX25vRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG93U2VyaWVzTGFzdFZhbHVlKSB7XG4gICAgICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF90ZXh0ID0gdGhpcy5faW50ZXJuYWxfX2F4aXNUZXh0KGxhc3RWYWx1ZURhdGEsIHNob3dTZXJpZXNMYXN0VmFsdWUsIHNob3dQcmljZUFuZFBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgYXhpc1JlbmRlcmVyRGF0YS5faW50ZXJuYWxfdmlzaWJsZSA9IGF4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX3RleHQubGVuZ3RoICE9PSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG93U3ltYm9sTGFiZWwgfHwgc2hvd1ByaWNlQW5kUGVyY2VudGFnZSkge1xuICAgICAgICAgICAgcGFuZVJlbmRlcmVyRGF0YS5faW50ZXJuYWxfdGV4dCA9IHRoaXMuX2ludGVybmFsX19wYW5lVGV4dChsYXN0VmFsdWVEYXRhLCBzaG93U2VyaWVzTGFzdFZhbHVlLCBzaG93U3ltYm9sTGFiZWwsIHNob3dQcmljZUFuZFBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgcGFuZVJlbmRlcmVyRGF0YS5faW50ZXJuYWxfdmlzaWJsZSA9IHBhbmVSZW5kZXJlckRhdGEuX2ludGVybmFsX3RleHQubGVuZ3RoID4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0VmFsdWVDb2xvciA9IHNvdXJjZS5faW50ZXJuYWxfcHJpY2VMaW5lQ29sb3IobGFzdFZhbHVlRGF0YS5faW50ZXJuYWxfY29sb3IpO1xuICAgICAgICBjb25zdCBjb2xvcnMgPSBnZW5lcmF0ZUNvbnRyYXN0Q29sb3JzKGxhc3RWYWx1ZUNvbG9yKTtcbiAgICAgICAgY29tbW9uUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9iYWNrZ3JvdW5kID0gY29sb3JzLl9pbnRlcm5hbF9iYWNrZ3JvdW5kO1xuICAgICAgICBjb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2Nvb3JkaW5hdGUgPSBsYXN0VmFsdWVEYXRhLl9pbnRlcm5hbF9jb29yZGluYXRlO1xuICAgICAgICBwYW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9ib3JkZXJDb2xvciA9IHNvdXJjZS5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfYmFja2dyb3VuZENvbG9yQXRZUGVyY2VudEZyb21Ub3AobGFzdFZhbHVlRGF0YS5faW50ZXJuYWxfY29vcmRpbmF0ZSAvIHNvdXJjZS5faW50ZXJuYWxfcHJpY2VTY2FsZSgpLl9pbnRlcm5hbF9oZWlnaHQoKSk7XG4gICAgICAgIGF4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX2JvcmRlckNvbG9yID0gbGFzdFZhbHVlQ29sb3I7XG4gICAgICAgIGF4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX2NvbG9yID0gY29sb3JzLl9pbnRlcm5hbF9mb3JlZ3JvdW5kO1xuICAgICAgICBwYW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9jb2xvciA9IGNvbG9ycy5faW50ZXJuYWxfZm9yZWdyb3VuZDtcbiAgICB9XG4gICAgX2ludGVybmFsX19wYW5lVGV4dChsYXN0VmFsdWUsIHNob3dTZXJpZXNMYXN0VmFsdWUsIHNob3dTeW1ib2xMYWJlbCwgc2hvd1ByaWNlQW5kUGVyY2VudGFnZSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fcHJpdmF0ZV9fc291cmNlLl9pbnRlcm5hbF90aXRsZSgpO1xuICAgICAgICBpZiAoc2hvd1N5bWJvbExhYmVsICYmIHRpdGxlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGAke3RpdGxlfSBgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG93U2VyaWVzTGFzdFZhbHVlICYmIHNob3dQcmljZUFuZFBlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLl9wcml2YXRlX19zb3VyY2UuX2ludGVybmFsX3ByaWNlU2NhbGUoKS5faW50ZXJuYWxfaXNQZXJjZW50YWdlKCkgP1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZS5faW50ZXJuYWxfZm9ybWF0dGVkUHJpY2VBYnNvbHV0ZSA6IGxhc3RWYWx1ZS5faW50ZXJuYWxfZm9ybWF0dGVkUHJpY2VQZXJjZW50YWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfX2F4aXNUZXh0KGxhc3RWYWx1ZURhdGEsIHNob3dTZXJpZXNMYXN0VmFsdWUsIHNob3dQcmljZUFuZFBlcmNlbnRhZ2UpIHtcbiAgICAgICAgaWYgKCFzaG93U2VyaWVzTGFzdFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaG93UHJpY2VBbmRQZXJjZW50YWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlRGF0YS5faW50ZXJuYWxfdGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fc291cmNlLl9pbnRlcm5hbF9wcmljZVNjYWxlKCkuX2ludGVybmFsX2lzUGVyY2VudGFnZSgpID9cbiAgICAgICAgICAgIGxhc3RWYWx1ZURhdGEuX2ludGVybmFsX2Zvcm1hdHRlZFByaWNlUGVyY2VudGFnZSA6IGxhc3RWYWx1ZURhdGEuX2ludGVybmFsX2Zvcm1hdHRlZFByaWNlQWJzb2x1dGU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb21wdXRlRmluaXRlUmVzdWx0KG1ldGhvZCwgdmFsdWVPbmUsIHZhbHVlVHdvLCBmYWxsYmFjaykge1xuICAgIGNvbnN0IGZpcnN0RmluaXRlID0gTnVtYmVyLmlzRmluaXRlKHZhbHVlT25lKTtcbiAgICBjb25zdCBzZWNvbmRGaW5pdGUgPSBOdW1iZXIuaXNGaW5pdGUodmFsdWVUd28pO1xuICAgIGlmIChmaXJzdEZpbml0ZSAmJiBzZWNvbmRGaW5pdGUpIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZCh2YWx1ZU9uZSwgdmFsdWVUd28pO1xuICAgIH1cbiAgICByZXR1cm4gIWZpcnN0RmluaXRlICYmICFzZWNvbmRGaW5pdGUgPyBmYWxsYmFjayA6IChmaXJzdEZpbml0ZSA/IHZhbHVlT25lIDogdmFsdWVUd28pO1xufVxuY2xhc3MgUHJpY2VSYW5nZUltcGwge1xuICAgIGNvbnN0cnVjdG9yKG1pblZhbHVlLCBtYXhWYWx1ZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19taW5WYWx1ZSA9IG1pblZhbHVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXhWYWx1ZSA9IG1heFZhbHVlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZXF1YWxzKHByKSB7XG4gICAgICAgIGlmIChwciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19taW5WYWx1ZSA9PT0gcHIuX3ByaXZhdGVfX21pblZhbHVlICYmIHRoaXMuX3ByaXZhdGVfX21heFZhbHVlID09PSBwci5fcHJpdmF0ZV9fbWF4VmFsdWU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmljZVJhbmdlSW1wbCh0aGlzLl9wcml2YXRlX19taW5WYWx1ZSwgdGhpcy5fcHJpdmF0ZV9fbWF4VmFsdWUpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbWluVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19taW5WYWx1ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX21heFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbWF4VmFsdWU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9sZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19tYXhWYWx1ZSAtIHRoaXMuX3ByaXZhdGVfX21pblZhbHVlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX21heFZhbHVlID09PSB0aGlzLl9wcml2YXRlX19taW5WYWx1ZSB8fCBOdW1iZXIuaXNOYU4odGhpcy5fcHJpdmF0ZV9fbWF4VmFsdWUpIHx8IE51bWJlci5pc05hTih0aGlzLl9wcml2YXRlX19taW5WYWx1ZSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tZXJnZShhbm90aGVyUmFuZ2UpIHtcbiAgICAgICAgaWYgKGFub3RoZXJSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcmljZVJhbmdlSW1wbChjb21wdXRlRmluaXRlUmVzdWx0KE1hdGgubWluLCB0aGlzLl9pbnRlcm5hbF9taW5WYWx1ZSgpLCBhbm90aGVyUmFuZ2UuX2ludGVybmFsX21pblZhbHVlKCksIC1JbmZpbml0eSksIGNvbXB1dGVGaW5pdGVSZXN1bHQoTWF0aC5tYXgsIHRoaXMuX2ludGVybmFsX21heFZhbHVlKCksIGFub3RoZXJSYW5nZS5faW50ZXJuYWxfbWF4VmFsdWUoKSwgSW5maW5pdHkpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NjYWxlQXJvdW5kQ2VudGVyKGNvZWZmKSB7XG4gICAgICAgIGlmICghaXNOdW1iZXIoY29lZmYpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLl9wcml2YXRlX19tYXhWYWx1ZSAtIHRoaXMuX3ByaXZhdGVfX21pblZhbHVlO1xuICAgICAgICBpZiAoZGVsdGEgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZW50ZXIgPSAodGhpcy5fcHJpdmF0ZV9fbWF4VmFsdWUgKyB0aGlzLl9wcml2YXRlX19taW5WYWx1ZSkgKiAwLjU7XG4gICAgICAgIGxldCBtYXhEZWx0YSA9IHRoaXMuX3ByaXZhdGVfX21heFZhbHVlIC0gY2VudGVyO1xuICAgICAgICBsZXQgbWluRGVsdGEgPSB0aGlzLl9wcml2YXRlX19taW5WYWx1ZSAtIGNlbnRlcjtcbiAgICAgICAgbWF4RGVsdGEgKj0gY29lZmY7XG4gICAgICAgIG1pbkRlbHRhICo9IGNvZWZmO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXhWYWx1ZSA9IGNlbnRlciArIG1heERlbHRhO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19taW5WYWx1ZSA9IGNlbnRlciArIG1pbkRlbHRhO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2hpZnQoZGVsdGEpIHtcbiAgICAgICAgaWYgKCFpc051bWJlcihkZWx0YSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXhWYWx1ZSArPSBkZWx0YTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWluVmFsdWUgKz0gZGVsdGE7XG4gICAgfVxuICAgIF9pbnRlcm5hbF90b1JhdygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pblZhbHVlOiB0aGlzLl9wcml2YXRlX19taW5WYWx1ZSxcbiAgICAgICAgICAgIG1heFZhbHVlOiB0aGlzLl9wcml2YXRlX19tYXhWYWx1ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIF9pbnRlcm5hbF9mcm9tUmF3KHJhdykge1xuICAgICAgICByZXR1cm4gKHJhdyA9PT0gbnVsbCkgPyBudWxsIDogbmV3IFByaWNlUmFuZ2VJbXBsKHJhdy5taW5WYWx1ZSwgcmF3Lm1heFZhbHVlKTtcbiAgICB9XG59XG5cbmNsYXNzIEF1dG9zY2FsZUluZm9JbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihwcmljZVJhbmdlLCBtYXJnaW5zKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2UgPSBwcmljZVJhbmdlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJnaW5zID0gbWFyZ2lucyB8fCBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2U7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tYXJnaW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbWFyZ2lucztcbiAgICB9XG4gICAgX2ludGVybmFsX3RvUmF3KCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByaWNlUmFuZ2U6IHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2UuX2ludGVybmFsX3RvUmF3KCksXG4gICAgICAgICAgICBtYXJnaW5zOiB0aGlzLl9wcml2YXRlX19tYXJnaW5zIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIF9pbnRlcm5hbF9mcm9tUmF3KHJhdykge1xuICAgICAgICByZXR1cm4gKHJhdyA9PT0gbnVsbCkgPyBudWxsIDogbmV3IEF1dG9zY2FsZUluZm9JbXBsKFByaWNlUmFuZ2VJbXBsLl9pbnRlcm5hbF9mcm9tUmF3KHJhdy5wcmljZVJhbmdlKSwgcmF3Lm1hcmdpbnMpO1xuICAgIH1cbn1cblxuY2xhc3MgQ3VzdG9tUHJpY2VMaW5lUGFuZVZpZXcgZXh0ZW5kcyBTZXJpZXNIb3Jpem9udGFsTGluZVBhbmVWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihzZXJpZXMsIHByaWNlTGluZSkge1xuICAgICAgICBzdXBlcihzZXJpZXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUxpbmUgPSBwcmljZUxpbmU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fdXBkYXRlSW1wbCgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGxpbmVPcHRpb25zID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2VMaW5lLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIGlmICghdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfdmlzaWJsZSgpIHx8ICFsaW5lT3B0aW9ucy5saW5lVmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLl9wcml2YXRlX19wcmljZUxpbmUuX2ludGVybmFsX3lDb29yZCgpO1xuICAgICAgICBpZiAoeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuX2ludGVybmFsX3Zpc2libGUgPSB0cnVlO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF95ID0geTtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfY29sb3IgPSBsaW5lT3B0aW9ucy5jb2xvcjtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfbGluZVdpZHRoID0gbGluZU9wdGlvbnMubGluZVdpZHRoO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF9saW5lU3R5bGUgPSBsaW5lT3B0aW9ucy5saW5lU3R5bGU7XG4gICAgICAgIGRhdGEuX2ludGVybmFsX2V4dGVybmFsSWQgPSB0aGlzLl9wcml2YXRlX19wcmljZUxpbmUuX2ludGVybmFsX29wdGlvbnMoKS5pZDtcbiAgICB9XG59XG5cbmNsYXNzIEN1c3RvbVByaWNlTGluZVByaWNlQXhpc1ZpZXcgZXh0ZW5kcyBQcmljZUF4aXNWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihzZXJpZXMsIHByaWNlTGluZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlTGluZSA9IHByaWNlTGluZTtcbiAgICB9XG4gICAgX2ludGVybmFsX191cGRhdGVSZW5kZXJlckRhdGEoYXhpc1JlbmRlcmVyRGF0YSwgcGFuZVJlbmRlcmVyRGF0YSwgY29tbW9uRGF0YSkge1xuICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHBhbmVSZW5kZXJlckRhdGEuX2ludGVybmFsX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlTGluZS5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICBjb25zdCBsYWJlbFZpc2libGUgPSBvcHRpb25zLmF4aXNMYWJlbFZpc2libGU7XG4gICAgICAgIGNvbnN0IHNob3dQYW5lTGFiZWwgPSBvcHRpb25zLnRpdGxlICE9PSAnJztcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzO1xuICAgICAgICBpZiAoIWxhYmVsVmlzaWJsZSB8fCAhc2VyaWVzLl9pbnRlcm5hbF92aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB5ID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2VMaW5lLl9pbnRlcm5hbF95Q29vcmQoKTtcbiAgICAgICAgaWYgKHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvd1BhbmVMYWJlbCkge1xuICAgICAgICAgICAgcGFuZVJlbmRlcmVyRGF0YS5faW50ZXJuYWxfdGV4dCA9IG9wdGlvbnMudGl0bGU7XG4gICAgICAgICAgICBwYW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwYW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9ib3JkZXJDb2xvciA9IHNlcmllcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfYmFja2dyb3VuZENvbG9yQXRZUGVyY2VudEZyb21Ub3AoeSAvIHNlcmllcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpLl9pbnRlcm5hbF9oZWlnaHQoKSk7XG4gICAgICAgIGF4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX3RleHQgPSB0aGlzLl9wcml2YXRlX19mb3JtYXRQcmljZShvcHRpb25zLnByaWNlKTtcbiAgICAgICAgYXhpc1JlbmRlcmVyRGF0YS5faW50ZXJuYWxfdmlzaWJsZSA9IHRydWU7XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IGdlbmVyYXRlQ29udHJhc3RDb2xvcnMob3B0aW9ucy5heGlzTGFiZWxDb2xvciB8fCBvcHRpb25zLmNvbG9yKTtcbiAgICAgICAgY29tbW9uRGF0YS5faW50ZXJuYWxfYmFja2dyb3VuZCA9IGNvbG9ycy5faW50ZXJuYWxfYmFja2dyb3VuZDtcbiAgICAgICAgY29uc3QgdGV4dENvbG9yID0gb3B0aW9ucy5heGlzTGFiZWxUZXh0Q29sb3IgfHwgY29sb3JzLl9pbnRlcm5hbF9mb3JlZ3JvdW5kO1xuICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9jb2xvciA9IHRleHRDb2xvcjsgLy8gcHJpY2UgdGV4dFxuICAgICAgICBwYW5lUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9jb2xvciA9IHRleHRDb2xvcjsgLy8gdGl0bGUgdGV4dFxuICAgICAgICBjb21tb25EYXRhLl9pbnRlcm5hbF9jb29yZGluYXRlID0geTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2Zvcm1hdFByaWNlKHByaWNlKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSB0aGlzLl9wcml2YXRlX19zZXJpZXMuX2ludGVybmFsX2ZpcnN0VmFsdWUoKTtcbiAgICAgICAgaWYgKGZpcnN0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCkuX2ludGVybmFsX2Zvcm1hdFByaWNlKHByaWNlLCBmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSk7XG4gICAgfVxufVxuXG5jbGFzcyBDdXN0b21QcmljZUxpbmUge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllcywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUxpbmVWaWV3ID0gbmV3IEN1c3RvbVByaWNlTGluZVBhbmVWaWV3KHNlcmllcywgdGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlQXhpc1ZpZXcgPSBuZXcgQ3VzdG9tUHJpY2VMaW5lUHJpY2VBeGlzVmlldyhzZXJpZXMsIHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lUHJpY2VBeGlzVmlldyA9IG5ldyBQYW5lUHJpY2VBeGlzVmlldyh0aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3LCBzZXJpZXMsIHNlcmllcy5faW50ZXJuYWxfbW9kZWwoKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBtZXJnZSh0aGlzLl9wcml2YXRlX19vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfbGlnaHRVcGRhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX29wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFuZVZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wcmljZUxpbmVWaWV3O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbGFiZWxQYW5lVmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3BhbmVQcmljZUF4aXNWaWV3O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VBeGlzVmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3ByaWNlQXhpc1ZpZXc7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlTGluZVZpZXcuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3Ll9pbnRlcm5hbF91cGRhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3lDb29yZCgpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzO1xuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gc2VyaWVzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IHNlcmllcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfdGltZVNjYWxlKCk7XG4gICAgICAgIGlmICh0aW1lU2NhbGUuX2ludGVybmFsX2lzRW1wdHkoKSB8fCBwcmljZVNjYWxlLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBzZXJpZXMuX2ludGVybmFsX2ZpcnN0VmFsdWUoKTtcbiAgICAgICAgaWYgKGZpcnN0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmljZVNjYWxlLl9pbnRlcm5hbF9wcmljZVRvQ29vcmRpbmF0ZSh0aGlzLl9wcml2YXRlX19vcHRpb25zLnByaWNlLCBmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSk7XG4gICAgfVxufVxuXG5jbGFzcyBQcmljZURhdGFTb3VyY2UgZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbCA9IG1vZGVsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19tb2RlbDtcbiAgICB9XG59XG5cbmNvbnN0IGJhclN0eWxlRm5NYXAgPSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIEJhcjogKGZpbmRCYXIsIGJhclN0eWxlLCBiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgdXBDb2xvciA9IGJhclN0eWxlLnVwQ29sb3I7XG4gICAgICAgIGNvbnN0IGRvd25Db2xvciA9IGJhclN0eWxlLmRvd25Db2xvcjtcbiAgICAgICAgY29uc3QgY3VycmVudEJhciA9IGVuc3VyZU5vdE51bGwoZmluZEJhcihiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSk7XG4gICAgICAgIGNvbnN0IGlzVXAgPSBlbnN1cmUoY3VycmVudEJhci5faW50ZXJuYWxfdmFsdWVbMCAvKiBQbG90Um93VmFsdWVJbmRleC5PcGVuICovXSkgPD0gZW5zdXJlKGN1cnJlbnRCYXIuX2ludGVybmFsX3ZhbHVlWzMgLyogUGxvdFJvd1ZhbHVlSW5kZXguQ2xvc2UgKi9dKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJDb2xvcjogKF9hID0gY3VycmVudEJhci5faW50ZXJuYWxfY29sb3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChpc1VwID8gdXBDb2xvciA6IGRvd25Db2xvciksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgQ2FuZGxlc3RpY2s6IChmaW5kQmFyLCBjYW5kbGVzdGlja1N0eWxlLCBiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCB1cENvbG9yID0gY2FuZGxlc3RpY2tTdHlsZS51cENvbG9yO1xuICAgICAgICBjb25zdCBkb3duQ29sb3IgPSBjYW5kbGVzdGlja1N0eWxlLmRvd25Db2xvcjtcbiAgICAgICAgY29uc3QgYm9yZGVyVXBDb2xvciA9IGNhbmRsZXN0aWNrU3R5bGUuYm9yZGVyVXBDb2xvcjtcbiAgICAgICAgY29uc3QgYm9yZGVyRG93bkNvbG9yID0gY2FuZGxlc3RpY2tTdHlsZS5ib3JkZXJEb3duQ29sb3I7XG4gICAgICAgIGNvbnN0IHdpY2tVcENvbG9yID0gY2FuZGxlc3RpY2tTdHlsZS53aWNrVXBDb2xvcjtcbiAgICAgICAgY29uc3Qgd2lja0Rvd25Db2xvciA9IGNhbmRsZXN0aWNrU3R5bGUud2lja0Rvd25Db2xvcjtcbiAgICAgICAgY29uc3QgY3VycmVudEJhciA9IGVuc3VyZU5vdE51bGwoZmluZEJhcihiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSk7XG4gICAgICAgIGNvbnN0IGlzVXAgPSBlbnN1cmUoY3VycmVudEJhci5faW50ZXJuYWxfdmFsdWVbMCAvKiBQbG90Um93VmFsdWVJbmRleC5PcGVuICovXSkgPD0gZW5zdXJlKGN1cnJlbnRCYXIuX2ludGVybmFsX3ZhbHVlWzMgLyogUGxvdFJvd1ZhbHVlSW5kZXguQ2xvc2UgKi9dKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJDb2xvcjogKF9hID0gY3VycmVudEJhci5faW50ZXJuYWxfY29sb3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChpc1VwID8gdXBDb2xvciA6IGRvd25Db2xvciksXG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyQm9yZGVyQ29sb3I6IChfYiA9IGN1cnJlbnRCYXIuX2ludGVybmFsX2JvcmRlckNvbG9yKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAoaXNVcCA/IGJvcmRlclVwQ29sb3IgOiBib3JkZXJEb3duQ29sb3IpLFxuICAgICAgICAgICAgX2ludGVybmFsX2JhcldpY2tDb2xvcjogKF9jID0gY3VycmVudEJhci5faW50ZXJuYWxfd2lja0NvbG9yKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoaXNVcCA/IHdpY2tVcENvbG9yIDogd2lja0Rvd25Db2xvciksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgQ3VzdG9tOiAoZmluZEJhciwgY3VzdG9tU3R5bGUsIGJhckluZGV4LCBwcmVjb21wdXRlZEJhcnMpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjdXJyZW50QmFyID0gZW5zdXJlTm90TnVsbChmaW5kQmFyKGJhckluZGV4LCBwcmVjb21wdXRlZEJhcnMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJDb2xvcjogKF9hID0gY3VycmVudEJhci5faW50ZXJuYWxfY29sb3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGN1c3RvbVN0eWxlLmNvbG9yLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIEFyZWE6IChmaW5kQmFyLCBhcmVhU3R5bGUsIGJhckluZGV4LCBwcmVjb21wdXRlZEJhcnMpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBjdXJyZW50QmFyID0gZW5zdXJlTm90TnVsbChmaW5kQmFyKGJhckluZGV4LCBwcmVjb21wdXRlZEJhcnMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXJDb2xvcjogKF9hID0gY3VycmVudEJhci5faW50ZXJuYWxfbGluZUNvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBhcmVhU3R5bGUubGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX2xpbmVDb2xvcjogKF9iID0gY3VycmVudEJhci5faW50ZXJuYWxfbGluZUNvbG9yKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBhcmVhU3R5bGUubGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX3RvcENvbG9yOiAoX2MgPSBjdXJyZW50QmFyLl9pbnRlcm5hbF90b3BDb2xvcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogYXJlYVN0eWxlLnRvcENvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX2JvdHRvbUNvbG9yOiAoX2QgPSBjdXJyZW50QmFyLl9pbnRlcm5hbF9ib3R0b21Db2xvcikgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogYXJlYVN0eWxlLmJvdHRvbUNvbG9yLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIEJhc2VsaW5lOiAoZmluZEJhciwgYmFzZWxpbmVTdHlsZSwgYmFySW5kZXgsIHByZWNvbXB1dGVkQmFycykgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgY29uc3QgY3VycmVudEJhciA9IGVuc3VyZU5vdE51bGwoZmluZEJhcihiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSk7XG4gICAgICAgIGNvbnN0IGlzQWJvdmVCYXNlbGluZSA9IGN1cnJlbnRCYXIuX2ludGVybmFsX3ZhbHVlWzMgLyogUGxvdFJvd1ZhbHVlSW5kZXguQ2xvc2UgKi9dID49IGJhc2VsaW5lU3R5bGUuYmFzZVZhbHVlLnByaWNlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX2ludGVybmFsX2JhckNvbG9yOiBpc0Fib3ZlQmFzZWxpbmUgPyBiYXNlbGluZVN0eWxlLnRvcExpbmVDb2xvciA6IGJhc2VsaW5lU3R5bGUuYm90dG9tTGluZUNvbG9yLFxuICAgICAgICAgICAgX2ludGVybmFsX3RvcExpbmVDb2xvcjogKF9hID0gY3VycmVudEJhci5faW50ZXJuYWxfdG9wTGluZUNvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBiYXNlbGluZVN0eWxlLnRvcExpbmVDb2xvcixcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ib3R0b21MaW5lQ29sb3I6IChfYiA9IGN1cnJlbnRCYXIuX2ludGVybmFsX2JvdHRvbUxpbmVDb2xvcikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogYmFzZWxpbmVTdHlsZS5ib3R0b21MaW5lQ29sb3IsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdG9wRmlsbENvbG9yMTogKF9jID0gY3VycmVudEJhci5faW50ZXJuYWxfdG9wRmlsbENvbG9yMSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogYmFzZWxpbmVTdHlsZS50b3BGaWxsQ29sb3IxLFxuICAgICAgICAgICAgX2ludGVybmFsX3RvcEZpbGxDb2xvcjI6IChfZCA9IGN1cnJlbnRCYXIuX2ludGVybmFsX3RvcEZpbGxDb2xvcjIpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGJhc2VsaW5lU3R5bGUudG9wRmlsbENvbG9yMixcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ib3R0b21GaWxsQ29sb3IxOiAoX2UgPSBjdXJyZW50QmFyLl9pbnRlcm5hbF9ib3R0b21GaWxsQ29sb3IxKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBiYXNlbGluZVN0eWxlLmJvdHRvbUZpbGxDb2xvcjEsXG4gICAgICAgICAgICBfaW50ZXJuYWxfYm90dG9tRmlsbENvbG9yMjogKF9mID0gY3VycmVudEJhci5faW50ZXJuYWxfYm90dG9tRmlsbENvbG9yMikgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogYmFzZWxpbmVTdHlsZS5ib3R0b21GaWxsQ29sb3IyLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIExpbmU6IChmaW5kQmFyLCBsaW5lU3R5bGUsIGJhckluZGV4LCBwcmVjb21wdXRlZEJhcnMpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgY3VycmVudEJhciA9IGVuc3VyZU5vdE51bGwoZmluZEJhcihiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyQ29sb3I6IChfYSA9IGN1cnJlbnRCYXIuX2ludGVybmFsX2NvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBsaW5lU3R5bGUuY29sb3IsXG4gICAgICAgICAgICBfaW50ZXJuYWxfbGluZUNvbG9yOiAoX2IgPSBjdXJyZW50QmFyLl9pbnRlcm5hbF9jb2xvcikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbGluZVN0eWxlLmNvbG9yLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIEhpc3RvZ3JhbTogKGZpbmRCYXIsIGhpc3RvZ3JhbVN0eWxlLCBiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY3VycmVudEJhciA9IGVuc3VyZU5vdE51bGwoZmluZEJhcihiYXJJbmRleCwgcHJlY29tcHV0ZWRCYXJzKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyQ29sb3I6IChfYSA9IGN1cnJlbnRCYXIuX2ludGVybmFsX2NvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBoaXN0b2dyYW1TdHlsZS5jb2xvcixcbiAgICAgICAgfTtcbiAgICB9LFxufTtcbmNsYXNzIFNlcmllc0JhckNvbG9yZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllcykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19maW5kQmFyID0gKGJhckluZGV4LCBwcmVjb21wdXRlZEJhcnMpID0+IHtcbiAgICAgICAgICAgIGlmIChwcmVjb21wdXRlZEJhcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVjb21wdXRlZEJhcnMuX2ludGVybmFsX3ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfYmFycygpLl9pbnRlcm5hbF92YWx1ZUF0KGJhckluZGV4KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzID0gc2VyaWVzO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdHlsZUdldHRlciA9IGJhclN0eWxlRm5NYXBbc2VyaWVzLl9pbnRlcm5hbF9zZXJpZXNUeXBlKCldO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYmFyU3R5bGUoYmFySW5kZXgsIHByZWNvbXB1dGVkQmFycykge1xuICAgICAgICAvLyBwcmVjb21wdXRlZEJhcnM6IHt2YWx1ZTogW0FycmF5IEJhclZhbHVlc10sIHByZXZpb3VzVmFsdWU6IFtBcnJheSBCYXJWYWx1ZXNdIHwgdW5kZWZpbmVkfVxuICAgICAgICAvLyBVc2VkIHRvIGF2b2lkIGJpbmFyeSBzZWFyY2ggaWYgYmFycyBhcmUgYWxyZWFkeSBrbm93blxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fc3R5bGVHZXR0ZXIodGhpcy5fcHJpdmF0ZV9fZmluZEJhciwgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCksIGJhckluZGV4LCBwcmVjb21wdXRlZEJhcnMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBTZWFyY2ggZGlyZWN0aW9uIGlmIG5vIGRhdGEgZm91bmQgYXQgcHJvdmlkZWQgaW5kZXhcbiAqL1xudmFyIE1pc21hdGNoRGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChNaXNtYXRjaERpcmVjdGlvbikge1xuICAgIC8qKlxuICAgICAqIFNlYXJjaCB0aGUgbmVhcmVzdCBsZWZ0IGl0ZW1cbiAgICAgKi9cbiAgICBNaXNtYXRjaERpcmVjdGlvbltNaXNtYXRjaERpcmVjdGlvbltcIk5lYXJlc3RMZWZ0XCJdID0gLTFdID0gXCJOZWFyZXN0TGVmdFwiO1xuICAgIC8qKlxuICAgICAqIERvIG5vdCBzZWFyY2hcbiAgICAgKi9cbiAgICBNaXNtYXRjaERpcmVjdGlvbltNaXNtYXRjaERpcmVjdGlvbltcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIC8qKlxuICAgICAqIFNlYXJjaCB0aGUgbmVhcmVzdCByaWdodCBpdGVtXG4gICAgICovXG4gICAgTWlzbWF0Y2hEaXJlY3Rpb25bTWlzbWF0Y2hEaXJlY3Rpb25bXCJOZWFyZXN0UmlnaHRcIl0gPSAxXSA9IFwiTmVhcmVzdFJpZ2h0XCI7XG59KShNaXNtYXRjaERpcmVjdGlvbiB8fCAoTWlzbWF0Y2hEaXJlY3Rpb24gPSB7fSkpO1xuLy8gVE9ETzogdGhpbmsgYWJvdXQgY2hhbmdpbmcgaXQgZHluYW1pY2FsbHlcbmNvbnN0IENIVU5LX1NJWkUgPSAzMDtcbi8qKlxuICogUGxvdExpc3QgaXMgYW4gYXJyYXkgb2YgcGxvdCByb3dzXG4gKiBlYWNoIHBsb3Qgcm93IGNvbnNpc3RzIG9mIGtleSAoaW5kZXggaW4gdGltZXNjYWxlKSBhbmQgcGxvdCB2YWx1ZSBtYXBcbiAqL1xuY2xhc3MgUGxvdExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19taW5NYXhDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcm93U2VhcmNoQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8vIEByZXR1cm5zIExhc3Qgcm93XG4gICAgX2ludGVybmFsX2xhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbF9zaXplKCkgPiAwID8gdGhpcy5fcHJpdmF0ZV9faXRlbXNbdGhpcy5fcHJpdmF0ZV9faXRlbXMubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZmlyc3RJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX3NpemUoKSA+IDAgPyB0aGlzLl9wcml2YXRlX19pbmRleEF0KDApIDogbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX2xhc3RJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX3NpemUoKSA+IDAgPyB0aGlzLl9wcml2YXRlX19pbmRleEF0KCh0aGlzLl9wcml2YXRlX19pdGVtcy5sZW5ndGggLSAxKSkgOiBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2l0ZW1zLmxlbmd0aDtcbiAgICB9XG4gICAgX2ludGVybmFsX2lzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbF9zaXplKCkgPT09IDA7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jb250YWlucyhpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fc2VhcmNoKGluZGV4LCAwIC8qIE1pc21hdGNoRGlyZWN0aW9uLk5vbmUgKi8pICE9PSBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdmFsdWVBdChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJuYWxfc2VhcmNoKGluZGV4KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NlYXJjaChpbmRleCwgc2VhcmNoTW9kZSA9IDAgLyogTWlzbWF0Y2hEaXJlY3Rpb24uTm9uZSAqLykge1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLl9wcml2YXRlX19zZWFyY2goaW5kZXgsIHNlYXJjaE1vZGUpO1xuICAgICAgICBpZiAocG9zID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9wcml2YXRlX192YWx1ZUF0KHBvcykpLCB7IF9pbnRlcm5hbF9pbmRleDogdGhpcy5fcHJpdmF0ZV9faW5kZXhBdChwb3MpIH0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcm93cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2l0ZW1zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbWluTWF4T25SYW5nZUNhY2hlZChzdGFydCwgZW5kLCBwbG90cykge1xuICAgICAgICAvLyB0aGlzIGNvZGUgd29ya3MgZm9yIHNpbmdsZSBzZXJpZXMgb25seVxuICAgICAgICAvLyBjb3VsZCBmYWlsIGFmdGVyIHdoaXRlc3BhY2VzIGltcGxlbWVudGF0aW9uXG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IHBsb3Qgb2YgcGxvdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsb3RNaW5NYXggPSB0aGlzLl9wcml2YXRlX19taW5NYXhPblJhbmdlQ2FjaGVkSW1wbChzdGFydCwgZW5kLCBwbG90KTtcbiAgICAgICAgICAgIHJlc3VsdCA9IG1lcmdlTWluTWF4KHJlc3VsdCwgcGxvdE1pbk1heCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldERhdGEocGxvdFJvd3MpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcm93U2VhcmNoQ2FjaGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWluTWF4Q2FjaGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faXRlbXMgPSBwbG90Um93cztcbiAgICB9XG4gICAgX3ByaXZhdGVfX2luZGV4QXQob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19pdGVtc1tvZmZzZXRdLl9pbnRlcm5hbF9pbmRleDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3ZhbHVlQXQob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19pdGVtc1tvZmZzZXRdO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2VhcmNoKGluZGV4LCBzZWFyY2hNb2RlKSB7XG4gICAgICAgIGNvbnN0IGV4YWN0UG9zID0gdGhpcy5fcHJpdmF0ZV9fYnNlYXJjaChpbmRleCk7XG4gICAgICAgIGlmIChleGFjdFBvcyA9PT0gbnVsbCAmJiBzZWFyY2hNb2RlICE9PSAwIC8qIE1pc21hdGNoRGlyZWN0aW9uLk5vbmUgKi8pIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgLTEgLyogTWlzbWF0Y2hEaXJlY3Rpb24uTmVhcmVzdExlZnQgKi86XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19zZWFyY2hOZWFyZXN0TGVmdChpbmRleCk7XG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIE1pc21hdGNoRGlyZWN0aW9uLk5lYXJlc3RSaWdodCAqLzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3NlYXJjaE5lYXJlc3RSaWdodChpbmRleCk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBzZWFyY2ggbW9kZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleGFjdFBvcztcbiAgICB9XG4gICAgX3ByaXZhdGVfX3NlYXJjaE5lYXJlc3RMZWZ0KGluZGV4KSB7XG4gICAgICAgIGxldCBuZWFyZXN0TGVmdFBvcyA9IHRoaXMuX3ByaXZhdGVfX2xvd2VyYm91bmQoaW5kZXgpO1xuICAgICAgICBpZiAobmVhcmVzdExlZnRQb3MgPiAwKSB7XG4gICAgICAgICAgICBuZWFyZXN0TGVmdFBvcyA9IG5lYXJlc3RMZWZ0UG9zIC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG5lYXJlc3RMZWZ0UG9zICE9PSB0aGlzLl9wcml2YXRlX19pdGVtcy5sZW5ndGggJiYgdGhpcy5fcHJpdmF0ZV9faW5kZXhBdChuZWFyZXN0TGVmdFBvcykgPCBpbmRleCkgPyBuZWFyZXN0TGVmdFBvcyA6IG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX19zZWFyY2hOZWFyZXN0UmlnaHQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbmVhcmVzdFJpZ2h0UG9zID0gdGhpcy5fcHJpdmF0ZV9fdXBwZXJib3VuZChpbmRleCk7XG4gICAgICAgIHJldHVybiAobmVhcmVzdFJpZ2h0UG9zICE9PSB0aGlzLl9wcml2YXRlX19pdGVtcy5sZW5ndGggJiYgaW5kZXggPCB0aGlzLl9wcml2YXRlX19pbmRleEF0KG5lYXJlc3RSaWdodFBvcykpID8gbmVhcmVzdFJpZ2h0UG9zIDogbnVsbDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2JzZWFyY2goaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9wcml2YXRlX19sb3dlcmJvdW5kKGluZGV4KTtcbiAgICAgICAgaWYgKHN0YXJ0ICE9PSB0aGlzLl9wcml2YXRlX19pdGVtcy5sZW5ndGggJiYgIShpbmRleCA8IHRoaXMuX3ByaXZhdGVfX2l0ZW1zW3N0YXJ0XS5faW50ZXJuYWxfaW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX19sb3dlcmJvdW5kKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsb3dlckJvdW5kKHRoaXMuX3ByaXZhdGVfX2l0ZW1zLCBpbmRleCwgKGEsIGIpID0+IGEuX2ludGVybmFsX2luZGV4IDwgYik7XG4gICAgfVxuICAgIF9wcml2YXRlX191cHBlcmJvdW5kKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB1cHBlckJvdW5kKHRoaXMuX3ByaXZhdGVfX2l0ZW1zLCBpbmRleCwgKGEsIGIpID0+IGEuX2ludGVybmFsX2luZGV4ID4gYik7XG4gICAgfVxuICAgIF9wcml2YXRlX19wbG90TWluTWF4KHN0YXJ0SW5kZXgsIGVuZEluZGV4RXhjbHVzaXZlLCBwbG90SW5kZXgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXhFeGNsdXNpdmU7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5fcHJpdmF0ZV9faXRlbXNbaV0uX2ludGVybmFsX3ZhbHVlO1xuICAgICAgICAgICAgY29uc3QgdiA9IHZhbHVlc1twbG90SW5kZXhdO1xuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTih2KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHsgX2ludGVybmFsX21pbjogdiwgX2ludGVybmFsX21heDogdiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPCByZXN1bHQuX2ludGVybmFsX21pbikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuX2ludGVybmFsX21pbiA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2ID4gcmVzdWx0Ll9pbnRlcm5hbF9tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Ll9pbnRlcm5hbF9tYXggPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fbWluTWF4T25SYW5nZUNhY2hlZEltcGwoc3RhcnQsIGVuZCwgcGxvdEluZGV4KSB7XG4gICAgICAgIC8vIHRoaXMgY29kZSB3b3JrcyBmb3Igc2luZ2xlIHNlcmllcyBvbmx5XG4gICAgICAgIC8vIGNvdWxkIGZhaWwgYWZ0ZXIgd2hpdGVzcGFjZXMgaW1wbGVtZW50YXRpb25cbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIC8vIGFzc3VtZSB0aGF0IGJhciBpbmRleGVzIG9ubHkgaW5jcmVhc2VcbiAgICAgICAgY29uc3QgZmlyc3RJbmRleCA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfZmlyc3RJbmRleCgpKTtcbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gZW5zdXJlTm90TnVsbCh0aGlzLl9pbnRlcm5hbF9sYXN0SW5kZXgoKSk7XG4gICAgICAgIGNvbnN0IHMgPSBNYXRoLm1heChzdGFydCwgZmlyc3RJbmRleCk7XG4gICAgICAgIGNvbnN0IGUgPSBNYXRoLm1pbihlbmQsIGxhc3RJbmRleCk7XG4gICAgICAgIGNvbnN0IGNhY2hlZExvdyA9IE1hdGguY2VpbChzIC8gQ0hVTktfU0laRSkgKiBDSFVOS19TSVpFO1xuICAgICAgICBjb25zdCBjYWNoZWRIaWdoID0gTWF0aC5tYXgoY2FjaGVkTG93LCBNYXRoLmZsb29yKGUgLyBDSFVOS19TSVpFKSAqIENIVU5LX1NJWkUpO1xuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fbG93ZXJib3VuZChzKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fdXBwZXJib3VuZChNYXRoLm1pbihlLCBjYWNoZWRMb3csIGVuZCkpOyAvLyBub24taW5jbHVzaXZlIGVuZFxuICAgICAgICAgICAgY29uc3QgcGxvdE1pbk1heCA9IHRoaXMuX3ByaXZhdGVfX3Bsb3RNaW5NYXgoc3RhcnRJbmRleCwgZW5kSW5kZXgsIHBsb3RJbmRleCk7XG4gICAgICAgICAgICByZXN1bHQgPSBtZXJnZU1pbk1heChyZXN1bHQsIHBsb3RNaW5NYXgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtaW5NYXhDYWNoZSA9IHRoaXMuX3ByaXZhdGVfX21pbk1heENhY2hlLmdldChwbG90SW5kZXgpO1xuICAgICAgICBpZiAobWluTWF4Q2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWluTWF4Q2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19taW5NYXhDYWNoZS5zZXQocGxvdEluZGV4LCBtaW5NYXhDYWNoZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm93IGdvIGNhY2hlZFxuICAgICAgICBmb3IgKGxldCBjID0gTWF0aC5tYXgoY2FjaGVkTG93ICsgMSwgcyk7IGMgPCBjYWNoZWRIaWdoOyBjICs9IENIVU5LX1NJWkUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rSW5kZXggPSBNYXRoLmZsb29yKGMgLyBDSFVOS19TSVpFKTtcbiAgICAgICAgICAgIGxldCBjaHVua01pbk1heCA9IG1pbk1heENhY2hlLmdldChjaHVua0luZGV4KTtcbiAgICAgICAgICAgIGlmIChjaHVua01pbk1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmtTdGFydCA9IHRoaXMuX3ByaXZhdGVfX2xvd2VyYm91bmQoY2h1bmtJbmRleCAqIENIVU5LX1NJWkUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rRW5kID0gdGhpcy5fcHJpdmF0ZV9fdXBwZXJib3VuZCgoY2h1bmtJbmRleCArIDEpICogQ0hVTktfU0laRSAtIDEpO1xuICAgICAgICAgICAgICAgIGNodW5rTWluTWF4ID0gdGhpcy5fcHJpdmF0ZV9fcGxvdE1pbk1heChjaHVua1N0YXJ0LCBjaHVua0VuZCwgcGxvdEluZGV4KTtcbiAgICAgICAgICAgICAgICBtaW5NYXhDYWNoZS5zZXQoY2h1bmtJbmRleCwgY2h1bmtNaW5NYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gbWVyZ2VNaW5NYXgocmVzdWx0LCBjaHVua01pbk1heCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGFpbFxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fbG93ZXJib3VuZChjYWNoZWRIaWdoKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fdXBwZXJib3VuZChlKTsgLy8gbm9uLWluY2x1c2l2ZSBlbmRcbiAgICAgICAgICAgIGNvbnN0IHBsb3RNaW5NYXggPSB0aGlzLl9wcml2YXRlX19wbG90TWluTWF4KHN0YXJ0SW5kZXgsIGVuZEluZGV4LCBwbG90SW5kZXgpO1xuICAgICAgICAgICAgcmVzdWx0ID0gbWVyZ2VNaW5NYXgocmVzdWx0LCBwbG90TWluTWF4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlTWluTWF4KGZpcnN0LCBzZWNvbmQpIHtcbiAgICBpZiAoZmlyc3QgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHNlY29uZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChzZWNvbmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmaXJzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG1lcmdlIE1pbk1heCB2YWx1ZXNcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKGZpcnN0Ll9pbnRlcm5hbF9taW4sIHNlY29uZC5faW50ZXJuYWxfbWluKTtcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KGZpcnN0Ll9pbnRlcm5hbF9tYXgsIHNlY29uZC5faW50ZXJuYWxfbWF4KTtcbiAgICAgICAgICAgIHJldHVybiB7IF9pbnRlcm5hbF9taW46IG1pbiwgX2ludGVybmFsX21heDogbWF4IH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlcmllc1Bsb3RMaXN0KCkge1xuICAgIHJldHVybiBuZXcgUGxvdExpc3QoKTtcbn1cblxuY2xhc3MgU2VyaWVzUHJpbWl0aXZlUmVuZGVyZXJXcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcihiYXNlUmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFzZVJlbmRlcmVyID0gYmFzZVJlbmRlcmVyO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZHJhdyh0YXJnZXQsIGlzSG92ZXJlZCwgaGl0VGVzdERhdGEpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFzZVJlbmRlcmVyLmRyYXcodGFyZ2V0KTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RyYXdCYWNrZ3JvdW5kKHRhcmdldCwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLl9wcml2YXRlX19iYXNlUmVuZGVyZXIpLmRyYXdCYWNrZ3JvdW5kKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGFyZ2V0KTtcbiAgICB9XG59XG5jbGFzcyBTZXJpZXNQcmltaXRpdmVQYW5lVmlld1dyYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKHBhbmVWaWV3KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVZpZXcgPSBwYW5lVmlldztcbiAgICB9XG4gICAgX2ludGVybmFsX3JlbmRlcmVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGJhc2VSZW5kZXJlciA9IHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3LnJlbmRlcmVyKCk7XG4gICAgICAgIGlmIChiYXNlUmVuZGVyZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5fcHJpdmF0ZV9fY2FjaGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5faW50ZXJuYWxfYmFzZSkgPT09IGJhc2VSZW5kZXJlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NhY2hlLl9pbnRlcm5hbF93cmFwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgU2VyaWVzUHJpbWl0aXZlUmVuZGVyZXJXcmFwcGVyKGJhc2VSZW5kZXJlcik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhY2hlID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2Jhc2U6IGJhc2VSZW5kZXJlcixcbiAgICAgICAgICAgIF9pbnRlcm5hbF93cmFwcGVyOiB3cmFwcGVyLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG4gICAgX2ludGVybmFsX3pPcmRlcigpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHJldHVybiAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLl9wcml2YXRlX19wYW5lVmlldykuek9yZGVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICdub3JtYWwnO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEF4aXNWaWV3RGF0YShiYXNlVmlldykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2ludGVybmFsX3RleHQ6IGJhc2VWaWV3LnRleHQoKSxcbiAgICAgICAgX2ludGVybmFsX2Nvb3JkaW5hdGU6IGJhc2VWaWV3LmNvb3JkaW5hdGUoKSxcbiAgICAgICAgX2ludGVybmFsX2ZpeGVkQ29vcmRpbmF0ZTogKF9hID0gYmFzZVZpZXcuZml4ZWRDb29yZGluYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChiYXNlVmlldyksXG4gICAgICAgIF9pbnRlcm5hbF9jb2xvcjogYmFzZVZpZXcudGV4dENvbG9yKCksXG4gICAgICAgIF9pbnRlcm5hbF9iYWNrZ3JvdW5kOiBiYXNlVmlldy5iYWNrQ29sb3IoKSxcbiAgICAgICAgX2ludGVybmFsX3Zpc2libGU6IChfYyA9IChfYiA9IGJhc2VWaWV3LnZpc2libGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGJhc2VWaWV3KSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogdHJ1ZSxcbiAgICAgICAgX2ludGVybmFsX3RpY2tWaXNpYmxlOiAoX2UgPSAoX2QgPSBiYXNlVmlldy50aWNrVmlzaWJsZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoYmFzZVZpZXcpKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB0cnVlLFxuICAgIH07XG59XG5jbGFzcyBTZXJpZXNQcmltaXRpdmVUaW1lQXhpc1ZpZXdXcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcihiYXNlVmlldywgdGltZVNjYWxlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyID0gbmV3IFRpbWVBeGlzVmlld1JlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Jhc2VWaWV3ID0gYmFzZVZpZXc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZSA9IHRpbWVTY2FsZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlbmRlcmVyKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlci5faW50ZXJuYWxfc2V0RGF0YShPYmplY3QuYXNzaWduKHsgX2ludGVybmFsX3dpZHRoOiB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX3dpZHRoKCkgfSwgZ2V0QXhpc1ZpZXdEYXRhKHRoaXMuX3ByaXZhdGVfX2Jhc2VWaWV3KSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXI7XG4gICAgfVxufVxuY2xhc3MgU2VyaWVzUHJpbWl0aXZlUHJpY2VBeGlzVmlld1dyYXBwZXIgZXh0ZW5kcyBQcmljZUF4aXNWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihiYXNlVmlldywgcHJpY2VTY2FsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlVmlldyA9IGJhc2VWaWV3O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID0gcHJpY2VTY2FsZTtcbiAgICB9XG4gICAgX2ludGVybmFsX191cGRhdGVSZW5kZXJlckRhdGEoYXhpc1JlbmRlcmVyRGF0YSwgcGFuZVJlbmRlcmVyRGF0YSwgY29tbW9uUmVuZGVyZXJEYXRhKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZXRBeGlzVmlld0RhdGEodGhpcy5fcHJpdmF0ZV9fYmFzZVZpZXcpO1xuICAgICAgICBjb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2JhY2tncm91bmQgPSBkYXRhLl9pbnRlcm5hbF9iYWNrZ3JvdW5kO1xuICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9jb2xvciA9IGRhdGEuX2ludGVybmFsX2NvbG9yO1xuICAgICAgICBjb25zdCBhZGRpdGlvbmFsUGFkZGluZyA9IDIgLyAxMiAqIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX2ZvbnRTaXplKCk7XG4gICAgICAgIGNvbW1vblJlbmRlcmVyRGF0YS5faW50ZXJuYWxfYWRkaXRpb25hbFBhZGRpbmdUb3AgPSBhZGRpdGlvbmFsUGFkZGluZztcbiAgICAgICAgY29tbW9uUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF9hZGRpdGlvbmFsUGFkZGluZ0JvdHRvbSA9IGFkZGl0aW9uYWxQYWRkaW5nO1xuICAgICAgICBjb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2Nvb3JkaW5hdGUgPSBkYXRhLl9pbnRlcm5hbF9jb29yZGluYXRlO1xuICAgICAgICBjb21tb25SZW5kZXJlckRhdGEuX2ludGVybmFsX2ZpeGVkQ29vcmRpbmF0ZSA9IGRhdGEuX2ludGVybmFsX2ZpeGVkQ29vcmRpbmF0ZTtcbiAgICAgICAgYXhpc1JlbmRlcmVyRGF0YS5faW50ZXJuYWxfdGV4dCA9IGRhdGEuX2ludGVybmFsX3RleHQ7XG4gICAgICAgIGF4aXNSZW5kZXJlckRhdGEuX2ludGVybmFsX3Zpc2libGUgPSBkYXRhLl9pbnRlcm5hbF92aXNpYmxlO1xuICAgICAgICBheGlzUmVuZGVyZXJEYXRhLl9pbnRlcm5hbF90aWNrVmlzaWJsZSA9IGRhdGEuX2ludGVybmFsX3RpY2tWaXNpYmxlO1xuICAgIH1cbn1cbmNsYXNzIFNlcmllc1ByaW1pdGl2ZVdyYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaW1pdGl2ZSwgc2VyaWVzKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3c0NhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNWaWV3c0NhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3NDYWNoZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlQXhpc1BhbmVWaWV3c0NhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNQYW5lVmlld3NDYWNoZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaW1pdGl2ZSA9IHByaW1pdGl2ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzID0gc2VyaWVzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpbWl0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlQWxsVmlld3MoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuX3ByaXZhdGVfX3ByaW1pdGl2ZSkudXBkYXRlQWxsVmlld3MpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3BhbmVWaWV3cygpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBiYXNlID0gKF9jID0gKF9iID0gKF9hID0gdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlKS5wYW5lVmlld3MpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogW107XG4gICAgICAgIGlmICgoKF9kID0gdGhpcy5fcHJpdmF0ZV9fcGFuZVZpZXdzQ2FjaGUpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5faW50ZXJuYWxfYmFzZSkgPT09IGJhc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lVmlld3NDYWNoZS5faW50ZXJuYWxfd3JhcHBlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3cmFwcGVyID0gYmFzZS5tYXAoKHB3KSA9PiBuZXcgU2VyaWVzUHJpbWl0aXZlUGFuZVZpZXdXcmFwcGVyKHB3KSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3c0NhY2hlID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2Jhc2U6IGJhc2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfd3JhcHBlcjogd3JhcHBlcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF90aW1lQXhpc1ZpZXdzKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGNvbnN0IGJhc2UgPSAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLl9wcml2YXRlX19wcmltaXRpdmUpLnRpbWVBeGlzVmlld3MpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogW107XG4gICAgICAgIGlmICgoKF9kID0gdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNWaWV3c0NhY2hlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuX2ludGVybmFsX2Jhc2UpID09PSBiYXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNWaWV3c0NhY2hlLl9pbnRlcm5hbF93cmFwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfdGltZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBiYXNlLm1hcCgoYXcpID0+IG5ldyBTZXJpZXNQcmltaXRpdmVUaW1lQXhpc1ZpZXdXcmFwcGVyKGF3LCB0aW1lU2NhbGUpKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNWaWV3c0NhY2hlID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2Jhc2U6IGJhc2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfd3JhcHBlcjogd3JhcHBlcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wcmljZUF4aXNWaWV3cygpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBiYXNlID0gKF9jID0gKF9iID0gKF9hID0gdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlKS5wcmljZUF4aXNWaWV3cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBbXTtcbiAgICAgICAgaWYgKCgoX2QgPSB0aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3c0NhY2hlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuX2ludGVybmFsX2Jhc2UpID09PSBiYXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3NDYWNoZS5faW50ZXJuYWxfd3JhcHBlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBiYXNlLm1hcCgoYXcpID0+IG5ldyBTZXJpZXNQcmltaXRpdmVQcmljZUF4aXNWaWV3V3JhcHBlcihhdywgcHJpY2VTY2FsZSkpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3c0NhY2hlID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2Jhc2U6IGJhc2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfd3JhcHBlcjogd3JhcHBlcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wcmljZUF4aXNQYW5lVmlld3MoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgY29uc3QgYmFzZSA9IChfYyA9IChfYiA9IChfYSA9IHRoaXMuX3ByaXZhdGVfX3ByaW1pdGl2ZSkucHJpY2VBeGlzUGFuZVZpZXdzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFtdO1xuICAgICAgICBpZiAoKChfZCA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlQXhpc1BhbmVWaWV3c0NhY2hlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuX2ludGVybmFsX2Jhc2UpID09PSBiYXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzUGFuZVZpZXdzQ2FjaGUuX2ludGVybmFsX3dyYXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGJhc2UubWFwKChwdykgPT4gbmV3IFNlcmllc1ByaW1pdGl2ZVBhbmVWaWV3V3JhcHBlcihwdykpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUF4aXNQYW5lVmlld3NDYWNoZSA9IHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9iYXNlOiBiYXNlLFxuICAgICAgICAgICAgX2ludGVybmFsX3dyYXBwZXI6IHdyYXBwZXIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdGltZUF4aXNQYW5lVmlld3MoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgY29uc3QgYmFzZSA9IChfYyA9IChfYiA9IChfYSA9IHRoaXMuX3ByaXZhdGVfX3ByaW1pdGl2ZSkudGltZUF4aXNQYW5lVmlld3MpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogW107XG4gICAgICAgIGlmICgoKF9kID0gdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNQYW5lVmlld3NDYWNoZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLl9pbnRlcm5hbF9iYXNlKSA9PT0gYmFzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3RpbWVBeGlzUGFuZVZpZXdzQ2FjaGUuX2ludGVybmFsX3dyYXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGJhc2UubWFwKChwdykgPT4gbmV3IFNlcmllc1ByaW1pdGl2ZVBhbmVWaWV3V3JhcHBlcihwdykpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lQXhpc1BhbmVWaWV3c0NhY2hlID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX2Jhc2U6IGJhc2UsXG4gICAgICAgICAgICBfaW50ZXJuYWxfd3JhcHBlcjogd3JhcHBlcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hdXRvc2NhbGVJbmZvKHN0YXJ0VGltZVBvaW50LCBlbmRUaW1lUG9pbnQpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHJldHVybiAoKF9jID0gKF9iID0gKF9hID0gdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlKS5hdXRvc2NhbGVJbmZvKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgc3RhcnRUaW1lUG9pbnQsIGVuZFRpbWVQb2ludCkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IG51bGwpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaGl0VGVzdCh4LCB5KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICByZXR1cm4gKF9jID0gKF9iID0gKF9hID0gdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlKS5oaXRUZXN0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgeCwgeSkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0UHJpbWl0aXZlUGFuZVZpZXdzKHByaW1pdGl2ZXMsIGV4dHJhY3Rvciwgek9yZGVyLCBkZXN0aW5hdGlvbikge1xuICAgIHByaW1pdGl2ZXMuZm9yRWFjaCgod3JhcHBlcikgPT4ge1xuICAgICAgICBleHRyYWN0b3Iod3JhcHBlcikuZm9yRWFjaCgocGFuZVZpZXcpID0+IHtcbiAgICAgICAgICAgIGlmIChwYW5lVmlldy5faW50ZXJuYWxfek9yZGVyKCkgIT09IHpPcmRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnB1c2gocGFuZVZpZXcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHByaW1pdGl2ZVBhbmVWaWV3c0V4dHJhY3Rvcih3cmFwcGVyKSB7XG4gICAgcmV0dXJuIHdyYXBwZXIuX2ludGVybmFsX3BhbmVWaWV3cygpO1xufVxuZnVuY3Rpb24gcHJpbWl0aXZlUHJpY2VQYW5lVmlld3NFeHRyYWN0b3Iod3JhcHBlcikge1xuICAgIHJldHVybiB3cmFwcGVyLl9pbnRlcm5hbF9wcmljZUF4aXNQYW5lVmlld3MoKTtcbn1cbmZ1bmN0aW9uIHByaW1pdGl2ZVRpbWVQYW5lVmlld3NFeHRyYWN0b3Iod3JhcHBlcikge1xuICAgIHJldHVybiB3cmFwcGVyLl9pbnRlcm5hbF90aW1lQXhpc1BhbmVWaWV3cygpO1xufVxuY2xhc3MgU2VyaWVzIGV4dGVuZHMgUHJpY2VEYXRhU291cmNlIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCwgb3B0aW9ucywgc2VyaWVzVHlwZSwgcGFuZSwgY3VzdG9tUGFuZVZpZXcpIHtcbiAgICAgICAgc3VwZXIobW9kZWwpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gY3JlYXRlU2VyaWVzUGxvdExpc3QoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VMaW5lVmlldyA9IG5ldyBTZXJpZXNQcmljZUxpbmVQYW5lVmlldyh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3VzdG9tUHJpY2VMaW5lcyA9IFtdO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlSG9yaXpvbnRhbExpbmVWaWV3ID0gbmV3IFNlcmllc0hvcml6b250YWxCYXNlTGluZVBhbmVWaWV3KHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sYXN0UHJpY2VBbmltYXRpb25QYW5lVmlldyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2JhckNvbG9yZXJDYWNoZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW5kZXhlZE1hcmtlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYW5pbWF0aW9uVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlcyA9IFtdO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzVHlwZSA9IHNlcmllc1R5cGU7XG4gICAgICAgIGNvbnN0IHByaWNlQXhpc1ZpZXcgPSBuZXcgU2VyaWVzUHJpY2VBeGlzVmlldyh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3MgPSBbcHJpY2VBeGlzVmlld107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVQcmljZUF4aXNWaWV3ID0gbmV3IFBhbmVQcmljZUF4aXNWaWV3KHByaWNlQXhpc1ZpZXcsIHRoaXMsIG1vZGVsKTtcbiAgICAgICAgaWYgKHNlcmllc1R5cGUgPT09ICdBcmVhJyB8fCBzZXJpZXNUeXBlID09PSAnTGluZScgfHwgc2VyaWVzVHlwZSA9PT0gJ0Jhc2VsaW5lJykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXcgPSBuZXcgU2VyaWVzTGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXcodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVjcmVhdGVGb3JtYXR0ZXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVjcmVhdGVQYW5lVmlld3MoY3VzdG9tUGFuZVZpZXcpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2FuaW1hdGlvblRpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3ByaXZhdGVfX2FuaW1hdGlvblRpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlTGluZUNvbG9yKGxhc3RCYXJDb2xvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5wcmljZUxpbmVDb2xvciB8fCBsYXN0QmFyQ29sb3I7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9sYXN0VmFsdWVEYXRhKGdsb2JhbExhc3QpIHtcbiAgICAgICAgY29uc3Qgbm9EYXRhUmVzID0geyBfaW50ZXJuYWxfbm9EYXRhOiB0cnVlIH07XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSB0aGlzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCk7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfaXNFbXB0eSgpIHx8IHByaWNlU2NhbGUuX2ludGVybmFsX2lzRW1wdHkoKSB8fCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBub0RhdGFSZXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlzaWJsZUJhcnMgPSB0aGlzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfdmlzaWJsZVN0cmljdFJhbmdlKCk7XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSB0aGlzLl9pbnRlcm5hbF9maXJzdFZhbHVlKCk7XG4gICAgICAgIGlmICh2aXNpYmxlQmFycyA9PT0gbnVsbCB8fCBmaXJzdFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9EYXRhUmVzO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZpbmQgcmFuZ2Ugb2YgYmFycyBpbnNpZGUgcmFuZ2VcbiAgICAgICAgLy8gVE9ETzogbWFrZSBpdCBtb3JlIG9wdGltYWxcbiAgICAgICAgbGV0IGJhcjtcbiAgICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgICAgaWYgKGdsb2JhbExhc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RCYXIgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9sYXN0KCk7XG4gICAgICAgICAgICBpZiAobGFzdEJhciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub0RhdGFSZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiYXIgPSBsYXN0QmFyO1xuICAgICAgICAgICAgbGFzdEluZGV4ID0gbGFzdEJhci5faW50ZXJuYWxfaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbmRCYXIgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9zZWFyY2godmlzaWJsZUJhcnMuX2ludGVybmFsX3JpZ2h0KCksIC0xIC8qIE1pc21hdGNoRGlyZWN0aW9uLk5lYXJlc3RMZWZ0ICovKTtcbiAgICAgICAgICAgIGlmIChlbmRCYXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9EYXRhUmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmFyID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmFsdWVBdChlbmRCYXIuX2ludGVybmFsX2luZGV4KTtcbiAgICAgICAgICAgIGlmIChiYXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9EYXRhUmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEluZGV4ID0gZW5kQmFyLl9pbnRlcm5hbF9pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmljZSA9IGJhci5faW50ZXJuYWxfdmFsdWVbMyAvKiBQbG90Um93VmFsdWVJbmRleC5DbG9zZSAqL107XG4gICAgICAgIGNvbnN0IGJhckNvbG9yZXIgPSB0aGlzLl9pbnRlcm5hbF9iYXJDb2xvcmVyKCk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gYmFyQ29sb3Jlci5faW50ZXJuYWxfYmFyU3R5bGUobGFzdEluZGV4LCB7IF9pbnRlcm5hbF92YWx1ZTogYmFyIH0pO1xuICAgICAgICBjb25zdCBjb29yZGluYXRlID0gcHJpY2VTY2FsZS5faW50ZXJuYWxfcHJpY2VUb0Nvb3JkaW5hdGUocHJpY2UsIGZpcnN0VmFsdWUuX2ludGVybmFsX3ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ub0RhdGE6IGZhbHNlLFxuICAgICAgICAgICAgX2ludGVybmFsX3ByaWNlOiBwcmljZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90ZXh0OiBwcmljZVNjYWxlLl9pbnRlcm5hbF9mb3JtYXRQcmljZShwcmljZSwgZmlyc3RWYWx1ZS5faW50ZXJuYWxfdmFsdWUpLFxuICAgICAgICAgICAgX2ludGVybmFsX2Zvcm1hdHRlZFByaWNlQWJzb2x1dGU6IHByaWNlU2NhbGUuX2ludGVybmFsX2Zvcm1hdFByaWNlQWJzb2x1dGUocHJpY2UpLFxuICAgICAgICAgICAgX2ludGVybmFsX2Zvcm1hdHRlZFByaWNlUGVyY2VudGFnZTogcHJpY2VTY2FsZS5faW50ZXJuYWxfZm9ybWF0UHJpY2VQZXJjZW50YWdlKHByaWNlLCBmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSksXG4gICAgICAgICAgICBfaW50ZXJuYWxfY29sb3I6IHN0eWxlLl9pbnRlcm5hbF9iYXJDb2xvcixcbiAgICAgICAgICAgIF9pbnRlcm5hbF9jb29yZGluYXRlOiBjb29yZGluYXRlLFxuICAgICAgICAgICAgX2ludGVybmFsX2luZGV4OiBsYXN0SW5kZXgsXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9pbnRlcm5hbF9iYXJDb2xvcmVyKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fYmFyQ29sb3JlckNhY2hlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYmFyQ29sb3JlckNhY2hlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2JhckNvbG9yZXJDYWNoZSA9IG5ldyBTZXJpZXNCYXJDb2xvcmVyKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYmFyQ29sb3JlckNhY2hlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBjb25zdCB0YXJnZXRQcmljZVNjYWxlSWQgPSBvcHRpb25zLnByaWNlU2NhbGVJZDtcbiAgICAgICAgaWYgKHRhcmdldFByaWNlU2NhbGVJZCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldFByaWNlU2NhbGVJZCAhPT0gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5wcmljZVNjYWxlSWQpIHtcbiAgICAgICAgICAgIC8vIHNlcmllcyBjYW5ub3QgZG8gaXQgaXRzZWxmLCBhc2sgbW9kZWxcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX21vdmVTZXJpZXNUb1NjYWxlKHRoaXMsIHRhcmdldFByaWNlU2NhbGVJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbWVyZ2UodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLnByaWNlRm9ybWF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlY3JlYXRlRm9ybWF0dGVyKCk7XG4gICAgICAgICAgICAvLyB1cGRhdGVkIGZvcm1hdHRlciBtaWdodCBhZmZlY3QgcmVuZGVyaW5nICBhbmQgYXMgYSBjb25zZXF1ZW5jZSBvZiB0aGlzIHRoZSB3aWR0aCBvZiBwcmljZSBheGlzIG1pZ2h0IGJlIGNoYW5nZWRcbiAgICAgICAgICAgIC8vIHRodXMgd2UgbmVlZCB0byBmb3JjZSB0aGUgY2hhcnQgdG8gZG8gYSBmdWxsIHVwZGF0ZSB0byBhcHBseSBjaGFuZ2VzIGNvcnJlY3RseVxuICAgICAgICAgICAgLy8gZnVsbCB1cGRhdGUgaXMgcXVpdGUgaGVhdnkgb3BlcmF0aW9uIGluIHRlcm1zIG9mIHBlcmZvcm1hbmNlXG4gICAgICAgICAgICAvLyBidXQgdXBkYXRpbmcgZm9ybWF0dGVyIGxvb2tzIGxpa2UgcXVpdGUgcmFyZSBzbyBmb3JjaW5nIGEgZnVsbCB1cGRhdGUgaGVyZSBzaG91bGRuJ3QgYWZmZWN0IHRoZSBwZXJmb3JtYW5jZSBhIGxvdFxuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfZnVsbFVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3VwZGF0ZVNvdXJjZSh0aGlzKTtcbiAgICAgICAgLy8gYSBzZXJpZXMgbWlnaHQgYWZmZWN0IGNyb3NzaGFpciBieSBzb21lIG9wdGlvbnMgKGxpa2UgY3Jvc3NoYWlyIG1hcmtlcnMpXG4gICAgICAgIC8vIHRoYXQncyB3aHkgd2UgbmVlZCB0byB1cGRhdGUgY3Jvc3NoYWlyIGFzIHdlbGxcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfdXBkYXRlQ3Jvc3NoYWlyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3Ll9pbnRlcm5hbF91cGRhdGUoJ29wdGlvbnMnKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldERhdGEoZGF0YSwgdXBkYXRlSW5mbykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9zZXREYXRhKGRhdGEpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZWNhbGN1bGF0ZU1hcmtlcnMoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVZpZXcuX2ludGVybmFsX3VwZGF0ZSgnZGF0YScpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrZXJzUGFuZVZpZXcuX2ludGVybmFsX3VwZGF0ZSgnZGF0YScpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fbGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh1cGRhdGVJbmZvICYmIHVwZGF0ZUluZm8uX2ludGVybmFsX2xhc3RCYXJVcGRhdGVkT3JOZXdCYXJzQWRkZWRUb1RoZVJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXcuX2ludGVybmFsX29uTmV3UmVhbHRpbWVEYXRhUmVjZWl2ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXcuX2ludGVybmFsX29uRGF0YUNsZWFyZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzb3VyY2VQYW5lID0gdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfcGFuZUZvclNvdXJjZSh0aGlzKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfcmVjYWxjdWxhdGVQYW5lKHNvdXJjZVBhbmUpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF91cGRhdGVTb3VyY2UodGhpcyk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3VwZGF0ZUNyb3NzaGFpcigpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9saWdodFVwZGF0ZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0TWFya2VycyhkYXRhKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnMgPSBkYXRhO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZWNhbGN1bGF0ZU1hcmtlcnMoKTtcbiAgICAgICAgY29uc3Qgc291cmNlUGFuZSA9IHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3BhbmVGb3JTb3VyY2UodGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnNQYW5lVmlldy5faW50ZXJuYWxfdXBkYXRlKCdkYXRhJyk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3JlY2FsY3VsYXRlUGFuZShzb3VyY2VQYW5lKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfdXBkYXRlU291cmNlKHRoaXMpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF91cGRhdGVDcm9zc2hhaXIoKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfbGlnaHRVcGRhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX21hcmtlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19tYXJrZXJzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaW5kZXhlZE1hcmtlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19pbmRleGVkTWFya2VycztcbiAgICB9XG4gICAgX2ludGVybmFsX2NyZWF0ZVByaWNlTGluZShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBDdXN0b21QcmljZUxpbmUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2N1c3RvbVByaWNlTGluZXMucHVzaChyZXN1bHQpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF91cGRhdGVTb3VyY2UodGhpcyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZW1vdmVQcmljZUxpbmUobGluZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX3ByaXZhdGVfX2N1c3RvbVByaWNlTGluZXMuaW5kZXhPZihsaW5lKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3VzdG9tUHJpY2VMaW5lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3VwZGF0ZVNvdXJjZSh0aGlzKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Nlcmllc1R5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19zZXJpZXNUeXBlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZmlyc3RWYWx1ZSgpIHtcbiAgICAgICAgY29uc3QgYmFyID0gdGhpcy5faW50ZXJuYWxfZmlyc3RCYXIoKTtcbiAgICAgICAgaWYgKGJhciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF92YWx1ZTogYmFyLl9pbnRlcm5hbF92YWx1ZVszIC8qIFBsb3RSb3dWYWx1ZUluZGV4LkNsb3NlICovXSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90aW1lUG9pbnQ6IGJhci5faW50ZXJuYWxfdGltZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2ludGVybmFsX2ZpcnN0QmFyKCkge1xuICAgICAgICBjb25zdCB2aXNpYmxlQmFycyA9IHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3RpbWVTY2FsZSgpLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgaWYgKHZpc2libGVCYXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFRpbWVQb2ludCA9IHZpc2libGVCYXJzLl9pbnRlcm5hbF9sZWZ0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9zZWFyY2goc3RhcnRUaW1lUG9pbnQsIDEgLyogTWlzbWF0Y2hEaXJlY3Rpb24uTmVhcmVzdFJpZ2h0ICovKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2JhcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19kYXRhO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGF0YUF0KHRpbWUpIHtcbiAgICAgICAgY29uc3QgcHJpY2VzID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfdmFsdWVBdCh0aW1lKTtcbiAgICAgICAgaWYgKHByaWNlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Nlcmllc1R5cGUgPT09ICdCYXInIHx8IHRoaXMuX3ByaXZhdGVfX3Nlcmllc1R5cGUgPT09ICdDYW5kbGVzdGljaycgfHwgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzVHlwZSA9PT0gJ0N1c3RvbScpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgX2ludGVybmFsX29wZW46IHByaWNlcy5faW50ZXJuYWxfdmFsdWVbMCAvKiBQbG90Um93VmFsdWVJbmRleC5PcGVuICovXSxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfaGlnaDogcHJpY2VzLl9pbnRlcm5hbF92YWx1ZVsxIC8qIFBsb3RSb3dWYWx1ZUluZGV4LkhpZ2ggKi9dLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9sb3c6IHByaWNlcy5faW50ZXJuYWxfdmFsdWVbMiAvKiBQbG90Um93VmFsdWVJbmRleC5Mb3cgKi9dLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9jbG9zZTogcHJpY2VzLl9pbnRlcm5hbF92YWx1ZVszIC8qIFBsb3RSb3dWYWx1ZUluZGV4LkNsb3NlICovXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcHJpY2VzLl9pbnRlcm5hbF92YWx1ZVszIC8qIFBsb3RSb3dWYWx1ZUluZGV4LkNsb3NlICovXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfdG9wUGFuZVZpZXdzKHBhbmUpIHtcbiAgICAgICAgY29uc3QgcmVzID0gW107XG4gICAgICAgIGV4dHJhY3RQcmltaXRpdmVQYW5lVmlld3ModGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlcywgcHJpbWl0aXZlUGFuZVZpZXdzRXh0cmFjdG9yLCAndG9wJywgcmVzKTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uUGFuZVZpZXcgPSB0aGlzLl9wcml2YXRlX19sYXN0UHJpY2VBbmltYXRpb25QYW5lVmlldztcbiAgICAgICAgaWYgKGFuaW1hdGlvblBhbmVWaWV3ID09PSBudWxsIHx8ICFhbmltYXRpb25QYW5lVmlldy5faW50ZXJuYWxfdmlzaWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19hbmltYXRpb25UaW1lb3V0SWQgPT09IG51bGwgJiYgYW5pbWF0aW9uUGFuZVZpZXcuX2ludGVybmFsX2FuaW1hdGlvbkFjdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hbmltYXRpb25UaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hbmltYXRpb25UaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX2N1cnNvclVwZGF0ZSgpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0aW9uUGFuZVZpZXcuX2ludGVybmFsX2ludmFsaWRhdGVTdGFnZSgpO1xuICAgICAgICByZXMudW5zaGlmdChhbmltYXRpb25QYW5lVmlldyk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wYW5lVmlld3MoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX2lzT3ZlcmxheSgpKSB7XG4gICAgICAgICAgICByZXMucHVzaCh0aGlzLl9wcml2YXRlX19iYXNlSG9yaXpvbnRhbExpbmVWaWV3KTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaCh0aGlzLl9wcml2YXRlX19wYW5lVmlldywgdGhpcy5fcHJpdmF0ZV9fcHJpY2VMaW5lVmlldywgdGhpcy5fcHJpdmF0ZV9fbWFya2Vyc1BhbmVWaWV3KTtcbiAgICAgICAgY29uc3QgcHJpY2VMaW5lVmlld3MgPSB0aGlzLl9wcml2YXRlX19jdXN0b21QcmljZUxpbmVzLm1hcCgobGluZSkgPT4gbGluZS5faW50ZXJuYWxfcGFuZVZpZXcoKSk7XG4gICAgICAgIHJlcy5wdXNoKC4uLnByaWNlTGluZVZpZXdzKTtcbiAgICAgICAgZXh0cmFjdFByaW1pdGl2ZVBhbmVWaWV3cyh0aGlzLl9wcml2YXRlX19wcmltaXRpdmVzLCBwcmltaXRpdmVQYW5lVmlld3NFeHRyYWN0b3IsICdub3JtYWwnLCByZXMpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYm90dG9tUGFuZVZpZXdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZXh0cmFjdFBhbmVWaWV3cyhwcmltaXRpdmVQYW5lVmlld3NFeHRyYWN0b3IsICdib3R0b20nKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlUGFuZVZpZXdzKHpPcmRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZXh0cmFjdFBhbmVWaWV3cyhwcmltaXRpdmVQcmljZVBhbmVWaWV3c0V4dHJhY3Rvciwgek9yZGVyKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3RpbWVQYW5lVmlld3Moek9yZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19leHRyYWN0UGFuZVZpZXdzKHByaW1pdGl2ZVRpbWVQYW5lVmlld3NFeHRyYWN0b3IsIHpPcmRlcik7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wcmltaXRpdmVIaXRUZXN0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3ByaW1pdGl2ZXNcbiAgICAgICAgICAgIC5tYXAoKHByaW1pdGl2ZSkgPT4gcHJpbWl0aXZlLl9pbnRlcm5hbF9oaXRUZXN0KHgsIHkpKVxuICAgICAgICAgICAgLmZpbHRlcigocmVzdWx0KSA9PiByZXN1bHQgIT09IG51bGwpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbGFiZWxQYW5lVmlld3MocGFuZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVByaWNlQXhpc1ZpZXcsXG4gICAgICAgICAgICAuLi50aGlzLl9wcml2YXRlX19jdXN0b21QcmljZUxpbmVzLm1hcCgobGluZSkgPT4gbGluZS5faW50ZXJuYWxfbGFiZWxQYW5lVmlldygpKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlQXhpc1ZpZXdzKHBhbmUsIHByaWNlU2NhbGUpIHtcbiAgICAgICAgaWYgKHByaWNlU2NhbGUgIT09IHRoaXMuX2ludGVybmFsX19wcmljZVNjYWxlICYmICF0aGlzLl9wcml2YXRlX19pc092ZXJsYXkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFsuLi50aGlzLl9wcml2YXRlX19wcmljZUF4aXNWaWV3c107XG4gICAgICAgIGZvciAoY29uc3QgY3VzdG9tUHJpY2VMaW5lIG9mIHRoaXMuX3ByaXZhdGVfX2N1c3RvbVByaWNlTGluZXMpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1c3RvbVByaWNlTGluZS5faW50ZXJuYWxfcHJpY2VBeGlzVmlldygpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmltaXRpdmVzLmZvckVhY2goKHdyYXBwZXIpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLndyYXBwZXIuX2ludGVybmFsX3ByaWNlQXhpc1ZpZXdzKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX2ludGVybmFsX3RpbWVBeGlzVmlld3MoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmltaXRpdmVzLmZvckVhY2goKHdyYXBwZXIpID0+IHtcbiAgICAgICAgICAgIHJlcy5wdXNoKC4uLndyYXBwZXIuX2ludGVybmFsX3RpbWVBeGlzVmlld3MoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXV0b3NjYWxlSW5mbyhzdGFydFRpbWVQb2ludCwgZW5kVGltZVBvaW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19vcHRpb25zLmF1dG9zY2FsZUluZm9Qcm92aWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBhdXRvc2NhbGVJbmZvID0gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5hdXRvc2NhbGVJbmZvUHJvdmlkZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX3ByaXZhdGVfX2F1dG9zY2FsZUluZm9JbXBsKHN0YXJ0VGltZVBvaW50LCBlbmRUaW1lUG9pbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAocmVzID09PSBudWxsKSA/IG51bGwgOiByZXMuX2ludGVybmFsX3RvUmF3KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBBdXRvc2NhbGVJbmZvSW1wbC5faW50ZXJuYWxfZnJvbVJhdyhhdXRvc2NhbGVJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYXV0b3NjYWxlSW5mb0ltcGwoc3RhcnRUaW1lUG9pbnQsIGVuZFRpbWVQb2ludCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9taW5Nb3ZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5wcmljZUZvcm1hdC5taW5Nb3ZlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZm9ybWF0dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZm9ybWF0dGVyO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlQWxsVmlld3MoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVZpZXcuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrZXJzUGFuZVZpZXcuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IHByaWNlQXhpc1ZpZXcgb2YgdGhpcy5fcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3MpIHtcbiAgICAgICAgICAgIHByaWNlQXhpc1ZpZXcuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgY3VzdG9tUHJpY2VMaW5lIG9mIHRoaXMuX3ByaXZhdGVfX2N1c3RvbVByaWNlTGluZXMpIHtcbiAgICAgICAgICAgIGN1c3RvbVByaWNlTGluZS5faW50ZXJuYWxfdXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VMaW5lVmlldy5faW50ZXJuYWxfdXBkYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Jhc2VIb3Jpem9udGFsTGluZVZpZXcuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICAoX2EgPSB0aGlzLl9wcml2YXRlX19sYXN0UHJpY2VBbmltYXRpb25QYW5lVmlldykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLl9pbnRlcm5hbF91cGRhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlcy5mb3JFYWNoKCh3cmFwcGVyKSA9PiB3cmFwcGVyLl9pbnRlcm5hbF91cGRhdGVBbGxWaWV3cygpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlU2NhbGUoKSB7XG4gICAgICAgIHJldHVybiBlbnN1cmVOb3ROdWxsKHN1cGVyLl9pbnRlcm5hbF9wcmljZVNjYWxlKCkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbWFya2VyRGF0YUF0SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgZ2V0VmFsdWUgPSAodGhpcy5fcHJpdmF0ZV9fc2VyaWVzVHlwZSA9PT0gJ0xpbmUnIHx8IHRoaXMuX3ByaXZhdGVfX3Nlcmllc1R5cGUgPT09ICdBcmVhJyB8fCB0aGlzLl9wcml2YXRlX19zZXJpZXNUeXBlID09PSAnQmFzZWxpbmUnKSAmJlxuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5jcm9zc2hhaXJNYXJrZXJWaXNpYmxlO1xuICAgICAgICBpZiAoIWdldFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXIgPSB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92YWx1ZUF0KGluZGV4KTtcbiAgICAgICAgaWYgKGJhciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJpY2UgPSBiYXIuX2ludGVybmFsX3ZhbHVlWzMgLyogUGxvdFJvd1ZhbHVlSW5kZXguQ2xvc2UgKi9dO1xuICAgICAgICBjb25zdCByYWRpdXMgPSB0aGlzLl9wcml2YXRlX19tYXJrZXJSYWRpdXMoKTtcbiAgICAgICAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGlzLl9wcml2YXRlX19tYXJrZXJCb3JkZXJDb2xvcigpO1xuICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRoaXMuX3ByaXZhdGVfX21hcmtlckJvcmRlcldpZHRoKCk7XG4gICAgICAgIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHRoaXMuX3ByaXZhdGVfX21hcmtlckJhY2tncm91bmRDb2xvcihpbmRleCk7XG4gICAgICAgIHJldHVybiB7IF9pbnRlcm5hbF9wcmljZTogcHJpY2UsIF9pbnRlcm5hbF9yYWRpdXM6IHJhZGl1cywgX2ludGVybmFsX2JvcmRlckNvbG9yOiBib3JkZXJDb2xvciwgX2ludGVybmFsX2JvcmRlcldpZHRoOiBib3JkZXJXaWR0aCwgX2ludGVybmFsX2JhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yIH07XG4gICAgfVxuICAgIF9pbnRlcm5hbF90aXRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMudGl0bGU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF92aXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy52aXNpYmxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXR0YWNoUHJpbWl0aXZlKHByaW1pdGl2ZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmltaXRpdmVzLnB1c2gobmV3IFNlcmllc1ByaW1pdGl2ZVdyYXBwZXIocHJpbWl0aXZlLCB0aGlzKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kZXRhY2hQcmltaXRpdmUoc291cmNlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaW1pdGl2ZXMgPSB0aGlzLl9wcml2YXRlX19wcmltaXRpdmVzLmZpbHRlcigod3JhcHBlcikgPT4gd3JhcHBlci5faW50ZXJuYWxfcHJpbWl0aXZlKCkgIT09IHNvdXJjZSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jdXN0b21TZXJpZXNQbG90VmFsdWVzQnVpbGRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3IGluc3RhbmNlb2YgU2VyaWVzQ3VzdG9tUGFuZVZpZXcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3Ll9pbnRlcm5hbF9wcmljZVZhbHVlQnVpbGRlcihkYXRhKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2ludGVybmFsX2N1c3RvbVNlcmllc1doaXRlc3BhY2VDaGVjaygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3IGluc3RhbmNlb2YgU2VyaWVzQ3VzdG9tUGFuZVZpZXcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3Ll9pbnRlcm5hbF9pc1doaXRlc3BhY2UoZGF0YSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIF9wcml2YXRlX19pc092ZXJsYXkoKSB7XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSB0aGlzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCk7XG4gICAgICAgIHJldHVybiAhaXNEZWZhdWx0UHJpY2VTY2FsZShwcmljZVNjYWxlLl9pbnRlcm5hbF9pZCgpKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2F1dG9zY2FsZUluZm9JbXBsKHN0YXJ0VGltZVBvaW50LCBlbmRUaW1lUG9pbnQpIHtcbiAgICAgICAgaWYgKCFpc0ludGVnZXIoc3RhcnRUaW1lUG9pbnQpIHx8ICFpc0ludGVnZXIoZW5kVGltZVBvaW50KSB8fCB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHJlZmFjdG9yIHRoaXNcbiAgICAgICAgLy8gc2VyaWVzIGRhdGEgaXMgc3Ryb25nbHkgaGFyZGNvZGVkIHRvIGtlZXAgYmFyc1xuICAgICAgICBjb25zdCBwbG90cyA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllc1R5cGUgPT09ICdMaW5lJyB8fCB0aGlzLl9wcml2YXRlX19zZXJpZXNUeXBlID09PSAnQXJlYScgfHwgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzVHlwZSA9PT0gJ0Jhc2VsaW5lJyB8fCB0aGlzLl9wcml2YXRlX19zZXJpZXNUeXBlID09PSAnSGlzdG9ncmFtJ1xuICAgICAgICAgICAgPyBbMyAvKiBQbG90Um93VmFsdWVJbmRleC5DbG9zZSAqL11cbiAgICAgICAgICAgIDogWzIgLyogUGxvdFJvd1ZhbHVlSW5kZXguTG93ICovLCAxIC8qIFBsb3RSb3dWYWx1ZUluZGV4LkhpZ2ggKi9dO1xuICAgICAgICBjb25zdCBiYXJzTWluTWF4ID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfbWluTWF4T25SYW5nZUNhY2hlZChzdGFydFRpbWVQb2ludCwgZW5kVGltZVBvaW50LCBwbG90cyk7XG4gICAgICAgIGxldCByYW5nZSA9IGJhcnNNaW5NYXggIT09IG51bGwgPyBuZXcgUHJpY2VSYW5nZUltcGwoYmFyc01pbk1heC5faW50ZXJuYWxfbWluLCBiYXJzTWluTWF4Ll9pbnRlcm5hbF9tYXgpIDogbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX3Nlcmllc1R5cGUoKSA9PT0gJ0hpc3RvZ3JhbScpIHtcbiAgICAgICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLl9wcml2YXRlX19vcHRpb25zLmJhc2U7XG4gICAgICAgICAgICBjb25zdCByYW5nZVdpdGhCYXNlID0gbmV3IFByaWNlUmFuZ2VJbXBsKGJhc2UsIGJhc2UpO1xuICAgICAgICAgICAgcmFuZ2UgPSByYW5nZSAhPT0gbnVsbCA/IHJhbmdlLl9pbnRlcm5hbF9tZXJnZShyYW5nZVdpdGhCYXNlKSA6IHJhbmdlV2l0aEJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1hcmdpbnMgPSB0aGlzLl9wcml2YXRlX19tYXJrZXJzUGFuZVZpZXcuX2ludGVybmFsX2F1dG9TY2FsZU1hcmdpbnMoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpbWl0aXZlcy5mb3JFYWNoKChwcmltaXRpdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByaW1pdGl2ZUF1dG9zY2FsZSA9IHByaW1pdGl2ZS5faW50ZXJuYWxfYXV0b3NjYWxlSW5mbyhzdGFydFRpbWVQb2ludCwgZW5kVGltZVBvaW50KTtcbiAgICAgICAgICAgIGlmIChwcmltaXRpdmVBdXRvc2NhbGUgPT09IG51bGwgfHwgcHJpbWl0aXZlQXV0b3NjYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmltaXRpdmVBdXRvc2NhbGUucHJpY2VSYW5nZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaW1pdGl2ZVJhbmdlID0gbmV3IFByaWNlUmFuZ2VJbXBsKHByaW1pdGl2ZUF1dG9zY2FsZS5wcmljZVJhbmdlLm1pblZhbHVlLCBwcmltaXRpdmVBdXRvc2NhbGUucHJpY2VSYW5nZS5tYXhWYWx1ZSk7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSByYW5nZSAhPT0gbnVsbCA/IHJhbmdlLl9pbnRlcm5hbF9tZXJnZShwcmltaXRpdmVSYW5nZSkgOiBwcmltaXRpdmVSYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmltaXRpdmVBdXRvc2NhbGUgPT09IG51bGwgfHwgcHJpbWl0aXZlQXV0b3NjYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmltaXRpdmVBdXRvc2NhbGUubWFyZ2lucykge1xuICAgICAgICAgICAgICAgIG1hcmdpbnMgPSBtZXJnZU1hcmdpbnMobWFyZ2lucywgcHJpbWl0aXZlQXV0b3NjYWxlLm1hcmdpbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRvc2NhbGVJbmZvSW1wbChyYW5nZSwgbWFyZ2lucyk7XG4gICAgfVxuICAgIF9wcml2YXRlX19tYXJrZXJSYWRpdXMoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fcHJpdmF0ZV9fc2VyaWVzVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnTGluZSc6XG4gICAgICAgICAgICBjYXNlICdBcmVhJzpcbiAgICAgICAgICAgIGNhc2UgJ0Jhc2VsaW5lJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5jcm9zc2hhaXJNYXJrZXJSYWRpdXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIF9wcml2YXRlX19tYXJrZXJCb3JkZXJDb2xvcigpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9wcml2YXRlX19zZXJpZXNUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdMaW5lJzpcbiAgICAgICAgICAgIGNhc2UgJ0FyZWEnOlxuICAgICAgICAgICAgY2FzZSAnQmFzZWxpbmUnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3Jvc3NoYWlyTWFya2VyQm9yZGVyQ29sb3IgPSB0aGlzLl9wcml2YXRlX19vcHRpb25zLmNyb3NzaGFpck1hcmtlckJvcmRlckNvbG9yO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc2hhaXJNYXJrZXJCb3JkZXJDb2xvci5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyb3NzaGFpck1hcmtlckJvcmRlckNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX21hcmtlckJvcmRlcldpZHRoKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3ByaXZhdGVfX3Nlcmllc1R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0xpbmUnOlxuICAgICAgICAgICAgY2FzZSAnQXJlYSc6XG4gICAgICAgICAgICBjYXNlICdCYXNlbGluZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuY3Jvc3NoYWlyTWFya2VyQm9yZGVyV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIF9wcml2YXRlX19tYXJrZXJCYWNrZ3JvdW5kQ29sb3IoaW5kZXgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9wcml2YXRlX19zZXJpZXNUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdMaW5lJzpcbiAgICAgICAgICAgIGNhc2UgJ0FyZWEnOlxuICAgICAgICAgICAgY2FzZSAnQmFzZWxpbmUnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3Jvc3NoYWlyTWFya2VyQmFja2dyb3VuZENvbG9yID0gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5jcm9zc2hhaXJNYXJrZXJCYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzaGFpck1hcmtlckJhY2tncm91bmRDb2xvci5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyb3NzaGFpck1hcmtlckJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX2JhckNvbG9yZXIoKS5faW50ZXJuYWxfYmFyU3R5bGUoaW5kZXgpLl9pbnRlcm5hbF9iYXJDb2xvcjtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3JlY3JlYXRlRm9ybWF0dGVyKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMucHJpY2VGb3JtYXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnY3VzdG9tJzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdHRlciA9IHsgZm9ybWF0OiB0aGlzLl9wcml2YXRlX19vcHRpb25zLnByaWNlRm9ybWF0LmZvcm1hdHRlciB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAndm9sdW1lJzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdHRlciA9IG5ldyBWb2x1bWVGb3JtYXR0ZXIodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5wcmljZUZvcm1hdC5wcmVjaXNpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncGVyY2VudCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19mb3JtYXR0ZXIgPSBuZXcgUGVyY2VudGFnZUZvcm1hdHRlcih0aGlzLl9wcml2YXRlX19vcHRpb25zLnByaWNlRm9ybWF0LnByZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpY2VTY2FsZSA9IE1hdGgucG93KDEwLCB0aGlzLl9wcml2YXRlX19vcHRpb25zLnByaWNlRm9ybWF0LnByZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0dGVyID0gbmV3IFByaWNlRm9ybWF0dGVyKHByaWNlU2NhbGUsIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMucHJpY2VGb3JtYXQubWluTW92ZSAqIHByaWNlU2NhbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9fcHJpY2VTY2FsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfX3ByaWNlU2NhbGUuX2ludGVybmFsX3VwZGF0ZUZvcm1hdHRlcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19yZWNhbGN1bGF0ZU1hcmtlcnMoKSB7XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3RpbWVTY2FsZSgpO1xuICAgICAgICBpZiAoIXRpbWVTY2FsZS5faW50ZXJuYWxfaGFzUG9pbnRzKCkgfHwgdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pbmRleGVkTWFya2VycyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0RGF0YUluZGV4ID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9maXJzdEluZGV4KCkpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbmRleGVkTWFya2VycyA9IHRoaXMuX3ByaXZhdGVfX21hcmtlcnMubWFwKChtYXJrZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgZmluZCBpbmRleCBvbiB0aGUgdGltZSBzY2FsZSAoYWNyb3NzIGFsbCBzZXJpZXMpXG4gICAgICAgICAgICBjb25zdCB0aW1lUG9pbnRJbmRleCA9IGVuc3VyZU5vdE51bGwodGltZVNjYWxlLl9pbnRlcm5hbF90aW1lVG9JbmRleChtYXJrZXIudGltZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgLy8gYW5kIHRoZW4gc2VhcmNoIHRoYXQgaW5kZXggaW5zaWRlIHRoZSBzZXJpZXMgZGF0YVxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoTW9kZSA9IHRpbWVQb2ludEluZGV4IDwgZmlyc3REYXRhSW5kZXggPyAxIC8qIE1pc21hdGNoRGlyZWN0aW9uLk5lYXJlc3RSaWdodCAqLyA6IC0xIC8qIE1pc21hdGNoRGlyZWN0aW9uLk5lYXJlc3RMZWZ0ICovO1xuICAgICAgICAgICAgY29uc3Qgc2VyaWVzRGF0YUluZGV4ID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9zZWFyY2godGltZVBvaW50SW5kZXgsIHNlYXJjaE1vZGUpKS5faW50ZXJuYWxfaW5kZXg7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRpbWU6IHNlcmllc0RhdGFJbmRleCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbWFya2VyLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHNoYXBlOiBtYXJrZXIuc2hhcGUsXG4gICAgICAgICAgICAgICAgY29sb3I6IG1hcmtlci5jb2xvcixcbiAgICAgICAgICAgICAgICBpZDogbWFya2VyLmlkLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9pbnRlcm5hbElkOiBpbmRleCxcbiAgICAgICAgICAgICAgICB0ZXh0OiBtYXJrZXIudGV4dCxcbiAgICAgICAgICAgICAgICBzaXplOiBtYXJrZXIuc2l6ZSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFRpbWU6IG1hcmtlci5vcmlnaW5hbFRpbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3JlY3JlYXRlUGFuZVZpZXdzKGN1c3RvbVBhbmVWaWV3KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtlcnNQYW5lVmlldyA9IG5ldyBTZXJpZXNNYXJrZXJzUGFuZVZpZXcodGhpcywgdGhpcy5faW50ZXJuYWxfbW9kZWwoKSk7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fcHJpdmF0ZV9fc2VyaWVzVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnQmFyJzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3ID0gbmV3IFNlcmllc0JhcnNQYW5lVmlldyh0aGlzLCB0aGlzLl9pbnRlcm5hbF9tb2RlbCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ0NhbmRsZXN0aWNrJzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3ID0gbmV3IFNlcmllc0NhbmRsZXN0aWNrc1BhbmVWaWV3KHRoaXMsIHRoaXMuX2ludGVybmFsX21vZGVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnTGluZSc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lVmlldyA9IG5ldyBTZXJpZXNMaW5lUGFuZVZpZXcodGhpcywgdGhpcy5faW50ZXJuYWxfbW9kZWwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdDdXN0b20nOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVZpZXcgPSBuZXcgU2VyaWVzQ3VzdG9tUGFuZVZpZXcodGhpcywgdGhpcy5faW50ZXJuYWxfbW9kZWwoKSwgZW5zdXJlRGVmaW5lZChjdXN0b21QYW5lVmlldykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnQXJlYSc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lVmlldyA9IG5ldyBTZXJpZXNBcmVhUGFuZVZpZXcodGhpcywgdGhpcy5faW50ZXJuYWxfbW9kZWwoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdCYXNlbGluZSc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lVmlldyA9IG5ldyBTZXJpZXNCYXNlbGluZVBhbmVWaWV3KHRoaXMsIHRoaXMuX2ludGVybmFsX21vZGVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnSGlzdG9ncmFtJzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3ID0gbmV3IFNlcmllc0hpc3RvZ3JhbVBhbmVWaWV3KHRoaXMsIHRoaXMuX2ludGVybmFsX21vZGVsKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgRXJyb3IoJ1Vua25vd24gY2hhcnQgc3R5bGUgYXNzaWduZWQ6ICcgKyB0aGlzLl9wcml2YXRlX19zZXJpZXNUeXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fZXh0cmFjdFBhbmVWaWV3cyhleHRyYWN0b3IsIHpPcmRlcikge1xuICAgICAgICBjb25zdCByZXMgPSBbXTtcbiAgICAgICAgZXh0cmFjdFByaW1pdGl2ZVBhbmVWaWV3cyh0aGlzLl9wcml2YXRlX19wcmltaXRpdmVzLCBleHRyYWN0b3IsIHpPcmRlciwgcmVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG5mdW5jdGlvbiBtZXJnZU1hcmdpbnMoc291cmNlLCBhZGRpdGlvbmFsTWFyZ2luKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4ge1xuICAgICAgICBhYm92ZTogTWF0aC5tYXgoKF9hID0gc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmFib3ZlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwLCBhZGRpdGlvbmFsTWFyZ2luLmFib3ZlKSxcbiAgICAgICAgYmVsb3c6IE1hdGgubWF4KChfYiA9IHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5iZWxvdykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCwgYWRkaXRpb25hbE1hcmdpbi5iZWxvdyksXG4gICAgfTtcbn1cblxuY2xhc3MgTWFnbmV0IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYWxpZ24ocHJpY2UsIGluZGV4LCBwYW5lKSB7XG4gICAgICAgIGxldCByZXMgPSBwcmljZTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMubW9kZSA9PT0gMCAvKiBDcm9zc2hhaXJNb2RlLk5vcm1hbCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZhdWx0UHJpY2VTY2FsZSA9IHBhbmUuX2ludGVybmFsX2RlZmF1bHRQcmljZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBkZWZhdWx0UHJpY2VTY2FsZS5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB5ID0gZGVmYXVsdFByaWNlU2NhbGUuX2ludGVybmFsX3ByaWNlVG9Db29yZGluYXRlKHByaWNlLCBmaXJzdFZhbHVlKTtcbiAgICAgICAgLy8gZ2V0IGFsbCBzZXJpZXNlcyBmcm9tIHRoZSBwYW5lXG4gICAgICAgIGNvbnN0IHNlcmllc2VzID0gcGFuZS5faW50ZXJuYWxfZGF0YVNvdXJjZXMoKS5maWx0ZXIoKChkcykgPT4gKGRzIGluc3RhbmNlb2YgKFNlcmllcykpKSk7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZXMgPSBzZXJpZXNlcy5yZWR1Y2UoKGFjYywgc2VyaWVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFuZS5faW50ZXJuYWxfaXNPdmVybGF5KHNlcmllcykgfHwgIXNlcmllcy5faW50ZXJuYWxfdmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBzID0gc2VyaWVzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCk7XG4gICAgICAgICAgICBjb25zdCBiYXJzID0gc2VyaWVzLl9pbnRlcm5hbF9iYXJzKCk7XG4gICAgICAgICAgICBpZiAocHMuX2ludGVybmFsX2lzRW1wdHkoKSB8fCAhYmFycy5faW50ZXJuYWxfY29udGFpbnMoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJhciA9IGJhcnMuX2ludGVybmFsX3ZhbHVlQXQoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGJhciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb252ZXJ0IGJhciB0byBwaXhlbHNcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0UHJpY2UgPSBlbnN1cmUoc2VyaWVzLl9pbnRlcm5hbF9maXJzdFZhbHVlKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYy5jb25jYXQoW3BzLl9pbnRlcm5hbF9wcmljZVRvQ29vcmRpbmF0ZShiYXIuX2ludGVybmFsX3ZhbHVlWzMgLyogUGxvdFJvd1ZhbHVlSW5kZXguQ2xvc2UgKi9dLCBmaXJzdFByaWNlLl9pbnRlcm5hbF92YWx1ZSldKTtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2FuZGlkYXRlcy5zb3J0KCh5MSwgeTIpID0+IE1hdGguYWJzKHkxIC0geSkgLSBNYXRoLmFicyh5MiAtIHkpKTtcbiAgICAgICAgY29uc3QgbmVhcmVzdCA9IGNhbmRpZGF0ZXNbMF07XG4gICAgICAgIHJlcyA9IGRlZmF1bHRQcmljZVNjYWxlLl9pbnRlcm5hbF9jb29yZGluYXRlVG9QcmljZShuZWFyZXN0LCBmaXJzdFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG5cbmNsYXNzIEdyaWRSZW5kZXJlciBleHRlbmRzIEJpdG1hcENvb3JkaW5hdGVzUGFuZVJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YSA9IG51bGw7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXREYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9fZHJhd0ltcGwoeyBjb250ZXh0OiBjdHgsIGJpdG1hcFNpemUsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IoaG9yaXpvbnRhbFBpeGVsUmF0aW8pKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgc3Ryb2tlSW5QaXhlbChjdHgsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX2RhdGEpO1xuICAgICAgICAgICAgaWYgKGRhdGEuX2ludGVybmFsX3ZlcnRMaW5lc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBkYXRhLl9pbnRlcm5hbF92ZXJ0TGluZXNDb2xvcjtcbiAgICAgICAgICAgICAgICBzZXRMaW5lU3R5bGUoY3R4LCBkYXRhLl9pbnRlcm5hbF92ZXJ0TGluZVN0eWxlKTtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0aW1lTWFyayBvZiBkYXRhLl9pbnRlcm5hbF90aW1lTWFya3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IE1hdGgucm91bmQodGltZU1hcmsuX2ludGVybmFsX2Nvb3JkICogaG9yaXpvbnRhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHgsIC1saW5lV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHgsIGJpdG1hcFNpemUuaGVpZ2h0ICsgbGluZVdpZHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEuX2ludGVybmFsX2hvcnpMaW5lc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBkYXRhLl9pbnRlcm5hbF9ob3J6TGluZXNDb2xvcjtcbiAgICAgICAgICAgICAgICBzZXRMaW5lU3R5bGUoY3R4LCBkYXRhLl9pbnRlcm5hbF9ob3J6TGluZVN0eWxlKTtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcmljZU1hcmsgb2YgZGF0YS5faW50ZXJuYWxfcHJpY2VNYXJrcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gTWF0aC5yb3VuZChwcmljZU1hcmsuX2ludGVybmFsX2Nvb3JkICogdmVydGljYWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbygtbGluZVdpZHRoLCB5KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhiaXRtYXBTaXplLndpZHRoICsgbGluZVdpZHRoLCB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIEdyaWRQYW5lVmlldyB7XG4gICAgY29uc3RydWN0b3IocGFuZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlciA9IG5ldyBHcmlkUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lID0gcGFuZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVuZGVyZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCkge1xuICAgICAgICAgICAgY29uc3QgZ3JpZE9wdGlvbnMgPSB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9vcHRpb25zKCkuZ3JpZDtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2hvcnpMaW5lc1Zpc2libGU6IGdyaWRPcHRpb25zLmhvcnpMaW5lcy52aXNpYmxlLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF92ZXJ0TGluZXNWaXNpYmxlOiBncmlkT3B0aW9ucy52ZXJ0TGluZXMudmlzaWJsZSxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfaG9yekxpbmVzQ29sb3I6IGdyaWRPcHRpb25zLmhvcnpMaW5lcy5jb2xvcixcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdmVydExpbmVzQ29sb3I6IGdyaWRPcHRpb25zLnZlcnRMaW5lcy5jb2xvcixcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfaG9yekxpbmVTdHlsZTogZ3JpZE9wdGlvbnMuaG9yekxpbmVzLnN0eWxlLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF92ZXJ0TGluZVN0eWxlOiBncmlkT3B0aW9ucy52ZXJ0TGluZXMuc3R5bGUsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3ByaWNlTWFya3M6IHRoaXMuX3ByaXZhdGVfX3BhbmUuX2ludGVybmFsX2RlZmF1bHRQcmljZVNjYWxlKCkuX2ludGVybmFsX21hcmtzKCksXG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0aGlzIGNvbnZlcnNpb20gYmVjYXVzZSBUaW1lTWFyayBpcyBhIHBhcnQgb2YgZXh0ZXJuYWwgaW50ZXJmYWNlXG4gICAgICAgICAgICAgICAgLy8gYW5kIGZpZWxkcyBpbnNpZGUgVGltZU1hcmsgYXJlIG5vdCBtaW5pZmllZFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF90aW1lTWFya3M6ICh0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfbWFya3MoKSB8fCBbXSkubWFwKCh0bSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBfaW50ZXJuYWxfY29vcmQ6IHRtLmNvb3JkIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXIuX2ludGVybmFsX3NldERhdGEoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19yZW5kZXJlcjtcbiAgICB9XG59XG5cbmNsYXNzIEdyaWQge1xuICAgIGNvbnN0cnVjdG9yKHBhbmUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVZpZXcgPSBuZXcgR3JpZFBhbmVWaWV3KHBhbmUpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFuZVZpZXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lVmlldztcbiAgICB9XG59XG5cbmNvbnN0IGRlZkxvZ0Zvcm11bGEgPSB7XG4gICAgX2ludGVybmFsX2xvZ2ljYWxPZmZzZXQ6IDQsXG4gICAgX2ludGVybmFsX2Nvb3JkT2Zmc2V0OiAwLjAwMDEsXG59O1xuZnVuY3Rpb24gZnJvbVBlcmNlbnQodmFsdWUsIGJhc2VWYWx1ZSkge1xuICAgIGlmIChiYXNlVmFsdWUgPCAwKSB7XG4gICAgICAgIHZhbHVlID0gLXZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gKHZhbHVlIC8gMTAwKSAqIGJhc2VWYWx1ZSArIGJhc2VWYWx1ZTtcbn1cbmZ1bmN0aW9uIHRvUGVyY2VudCh2YWx1ZSwgYmFzZVZhbHVlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gMTAwICogKHZhbHVlIC0gYmFzZVZhbHVlKSAvIGJhc2VWYWx1ZTtcbiAgICByZXR1cm4gKGJhc2VWYWx1ZSA8IDAgPyAtcmVzdWx0IDogcmVzdWx0KTtcbn1cbmZ1bmN0aW9uIHRvUGVyY2VudFJhbmdlKHByaWNlUmFuZ2UsIGJhc2VWYWx1ZSkge1xuICAgIGNvbnN0IG1pblBlcmNlbnQgPSB0b1BlcmNlbnQocHJpY2VSYW5nZS5faW50ZXJuYWxfbWluVmFsdWUoKSwgYmFzZVZhbHVlKTtcbiAgICBjb25zdCBtYXhQZXJjZW50ID0gdG9QZXJjZW50KHByaWNlUmFuZ2UuX2ludGVybmFsX21heFZhbHVlKCksIGJhc2VWYWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBQcmljZVJhbmdlSW1wbChtaW5QZXJjZW50LCBtYXhQZXJjZW50KTtcbn1cbmZ1bmN0aW9uIGZyb21JbmRleGVkVG8xMDAodmFsdWUsIGJhc2VWYWx1ZSkge1xuICAgIHZhbHVlIC09IDEwMDtcbiAgICBpZiAoYmFzZVZhbHVlIDwgMCkge1xuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuICh2YWx1ZSAvIDEwMCkgKiBiYXNlVmFsdWUgKyBiYXNlVmFsdWU7XG59XG5mdW5jdGlvbiB0b0luZGV4ZWRUbzEwMCh2YWx1ZSwgYmFzZVZhbHVlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gMTAwICogKHZhbHVlIC0gYmFzZVZhbHVlKSAvIGJhc2VWYWx1ZSArIDEwMDtcbiAgICByZXR1cm4gKGJhc2VWYWx1ZSA8IDAgPyAtcmVzdWx0IDogcmVzdWx0KTtcbn1cbmZ1bmN0aW9uIHRvSW5kZXhlZFRvMTAwUmFuZ2UocHJpY2VSYW5nZSwgYmFzZVZhbHVlKSB7XG4gICAgY29uc3QgbWluUGVyY2VudCA9IHRvSW5kZXhlZFRvMTAwKHByaWNlUmFuZ2UuX2ludGVybmFsX21pblZhbHVlKCksIGJhc2VWYWx1ZSk7XG4gICAgY29uc3QgbWF4UGVyY2VudCA9IHRvSW5kZXhlZFRvMTAwKHByaWNlUmFuZ2UuX2ludGVybmFsX21heFZhbHVlKCksIGJhc2VWYWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBQcmljZVJhbmdlSW1wbChtaW5QZXJjZW50LCBtYXhQZXJjZW50KTtcbn1cbmZ1bmN0aW9uIHRvTG9nKHByaWNlLCBsb2dGb3JtdWxhKSB7XG4gICAgY29uc3QgbSA9IE1hdGguYWJzKHByaWNlKTtcbiAgICBpZiAobSA8IDFlLTE1KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBNYXRoLmxvZzEwKG0gKyBsb2dGb3JtdWxhLl9pbnRlcm5hbF9jb29yZE9mZnNldCkgKyBsb2dGb3JtdWxhLl9pbnRlcm5hbF9sb2dpY2FsT2Zmc2V0O1xuICAgIHJldHVybiAoKHByaWNlIDwgMCkgPyAtcmVzIDogcmVzKTtcbn1cbmZ1bmN0aW9uIGZyb21Mb2cobG9naWNhbCwgbG9nRm9ybXVsYSkge1xuICAgIGNvbnN0IG0gPSBNYXRoLmFicyhsb2dpY2FsKTtcbiAgICBpZiAobSA8IDFlLTE1KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBNYXRoLnBvdygxMCwgbSAtIGxvZ0Zvcm11bGEuX2ludGVybmFsX2xvZ2ljYWxPZmZzZXQpIC0gbG9nRm9ybXVsYS5faW50ZXJuYWxfY29vcmRPZmZzZXQ7XG4gICAgcmV0dXJuIChsb2dpY2FsIDwgMCkgPyAtcmVzIDogcmVzO1xufVxuZnVuY3Rpb24gY29udmVydFByaWNlUmFuZ2VUb0xvZyhwcmljZVJhbmdlLCBsb2dGb3JtdWxhKSB7XG4gICAgaWYgKHByaWNlUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG1pbiA9IHRvTG9nKHByaWNlUmFuZ2UuX2ludGVybmFsX21pblZhbHVlKCksIGxvZ0Zvcm11bGEpO1xuICAgIGNvbnN0IG1heCA9IHRvTG9nKHByaWNlUmFuZ2UuX2ludGVybmFsX21heFZhbHVlKCksIGxvZ0Zvcm11bGEpO1xuICAgIHJldHVybiBuZXcgUHJpY2VSYW5nZUltcGwobWluLCBtYXgpO1xufVxuZnVuY3Rpb24gY2FuQ29udmVydFByaWNlUmFuZ2VGcm9tTG9nKHByaWNlUmFuZ2UsIGxvZ0Zvcm11bGEpIHtcbiAgICBpZiAocHJpY2VSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG1pbiA9IGZyb21Mb2cocHJpY2VSYW5nZS5faW50ZXJuYWxfbWluVmFsdWUoKSwgbG9nRm9ybXVsYSk7XG4gICAgY29uc3QgbWF4ID0gZnJvbUxvZyhwcmljZVJhbmdlLl9pbnRlcm5hbF9tYXhWYWx1ZSgpLCBsb2dGb3JtdWxhKTtcbiAgICByZXR1cm4gaXNGaW5pdGUobWluKSAmJiBpc0Zpbml0ZShtYXgpO1xufVxuZnVuY3Rpb24gY29udmVydFByaWNlUmFuZ2VGcm9tTG9nKHByaWNlUmFuZ2UsIGxvZ0Zvcm11bGEpIHtcbiAgICBpZiAocHJpY2VSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWluID0gZnJvbUxvZyhwcmljZVJhbmdlLl9pbnRlcm5hbF9taW5WYWx1ZSgpLCBsb2dGb3JtdWxhKTtcbiAgICBjb25zdCBtYXggPSBmcm9tTG9nKHByaWNlUmFuZ2UuX2ludGVybmFsX21heFZhbHVlKCksIGxvZ0Zvcm11bGEpO1xuICAgIHJldHVybiBuZXcgUHJpY2VSYW5nZUltcGwobWluLCBtYXgpO1xufVxuZnVuY3Rpb24gbG9nRm9ybXVsYUZvclByaWNlUmFuZ2UocmFuZ2UpIHtcbiAgICBpZiAocmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRlZkxvZ0Zvcm11bGE7XG4gICAgfVxuICAgIGNvbnN0IGRpZmYgPSBNYXRoLmFicyhyYW5nZS5faW50ZXJuYWxfbWF4VmFsdWUoKSAtIHJhbmdlLl9pbnRlcm5hbF9taW5WYWx1ZSgpKTtcbiAgICBpZiAoZGlmZiA+PSAxIHx8IGRpZmYgPCAxZS0xNSkge1xuICAgICAgICByZXR1cm4gZGVmTG9nRm9ybXVsYTtcbiAgICB9XG4gICAgY29uc3QgZGlnaXRzID0gTWF0aC5jZWlsKE1hdGguYWJzKE1hdGgubG9nMTAoZGlmZikpKTtcbiAgICBjb25zdCBsb2dpY2FsT2Zmc2V0ID0gZGVmTG9nRm9ybXVsYS5faW50ZXJuYWxfbG9naWNhbE9mZnNldCArIGRpZ2l0cztcbiAgICBjb25zdCBjb29yZE9mZnNldCA9IDEgLyBNYXRoLnBvdygxMCwgbG9naWNhbE9mZnNldCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2ludGVybmFsX2xvZ2ljYWxPZmZzZXQ6IGxvZ2ljYWxPZmZzZXQsXG4gICAgICAgIF9pbnRlcm5hbF9jb29yZE9mZnNldDogY29vcmRPZmZzZXQsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGxvZ0Zvcm11bGFzQXJlU2FtZShmMSwgZjIpIHtcbiAgICByZXR1cm4gZjEuX2ludGVybmFsX2xvZ2ljYWxPZmZzZXQgPT09IGYyLl9pbnRlcm5hbF9sb2dpY2FsT2Zmc2V0ICYmIGYxLl9pbnRlcm5hbF9jb29yZE9mZnNldCA9PT0gZjIuX2ludGVybmFsX2Nvb3JkT2Zmc2V0O1xufVxuXG5jbGFzcyBQcmljZVRpY2tTcGFuQ2FsY3VsYXRvciB7XG4gICAgY29uc3RydWN0b3IoYmFzZSwgaW50ZWdyYWxEaXZpZGVycykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlID0gYmFzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW50ZWdyYWxEaXZpZGVycyA9IGludGVncmFsRGl2aWRlcnM7XG4gICAgICAgIGlmIChpc0Jhc2VEZWNpbWFsKHRoaXMuX3ByaXZhdGVfX2Jhc2UpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19mcmFjdGlvbmFsRGl2aWRlcnMgPSBbMiwgMi41LCAyXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZyYWN0aW9uYWxEaXZpZGVycyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgYmFzZVJlc3QgPSB0aGlzLl9wcml2YXRlX19iYXNlOyBiYXNlUmVzdCAhPT0gMTspIHtcbiAgICAgICAgICAgICAgICBpZiAoKGJhc2VSZXN0ICUgMikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZnJhY3Rpb25hbERpdmlkZXJzLnB1c2goMik7XG4gICAgICAgICAgICAgICAgICAgIGJhc2VSZXN0IC89IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChiYXNlUmVzdCAlIDUpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZyYWN0aW9uYWxEaXZpZGVycy5wdXNoKDIsIDIuNSk7XG4gICAgICAgICAgICAgICAgICAgIGJhc2VSZXN0IC89IDU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgYmFzZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZnJhY3Rpb25hbERpdmlkZXJzLmxlbmd0aCA+IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NvbWV0aGluZyB3cm9uZyB3aXRoIGJhc2UnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX3RpY2tTcGFuKGhpZ2gsIGxvdywgbWF4VGlja1NwYW4pIHtcbiAgICAgICAgY29uc3QgbWluTW92ZW1lbnQgPSAodGhpcy5fcHJpdmF0ZV9fYmFzZSA9PT0gMCkgPyAoMCkgOiAoMSAvIHRoaXMuX3ByaXZhdGVfX2Jhc2UpO1xuICAgICAgICBsZXQgcmVzdWx0VGlja1NwYW4gPSBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgTWF0aC5jZWlsKE1hdGgubG9nMTAoaGlnaCAtIGxvdykpKSk7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGxldCBjID0gdGhpcy5fcHJpdmF0ZV9faW50ZWdyYWxEaXZpZGVyc1swXTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgLy8gdGhlIHNlY29uZCBwYXJ0IGlzIGFjdHVhbCBmb3Igc21hbGwgd2l0aCB2ZXJ5IHNtYWxsIHZhbHVlcyBsaWtlIDFlLTEwXG4gICAgICAgICAgICAvLyBncmVhdGVyT3JFcXVhbCBmYWlscyBmb3Igc3VjaCB2YWx1ZXNcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdFRpY2tTcGFuTGFyZ2VyTWluTW92ZW1lbnQgPSBncmVhdGVyT3JFcXVhbChyZXN1bHRUaWNrU3BhbiwgbWluTW92ZW1lbnQsIDFlLTE0IC8qIENvbnN0YW50cy5UaWNrU3BhbkVwc2lsb24gKi8pICYmIHJlc3VsdFRpY2tTcGFuID4gKG1pbk1vdmVtZW50ICsgMWUtMTQgLyogQ29uc3RhbnRzLlRpY2tTcGFuRXBzaWxvbiAqLyk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRUaWNrU3Bhbkxhcmdlck1heFRpY2tTcGFuID0gZ3JlYXRlck9yRXF1YWwocmVzdWx0VGlja1NwYW4sIG1heFRpY2tTcGFuICogYywgMWUtMTQgLyogQ29uc3RhbnRzLlRpY2tTcGFuRXBzaWxvbiAqLyk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRUaWNrU3BhbkxhcmdlcjEgPSBncmVhdGVyT3JFcXVhbChyZXN1bHRUaWNrU3BhbiwgMSwgMWUtMTQgLyogQ29uc3RhbnRzLlRpY2tTcGFuRXBzaWxvbiAqLyk7XG4gICAgICAgICAgICBjb25zdCBoYXZlVG9Db250aW51ZSA9IHJlc3VsdFRpY2tTcGFuTGFyZ2VyTWluTW92ZW1lbnQgJiYgcmVzdWx0VGlja1NwYW5MYXJnZXJNYXhUaWNrU3BhbiAmJiByZXN1bHRUaWNrU3BhbkxhcmdlcjE7XG4gICAgICAgICAgICBpZiAoIWhhdmVUb0NvbnRpbnVlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRUaWNrU3BhbiAvPSBjO1xuICAgICAgICAgICAgYyA9IHRoaXMuX3ByaXZhdGVfX2ludGVncmFsRGl2aWRlcnNbKytpbmRleCAlIHRoaXMuX3ByaXZhdGVfX2ludGVncmFsRGl2aWRlcnMubGVuZ3RoXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0VGlja1NwYW4gPD0gKG1pbk1vdmVtZW50ICsgMWUtMTQgLyogQ29uc3RhbnRzLlRpY2tTcGFuRXBzaWxvbiAqLykpIHtcbiAgICAgICAgICAgIHJlc3VsdFRpY2tTcGFuID0gbWluTW92ZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0VGlja1NwYW4gPSBNYXRoLm1heCgxLCByZXN1bHRUaWNrU3Bhbik7XG4gICAgICAgIGlmICgodGhpcy5fcHJpdmF0ZV9fZnJhY3Rpb25hbERpdmlkZXJzLmxlbmd0aCA+IDApICYmIGVxdWFsKHJlc3VsdFRpY2tTcGFuLCAxLCAxZS0xNCAvKiBDb25zdGFudHMuVGlja1NwYW5FcHNpbG9uICovKSkge1xuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgICAgYyA9IHRoaXMuX3ByaXZhdGVfX2ZyYWN0aW9uYWxEaXZpZGVyc1swXTtcbiAgICAgICAgICAgIHdoaWxlIChncmVhdGVyT3JFcXVhbChyZXN1bHRUaWNrU3BhbiwgbWF4VGlja1NwYW4gKiBjLCAxZS0xNCAvKiBDb25zdGFudHMuVGlja1NwYW5FcHNpbG9uICovKSAmJiByZXN1bHRUaWNrU3BhbiA+IChtaW5Nb3ZlbWVudCArIDFlLTE0IC8qIENvbnN0YW50cy5UaWNrU3BhbkVwc2lsb24gKi8pKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0VGlja1NwYW4gLz0gYztcbiAgICAgICAgICAgICAgICBjID0gdGhpcy5fcHJpdmF0ZV9fZnJhY3Rpb25hbERpdmlkZXJzWysraW5kZXggJSB0aGlzLl9wcml2YXRlX19mcmFjdGlvbmFsRGl2aWRlcnMubGVuZ3RoXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0VGlja1NwYW47XG4gICAgfVxufVxuXG5jb25zdCBUSUNLX0RFTlNJVFkgPSAyLjU7XG5jbGFzcyBQcmljZVRpY2tNYXJrQnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IocHJpY2VTY2FsZSwgYmFzZSwgY29vcmRpbmF0ZVRvTG9naWNhbEZ1bmMsIGxvZ2ljYWxUb0Nvb3JkaW5hdGVGdW5jKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzID0gW107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUgPSBwcmljZVNjYWxlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlID0gYmFzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29vcmRpbmF0ZVRvTG9naWNhbEZ1bmMgPSBjb29yZGluYXRlVG9Mb2dpY2FsRnVuYztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9naWNhbFRvQ29vcmRpbmF0ZUZ1bmMgPSBsb2dpY2FsVG9Db29yZGluYXRlRnVuYztcbiAgICB9XG4gICAgX2ludGVybmFsX3RpY2tTcGFuKGhpZ2gsIGxvdykge1xuICAgICAgICBpZiAoaGlnaCA8IGxvdykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoaWdoIDwgbG93Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGVIZWlnaHQgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9oZWlnaHQoKTtcbiAgICAgICAgY29uc3QgbWFya0hlaWdodCA9IHRoaXMuX3ByaXZhdGVfX3RpY2tNYXJrSGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IG1heFRpY2tTcGFuID0gKGhpZ2ggLSBsb3cpICogbWFya0hlaWdodCAvIHNjYWxlSGVpZ2h0O1xuICAgICAgICBjb25zdCBzcGFuQ2FsY3VsYXRvcjEgPSBuZXcgUHJpY2VUaWNrU3BhbkNhbGN1bGF0b3IodGhpcy5fcHJpdmF0ZV9fYmFzZSwgWzIsIDIuNSwgMl0pO1xuICAgICAgICBjb25zdCBzcGFuQ2FsY3VsYXRvcjIgPSBuZXcgUHJpY2VUaWNrU3BhbkNhbGN1bGF0b3IodGhpcy5fcHJpdmF0ZV9fYmFzZSwgWzIsIDIsIDIuNV0pO1xuICAgICAgICBjb25zdCBzcGFuQ2FsY3VsYXRvcjMgPSBuZXcgUHJpY2VUaWNrU3BhbkNhbGN1bGF0b3IodGhpcy5fcHJpdmF0ZV9fYmFzZSwgWzIuNSwgMiwgMl0pO1xuICAgICAgICBjb25zdCBzcGFucyA9IFtdO1xuICAgICAgICBzcGFucy5wdXNoKHNwYW5DYWxjdWxhdG9yMS5faW50ZXJuYWxfdGlja1NwYW4oaGlnaCwgbG93LCBtYXhUaWNrU3BhbiksIHNwYW5DYWxjdWxhdG9yMi5faW50ZXJuYWxfdGlja1NwYW4oaGlnaCwgbG93LCBtYXhUaWNrU3BhbiksIHNwYW5DYWxjdWxhdG9yMy5faW50ZXJuYWxfdGlja1NwYW4oaGlnaCwgbG93LCBtYXhUaWNrU3BhbikpO1xuICAgICAgICByZXR1cm4gbWluKHNwYW5zKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlYnVpbGRUaWNrTWFya3MoKSB7XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlO1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gcHJpY2VTY2FsZS5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya3MgPSBbXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsZUhlaWdodCA9IHByaWNlU2NhbGUuX2ludGVybmFsX2hlaWdodCgpO1xuICAgICAgICBjb25zdCBib3R0b20gPSB0aGlzLl9wcml2YXRlX19jb29yZGluYXRlVG9Mb2dpY2FsRnVuYyhzY2FsZUhlaWdodCAtIDEsIGZpcnN0VmFsdWUpO1xuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLl9wcml2YXRlX19jb29yZGluYXRlVG9Mb2dpY2FsRnVuYygwLCBmaXJzdFZhbHVlKTtcbiAgICAgICAgY29uc3QgZXh0cmFUb3BCb3R0b21NYXJnaW4gPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCkuZW50aXJlVGV4dE9ubHkgPyB0aGlzLl9wcml2YXRlX19mb250SGVpZ2h0KCkgLyAyIDogMDtcbiAgICAgICAgY29uc3QgbWluQ29vcmQgPSBleHRyYVRvcEJvdHRvbU1hcmdpbjtcbiAgICAgICAgY29uc3QgbWF4Q29vcmQgPSBzY2FsZUhlaWdodCAtIDEgLSBleHRyYVRvcEJvdHRvbU1hcmdpbjtcbiAgICAgICAgY29uc3QgaGlnaCA9IE1hdGgubWF4KGJvdHRvbSwgdG9wKTtcbiAgICAgICAgY29uc3QgbG93ID0gTWF0aC5taW4oYm90dG9tLCB0b3ApO1xuICAgICAgICBpZiAoaGlnaCA9PT0gbG93KSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrcyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzcGFuID0gdGhpcy5faW50ZXJuYWxfdGlja1NwYW4oaGlnaCwgbG93KTtcbiAgICAgICAgbGV0IG1vZCA9IGhpZ2ggJSBzcGFuO1xuICAgICAgICBtb2QgKz0gbW9kIDwgMCA/IHNwYW4gOiAwO1xuICAgICAgICBjb25zdCBzaWduID0gKGhpZ2ggPj0gbG93KSA/IDEgOiAtMTtcbiAgICAgICAgbGV0IHByZXZDb29yZCA9IG51bGw7XG4gICAgICAgIGxldCB0YXJnZXRJbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IGxvZ2ljYWwgPSBoaWdoIC0gbW9kOyBsb2dpY2FsID4gbG93OyBsb2dpY2FsIC09IHNwYW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5fcHJpdmF0ZV9fbG9naWNhbFRvQ29vcmRpbmF0ZUZ1bmMobG9naWNhbCwgZmlyc3RWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBwbGFjZSBmb3IgaXRcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgcmVxdWlyZWQgZm9yIGxvZyBzY2FsZVxuICAgICAgICAgICAgaWYgKHByZXZDb29yZCAhPT0gbnVsbCAmJiBNYXRoLmFicyhjb29yZCAtIHByZXZDb29yZCkgPCB0aGlzLl9wcml2YXRlX190aWNrTWFya0hlaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBhIHRpY2sgbWFyayBpcyBwYXJ0aWFsbHkgdmlzaWJsZSBhbmQgc2tpcCBpdCBpZiBlbnRpcmVUZXh0T25seSBpcyB0cnVlXG4gICAgICAgICAgICBpZiAoY29vcmQgPCBtaW5Db29yZCB8fCBjb29yZCA+IG1heENvb3JkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFyZ2V0SW5kZXggPCB0aGlzLl9wcml2YXRlX19tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrc1t0YXJnZXRJbmRleF0uX2ludGVybmFsX2Nvb3JkID0gY29vcmQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya3NbdGFyZ2V0SW5kZXhdLl9pbnRlcm5hbF9sYWJlbCA9IHByaWNlU2NhbGUuX2ludGVybmFsX2Zvcm1hdExvZ2ljYWwobG9naWNhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX2Nvb3JkOiBjb29yZCxcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX2xhYmVsOiBwcmljZVNjYWxlLl9pbnRlcm5hbF9mb3JtYXRMb2dpY2FsKGxvZ2ljYWwpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICAgICAgICAgIHByZXZDb29yZCA9IGNvb3JkO1xuICAgICAgICAgICAgaWYgKHByaWNlU2NhbGUuX2ludGVybmFsX2lzTG9nKCkpIHtcbiAgICAgICAgICAgICAgICAvLyByZWNhbGMgc3BhblxuICAgICAgICAgICAgICAgIHNwYW4gPSB0aGlzLl9pbnRlcm5hbF90aWNrU3Bhbihsb2dpY2FsICogc2lnbiwgbG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrcy5sZW5ndGggPSB0YXJnZXRJbmRleDtcbiAgICB9XG4gICAgX2ludGVybmFsX21hcmtzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbWFya3M7XG4gICAgfVxuICAgIF9wcml2YXRlX19mb250SGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZS5faW50ZXJuYWxfZm9udFNpemUoKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3RpY2tNYXJrSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuX3ByaXZhdGVfX2ZvbnRIZWlnaHQoKSAqIFRJQ0tfREVOU0lUWSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzb3J0U291cmNlcyhzb3VyY2VzKSB7XG4gICAgcmV0dXJuIHNvdXJjZXMuc2xpY2UoKS5zb3J0KChzMSwgczIpID0+IHtcbiAgICAgICAgcmV0dXJuIChlbnN1cmVOb3ROdWxsKHMxLl9pbnRlcm5hbF96b3JkZXIoKSkgLSBlbnN1cmVOb3ROdWxsKHMyLl9pbnRlcm5hbF96b3JkZXIoKSkpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHByaWNlIHNjYWxlIG1vZGUuXG4gKi9cbnZhciBQcmljZVNjYWxlTW9kZTtcbihmdW5jdGlvbiAoUHJpY2VTY2FsZU1vZGUpIHtcbiAgICAvKipcbiAgICAgKiBQcmljZSBzY2FsZSBzaG93cyBwcmljZXMuIFByaWNlIHJhbmdlIGNoYW5nZXMgbGluZWFybHkuXG4gICAgICovXG4gICAgUHJpY2VTY2FsZU1vZGVbUHJpY2VTY2FsZU1vZGVbXCJOb3JtYWxcIl0gPSAwXSA9IFwiTm9ybWFsXCI7XG4gICAgLyoqXG4gICAgICogUHJpY2Ugc2NhbGUgc2hvd3MgcHJpY2VzLiBQcmljZSByYW5nZSBjaGFuZ2VzIGxvZ2FyaXRobWljYWxseS5cbiAgICAgKi9cbiAgICBQcmljZVNjYWxlTW9kZVtQcmljZVNjYWxlTW9kZVtcIkxvZ2FyaXRobWljXCJdID0gMV0gPSBcIkxvZ2FyaXRobWljXCI7XG4gICAgLyoqXG4gICAgICogUHJpY2Ugc2NhbGUgc2hvd3MgcGVyY2VudGFnZSB2YWx1ZXMgYWNjb3JkaW5nIHRoZSBmaXJzdCB2aXNpYmxlIHZhbHVlIG9mIHRoZSBwcmljZSBzY2FsZS5cbiAgICAgKiBUaGUgZmlyc3QgdmlzaWJsZSB2YWx1ZSBpcyAwJSBpbiB0aGlzIG1vZGUuXG4gICAgICovXG4gICAgUHJpY2VTY2FsZU1vZGVbUHJpY2VTY2FsZU1vZGVbXCJQZXJjZW50YWdlXCJdID0gMl0gPSBcIlBlcmNlbnRhZ2VcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgc2FtZSBhcyBwZXJjZW50YWdlIG1vZGUsIGJ1dCB0aGUgZmlyc3QgdmFsdWUgaXMgbW92ZWQgdG8gMTAwLlxuICAgICAqL1xuICAgIFByaWNlU2NhbGVNb2RlW1ByaWNlU2NhbGVNb2RlW1wiSW5kZXhlZFRvMTAwXCJdID0gM10gPSBcIkluZGV4ZWRUbzEwMFwiO1xufSkoUHJpY2VTY2FsZU1vZGUgfHwgKFByaWNlU2NhbGVNb2RlID0ge30pKTtcbmNvbnN0IHBlcmNlbnRhZ2VGb3JtYXR0ZXIgPSBuZXcgUGVyY2VudGFnZUZvcm1hdHRlcigpO1xuY29uc3QgZGVmYXVsdFByaWNlRm9ybWF0dGVyID0gbmV3IFByaWNlRm9ybWF0dGVyKDEwMCwgMSk7XG5jbGFzcyBQcmljZVNjYWxlIHtcbiAgICBjb25zdHJ1Y3RvcihpZCwgb3B0aW9ucywgbGF5b3V0T3B0aW9ucywgbG9jYWxpemF0aW9uT3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnRlcm5hbEhlaWdodENhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2VTbmFwc2hvdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkRm9yUmFuZ2UgPSB7IF9pbnRlcm5hbF9pc1ZhbGlkOiBmYWxzZSwgX2ludGVybmFsX3Zpc2libGVCYXJzOiBudWxsIH07XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmdpbkFib3ZlID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFyZ2luQmVsb3cgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vbk1hcmtzQ2hhbmdlZCA9IG5ldyBEZWxlZ2F0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlQ2hhbmdlZCA9IG5ldyBEZWxlZ2F0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhU291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYWNoZWRPcmRlcmVkU291cmNlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzQ2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zY2FsZVN0YXJ0UG9pbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zY3JvbGxTdGFydFBvaW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0dGVyID0gZGVmYXVsdFByaWNlRm9ybWF0dGVyO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb2dGb3JtdWxhID0gbG9nRm9ybXVsYUZvclByaWNlUmFuZ2UobnVsbCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2lkID0gaWQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sYXlvdXRPcHRpb25zID0gbGF5b3V0T3B0aW9ucztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9jYWxpemF0aW9uT3B0aW9ucyA9IGxvY2FsaXphdGlvbk9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtCdWlsZGVyID0gbmV3IFByaWNlVGlja01hcmtCdWlsZGVyKHRoaXMsIDEwMCwgdGhpcy5fcHJpdmF0ZV9fY29vcmRpbmF0ZVRvTG9naWNhbC5iaW5kKHRoaXMpLCB0aGlzLl9wcml2YXRlX19sb2dpY2FsVG9Db29yZGluYXRlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19pZDtcbiAgICB9XG4gICAgX2ludGVybmFsX29wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXBwbHlPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2UodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUZvcm1hdHRlcigpO1xuICAgICAgICBpZiAob3B0aW9ucy5tb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3NldE1vZGUoeyBfaW50ZXJuYWxfbW9kZTogb3B0aW9ucy5tb2RlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNjYWxlTWFyZ2lucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSBlbnN1cmVEZWZpbmVkKG9wdGlvbnMuc2NhbGVNYXJnaW5zLnRvcCk7XG4gICAgICAgICAgICBjb25zdCBib3R0b20gPSBlbnN1cmVEZWZpbmVkKG9wdGlvbnMuc2NhbGVNYXJnaW5zLmJvdHRvbSk7XG4gICAgICAgICAgICBpZiAodG9wIDwgMCB8fCB0b3AgPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRvcCBtYXJnaW4gLSBleHBlY3QgdmFsdWUgYmV0d2VlbiAwIGFuZCAxLCBnaXZlbj0ke3RvcH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3R0b20gPCAwIHx8IGJvdHRvbSA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYm90dG9tIG1hcmdpbiAtIGV4cGVjdCB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIGdpdmVuPSR7Ym90dG9tfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvcCArIGJvdHRvbSA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbWFyZ2lucyAtIHN1bSBvZiBtYXJnaW5zIG11c3QgYmUgbGVzcyB0aGFuIDEsIGdpdmVuPSR7dG9wICsgYm90dG9tfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZUludGVybmFsSGVpZ2h0Q2FjaGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzQ2FjaGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9pc0F1dG9TY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuYXV0b1NjYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaXNMb2coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zLm1vZGUgPT09IDEgLyogUHJpY2VTY2FsZU1vZGUuTG9nYXJpdGhtaWMgKi87XG4gICAgfVxuICAgIF9pbnRlcm5hbF9pc1BlcmNlbnRhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zLm1vZGUgPT09IDIgLyogUHJpY2VTY2FsZU1vZGUuUGVyY2VudGFnZSAqLztcbiAgICB9XG4gICAgX2ludGVybmFsX2lzSW5kZXhlZFRvMTAwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5tb2RlID09PSAzIC8qIFByaWNlU2NhbGVNb2RlLkluZGV4ZWRUbzEwMCAqLztcbiAgICB9XG4gICAgX2ludGVybmFsX21vZGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfYXV0b1NjYWxlOiB0aGlzLl9wcml2YXRlX19vcHRpb25zLmF1dG9TY2FsZSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9pc0ludmVydGVkOiB0aGlzLl9wcml2YXRlX19vcHRpb25zLmludmVydFNjYWxlLFxuICAgICAgICAgICAgX2ludGVybmFsX21vZGU6IHRoaXMuX3ByaXZhdGVfX29wdGlvbnMubW9kZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICBfaW50ZXJuYWxfc2V0TW9kZShuZXdNb2RlKSB7XG4gICAgICAgIGNvbnN0IG9sZE1vZGUgPSB0aGlzLl9pbnRlcm5hbF9tb2RlKCk7XG4gICAgICAgIGxldCBwcmljZVJhbmdlID0gbnVsbDtcbiAgICAgICAgaWYgKG5ld01vZGUuX2ludGVybmFsX2F1dG9TY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zLmF1dG9TY2FsZSA9IG5ld01vZGUuX2ludGVybmFsX2F1dG9TY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3TW9kZS5faW50ZXJuYWxfbW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zLm1vZGUgPSBuZXdNb2RlLl9pbnRlcm5hbF9tb2RlO1xuICAgICAgICAgICAgaWYgKG5ld01vZGUuX2ludGVybmFsX21vZGUgPT09IDIgLyogUHJpY2VTY2FsZU1vZGUuUGVyY2VudGFnZSAqLyB8fCBuZXdNb2RlLl9pbnRlcm5hbF9tb2RlID09PSAzIC8qIFByaWNlU2NhbGVNb2RlLkluZGV4ZWRUbzEwMCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuYXV0b1NjYWxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRPRE86IFJlbW92ZSBhZnRlciBtYWtpbmcgcmVidWlsZFRpY2tNYXJrcyBsYXp5XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZEZvclJhbmdlLl9pbnRlcm5hbF9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVmaW5lIHdoaWNoIHNjYWxlIGNvbnZlcnRlZCBmcm9tXG4gICAgICAgIGlmIChvbGRNb2RlLl9pbnRlcm5hbF9tb2RlID09PSAxIC8qIFByaWNlU2NhbGVNb2RlLkxvZ2FyaXRobWljICovICYmIG5ld01vZGUuX2ludGVybmFsX21vZGUgIT09IG9sZE1vZGUuX2ludGVybmFsX21vZGUpIHtcbiAgICAgICAgICAgIGlmIChjYW5Db252ZXJ0UHJpY2VSYW5nZUZyb21Mb2codGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZSwgdGhpcy5fcHJpdmF0ZV9fbG9nRm9ybXVsYSkpIHtcbiAgICAgICAgICAgICAgICBwcmljZVJhbmdlID0gY29udmVydFByaWNlUmFuZ2VGcm9tTG9nKHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2UsIHRoaXMuX3ByaXZhdGVfX2xvZ0Zvcm11bGEpO1xuICAgICAgICAgICAgICAgIGlmIChwcmljZVJhbmdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3NldFByaWNlUmFuZ2UocHJpY2VSYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5hdXRvU2NhbGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGRlZmluZSB3aGljaCBzY2FsZSBjb252ZXJ0ZWQgdG9cbiAgICAgICAgaWYgKG5ld01vZGUuX2ludGVybmFsX21vZGUgPT09IDEgLyogUHJpY2VTY2FsZU1vZGUuTG9nYXJpdGhtaWMgKi8gJiYgbmV3TW9kZS5faW50ZXJuYWxfbW9kZSAhPT0gb2xkTW9kZS5faW50ZXJuYWxfbW9kZSkge1xuICAgICAgICAgICAgcHJpY2VSYW5nZSA9IGNvbnZlcnRQcmljZVJhbmdlVG9Mb2codGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZSwgdGhpcy5fcHJpdmF0ZV9fbG9nRm9ybXVsYSk7XG4gICAgICAgICAgICBpZiAocHJpY2VSYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3NldFByaWNlUmFuZ2UocHJpY2VSYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZUNoYW5nZWQgPSBvbGRNb2RlLl9pbnRlcm5hbF9tb2RlICE9PSB0aGlzLl9wcml2YXRlX19vcHRpb25zLm1vZGU7XG4gICAgICAgIGlmIChtb2RlQ2hhbmdlZCAmJiAob2xkTW9kZS5faW50ZXJuYWxfbW9kZSA9PT0gMiAvKiBQcmljZVNjYWxlTW9kZS5QZXJjZW50YWdlICovIHx8IHRoaXMuX2ludGVybmFsX2lzUGVyY2VudGFnZSgpKSkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlRm9ybWF0dGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVDaGFuZ2VkICYmIChvbGRNb2RlLl9pbnRlcm5hbF9tb2RlID09PSAzIC8qIFByaWNlU2NhbGVNb2RlLkluZGV4ZWRUbzEwMCAqLyB8fCB0aGlzLl9pbnRlcm5hbF9pc0luZGV4ZWRUbzEwMCgpKSkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlRm9ybWF0dGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld01vZGUuX2ludGVybmFsX2lzSW52ZXJ0ZWQgIT09IHVuZGVmaW5lZCAmJiBvbGRNb2RlLl9pbnRlcm5hbF9pc0ludmVydGVkICE9PSBuZXdNb2RlLl9pbnRlcm5hbF9pc0ludmVydGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zLmludmVydFNjYWxlID0gbmV3TW9kZS5faW50ZXJuYWxfaXNJbnZlcnRlZDtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX29uSXNJbnZlcnRlZENoYW5nZWQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlQ2hhbmdlZC5faW50ZXJuYWxfZmlyZShvbGRNb2RlLCB0aGlzLl9pbnRlcm5hbF9tb2RlKCkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW9kZUNoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19tb2RlQ2hhbmdlZDtcbiAgICB9XG4gICAgX2ludGVybmFsX2ZvbnRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbGF5b3V0T3B0aW9ucy5mb250U2l6ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2hlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2hlaWdodDtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldEhlaWdodCh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faGVpZ2h0ID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2hlaWdodCA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlSW50ZXJuYWxIZWlnaHRDYWNoZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrc0NhY2hlID0gbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX2ludGVybmFsSGVpZ2h0KCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW50ZXJuYWxIZWlnaHRDYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2ludGVybmFsSGVpZ2h0Q2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5faW50ZXJuYWxfaGVpZ2h0KCkgLSB0aGlzLl9wcml2YXRlX190b3BNYXJnaW5QeCgpIC0gdGhpcy5fcHJpdmF0ZV9fYm90dG9tTWFyZ2luUHgoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW50ZXJuYWxIZWlnaHRDYWNoZSA9IHJlcztcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlUmFuZ2UoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21ha2VTdXJlSXRJc1ZhbGlkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wcmljZVJhbmdlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UHJpY2VSYW5nZShuZXdQcmljZVJhbmdlLCBpc0ZvcmNlU2V0VmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb2xkUHJpY2VSYW5nZSA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2U7XG4gICAgICAgIGlmICghaXNGb3JjZVNldFZhbHVlICYmXG4gICAgICAgICAgICAhKG9sZFByaWNlUmFuZ2UgPT09IG51bGwgJiYgbmV3UHJpY2VSYW5nZSAhPT0gbnVsbCkgJiZcbiAgICAgICAgICAgIChvbGRQcmljZVJhbmdlID09PSBudWxsIHx8IG9sZFByaWNlUmFuZ2UuX2ludGVybmFsX2VxdWFscyhuZXdQcmljZVJhbmdlKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrc0NhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZSA9IG5ld1ByaWNlUmFuZ2U7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9pc0VtcHR5KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYWtlU3VyZUl0SXNWYWxpZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9faGVpZ2h0ID09PSAwIHx8ICF0aGlzLl9wcml2YXRlX19wcmljZVJhbmdlIHx8IHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2UuX2ludGVybmFsX2lzRW1wdHkoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2ludmVydGVkQ29vcmRpbmF0ZShjb29yZGluYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbF9pc0ludmVydGVkKCkgPyBjb29yZGluYXRlIDogdGhpcy5faW50ZXJuYWxfaGVpZ2h0KCkgLSAxIC0gY29vcmRpbmF0ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlVG9Db29yZGluYXRlKHByaWNlLCBiYXNlVmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzUGVyY2VudGFnZSgpKSB7XG4gICAgICAgICAgICBwcmljZSA9IHRvUGVyY2VudChwcmljZSwgYmFzZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9pbnRlcm5hbF9pc0luZGV4ZWRUbzEwMCgpKSB7XG4gICAgICAgICAgICBwcmljZSA9IHRvSW5kZXhlZFRvMTAwKHByaWNlLCBiYXNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19sb2dpY2FsVG9Db29yZGluYXRlKHByaWNlLCBiYXNlVmFsdWUpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcG9pbnRzQXJyYXlUb0Nvb3JkaW5hdGVzKHBvaW50cywgYmFzZVZhbHVlLCB2aXNpYmxlUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFrZVN1cmVJdElzVmFsaWQoKTtcbiAgICAgICAgY29uc3QgYmggPSB0aGlzLl9wcml2YXRlX19ib3R0b21NYXJnaW5QeCgpO1xuICAgICAgICBjb25zdCByYW5nZSA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfcHJpY2VSYW5nZSgpKTtcbiAgICAgICAgY29uc3QgbWluID0gcmFuZ2UuX2ludGVybmFsX21pblZhbHVlKCk7XG4gICAgICAgIGNvbnN0IG1heCA9IHJhbmdlLl9pbnRlcm5hbF9tYXhWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpaCA9ICh0aGlzLl9pbnRlcm5hbF9pbnRlcm5hbEhlaWdodCgpIC0gMSk7XG4gICAgICAgIGNvbnN0IGlzSW52ZXJ0ZWQgPSB0aGlzLl9pbnRlcm5hbF9pc0ludmVydGVkKCk7XG4gICAgICAgIGNvbnN0IGhtbSA9IGloIC8gKG1heCAtIG1pbik7XG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9ICh2aXNpYmxlUmFuZ2UgPT09IHVuZGVmaW5lZCkgPyAwIDogdmlzaWJsZVJhbmdlLmZyb207XG4gICAgICAgIGNvbnN0IHRvSW5kZXggPSAodmlzaWJsZVJhbmdlID09PSB1bmRlZmluZWQpID8gcG9pbnRzLmxlbmd0aCA6IHZpc2libGVSYW5nZS50bztcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtRm4gPSB0aGlzLl9wcml2YXRlX19nZXRDb29yZGluYXRlVHJhbnNmb3JtZXIoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGZyb21JbmRleDsgaSA8IHRvSW5kZXg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IHBvaW50Ll9pbnRlcm5hbF9wcmljZTtcbiAgICAgICAgICAgIGlmIChpc05hTihwcmljZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBsb2dpY2FsID0gcHJpY2U7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtRm4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2dpY2FsID0gdHJhbnNmb3JtRm4ocG9pbnQuX2ludGVybmFsX3ByaWNlLCBiYXNlVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW52Q29vcmRpbmF0ZSA9IGJoICsgaG1tICogKGxvZ2ljYWwgLSBtaW4pO1xuICAgICAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IGlzSW52ZXJ0ZWQgPyBpbnZDb29yZGluYXRlIDogdGhpcy5fcHJpdmF0ZV9faGVpZ2h0IC0gMSAtIGludkNvb3JkaW5hdGU7XG4gICAgICAgICAgICBwb2ludC5faW50ZXJuYWxfeSA9IGNvb3JkaW5hdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX2JhclByaWNlc1RvQ29vcmRpbmF0ZXMocHJpY2VzTGlzdCwgYmFzZVZhbHVlLCB2aXNpYmxlUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFrZVN1cmVJdElzVmFsaWQoKTtcbiAgICAgICAgY29uc3QgYmggPSB0aGlzLl9wcml2YXRlX19ib3R0b21NYXJnaW5QeCgpO1xuICAgICAgICBjb25zdCByYW5nZSA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfcHJpY2VSYW5nZSgpKTtcbiAgICAgICAgY29uc3QgbWluID0gcmFuZ2UuX2ludGVybmFsX21pblZhbHVlKCk7XG4gICAgICAgIGNvbnN0IG1heCA9IHJhbmdlLl9pbnRlcm5hbF9tYXhWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpaCA9ICh0aGlzLl9pbnRlcm5hbF9pbnRlcm5hbEhlaWdodCgpIC0gMSk7XG4gICAgICAgIGNvbnN0IGlzSW52ZXJ0ZWQgPSB0aGlzLl9pbnRlcm5hbF9pc0ludmVydGVkKCk7XG4gICAgICAgIGNvbnN0IGhtbSA9IGloIC8gKG1heCAtIG1pbik7XG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9ICh2aXNpYmxlUmFuZ2UgPT09IHVuZGVmaW5lZCkgPyAwIDogdmlzaWJsZVJhbmdlLmZyb207XG4gICAgICAgIGNvbnN0IHRvSW5kZXggPSAodmlzaWJsZVJhbmdlID09PSB1bmRlZmluZWQpID8gcHJpY2VzTGlzdC5sZW5ndGggOiB2aXNpYmxlUmFuZ2UudG87XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybUZuID0gdGhpcy5fcHJpdmF0ZV9fZ2V0Q29vcmRpbmF0ZVRyYW5zZm9ybWVyKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tSW5kZXg7IGkgPCB0b0luZGV4OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGJhciA9IHByaWNlc0xpc3RbaV07XG4gICAgICAgICAgICBsZXQgb3BlbkxvZ2ljYWwgPSBiYXIuX2ludGVybmFsX29wZW47XG4gICAgICAgICAgICBsZXQgaGlnaExvZ2ljYWwgPSBiYXIuX2ludGVybmFsX2hpZ2g7XG4gICAgICAgICAgICBsZXQgbG93TG9naWNhbCA9IGJhci5faW50ZXJuYWxfbG93O1xuICAgICAgICAgICAgbGV0IGNsb3NlTG9naWNhbCA9IGJhci5faW50ZXJuYWxfY2xvc2U7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtRm4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvcGVuTG9naWNhbCA9IHRyYW5zZm9ybUZuKGJhci5faW50ZXJuYWxfb3BlbiwgYmFzZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBoaWdoTG9naWNhbCA9IHRyYW5zZm9ybUZuKGJhci5faW50ZXJuYWxfaGlnaCwgYmFzZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBsb3dMb2dpY2FsID0gdHJhbnNmb3JtRm4oYmFyLl9pbnRlcm5hbF9sb3csIGJhc2VWYWx1ZSk7XG4gICAgICAgICAgICAgICAgY2xvc2VMb2dpY2FsID0gdHJhbnNmb3JtRm4oYmFyLl9pbnRlcm5hbF9jbG9zZSwgYmFzZVZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBpbnZDb29yZGluYXRlID0gYmggKyBobW0gKiAob3BlbkxvZ2ljYWwgLSBtaW4pO1xuICAgICAgICAgICAgbGV0IGNvb3JkaW5hdGUgPSBpc0ludmVydGVkID8gaW52Q29vcmRpbmF0ZSA6IHRoaXMuX3ByaXZhdGVfX2hlaWdodCAtIDEgLSBpbnZDb29yZGluYXRlO1xuICAgICAgICAgICAgYmFyLl9pbnRlcm5hbF9vcGVuWSA9IGNvb3JkaW5hdGU7XG4gICAgICAgICAgICBpbnZDb29yZGluYXRlID0gYmggKyBobW0gKiAoaGlnaExvZ2ljYWwgLSBtaW4pO1xuICAgICAgICAgICAgY29vcmRpbmF0ZSA9IGlzSW52ZXJ0ZWQgPyBpbnZDb29yZGluYXRlIDogdGhpcy5fcHJpdmF0ZV9faGVpZ2h0IC0gMSAtIGludkNvb3JkaW5hdGU7XG4gICAgICAgICAgICBiYXIuX2ludGVybmFsX2hpZ2hZID0gY29vcmRpbmF0ZTtcbiAgICAgICAgICAgIGludkNvb3JkaW5hdGUgPSBiaCArIGhtbSAqIChsb3dMb2dpY2FsIC0gbWluKTtcbiAgICAgICAgICAgIGNvb3JkaW5hdGUgPSBpc0ludmVydGVkID8gaW52Q29vcmRpbmF0ZSA6IHRoaXMuX3ByaXZhdGVfX2hlaWdodCAtIDEgLSBpbnZDb29yZGluYXRlO1xuICAgICAgICAgICAgYmFyLl9pbnRlcm5hbF9sb3dZID0gY29vcmRpbmF0ZTtcbiAgICAgICAgICAgIGludkNvb3JkaW5hdGUgPSBiaCArIGhtbSAqIChjbG9zZUxvZ2ljYWwgLSBtaW4pO1xuICAgICAgICAgICAgY29vcmRpbmF0ZSA9IGlzSW52ZXJ0ZWQgPyBpbnZDb29yZGluYXRlIDogdGhpcy5fcHJpdmF0ZV9faGVpZ2h0IC0gMSAtIGludkNvb3JkaW5hdGU7XG4gICAgICAgICAgICBiYXIuX2ludGVybmFsX2Nsb3NlWSA9IGNvb3JkaW5hdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX2Nvb3JkaW5hdGVUb1ByaWNlKGNvb3JkaW5hdGUsIGJhc2VWYWx1ZSkge1xuICAgICAgICBjb25zdCBsb2dpY2FsID0gdGhpcy5fcHJpdmF0ZV9fY29vcmRpbmF0ZVRvTG9naWNhbChjb29yZGluYXRlLCBiYXNlVmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJuYWxfbG9naWNhbFRvUHJpY2UobG9naWNhbCwgYmFzZVZhbHVlKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2xvZ2ljYWxUb1ByaWNlKGxvZ2ljYWwsIGJhc2VWYWx1ZSkge1xuICAgICAgICBsZXQgdmFsdWUgPSBsb2dpY2FsO1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNQZXJjZW50YWdlKCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZnJvbVBlcmNlbnQodmFsdWUsIGJhc2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5faW50ZXJuYWxfaXNJbmRleGVkVG8xMDAoKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBmcm9tSW5kZXhlZFRvMTAwKHZhbHVlLCBiYXNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RhdGFTb3VyY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9vcmRlcmVkU291cmNlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2NhY2hlZE9yZGVyZWRTb3VyY2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2FjaGVkT3JkZXJlZFNvdXJjZXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvdXJjZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wcml2YXRlX19kYXRhU291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZHMgPSB0aGlzLl9wcml2YXRlX19kYXRhU291cmNlc1tpXTtcbiAgICAgICAgICAgIGlmIChkcy5faW50ZXJuYWxfem9yZGVyKCkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkcy5faW50ZXJuYWxfc2V0Wm9yZGVyKGkgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZXMucHVzaChkcyk7XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlcyA9IHNvcnRTb3VyY2VzKHNvdXJjZXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYWNoZWRPcmRlcmVkU291cmNlcyA9IHNvdXJjZXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jYWNoZWRPcmRlcmVkU291cmNlcztcbiAgICB9XG4gICAgX2ludGVybmFsX2FkZERhdGFTb3VyY2Uoc291cmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhU291cmNlcy5pbmRleE9mKHNvdXJjZSkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF91cGRhdGVGb3JtYXR0ZXIoKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfaW52YWxpZGF0ZVNvdXJjZXNDYWNoZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVtb3ZlRGF0YVNvdXJjZShzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9wcml2YXRlX19kYXRhU291cmNlcy5pbmRleE9mKHNvdXJjZSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBhdHRhY2hlZCB0byBzY2FsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhU291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3NldE1vZGUoe1xuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9hdXRvU2NhbGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGlmIG5vIHNvdXJjZXMgb24gcHJpY2Ugc2NhbGUgbGV0J3MgY2xlYXIgcHJpY2UgcmFuZ2UgY2FjaGUgYXMgd2VsbCBhcyBlbmFibGluZyBhdXRvIHNjYWxlXG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRQcmljZVJhbmdlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUZvcm1hdHRlcigpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9pbnZhbGlkYXRlU291cmNlc0NhY2hlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9maXJzdFZhbHVlKCkge1xuICAgICAgICAvLyBUT0RPOiBjYWNoZSB0aGUgcmVzdWx0XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiB0aGlzLl9wcml2YXRlX19kYXRhU291cmNlcykge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IHNvdXJjZS5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKGZpcnN0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgZmlyc3RWYWx1ZS5faW50ZXJuYWxfdGltZVBvaW50IDwgcmVzdWx0Ll9pbnRlcm5hbF90aW1lUG9pbnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmaXJzdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyBudWxsIDogcmVzdWx0Ll9pbnRlcm5hbF92YWx1ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2lzSW52ZXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zLmludmVydFNjYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbWFya3MoKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWVJc051bGwgPSB0aGlzLl9pbnRlcm5hbF9maXJzdFZhbHVlKCkgPT09IG51bGw7XG4gICAgICAgIC8vIGRvIG5vdCByZWNhbGN1bGF0ZSBtYXJrcyBpZiBmaXJzdFZhbHVlSXNOdWxsIGlzIHRydWUgYmVjYXVzZSBpbiB0aGlzIGNhc2Ugd2UnbGwgYWx3YXlzIGdldCBlbXB0eSByZXN1bHRcbiAgICAgICAgLy8gdGhpcyBjb3VsZCBoYXBwZW4gaW4gY2FzZSB3aGVuIGEgc2VyaWVzIGhhZCBzb21lIGRhdGEgYW5kIHRoZW4geW91IHNldCBlbXB0eSBkYXRhIHRvIGl0IChpbiBhIHNpbXBsaWZpZWQgY2FzZSlcbiAgICAgICAgLy8gd2UgY291bGQgZGlzcGxheSBhbiBlbXB0eSBwcmljZSBzY2FsZSwgYnV0IHRoaXMgaXMgbm90IGdvb2QgZnJvbSBVWFxuICAgICAgICAvLyBzbyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBrZWVwIGFuIHByZXZpb3VzIG1hcmtzIHRvIGRpc3BsYXkgdGhlbSBvbiB0aGUgc2NhbGVcbiAgICAgICAgLy8gYXMgb25lIG9mIHBvc3NpYmxlIGV4YW1wbGVzIGZvciB0aGlzIHNpdHVhdGlvbiBjb3VsZCBiZSB0aGUgZm9sbG93aW5nOlxuICAgICAgICAvLyBsZXQncyBzYXkgeW91IGhhdmUgYSBzdHVkeS9pbmRpY2F0b3IgYXR0YWNoZWQgdG8gYSBwcmljZSBzY2FsZSBhbmQgdGhlbiB5b3UgZGVjaWRlIHRvIHN0b3AgaXQsIGkuZS4gcmVtb3ZlIGl0cyBkYXRhIGJlY2F1c2Ugb2YgaXRzIHZpc2liaWxpdHlcbiAgICAgICAgLy8gYSB1c2VyIHdpbGwgc2VlIHRoZSBwcmV2aW91cyBtYXJrcyBvbiB0aGUgc2NhbGUgdW50aWwgeW91IHR1cm4gb24geW91ciBzdHVkeSBiYWNrIG9yIHJlbW92ZSBpdCBmcm9tIHRoZSBjaGFydCBjb21wbGV0ZWx5XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19tYXJrc0NhY2hlICE9PSBudWxsICYmIChmaXJzdFZhbHVlSXNOdWxsIHx8IHRoaXMuX3ByaXZhdGVfX21hcmtzQ2FjaGUuX2ludGVybmFsX2ZpcnN0VmFsdWVJc051bGwgPT09IGZpcnN0VmFsdWVJc051bGwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbWFya3NDYWNoZS5faW50ZXJuYWxfbWFya3M7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya0J1aWxkZXIuX2ludGVybmFsX3JlYnVpbGRUaWNrTWFya3MoKTtcbiAgICAgICAgY29uc3QgbWFya3MgPSB0aGlzLl9wcml2YXRlX19tYXJrQnVpbGRlci5faW50ZXJuYWxfbWFya3MoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya3NDYWNoZSA9IHsgX2ludGVybmFsX21hcmtzOiBtYXJrcywgX2ludGVybmFsX2ZpcnN0VmFsdWVJc051bGw6IGZpcnN0VmFsdWVJc051bGwgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb25NYXJrc0NoYW5nZWQuX2ludGVybmFsX2ZpcmUoKTtcbiAgICAgICAgcmV0dXJuIG1hcmtzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfb25NYXJrc0NoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vbk1hcmtzQ2hhbmdlZDtcbiAgICB9XG4gICAgX2ludGVybmFsX3N0YXJ0U2NhbGUoeCkge1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNQZXJjZW50YWdlKCkgfHwgdGhpcy5faW50ZXJuYWxfaXNJbmRleGVkVG8xMDAoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zY2FsZVN0YXJ0UG9pbnQgIT09IG51bGwgfHwgdGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZVNuYXBzaG90ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGludmVydCB4XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NjYWxlU3RhcnRQb2ludCA9IHRoaXMuX3ByaXZhdGVfX2hlaWdodCAtIHg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2VTbmFwc2hvdCA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfcHJpY2VSYW5nZSgpKS5faW50ZXJuYWxfY2xvbmUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NjYWxlVG8oeCkge1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNQZXJjZW50YWdlKCkgfHwgdGhpcy5faW50ZXJuYWxfaXNJbmRleGVkVG8xMDAoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zY2FsZVN0YXJ0UG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRNb2RlKHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9hdXRvU2NhbGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gaW52ZXJ0IHhcbiAgICAgICAgeCA9IHRoaXMuX3ByaXZhdGVfX2hlaWdodCAtIHg7XG4gICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNjYWxlQ29lZmYgPSAodGhpcy5fcHJpdmF0ZV9fc2NhbGVTdGFydFBvaW50ICsgKHRoaXMuX3ByaXZhdGVfX2hlaWdodCAtIDEpICogMC4yKSAvICh4ICsgKHRoaXMuX3ByaXZhdGVfX2hlaWdodCAtIDEpICogMC4yKTtcbiAgICAgICAgY29uc3QgbmV3UHJpY2VSYW5nZSA9IGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZVNuYXBzaG90KS5faW50ZXJuYWxfY2xvbmUoKTtcbiAgICAgICAgc2NhbGVDb2VmZiA9IE1hdGgubWF4KHNjYWxlQ29lZmYsIDAuMSk7XG4gICAgICAgIG5ld1ByaWNlUmFuZ2UuX2ludGVybmFsX3NjYWxlQXJvdW5kQ2VudGVyKHNjYWxlQ29lZmYpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRQcmljZVJhbmdlKG5ld1ByaWNlUmFuZ2UpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZW5kU2NhbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9pc1BlcmNlbnRhZ2UoKSB8fCB0aGlzLl9pbnRlcm5hbF9pc0luZGV4ZWRUbzEwMCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2NhbGVTdGFydFBvaW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZVNuYXBzaG90ID0gbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX3N0YXJ0U2Nyb2xsKHgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzQXV0b1NjYWxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2Nyb2xsU3RhcnRQb2ludCAhPT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19wcmljZVJhbmdlU25hcHNob3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2Nyb2xsU3RhcnRQb2ludCA9IHg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2VTbmFwc2hvdCA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfcHJpY2VSYW5nZSgpKS5faW50ZXJuYWxfY2xvbmUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Njcm9sbFRvKHgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzQXV0b1NjYWxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2Nyb2xsU3RhcnRQb2ludCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByaWNlVW5pdHNQZXJQaXhlbCA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfcHJpY2VSYW5nZSgpKS5faW50ZXJuYWxfbGVuZ3RoKCkgLyAodGhpcy5faW50ZXJuYWxfaW50ZXJuYWxIZWlnaHQoKSAtIDEpO1xuICAgICAgICBsZXQgcGl4ZWxEZWx0YSA9IHggLSB0aGlzLl9wcml2YXRlX19zY3JvbGxTdGFydFBvaW50O1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNJbnZlcnRlZCgpKSB7XG4gICAgICAgICAgICBwaXhlbERlbHRhICo9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByaWNlRGVsdGEgPSBwaXhlbERlbHRhICogcHJpY2VVbml0c1BlclBpeGVsO1xuICAgICAgICBjb25zdCBuZXdQcmljZVJhbmdlID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19wcmljZVJhbmdlU25hcHNob3QpLl9pbnRlcm5hbF9jbG9uZSgpO1xuICAgICAgICBuZXdQcmljZVJhbmdlLl9pbnRlcm5hbF9zaGlmdChwcmljZURlbHRhKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfc2V0UHJpY2VSYW5nZShuZXdQcmljZVJhbmdlLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya3NDYWNoZSA9IG51bGw7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9lbmRTY3JvbGwoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9pc0F1dG9TY2FsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Njcm9sbFN0YXJ0UG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19zY3JvbGxTdGFydFBvaW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZVNuYXBzaG90ID0gbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX2Zvcm1hdHRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19mb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUZvcm1hdHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19mb3JtYXR0ZXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9mb3JtYXRQcmljZShwcmljZSwgZmlyc3RWYWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMubW9kZSkge1xuICAgICAgICAgICAgY2FzZSAyIC8qIFByaWNlU2NhbGVNb2RlLlBlcmNlbnRhZ2UgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdFBlcmNlbnRhZ2UodG9QZXJjZW50KHByaWNlLCBmaXJzdFZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlIDMgLyogUHJpY2VTY2FsZU1vZGUuSW5kZXhlZFRvMTAwICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbF9mb3JtYXR0ZXIoKS5mb3JtYXQodG9JbmRleGVkVG8xMDAocHJpY2UsIGZpcnN0VmFsdWUpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdFByaWNlKHByaWNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfZm9ybWF0TG9naWNhbChsb2dpY2FsKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5tb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDIgLyogUHJpY2VTY2FsZU1vZGUuUGVyY2VudGFnZSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZm9ybWF0UGVyY2VudGFnZShsb2dpY2FsKTtcbiAgICAgICAgICAgIGNhc2UgMyAvKiBQcmljZVNjYWxlTW9kZS5JbmRleGVkVG8xMDAgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX2Zvcm1hdHRlcigpLmZvcm1hdChsb2dpY2FsKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdFByaWNlKGxvZ2ljYWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9mb3JtYXRQcmljZUFic29sdXRlKHByaWNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19mb3JtYXRQcmljZShwcmljZSwgZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19mb3JtYXR0ZXJTb3VyY2UoKSkuX2ludGVybmFsX2Zvcm1hdHRlcigpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2Zvcm1hdFByaWNlUGVyY2VudGFnZShwcmljZSwgYmFzZVZhbHVlKSB7XG4gICAgICAgIHByaWNlID0gdG9QZXJjZW50KHByaWNlLCBiYXNlVmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZm9ybWF0UGVyY2VudGFnZShwcmljZSwgcGVyY2VudGFnZUZvcm1hdHRlcik7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zb3VyY2VzRm9yQXV0b1NjYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZWNhbGN1bGF0ZVByaWNlUmFuZ2UodmlzaWJsZUJhcnMpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWRGb3JSYW5nZSA9IHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF92aXNpYmxlQmFyczogdmlzaWJsZUJhcnMsXG4gICAgICAgICAgICBfaW50ZXJuYWxfaXNWYWxpZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGVBbGxWaWV3cygpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXMuZm9yRWFjaCgocykgPT4gcy5faW50ZXJuYWxfdXBkYXRlQWxsVmlld3MoKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGVGb3JtYXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzQ2FjaGUgPSBudWxsO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXJTb3VyY2UgPSB0aGlzLl9wcml2YXRlX19mb3JtYXR0ZXJTb3VyY2UoKTtcbiAgICAgICAgbGV0IGJhc2UgPSAxMDA7XG4gICAgICAgIGlmIChmb3JtYXR0ZXJTb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGJhc2UgPSBNYXRoLnJvdW5kKDEgLyBmb3JtYXR0ZXJTb3VyY2UuX2ludGVybmFsX21pbk1vdmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0dGVyID0gZGVmYXVsdFByaWNlRm9ybWF0dGVyO1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNQZXJjZW50YWdlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdHRlciA9IHBlcmNlbnRhZ2VGb3JtYXR0ZXI7XG4gICAgICAgICAgICBiYXNlID0gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2ludGVybmFsX2lzSW5kZXhlZFRvMTAwKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdHRlciA9IG5ldyBQcmljZUZvcm1hdHRlcigxMDAsIDEpO1xuICAgICAgICAgICAgYmFzZSA9IDEwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXR0ZXJTb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB1c2VyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0dGVyID0gZm9ybWF0dGVyU291cmNlLl9pbnRlcm5hbF9mb3JtYXR0ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrQnVpbGRlciA9IG5ldyBQcmljZVRpY2tNYXJrQnVpbGRlcih0aGlzLCBiYXNlLCB0aGlzLl9wcml2YXRlX19jb29yZGluYXRlVG9Mb2dpY2FsLmJpbmQodGhpcyksIHRoaXMuX3ByaXZhdGVfX2xvZ2ljYWxUb0Nvb3JkaW5hdGUuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtCdWlsZGVyLl9pbnRlcm5hbF9yZWJ1aWxkVGlja01hcmtzKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9pbnZhbGlkYXRlU291cmNlc0NhY2hlKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYWNoZWRPcmRlcmVkU291cmNlcyA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgSVByaWNlRGF0YVNvdXJjZX0gdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIFwiZm9ybWF0dGVyIHNvdXJjZVwiICh0YWtlIG1pbk1vdmUgZm9yIGZvcm1hdHRlcikuXG4gICAgICovXG4gICAgX3ByaXZhdGVfX2Zvcm1hdHRlclNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2VzWzBdIHx8IG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX190b3BNYXJnaW5QeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX2lzSW52ZXJ0ZWQoKVxuICAgICAgICAgICAgPyB0aGlzLl9wcml2YXRlX19vcHRpb25zLnNjYWxlTWFyZ2lucy5ib3R0b20gKiB0aGlzLl9pbnRlcm5hbF9oZWlnaHQoKSArIHRoaXMuX3ByaXZhdGVfX21hcmdpbkJlbG93XG4gICAgICAgICAgICA6IHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuc2NhbGVNYXJnaW5zLnRvcCAqIHRoaXMuX2ludGVybmFsX2hlaWdodCgpICsgdGhpcy5fcHJpdmF0ZV9fbWFyZ2luQWJvdmU7XG4gICAgfVxuICAgIF9wcml2YXRlX19ib3R0b21NYXJnaW5QeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX2lzSW52ZXJ0ZWQoKVxuICAgICAgICAgICAgPyB0aGlzLl9wcml2YXRlX19vcHRpb25zLnNjYWxlTWFyZ2lucy50b3AgKiB0aGlzLl9pbnRlcm5hbF9oZWlnaHQoKSArIHRoaXMuX3ByaXZhdGVfX21hcmdpbkFib3ZlXG4gICAgICAgICAgICA6IHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuc2NhbGVNYXJnaW5zLmJvdHRvbSAqIHRoaXMuX2ludGVybmFsX2hlaWdodCgpICsgdGhpcy5fcHJpdmF0ZV9fbWFyZ2luQmVsb3c7XG4gICAgfVxuICAgIF9wcml2YXRlX19tYWtlU3VyZUl0SXNWYWxpZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZEZvclJhbmdlLl9pbnRlcm5hbF9pc1ZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZEZvclJhbmdlLl9pbnRlcm5hbF9pc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlY2FsY3VsYXRlUHJpY2VSYW5nZUltcGwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9faW52YWxpZGF0ZUludGVybmFsSGVpZ2h0Q2FjaGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludGVybmFsSGVpZ2h0Q2FjaGUgPSBudWxsO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fbG9naWNhbFRvQ29vcmRpbmF0ZShsb2dpY2FsLCBiYXNlVmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFrZVN1cmVJdElzVmFsaWQoKTtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgbG9naWNhbCA9IHRoaXMuX2ludGVybmFsX2lzTG9nKCkgJiYgbG9naWNhbCA/IHRvTG9nKGxvZ2ljYWwsIHRoaXMuX3ByaXZhdGVfX2xvZ0Zvcm11bGEpIDogbG9naWNhbDtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBlbnN1cmVOb3ROdWxsKHRoaXMuX2ludGVybmFsX3ByaWNlUmFuZ2UoKSk7XG4gICAgICAgIGNvbnN0IGludkNvb3JkaW5hdGUgPSB0aGlzLl9wcml2YXRlX19ib3R0b21NYXJnaW5QeCgpICtcbiAgICAgICAgICAgICh0aGlzLl9pbnRlcm5hbF9pbnRlcm5hbEhlaWdodCgpIC0gMSkgKiAobG9naWNhbCAtIHJhbmdlLl9pbnRlcm5hbF9taW5WYWx1ZSgpKSAvIHJhbmdlLl9pbnRlcm5hbF9sZW5ndGgoKTtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHRoaXMuX2ludGVybmFsX2ludmVydGVkQ29vcmRpbmF0ZShpbnZDb29yZGluYXRlKTtcbiAgICAgICAgcmV0dXJuIGNvb3JkaW5hdGU7XG4gICAgfVxuICAgIF9wcml2YXRlX19jb29yZGluYXRlVG9Mb2dpY2FsKGNvb3JkaW5hdGUsIGJhc2VWYWx1ZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYWtlU3VyZUl0SXNWYWxpZCgpO1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnZDb29yZGluYXRlID0gdGhpcy5faW50ZXJuYWxfaW52ZXJ0ZWRDb29yZGluYXRlKGNvb3JkaW5hdGUpO1xuICAgICAgICBjb25zdCByYW5nZSA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfcHJpY2VSYW5nZSgpKTtcbiAgICAgICAgY29uc3QgbG9naWNhbCA9IHJhbmdlLl9pbnRlcm5hbF9taW5WYWx1ZSgpICsgcmFuZ2UuX2ludGVybmFsX2xlbmd0aCgpICpcbiAgICAgICAgICAgICgoaW52Q29vcmRpbmF0ZSAtIHRoaXMuX3ByaXZhdGVfX2JvdHRvbU1hcmdpblB4KCkpIC8gKHRoaXMuX2ludGVybmFsX2ludGVybmFsSGVpZ2h0KCkgLSAxKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbF9pc0xvZygpID8gZnJvbUxvZyhsb2dpY2FsLCB0aGlzLl9wcml2YXRlX19sb2dGb3JtdWxhKSA6IGxvZ2ljYWw7XG4gICAgfVxuICAgIF9wcml2YXRlX19vbklzSW52ZXJ0ZWRDaGFuZ2VkKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrc0NhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya0J1aWxkZXIuX2ludGVybmFsX3JlYnVpbGRUaWNrTWFya3MoKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICBfcHJpdmF0ZV9fcmVjYWxjdWxhdGVQcmljZVJhbmdlSW1wbCgpIHtcbiAgICAgICAgY29uc3QgdmlzaWJsZUJhcnMgPSB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlZEZvclJhbmdlLl9pbnRlcm5hbF92aXNpYmxlQmFycztcbiAgICAgICAgaWYgKHZpc2libGVCYXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByaWNlUmFuZ2UgPSBudWxsO1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gdGhpcy5faW50ZXJuYWxfc291cmNlc0ZvckF1dG9TY2FsZSgpO1xuICAgICAgICBsZXQgbWFyZ2luQWJvdmUgPSAwO1xuICAgICAgICBsZXQgbWFyZ2luQmVsb3cgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZS5faW50ZXJuYWxfdmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gc291cmNlLl9pbnRlcm5hbF9maXJzdFZhbHVlKCk7XG4gICAgICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXV0b1NjYWxlSW5mbyA9IHNvdXJjZS5faW50ZXJuYWxfYXV0b3NjYWxlSW5mbyh2aXNpYmxlQmFycy5faW50ZXJuYWxfbGVmdCgpLCB2aXNpYmxlQmFycy5faW50ZXJuYWxfcmlnaHQoKSk7XG4gICAgICAgICAgICBsZXQgc291cmNlUmFuZ2UgPSBhdXRvU2NhbGVJbmZvICYmIGF1dG9TY2FsZUluZm8uX2ludGVybmFsX3ByaWNlUmFuZ2UoKTtcbiAgICAgICAgICAgIGlmIChzb3VyY2VSYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5tb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBQcmljZVNjYWxlTW9kZS5Mb2dhcml0aG1pYyAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVJhbmdlID0gY29udmVydFByaWNlUmFuZ2VUb0xvZyhzb3VyY2VSYW5nZSwgdGhpcy5fcHJpdmF0ZV9fbG9nRm9ybXVsYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyIC8qIFByaWNlU2NhbGVNb2RlLlBlcmNlbnRhZ2UgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VSYW5nZSA9IHRvUGVyY2VudFJhbmdlKHNvdXJjZVJhbmdlLCBmaXJzdFZhbHVlLl9pbnRlcm5hbF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzIC8qIFByaWNlU2NhbGVNb2RlLkluZGV4ZWRUbzEwMCAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVJhbmdlID0gdG9JbmRleGVkVG8xMDBSYW5nZShzb3VyY2VSYW5nZSwgZmlyc3RWYWx1ZS5faW50ZXJuYWxfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmljZVJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlUmFuZ2UgPSBzb3VyY2VSYW5nZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlUmFuZ2UgPSBwcmljZVJhbmdlLl9pbnRlcm5hbF9tZXJnZShlbnN1cmVOb3ROdWxsKHNvdXJjZVJhbmdlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhdXRvU2NhbGVJbmZvICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpbnMgPSBhdXRvU2NhbGVJbmZvLl9pbnRlcm5hbF9tYXJnaW5zKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJnaW5zICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5BYm92ZSA9IE1hdGgubWF4KG1hcmdpbkFib3ZlLCBtYXJnaW5zLmFib3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkJlbG93ID0gTWF0aC5tYXgobWFyZ2luQmVsb3csIG1hcmdpbnMuYmVsb3cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXJnaW5BYm92ZSAhPT0gdGhpcy5fcHJpdmF0ZV9fbWFyZ2luQWJvdmUgfHwgbWFyZ2luQmVsb3cgIT09IHRoaXMuX3ByaXZhdGVfX21hcmdpbkJlbG93KSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJnaW5BYm92ZSA9IG1hcmdpbkFib3ZlO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFyZ2luQmVsb3cgPSBtYXJnaW5CZWxvdztcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZUludGVybmFsSGVpZ2h0Q2FjaGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpY2VSYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8ga2VlcCBjdXJyZW50IHJhbmdlIGlzIG5ldyBpcyBlbXB0eVxuICAgICAgICAgICAgaWYgKHByaWNlUmFuZ2UuX2ludGVybmFsX21pblZhbHVlKCkgPT09IHByaWNlUmFuZ2UuX2ludGVybmFsX21heFZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZXJTb3VyY2UgPSB0aGlzLl9wcml2YXRlX19mb3JtYXR0ZXJTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5Nb3ZlID0gZm9ybWF0dGVyU291cmNlID09PSBudWxsIHx8IHRoaXMuX2ludGVybmFsX2lzUGVyY2VudGFnZSgpIHx8IHRoaXMuX2ludGVybmFsX2lzSW5kZXhlZFRvMTAwKCkgPyAxIDogZm9ybWF0dGVyU291cmNlLl9pbnRlcm5hbF9taW5Nb3ZlKCk7XG4gICAgICAgICAgICAgICAgLy8gaWYgcHJpY2UgcmFuZ2UgaXMgZGVnZW5lcmF0ZWQgdG8gMSBwb2ludCBsZXQncyBleHRlbmQgaXQgYnkgMTAgbWluIG1vdmUgdmFsdWVzXG4gICAgICAgICAgICAgICAgLy8gdG8gYXZvaWQgaW5jb3JyZWN0IHJhbmdlIGFuZCBlbXB0eSAoYmxhbmspIHNjYWxlIChpbiBjYXNlIG9mIG1pbiB0aWNrIG11Y2ggZ3JlYXRlciB0aGFuIDEpXG4gICAgICAgICAgICAgICAgY29uc3QgZXh0ZW5kVmFsdWUgPSA1ICogbWluTW92ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNMb2coKSkge1xuICAgICAgICAgICAgICAgICAgICBwcmljZVJhbmdlID0gY29udmVydFByaWNlUmFuZ2VGcm9tTG9nKHByaWNlUmFuZ2UsIHRoaXMuX3ByaXZhdGVfX2xvZ0Zvcm11bGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmljZVJhbmdlID0gbmV3IFByaWNlUmFuZ2VJbXBsKHByaWNlUmFuZ2UuX2ludGVybmFsX21pblZhbHVlKCkgLSBleHRlbmRWYWx1ZSwgcHJpY2VSYW5nZS5faW50ZXJuYWxfbWF4VmFsdWUoKSArIGV4dGVuZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNMb2coKSkge1xuICAgICAgICAgICAgICAgICAgICBwcmljZVJhbmdlID0gY29udmVydFByaWNlUmFuZ2VUb0xvZyhwcmljZVJhbmdlLCB0aGlzLl9wcml2YXRlX19sb2dGb3JtdWxhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNMb2coKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhd1JhbmdlID0gY29udmVydFByaWNlUmFuZ2VGcm9tTG9nKHByaWNlUmFuZ2UsIHRoaXMuX3ByaXZhdGVfX2xvZ0Zvcm11bGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xvZ0Zvcm11bGEgPSBsb2dGb3JtdWxhRm9yUHJpY2VSYW5nZShyYXdSYW5nZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2dGb3JtdWxhc0FyZVNhbWUobmV3TG9nRm9ybXVsYSwgdGhpcy5fcHJpdmF0ZV9fbG9nRm9ybXVsYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3U25hcHNob3QgPSB0aGlzLl9wcml2YXRlX19wcmljZVJhbmdlU25hcHNob3QgIT09IG51bGwgPyBjb252ZXJ0UHJpY2VSYW5nZUZyb21Mb2codGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZVNuYXBzaG90LCB0aGlzLl9wcml2YXRlX19sb2dGb3JtdWxhKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xvZ0Zvcm11bGEgPSBuZXdMb2dGb3JtdWxhO1xuICAgICAgICAgICAgICAgICAgICBwcmljZVJhbmdlID0gY29udmVydFByaWNlUmFuZ2VUb0xvZyhyYXdSYW5nZSwgbmV3TG9nRm9ybXVsYSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdTbmFwc2hvdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VSYW5nZVNuYXBzaG90ID0gY29udmVydFByaWNlUmFuZ2VUb0xvZyhyYXdTbmFwc2hvdCwgbmV3TG9nRm9ybXVsYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRQcmljZVJhbmdlKHByaWNlUmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVzZXQgZW1wdHkgdG8gZGVmYXVsdFxuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3ByaWNlUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRQcmljZVJhbmdlKG5ldyBQcmljZVJhbmdlSW1wbCgtMC41LCAwLjUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sb2dGb3JtdWxhID0gbG9nRm9ybXVsYUZvclByaWNlUmFuZ2UobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWRGb3JSYW5nZS5faW50ZXJuYWxfaXNWYWxpZCA9IHRydWU7XG4gICAgfVxuICAgIF9wcml2YXRlX19nZXRDb29yZGluYXRlVHJhbnNmb3JtZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbF9pc1BlcmNlbnRhZ2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRvUGVyY2VudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9pbnRlcm5hbF9pc0luZGV4ZWRUbzEwMCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9JbmRleGVkVG8xMDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5faW50ZXJuYWxfaXNMb2coKSkge1xuICAgICAgICAgICAgcmV0dXJuIChwcmljZSkgPT4gdG9Mb2cocHJpY2UsIHRoaXMuX3ByaXZhdGVfX2xvZ0Zvcm11bGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZm9ybWF0VmFsdWUodmFsdWUsIGZvcm1hdHRlciwgZmFsbGJhY2tGb3JtYXR0ZXIpIHtcbiAgICAgICAgaWYgKGZvcm1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZmFsbGJhY2tGb3JtYXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZhbGxiYWNrRm9ybWF0dGVyID0gdGhpcy5faW50ZXJuYWxfZm9ybWF0dGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsbGJhY2tGb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0dGVyKHZhbHVlKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2Zvcm1hdFByaWNlKHByaWNlLCBmYWxsYmFja0Zvcm1hdHRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZm9ybWF0VmFsdWUocHJpY2UsIHRoaXMuX3ByaXZhdGVfX2xvY2FsaXphdGlvbk9wdGlvbnMucHJpY2VGb3JtYXR0ZXIsIGZhbGxiYWNrRm9ybWF0dGVyKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2Zvcm1hdFBlcmNlbnRhZ2UocGVyY2VudGFnZSwgZmFsbGJhY2tGb3JtYXR0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdFZhbHVlKHBlcmNlbnRhZ2UsIHRoaXMuX3ByaXZhdGVfX2xvY2FsaXphdGlvbk9wdGlvbnMucGVyY2VudGFnZUZvcm1hdHRlciwgZmFsbGJhY2tGb3JtYXR0ZXIpO1xuICAgIH1cbn1cblxuY29uc3QgREVGQVVMVF9TVFJFVENIX0ZBQ1RPUiA9IDEwMDA7XG5jbGFzcyBQYW5lIHtcbiAgICBjb25zdHJ1Y3Rvcih0aW1lU2NhbGUsIG1vZGVsKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX292ZXJsYXlTb3VyY2VzQnlTY2FsZUlkID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX193aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0cmV0Y2hGYWN0b3IgPSBERUZBVUxUX1NUUkVUQ0hfRkFDVE9SO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYWNoZWRPcmRlcmVkU291cmNlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Rlc3Ryb3llZCA9IG5ldyBEZWxlZ2F0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUgPSB0aW1lU2NhbGU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2dyaWQgPSBuZXcgR3JpZCh0aGlzKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1vZGVsLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fY3JlYXRlUHJpY2VTY2FsZShcImxlZnRcIiAvKiBEZWZhdWx0UHJpY2VTY2FsZUlkLkxlZnQgKi8sIG9wdGlvbnMubGVmdFByaWNlU2NhbGUpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUgPSB0aGlzLl9wcml2YXRlX19jcmVhdGVQcmljZVNjYWxlKFwicmlnaHRcIiAvKiBEZWZhdWx0UHJpY2VTY2FsZUlkLlJpZ2h0ICovLCBvcHRpb25zLnJpZ2h0UHJpY2VTY2FsZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZVNjYWxlLl9pbnRlcm5hbF9tb2RlQ2hhbmdlZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUodGhpcy5fcHJpdmF0ZV9fb25QcmljZVNjYWxlTW9kZUNoYW5nZWQuYmluZCh0aGlzLCB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VTY2FsZSksIHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUuX2ludGVybmFsX21vZGVDaGFuZ2VkKCkuX2ludGVybmFsX3N1YnNjcmliZSh0aGlzLl9wcml2YXRlX19vblByaWNlU2NhbGVNb2RlQ2hhbmdlZC5iaW5kKHRoaXMsIHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VTY2FsZSksIHRoaXMpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9hcHBseVNjYWxlT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2FwcGx5U2NhbGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubGVmdFByaWNlU2NhbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZVNjYWxlLl9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucy5sZWZ0UHJpY2VTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmlnaHRQcmljZVNjYWxlKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUuX2ludGVybmFsX2FwcGx5T3B0aW9ucyhvcHRpb25zLnJpZ2h0UHJpY2VTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxpemF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VTY2FsZS5faW50ZXJuYWxfdXBkYXRlRm9ybWF0dGVyKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUuX2ludGVybmFsX3VwZGF0ZUZvcm1hdHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm92ZXJsYXlQcmljZVNjYWxlcykge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQXJyYXlzID0gQXJyYXkuZnJvbSh0aGlzLl9wcml2YXRlX19vdmVybGF5U291cmNlc0J5U2NhbGVJZC52YWx1ZXMoKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFyciBvZiBzb3VyY2VBcnJheXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gZW5zdXJlTm90TnVsbChhcnJbMF0uX2ludGVybmFsX3ByaWNlU2NhbGUoKSk7XG4gICAgICAgICAgICAgICAgcHJpY2VTY2FsZS5faW50ZXJuYWxfYXBwbHlPcHRpb25zKG9wdGlvbnMub3ZlcmxheVByaWNlU2NhbGVzKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5sb2NhbGl6YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpY2VTY2FsZS5faW50ZXJuYWxfdXBkYXRlRm9ybWF0dGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wcmljZVNjYWxlQnlJZChpZCkge1xuICAgICAgICBzd2l0Y2ggKGlkKSB7XG4gICAgICAgICAgICBjYXNlIFwibGVmdFwiIC8qIERlZmF1bHRQcmljZVNjYWxlSWQuTGVmdCAqLzoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VTY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiIC8qIERlZmF1bHRQcmljZVNjYWxlSWQuUmlnaHQgKi86IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmlnaHRQcmljZVNjYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19vdmVybGF5U291cmNlc0J5U2NhbGVJZC5oYXMoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5zdXJlRGVmaW5lZCh0aGlzLl9wcml2YXRlX19vdmVybGF5U291cmNlc0J5U2NhbGVJZC5nZXQoaWQpKVswXS5faW50ZXJuYWxfcHJpY2VTY2FsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfcHJpY2VTY2FsZXNPcHRpb25zQ2hhbmdlZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlU2NhbGUuX2ludGVybmFsX21vZGVDaGFuZ2VkKCkuX2ludGVybmFsX3Vuc3Vic2NyaWJlQWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUuX2ludGVybmFsX21vZGVDaGFuZ2VkKCkuX2ludGVybmFsX3Vuc3Vic2NyaWJlQWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhU291cmNlcy5mb3JFYWNoKChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UuX2ludGVybmFsX2Rlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Rlc3Ryb3llZC5faW50ZXJuYWxfZmlyZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RyZXRjaEZhY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3N0cmV0Y2hGYWN0b3I7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRTdHJldGNoRmFjdG9yKGZhY3Rvcikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdHJldGNoRmFjdG9yID0gZmFjdG9yO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19tb2RlbDtcbiAgICB9XG4gICAgX2ludGVybmFsX3dpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fd2lkdGg7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9oZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19oZWlnaHQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRXaWR0aCh3aWR0aCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX193aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF91cGRhdGVBbGxTb3VyY2VzKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlU2NhbGUuX2ludGVybmFsX3NldEhlaWdodChoZWlnaHQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUuX2ludGVybmFsX3NldEhlaWdodChoZWlnaHQpO1xuICAgICAgICAvLyBwcm9jZXNzIG92ZXJsYXlzXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2VzLmZvckVhY2goKGRzKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNPdmVybGF5KGRzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSBkcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwcmljZVNjYWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlU2NhbGUuX2ludGVybmFsX3NldEhlaWdodChoZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUFsbFNvdXJjZXMoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RhdGFTb3VyY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9pc092ZXJsYXkoc291cmNlKSB7XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSBzb3VyY2UuX2ludGVybmFsX3ByaWNlU2NhbGUoKTtcbiAgICAgICAgaWYgKHByaWNlU2NhbGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VTY2FsZSAhPT0gcHJpY2VTY2FsZSAmJiB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUgIT09IHByaWNlU2NhbGU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hZGREYXRhU291cmNlKHNvdXJjZSwgdGFyZ2V0U2NhbGVJZCwgek9yZGVyKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldFpPcmRlciA9ICh6T3JkZXIgIT09IHVuZGVmaW5lZCkgPyB6T3JkZXIgOiB0aGlzLl9wcml2YXRlX19nZXRaT3JkZXJNaW5NYXgoKS5faW50ZXJuYWxfbWF4Wk9yZGVyICsgMTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW5zZXJ0RGF0YVNvdXJjZShzb3VyY2UsIHRhcmdldFNjYWxlSWQsIHRhcmdldFpPcmRlcik7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZW1vdmVEYXRhU291cmNlKHNvdXJjZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcbiAgICAgICAgYXNzZXJ0KGluZGV4ICE9PSAtMSwgJ3JlbW92ZURhdGFTb3VyY2U6IGludmFsaWQgZGF0YSBzb3VyY2UnKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgY29uc3QgcHJpY2VTY2FsZUlkID0gZW5zdXJlTm90TnVsbChzb3VyY2UuX2ludGVybmFsX3ByaWNlU2NhbGUoKSkuX2ludGVybmFsX2lkKCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19vdmVybGF5U291cmNlc0J5U2NhbGVJZC5oYXMocHJpY2VTY2FsZUlkKSkge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxheVNvdXJjZXMgPSBlbnN1cmVEZWZpbmVkKHRoaXMuX3ByaXZhdGVfX292ZXJsYXlTb3VyY2VzQnlTY2FsZUlkLmdldChwcmljZVNjYWxlSWQpKTtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXlJbmRleCA9IG92ZXJsYXlTb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcbiAgICAgICAgICAgIGlmIChvdmVybGF5SW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxheVNvdXJjZXMuc3BsaWNlKG92ZXJsYXlJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKG92ZXJsYXlTb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19vdmVybGF5U291cmNlc0J5U2NhbGVJZC5kZWxldGUocHJpY2VTY2FsZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJpY2VTY2FsZSA9IHNvdXJjZS5faW50ZXJuYWxfcHJpY2VTY2FsZSgpO1xuICAgICAgICAvLyBpZiBzb3VyY2UgaGFzIG93bmVyLCBpdCByZXR1cm5zIG93bmVyJ3MgcHJpY2Ugc2NhbGVcbiAgICAgICAgLy8gYW5kIGl0IGRvZXMgbm90IGhhdmUgc291cmNlIGluIHRoZWlyIGxpc3RcbiAgICAgICAgaWYgKHByaWNlU2NhbGUgJiYgcHJpY2VTY2FsZS5faW50ZXJuYWxfZGF0YVNvdXJjZXMoKS5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICAgICAgcHJpY2VTY2FsZS5faW50ZXJuYWxfcmVtb3ZlRGF0YVNvdXJjZShzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmljZVNjYWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwcmljZVNjYWxlLl9pbnRlcm5hbF9pbnZhbGlkYXRlU291cmNlc0NhY2hlKCk7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9yZWNhbGN1bGF0ZVByaWNlU2NhbGUocHJpY2VTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FjaGVkT3JkZXJlZFNvdXJjZXMgPSBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VTY2FsZVBvc2l0aW9uKHByaWNlU2NhbGUpIHtcbiAgICAgICAgaWYgKHByaWNlU2NhbGUgPT09IHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZVNjYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmljZVNjYWxlID09PSB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnb3ZlcmxheSc7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9sZWZ0UHJpY2VTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZVNjYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmlnaHRQcmljZVNjYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmlnaHRQcmljZVNjYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RhcnRTY2FsZVByaWNlKHByaWNlU2NhbGUsIHgpIHtcbiAgICAgICAgcHJpY2VTY2FsZS5faW50ZXJuYWxfc3RhcnRTY2FsZSh4KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NjYWxlUHJpY2VUbyhwcmljZVNjYWxlLCB4KSB7XG4gICAgICAgIHByaWNlU2NhbGUuX2ludGVybmFsX3NjYWxlVG8oeCk7XG4gICAgICAgIC8vIFRPRE86IGJlIG1vcmUgc21hcnQgYW5kIHVwZGF0ZSBvbmx5IGFmZmVjdGVkIHZpZXdzXG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUFsbFNvdXJjZXMoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2VuZFNjYWxlUHJpY2UocHJpY2VTY2FsZSkge1xuICAgICAgICBwcmljZVNjYWxlLl9pbnRlcm5hbF9lbmRTY2FsZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RhcnRTY3JvbGxQcmljZShwcmljZVNjYWxlLCB4KSB7XG4gICAgICAgIHByaWNlU2NhbGUuX2ludGVybmFsX3N0YXJ0U2Nyb2xsKHgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2Nyb2xsUHJpY2VUbyhwcmljZVNjYWxlLCB4KSB7XG4gICAgICAgIHByaWNlU2NhbGUuX2ludGVybmFsX3Njcm9sbFRvKHgpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF91cGRhdGVBbGxTb3VyY2VzKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9lbmRTY3JvbGxQcmljZShwcmljZVNjYWxlKSB7XG4gICAgICAgIHByaWNlU2NhbGUuX2ludGVybmFsX2VuZFNjcm9sbCgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlQWxsU291cmNlcygpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXMuZm9yRWFjaCgoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBzb3VyY2UuX2ludGVybmFsX3VwZGF0ZUFsbFZpZXdzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVmYXVsdFByaWNlU2NhbGUoKSB7XG4gICAgICAgIGxldCBwcmljZVNjYWxlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9vcHRpb25zKCkucmlnaHRQcmljZVNjYWxlLnZpc2libGUgJiYgdGhpcy5fcHJpdmF0ZV9fcmlnaHRQcmljZVNjYWxlLl9pbnRlcm5hbF9kYXRhU291cmNlcygpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VTY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfb3B0aW9ucygpLmxlZnRQcmljZVNjYWxlLnZpc2libGUgJiYgdGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlU2NhbGUuX2ludGVybmFsX2RhdGFTb3VyY2VzKCkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBwcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlU2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBwcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXNbMF0uX2ludGVybmFsX3ByaWNlU2NhbGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpY2VTY2FsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VTY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJpY2VTY2FsZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RlZmF1bHRWaXNpYmxlUHJpY2VTY2FsZSgpIHtcbiAgICAgICAgbGV0IHByaWNlU2NhbGUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX29wdGlvbnMoKS5yaWdodFByaWNlU2NhbGUudmlzaWJsZSkge1xuICAgICAgICAgICAgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VTY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfb3B0aW9ucygpLmxlZnRQcmljZVNjYWxlLnZpc2libGUpIHtcbiAgICAgICAgICAgIHByaWNlU2NhbGUgPSB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VTY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJpY2VTY2FsZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlY2FsY3VsYXRlUHJpY2VTY2FsZShwcmljZVNjYWxlKSB7XG4gICAgICAgIGlmIChwcmljZVNjYWxlID09PSBudWxsIHx8ICFwcmljZVNjYWxlLl9pbnRlcm5hbF9pc0F1dG9TY2FsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVjYWxjdWxhdGVQcmljZVNjYWxlSW1wbChwcmljZVNjYWxlKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Jlc2V0UHJpY2VTY2FsZShwcmljZVNjYWxlKSB7XG4gICAgICAgIGNvbnN0IHZpc2libGVCYXJzID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgcHJpY2VTY2FsZS5faW50ZXJuYWxfc2V0TW9kZSh7IF9pbnRlcm5hbF9hdXRvU2NhbGU6IHRydWUgfSk7XG4gICAgICAgIGlmICh2aXNpYmxlQmFycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJpY2VTY2FsZS5faW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVJhbmdlKHZpc2libGVCYXJzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF91cGRhdGVBbGxTb3VyY2VzKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tb21lbnRhcnlBdXRvU2NhbGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlY2FsY3VsYXRlUHJpY2VTY2FsZUltcGwodGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlU2NhbGUpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZWNhbGN1bGF0ZVByaWNlU2NhbGVJbXBsKHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VTY2FsZSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZWNhbGN1bGF0ZSgpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVNjYWxlKHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZVNjYWxlKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVNjYWxlKHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VTY2FsZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2VzLmZvckVhY2goKGRzKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNPdmVybGF5KGRzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3JlY2FsY3VsYXRlUHJpY2VTY2FsZShkcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUFsbFNvdXJjZXMoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX2xpZ2h0VXBkYXRlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9vcmRlcmVkU291cmNlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2NhY2hlZE9yZGVyZWRTb3VyY2VzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jYWNoZWRPcmRlcmVkU291cmNlcyA9IHNvcnRTb3VyY2VzKHRoaXMuX3ByaXZhdGVfX2RhdGFTb3VyY2VzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2FjaGVkT3JkZXJlZFNvdXJjZXM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9vbkRlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2Rlc3Ryb3llZDtcbiAgICB9XG4gICAgX2ludGVybmFsX2dyaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19ncmlkO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fcmVjYWxjdWxhdGVQcmljZVNjYWxlSW1wbChwcmljZVNjYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IGNhbiB1c2UgdGhpcyBjaGVja3NcbiAgICAgICAgY29uc3Qgc291cmNlRm9yQXV0b1NjYWxlID0gcHJpY2VTY2FsZS5faW50ZXJuYWxfc291cmNlc0ZvckF1dG9TY2FsZSgpO1xuICAgICAgICBpZiAoc291cmNlRm9yQXV0b1NjYWxlICYmIHNvdXJjZUZvckF1dG9TY2FsZS5sZW5ndGggPiAwICYmICF0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgY29uc3QgdmlzaWJsZUJhcnMgPSB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX3Zpc2libGVTdHJpY3RSYW5nZSgpO1xuICAgICAgICAgICAgaWYgKHZpc2libGVCYXJzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHJpY2VTY2FsZS5faW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVJhbmdlKHZpc2libGVCYXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcmljZVNjYWxlLl9pbnRlcm5hbF91cGRhdGVBbGxWaWV3cygpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZ2V0Wk9yZGVyTWluTWF4KCkge1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gdGhpcy5faW50ZXJuYWxfb3JkZXJlZFNvdXJjZXMoKTtcbiAgICAgICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBfaW50ZXJuYWxfbWluWk9yZGVyOiAwLCBfaW50ZXJuYWxfbWF4Wk9yZGVyOiAwIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1pblpPcmRlciA9IDA7XG4gICAgICAgIGxldCBtYXhaT3JkZXIgPSAwO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNvdXJjZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRzID0gc291cmNlc1tqXTtcbiAgICAgICAgICAgIGNvbnN0IHpPcmRlciA9IGRzLl9pbnRlcm5hbF96b3JkZXIoKTtcbiAgICAgICAgICAgIGlmICh6T3JkZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoek9yZGVyIDwgbWluWk9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblpPcmRlciA9IHpPcmRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHpPcmRlciA+IG1heFpPcmRlcikge1xuICAgICAgICAgICAgICAgICAgICBtYXhaT3JkZXIgPSB6T3JkZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IF9pbnRlcm5hbF9taW5aT3JkZXI6IG1pblpPcmRlciwgX2ludGVybmFsX21heFpPcmRlcjogbWF4Wk9yZGVyIH07XG4gICAgfVxuICAgIF9wcml2YXRlX19pbnNlcnREYXRhU291cmNlKHNvdXJjZSwgcHJpY2VTY2FsZUlkLCB6T3JkZXIpIHtcbiAgICAgICAgbGV0IHByaWNlU2NhbGUgPSB0aGlzLl9pbnRlcm5hbF9wcmljZVNjYWxlQnlJZChwcmljZVNjYWxlSWQpO1xuICAgICAgICBpZiAocHJpY2VTY2FsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX2NyZWF0ZVByaWNlU2NhbGUocHJpY2VTY2FsZUlkLCB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfb3B0aW9ucygpLm92ZXJsYXlQcmljZVNjYWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YVNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICBpZiAoIWlzRGVmYXVsdFByaWNlU2NhbGUocHJpY2VTY2FsZUlkKSkge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxheVNvdXJjZXMgPSB0aGlzLl9wcml2YXRlX19vdmVybGF5U291cmNlc0J5U2NhbGVJZC5nZXQocHJpY2VTY2FsZUlkKSB8fCBbXTtcbiAgICAgICAgICAgIG92ZXJsYXlTb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX292ZXJsYXlTb3VyY2VzQnlTY2FsZUlkLnNldChwcmljZVNjYWxlSWQsIG92ZXJsYXlTb3VyY2VzKTtcbiAgICAgICAgfVxuICAgICAgICBwcmljZVNjYWxlLl9pbnRlcm5hbF9hZGREYXRhU291cmNlKHNvdXJjZSk7XG4gICAgICAgIHNvdXJjZS5faW50ZXJuYWxfc2V0UHJpY2VTY2FsZShwcmljZVNjYWxlKTtcbiAgICAgICAgc291cmNlLl9pbnRlcm5hbF9zZXRab3JkZXIoek9yZGVyKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVNjYWxlKHByaWNlU2NhbGUpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYWNoZWRPcmRlcmVkU291cmNlcyA9IG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX19vblByaWNlU2NhbGVNb2RlQ2hhbmdlZChwcmljZVNjYWxlLCBvbGRNb2RlLCBuZXdNb2RlKSB7XG4gICAgICAgIGlmIChvbGRNb2RlLl9pbnRlcm5hbF9tb2RlID09PSBuZXdNb2RlLl9pbnRlcm5hbF9tb2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gbW9tZW50YXJ5IGF1dG8gc2NhbGUgaWYgd2UgdG9nZ2xlIHBlcmNlbnRhZ2UvaW5kZXhlZFRvMTAwIG1vZGVcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVjYWxjdWxhdGVQcmljZVNjYWxlSW1wbChwcmljZVNjYWxlKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2NyZWF0ZVByaWNlU2NhbGUoaWQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWN0dWFsT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyB2aXNpYmxlOiB0cnVlLCBhdXRvU2NhbGU6IHRydWUgfSwgY2xvbmUob3B0aW9ucykpO1xuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gbmV3IFByaWNlU2NhbGUoaWQsIGFjdHVhbE9wdGlvbnMsIHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9vcHRpb25zKCkubGF5b3V0LCB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfb3B0aW9ucygpLmxvY2FsaXphdGlvbik7XG4gICAgICAgIHByaWNlU2NhbGUuX2ludGVybmFsX3NldEhlaWdodCh0aGlzLl9pbnRlcm5hbF9oZWlnaHQoKSk7XG4gICAgICAgIHJldHVybiBwcmljZVNjYWxlO1xuICAgIH1cbn1cblxuY2xhc3MgRm9ybWF0dGVkTGFiZWxzQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKGZvcm1hdCwgaG9yelNjYWxlQmVoYXZpb3IsIHNpemUgPSA1MCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19hY3R1YWxTaXplID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrID0gMTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb2xkZXN0VGljayA9IDE7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aWNrMkxhYmVscyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvciA9IGhvcnpTY2FsZUJlaGF2aW9yO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tYXhTaXplID0gc2l6ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2Zvcm1hdCh0aWNrTWFyaykge1xuICAgICAgICBjb25zdCB0aW1lID0gdGlja01hcmsudGltZTtcbiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5jYWNoZUtleSh0aW1lKTtcbiAgICAgICAgY29uc3QgdGljayA9IHRoaXMuX3ByaXZhdGVfX2NhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICAgIGlmICh0aWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aWNrLl9pbnRlcm5hbF9zdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2FjdHVhbFNpemUgPT09IHRoaXMuX3ByaXZhdGVfX21heFNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZGVzdFZhbHVlID0gdGhpcy5fcHJpdmF0ZV9fdGljazJMYWJlbHMuZ2V0KHRoaXMuX3ByaXZhdGVfX29sZGVzdFRpY2spO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGljazJMYWJlbHMuZGVsZXRlKHRoaXMuX3ByaXZhdGVfX29sZGVzdFRpY2spO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FjaGUuZGVsZXRlKGVuc3VyZURlZmluZWQob2xkZXN0VmFsdWUpKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX29sZGVzdFRpY2srKztcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2FjdHVhbFNpemUtLTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLl9wcml2YXRlX19mb3JtYXQodGlja01hcmspO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYWNoZS5zZXQoY2FjaGVLZXksIHsgX2ludGVybmFsX3N0cmluZzogc3RyLCBfaW50ZXJuYWxfdGljazogdGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrIH0pO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aWNrMkxhYmVscy5zZXQodGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrLCBjYWNoZUtleSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FjdHVhbFNpemUrKztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXNhZ2VUaWNrKys7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufVxuXG5jbGFzcyBSYW5nZUltcGwge1xuICAgIGNvbnN0cnVjdG9yKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGFzc2VydChsZWZ0IDw9IHJpZ2h0LCAncmlnaHQgc2hvdWxkIGJlID49IGxlZnQnKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdCA9IGxlZnQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JpZ2h0ID0gcmlnaHQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9sZWZ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbGVmdDtcbiAgICB9XG4gICAgX2ludGVybmFsX3JpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmlnaHQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3JpZ2h0IC0gdGhpcy5fcHJpdmF0ZV9fbGVmdCArIDE7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jb250YWlucyhpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbGVmdCA8PSBpbmRleCAmJiBpbmRleCA8PSB0aGlzLl9wcml2YXRlX19yaWdodDtcbiAgICB9XG4gICAgX2ludGVybmFsX2VxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbGVmdCA9PT0gb3RoZXIuX2ludGVybmFsX2xlZnQoKSAmJiB0aGlzLl9wcml2YXRlX19yaWdodCA9PT0gb3RoZXIuX2ludGVybmFsX3JpZ2h0KCk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXJlUmFuZ2VzRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICAgIGlmIChmaXJzdCA9PT0gbnVsbCB8fCBzZWNvbmQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0ID09PSBzZWNvbmQ7XG4gICAgfVxuICAgIHJldHVybiBmaXJzdC5faW50ZXJuYWxfZXF1YWxzKHNlY29uZCk7XG59XG5cbmNsYXNzIFRpY2tNYXJrcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzQnlXZWlnaHQgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5pZm9ybURpc3RyaWJ1dGlvbiA9IGZhbHNlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0VW5pZm9ybURpc3RyaWJ1dGlvbih2YWwpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5pZm9ybURpc3RyaWJ1dGlvbiA9IHZhbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FjaGUgPSBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0VGltZVNjYWxlUG9pbnRzKG5ld1BvaW50cywgZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW1vdmVNYXJrc1NpbmNlSW5kZXgoZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhY2hlID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBmaXJzdENoYW5nZWRQb2ludEluZGV4OyBpbmRleCA8IG5ld1BvaW50cy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gbmV3UG9pbnRzW2luZGV4XTtcbiAgICAgICAgICAgIGxldCBtYXJrc0ZvcldlaWdodCA9IHRoaXMuX3ByaXZhdGVfX21hcmtzQnlXZWlnaHQuZ2V0KHBvaW50LnRpbWVXZWlnaHQpO1xuICAgICAgICAgICAgaWYgKG1hcmtzRm9yV2VpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXJrc0ZvcldlaWdodCA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzQnlXZWlnaHQuc2V0KHBvaW50LnRpbWVXZWlnaHQsIG1hcmtzRm9yV2VpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcmtzRm9yV2VpZ2h0LnB1c2goe1xuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICB0aW1lOiBwb2ludC50aW1lLFxuICAgICAgICAgICAgICAgIHdlaWdodDogcG9pbnQudGltZVdlaWdodCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFRpbWU6IHBvaW50Lm9yaWdpbmFsVGltZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9idWlsZChzcGFjaW5nLCBtYXhXaWR0aCkge1xuICAgICAgICBjb25zdCBtYXhJbmRleGVzUGVyTWFyayA9IE1hdGguY2VpbChtYXhXaWR0aCAvIHNwYWNpbmcpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fY2FjaGUgPT09IG51bGwgfHwgdGhpcy5fcHJpdmF0ZV9fY2FjaGUuX2ludGVybmFsX21heEluZGV4ZXNQZXJNYXJrICE9PSBtYXhJbmRleGVzUGVyTWFyaykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FjaGUgPSB7XG4gICAgICAgICAgICAgICAgX2ludGVybmFsX21hcmtzOiB0aGlzLl9wcml2YXRlX19idWlsZE1hcmtzSW1wbChtYXhJbmRleGVzUGVyTWFyayksXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX21heEluZGV4ZXNQZXJNYXJrOiBtYXhJbmRleGVzUGVyTWFyayxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NhY2hlLl9pbnRlcm5hbF9tYXJrcztcbiAgICB9XG4gICAgX3ByaXZhdGVfX3JlbW92ZU1hcmtzU2luY2VJbmRleChzaW5jZUluZGV4KSB7XG4gICAgICAgIGlmIChzaW5jZUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tYXJrc0J5V2VpZ2h0LmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2VpZ2h0c1RvQ2xlYXIgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWFya3NCeVdlaWdodC5mb3JFYWNoKChtYXJrcywgdGltZVdlaWdodCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNpbmNlSW5kZXggPD0gbWFya3NbMF0uaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB3ZWlnaHRzVG9DbGVhci5wdXNoKHRpbWVXZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWFya3Muc3BsaWNlKGxvd2VyQm91bmQobWFya3MsIHNpbmNlSW5kZXgsICh0bSkgPT4gdG0uaW5kZXggPCBzaW5jZUluZGV4KSwgSW5maW5pdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChjb25zdCB3ZWlnaHQgb2Ygd2VpZ2h0c1RvQ2xlYXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21hcmtzQnlXZWlnaHQuZGVsZXRlKHdlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2J1aWxkTWFya3NJbXBsKG1heEluZGV4ZXNQZXJNYXJrKSB7XG4gICAgICAgIGxldCBtYXJrcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHdlaWdodCBvZiBBcnJheS5mcm9tKHRoaXMuX3ByaXZhdGVfX21hcmtzQnlXZWlnaHQua2V5cygpKS5zb3J0KChhLCBiKSA9PiBiIC0gYSkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fbWFya3NCeVdlaWdodC5nZXQod2VpZ2h0KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQnVpbHQgdGlja01hcmtzIGFyZSBub3cgcHJldk1hcmtzLCBhbmQgbWFya3MgaXQgYXMgbmV3IGFycmF5XG4gICAgICAgICAgICBjb25zdCBwcmV2TWFya3MgPSBtYXJrcztcbiAgICAgICAgICAgIG1hcmtzID0gW107XG4gICAgICAgICAgICBjb25zdCBwcmV2TWFya3NMZW5ndGggPSBwcmV2TWFya3MubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IHByZXZNYXJrc1BvaW50ZXIgPSAwO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFdlaWdodCA9IGVuc3VyZURlZmluZWQodGhpcy5fcHJpdmF0ZV9fbWFya3NCeVdlaWdodC5nZXQod2VpZ2h0KSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50V2VpZ2h0TGVuZ3RoID0gY3VycmVudFdlaWdodC5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgcmlnaHRJbmRleCA9IEluZmluaXR5O1xuICAgICAgICAgICAgbGV0IGxlZnRJbmRleCA9IC1JbmZpbml0eTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFdlaWdodExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFyayA9IGN1cnJlbnRXZWlnaHRbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gbWFyay5pbmRleDtcbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgaW5kZXhlcyB3aXRoIHdoaWNoIGN1cnJlbnQgaW5kZXggd2lsbCBiZSBjb21wYXJlZFxuICAgICAgICAgICAgICAgIC8vIEFsbCBtYXJrcyB0byB0aGUgcmlnaHQgaXMgbW92ZWQgdG8gbmV3IGFycmF5XG4gICAgICAgICAgICAgICAgd2hpbGUgKHByZXZNYXJrc1BvaW50ZXIgPCBwcmV2TWFya3NMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdE1hcmsgPSBwcmV2TWFya3NbcHJldk1hcmtzUG9pbnRlcl07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGxhc3RNYXJrLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEluZGV4IDwgY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2TWFya3NQb2ludGVyKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrcy5wdXNoKGxhc3RNYXJrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0SW5kZXggPSBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmlnaHRJbmRleCAtIGN1cnJlbnRJbmRleCA+PSBtYXhJbmRleGVzUGVyTWFyayAmJiBjdXJyZW50SW5kZXggLSBsZWZ0SW5kZXggPj0gbWF4SW5kZXhlc1Blck1hcmspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGlja01hcmsgZml0cy4gUGxhY2UgaXQgaW50byBuZXcgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgbWFya3MucHVzaChtYXJrKTtcbiAgICAgICAgICAgICAgICAgICAgbGVmdEluZGV4ID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3VuaWZvcm1EaXN0cmlidXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2TWFya3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQbGFjZSBhbGwgdW51c2VkIHRpY2tNYXJrcyBpbnRvIG5ldyBhcnJheTtcbiAgICAgICAgICAgIGZvciAoOyBwcmV2TWFya3NQb2ludGVyIDwgcHJldk1hcmtzTGVuZ3RoOyBwcmV2TWFya3NQb2ludGVyKyspIHtcbiAgICAgICAgICAgICAgICBtYXJrcy5wdXNoKHByZXZNYXJrc1twcmV2TWFya3NQb2ludGVyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmtzO1xuICAgIH1cbn1cblxuY2xhc3MgVGltZVNjYWxlVmlzaWJsZVJhbmdlIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2dpY2FsUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9naWNhbFJhbmdlID0gbG9naWNhbFJhbmdlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RyaWN0UmFuZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19sb2dpY2FsUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2VJbXBsKE1hdGguZmxvb3IodGhpcy5fcHJpdmF0ZV9fbG9naWNhbFJhbmdlLl9pbnRlcm5hbF9sZWZ0KCkpLCBNYXRoLmNlaWwodGhpcy5fcHJpdmF0ZV9fbG9naWNhbFJhbmdlLl9pbnRlcm5hbF9yaWdodCgpKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9sb2dpY2FsUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19sb2dpY2FsUmFuZ2U7XG4gICAgfVxuICAgIHN0YXRpYyBfaW50ZXJuYWxfaW52YWxpZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW1lU2NhbGVWaXNpYmxlUmFuZ2UobnVsbCk7XG4gICAgfVxufVxuXG5jb25zdCBkZWZhdWx0VGlja01hcmtNYXhDaGFyYWN0ZXJMZW5ndGggPSA4O1xuZnVuY3Rpb24gbWFya1dpdGhHcmVhdGVyV2VpZ2h0KGEsIGIpIHtcbiAgICByZXR1cm4gYS53ZWlnaHQgPiBiLndlaWdodCA/IGEgOiBiO1xufVxuY2xhc3MgVGltZVNjYWxlIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCwgb3B0aW9ucywgbG9jYWxpemF0aW9uT3B0aW9ucywgaG9yelNjYWxlQmVoYXZpb3IpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fd2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19iYXNlSW5kZXhPck51bGwgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2Nyb2xsU3RhcnRQb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NjYWxlU3RhcnRQb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpY2tNYXJrcyA9IG5ldyBUaWNrTWFya3MoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0dGVkQnlXZWlnaHQgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZSA9IFRpbWVTY2FsZVZpc2libGVSYW5nZS5faW50ZXJuYWxfaW52YWxpZCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX192aXNpYmxlUmFuZ2VJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVCYXJzQ2hhbmdlZCA9IG5ldyBEZWxlZ2F0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb2dpY2FsUmFuZ2VDaGFuZ2VkID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnNBcHBsaWVkID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvbW1vblRyYW5zaXRpb25TdGFydFN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZU1hcmtzQ2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xvY2FsaXphdGlvbk9wdGlvbnMgPSBsb2NhbGl6YXRpb25PcHRpb25zO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodE9mZnNldCA9IG9wdGlvbnMucmlnaHRPZmZzZXQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcgPSBvcHRpb25zLmJhclNwYWNpbmc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yID0gaG9yelNjYWxlQmVoYXZpb3I7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZURhdGVUaW1lRm9ybWF0dGVyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpY2tNYXJrcy5faW50ZXJuYWxfc2V0VW5pZm9ybURpc3RyaWJ1dGlvbihvcHRpb25zLnVuaWZvcm1EaXN0cmlidXRpb24pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hcHBseUxvY2FsaXphdGlvbk9wdGlvbnMobG9jYWxpemF0aW9uT3B0aW9ucykge1xuICAgICAgICBtZXJnZSh0aGlzLl9wcml2YXRlX19sb2NhbGl6YXRpb25PcHRpb25zLCBsb2NhbGl6YXRpb25PcHRpb25zKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZVRpY2tNYXJrcygpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX191cGRhdGVEYXRlVGltZUZvcm1hdHRlcigpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXBwbHlPcHRpb25zKG9wdGlvbnMsIGxvY2FsaXphdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBtZXJnZSh0aGlzLl9wcml2YXRlX19vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuZml4TGVmdEVkZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RvRml4TGVmdEVkZ2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5maXhSaWdodEVkZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RvRml4UmlnaHRFZGdlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm90ZSB0aGF0IGJhciBzcGFjaW5nIHNob3VsZCBiZSBhcHBsaWVkIGJlZm9yZSByaWdodCBvZmZzZXRcbiAgICAgICAgLy8gYmVjYXVzZSByaWdodCBvZmZzZXQgZGVwZW5kcyBvbiBiYXIgc3BhY2luZ1xuICAgICAgICBpZiAob3B0aW9ucy5iYXJTcGFjaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9zZXRCYXJTcGFjaW5nKG9wdGlvbnMuYmFyU3BhY2luZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmlnaHRPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3NldFJpZ2h0T2Zmc2V0KG9wdGlvbnMucmlnaHRPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm1pbkJhclNwYWNpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8geWVzLCBpZiB3ZSBhcHBseSBtaW4gYmFyIHNwYWNpbmcgdGhlbiB3ZSBuZWVkIHRvIGNvcnJlY3QgYmFyIHNwYWNpbmdcbiAgICAgICAgICAgIC8vIHRoZSBlYXNpZXN0IHdheSBpcyB0byBhcHBseSBpdCBvbmNlIGFnYWluXG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfc2V0QmFyU3BhY2luZygoX2EgPSBvcHRpb25zLmJhclNwYWNpbmcpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVUaWNrTWFya3MoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXBkYXRlRGF0ZVRpbWVGb3JtYXR0ZXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3B0aW9uc0FwcGxpZWQuX2ludGVybmFsX2ZpcmUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2luZGV4VG9UaW1lKGluZGV4KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLl9wcml2YXRlX19wb2ludHNbaW5kZXhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGltZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX2luZGV4VG9UaW1lU2NhbGVQb2ludChpbmRleCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9wcml2YXRlX19wb2ludHNbaW5kZXhdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdGltZVRvSW5kZXgodGltZSwgZmluZE5lYXJlc3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3BvaW50cy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAvLyBubyB0aW1lIHBvaW50cyBhdmFpbGFibGVcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkodGltZSkgPiB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkodGhpcy5fcHJpdmF0ZV9fcG9pbnRzW3RoaXMuX3ByaXZhdGVfX3BvaW50cy5sZW5ndGggLSAxXS50aW1lKSkge1xuICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlXG4gICAgICAgICAgICByZXR1cm4gZmluZE5lYXJlc3QgPyB0aGlzLl9wcml2YXRlX19wb2ludHMubGVuZ3RoIC0gMSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSBsb3dlckJvdW5kKHRoaXMuX3ByaXZhdGVfX3BvaW50cywgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3Iua2V5KHRpbWUpLCAoYSwgYikgPT4gdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3Iua2V5KGEudGltZSkgPCBiKTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmtleSh0aW1lKSA8IHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmtleSh0aGlzLl9wcml2YXRlX19wb2ludHNbaW5kZXhdLnRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmluZE5lYXJlc3QgPyBpbmRleCA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3dpZHRoID09PSAwIHx8IHRoaXMuX3ByaXZhdGVfX3BvaW50cy5sZW5ndGggPT09IDAgfHwgdGhpcy5fcHJpdmF0ZV9fYmFzZUluZGV4T3JOdWxsID09PSBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaGFzUG9pbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcG9pbnRzLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIC8vIHN0cmljdCByYW5nZTogaW50ZWdlciBpbmRpY2VzIG9mIHRoZSBiYXJzIGluIHRoZSB2aXNpYmxlIHJhbmdlIHJvdW5kZWQgaW4gbW9yZSB3aWRlIGRpcmVjdGlvblxuICAgIF9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZVZpc2libGVSYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZVJhbmdlLl9pbnRlcm5hbF9zdHJpY3RSYW5nZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdmlzaWJsZUxvZ2ljYWxSYW5nZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXBkYXRlVmlzaWJsZVJhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX192aXNpYmxlUmFuZ2UuX2ludGVybmFsX2xvZ2ljYWxSYW5nZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdmlzaWJsZVRpbWVSYW5nZSgpIHtcbiAgICAgICAgY29uc3QgdmlzaWJsZUJhcnMgPSB0aGlzLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgaWYgKHZpc2libGVCYXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICAgIGZyb206IHZpc2libGVCYXJzLl9pbnRlcm5hbF9sZWZ0KCksXG4gICAgICAgICAgICB0bzogdmlzaWJsZUJhcnMuX2ludGVybmFsX3JpZ2h0KCksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbF90aW1lUmFuZ2VGb3JMb2dpY2FsUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdGltZVJhbmdlRm9yTG9naWNhbFJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGZyb20gPSBNYXRoLnJvdW5kKHJhbmdlLmZyb20pO1xuICAgICAgICBjb25zdCB0byA9IE1hdGgucm91bmQocmFuZ2UudG8pO1xuICAgICAgICBjb25zdCBmaXJzdEluZGV4ID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19maXJzdEluZGV4KCkpO1xuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX2xhc3RJbmRleCgpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyb206IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfaW5kZXhUb1RpbWVTY2FsZVBvaW50KE1hdGgubWF4KGZpcnN0SW5kZXgsIGZyb20pKSksXG4gICAgICAgICAgICB0bzogZW5zdXJlTm90TnVsbCh0aGlzLl9pbnRlcm5hbF9pbmRleFRvVGltZVNjYWxlUG9pbnQoTWF0aC5taW4obGFzdEluZGV4LCB0bykpKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2ludGVybmFsX2xvZ2ljYWxSYW5nZUZvclRpbWVSYW5nZShyYW5nZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJvbTogZW5zdXJlTm90TnVsbCh0aGlzLl9pbnRlcm5hbF90aW1lVG9JbmRleChyYW5nZS5mcm9tLCB0cnVlKSksXG4gICAgICAgICAgICB0bzogZW5zdXJlTm90TnVsbCh0aGlzLl9pbnRlcm5hbF90aW1lVG9JbmRleChyYW5nZS50bywgdHJ1ZSkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX193aWR0aDtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFdpZHRoKG5ld1dpZHRoKSB7XG4gICAgICAgIGlmICghaXNGaW5pdGUobmV3V2lkdGgpIHx8IG5ld1dpZHRoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fd2lkdGggPT09IG5ld1dpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2hlbiB3ZSBjaGFuZ2UgdGhlIHdpZHRoIGFuZCB3ZSBuZWVkIHRvIGNvcnJlY3QgdmlzaWJsZSByYW5nZSBiZWNhdXNlIG9mIGZpeGluZyBsZWZ0IGVkZ2VcbiAgICAgICAgLy8gd2UgbmVlZCB0byBjaGVjayB0aGUgcHJldmlvdXMgdmlzaWJsZSByYW5nZSByYXRoZXIgdGhhbiB0aGUgbmV3IG9uZVxuICAgICAgICAvLyBiZWNhdXNlIGl0IG1pZ2h0IGJlIHVwZGF0ZWQgYnkgY2hhbmdpbmcgd2lkdGgsIGJhciBzcGFjaW5nLCBldGNcbiAgICAgICAgLy8gYnV0IHdlIG5lZWQgdG8gdHJ5IHRvIGtlZXAgdGhlIHNhbWUgcmFuZ2VcbiAgICAgICAgY29uc3QgcHJldmlvdXNWaXNpYmxlUmFuZ2UgPSB0aGlzLl9pbnRlcm5hbF92aXNpYmxlTG9naWNhbFJhbmdlKCk7XG4gICAgICAgIGNvbnN0IG9sZFdpZHRoID0gdGhpcy5fcHJpdmF0ZV9fd2lkdGg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3dpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMubG9ja1Zpc2libGVUaW1lUmFuZ2VPblJlc2l6ZSAmJiBvbGRXaWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgLy8gcmVjYWxjdWxhdGUgYmFyIHNwYWNpbmdcbiAgICAgICAgICAgIGNvbnN0IG5ld0JhclNwYWNpbmcgPSB0aGlzLl9wcml2YXRlX19iYXJTcGFjaW5nICogbmV3V2lkdGggLyBvbGRXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcgPSBuZXdCYXJTcGFjaW5nO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRpbWUgc2NhbGUgaXMgc2Nyb2xsZWQgdG8gdGhlIGVuZCBvZiBkYXRhIGFuZCB3ZSBoYXZlIGZpeGVkIHJpZ2h0IGVkZ2VcbiAgICAgICAgLy8ga2VlcCBsZWZ0IGVkZ2UgaW5zdGVhZCBvZiByaWdodFxuICAgICAgICAvLyB3ZSBuZWVkIGl0IHRvIGF2b2lkIFwic2hha2luZ1wiIGlmIHRoZSBsYXN0IGJhciB2aXNpYmlsaXR5IGFmZmVjdHMgdGltZSBzY2FsZSB3aWR0aFxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5maXhMZWZ0RWRnZSkge1xuICAgICAgICAgICAgLy8gbm90ZSB0aGF0IGxvZ2ljYWwgbGVmdCByYW5nZSBtZWFucyBub3QgdGhlIG1pZGRsZSBvZiBhIGJhciAoaXQncyB0aGUgbGVmdCBib3JkZXIpXG4gICAgICAgICAgICBpZiAocHJldmlvdXNWaXNpYmxlUmFuZ2UgIT09IG51bGwgJiYgcHJldmlvdXNWaXNpYmxlUmFuZ2UuX2ludGVybmFsX2xlZnQoKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBvbGRXaWR0aCAtIG5ld1dpZHRoO1xuICAgICAgICAgICAgICAgIC8vIHJlZHVjZSAgX3JpZ2h0T2Zmc2V0IG1lYW5zIG1vdmUgcmlnaHRcbiAgICAgICAgICAgICAgICAvLyB3ZSBjb3VsZCBtb3ZlIG1vcmUgdGhhbiByZXF1aXJlZCAtIHRoaXMgd2lsbCBiZSBmaXhlZCBieSBfY29ycmVjdE9mZnNldCgpXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRPZmZzZXQgLT0gTWF0aC5yb3VuZChkZWx0YSAvIHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcpICsgMTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX192aXNpYmxlUmFuZ2VJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXBkYXRpbmcgYmFyIHNwYWNpbmcgc2hvdWxkIGJlIGZpcnN0IGJlY2F1c2UgcmlnaHQgb2Zmc2V0IGRlcGVuZHMgb24gaXRcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29ycmVjdEJhclNwYWNpbmcoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29ycmVjdE9mZnNldCgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfaW5kZXhUb0Nvb3JkaW5hdGUoaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzRW1wdHkoKSB8fCAhaXNJbnRlZ2VyKGluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmFzZUluZGV4ID0gdGhpcy5faW50ZXJuYWxfYmFzZUluZGV4KCk7XG4gICAgICAgIGNvbnN0IGRlbHRhRnJvbVJpZ2h0ID0gYmFzZUluZGV4ICsgdGhpcy5fcHJpdmF0ZV9fcmlnaHRPZmZzZXQgLSBpbmRleDtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHRoaXMuX3ByaXZhdGVfX3dpZHRoIC0gKGRlbHRhRnJvbVJpZ2h0ICsgMC41KSAqIHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcgLSAxO1xuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2luZGV4ZXNUb0Nvb3JkaW5hdGVzKHBvaW50cywgdmlzaWJsZVJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGJhc2VJbmRleCA9IHRoaXMuX2ludGVybmFsX2Jhc2VJbmRleCgpO1xuICAgICAgICBjb25zdCBpbmRleEZyb20gPSAodmlzaWJsZVJhbmdlID09PSB1bmRlZmluZWQpID8gMCA6IHZpc2libGVSYW5nZS5mcm9tO1xuICAgICAgICBjb25zdCBpbmRleFRvID0gKHZpc2libGVSYW5nZSA9PT0gdW5kZWZpbmVkKSA/IHBvaW50cy5sZW5ndGggOiB2aXNpYmxlUmFuZ2UudG87XG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleEZyb207IGkgPCBpbmRleFRvOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcG9pbnRzW2ldLl9pbnRlcm5hbF90aW1lO1xuICAgICAgICAgICAgY29uc3QgZGVsdGFGcm9tUmlnaHQgPSBiYXNlSW5kZXggKyB0aGlzLl9wcml2YXRlX19yaWdodE9mZnNldCAtIGluZGV4O1xuICAgICAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHRoaXMuX3ByaXZhdGVfX3dpZHRoIC0gKGRlbHRhRnJvbVJpZ2h0ICsgMC41KSAqIHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcgLSAxO1xuICAgICAgICAgICAgcG9pbnRzW2ldLl9pbnRlcm5hbF94ID0gY29vcmRpbmF0ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfY29vcmRpbmF0ZVRvSW5kZXgoeCkge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuX3ByaXZhdGVfX2Nvb3JkaW5hdGVUb0Zsb2F0SW5kZXgoeCkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UmlnaHRPZmZzZXQob2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvcnJlY3RPZmZzZXQoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3JlY2FsY3VsYXRlQWxsUGFuZXMoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX2xpZ2h0VXBkYXRlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9iYXJTcGFjaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZztcbiAgICB9XG4gICAgX2ludGVybmFsX3NldEJhclNwYWNpbmcobmV3QmFyU3BhY2luZykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRCYXJTcGFjaW5nKG5ld0JhclNwYWNpbmcpO1xuICAgICAgICAvLyBkbyBub3QgYWxsb3cgc2Nyb2xsIG91dCBvZiB2aXNpYmxlIGJhcnNcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29ycmVjdE9mZnNldCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfcmVjYWxjdWxhdGVBbGxQYW5lcygpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfbGlnaHRVcGRhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JpZ2h0T2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmlnaHRPZmZzZXQ7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgX2ludGVybmFsX21hcmtzKCkge1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdGltZU1hcmtzQ2FjaGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX190aW1lTWFya3NDYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzcGFjaW5nID0gdGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZztcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfb3B0aW9ucygpLmxheW91dC5mb250U2l6ZTtcbiAgICAgICAgY29uc3QgcGl4ZWxzUGVyOENoYXJhY3RlcnMgPSAoZm9udFNpemUgKyA0KSAqIDU7XG4gICAgICAgIGNvbnN0IHBpeGVsc1BlckNoYXJhY3RlciA9IHBpeGVsc1BlcjhDaGFyYWN0ZXJzIC8gZGVmYXVsdFRpY2tNYXJrTWF4Q2hhcmFjdGVyTGVuZ3RoO1xuICAgICAgICBjb25zdCBtYXhMYWJlbFdpZHRoID0gcGl4ZWxzUGVyQ2hhcmFjdGVyICogKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMudGlja01hcmtNYXhDaGFyYWN0ZXJMZW5ndGggfHwgZGVmYXVsdFRpY2tNYXJrTWF4Q2hhcmFjdGVyTGVuZ3RoKTtcbiAgICAgICAgY29uc3QgaW5kZXhQZXJMYWJlbCA9IE1hdGgucm91bmQobWF4TGFiZWxXaWR0aCAvIHNwYWNpbmcpO1xuICAgICAgICBjb25zdCB2aXNpYmxlQmFycyA9IGVuc3VyZU5vdE51bGwodGhpcy5faW50ZXJuYWxfdmlzaWJsZVN0cmljdFJhbmdlKCkpO1xuICAgICAgICBjb25zdCBmaXJzdEJhciA9IE1hdGgubWF4KHZpc2libGVCYXJzLl9pbnRlcm5hbF9sZWZ0KCksIHZpc2libGVCYXJzLl9pbnRlcm5hbF9sZWZ0KCkgLSBpbmRleFBlckxhYmVsKTtcbiAgICAgICAgY29uc3QgbGFzdEJhciA9IE1hdGgubWF4KHZpc2libGVCYXJzLl9pbnRlcm5hbF9yaWdodCgpLCB2aXNpYmxlQmFycy5faW50ZXJuYWxfcmlnaHQoKSAtIGluZGV4UGVyTGFiZWwpO1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuX3ByaXZhdGVfX3RpY2tNYXJrcy5faW50ZXJuYWxfYnVpbGQoc3BhY2luZywgbWF4TGFiZWxXaWR0aCk7XG4gICAgICAgIC8vIGFjY29yZGluZyB0byBpbmRleFBlckxhYmVsIHZhbHVlIHRoaXMgdmFsdWUgbWVhbnMgXCJlYXJsaWVzdCBpbmRleCB3aGljaCBfbWlnaHQgYmVfIHVzZWQgYXMgdGhlIHNlY29uZCBsYWJlbCBvbiB0aW1lIHNjYWxlXCJcbiAgICAgICAgY29uc3QgZWFybGllc3RJbmRleE9mU2Vjb25kTGFiZWwgPSB0aGlzLl9wcml2YXRlX19maXJzdEluZGV4KCkgKyBpbmRleFBlckxhYmVsO1xuICAgICAgICAvLyBhY2NvcmRpbmcgdG8gaW5kZXhQZXJMYWJlbCB2YWx1ZSB0aGlzIHZhbHVlIG1lYW5zIFwiZWFybGllc3QgaW5kZXggd2hpY2ggX21pZ2h0IGJlXyB1c2VkIGFzIHRoZSBzZWNvbmQgbGFzdCBsYWJlbCBvbiB0aW1lIHNjYWxlXCJcbiAgICAgICAgY29uc3QgaW5kZXhPZlNlY29uZExhc3RMYWJlbCA9IHRoaXMuX3ByaXZhdGVfX2xhc3RJbmRleCgpIC0gaW5kZXhQZXJMYWJlbDtcbiAgICAgICAgY29uc3QgaXNBbGxTY2FsaW5nQW5kU2Nyb2xsaW5nRGlzYWJsZWQgPSB0aGlzLl9wcml2YXRlX19pc0FsbFNjYWxpbmdBbmRTY3JvbGxpbmdEaXNhYmxlZCgpO1xuICAgICAgICBjb25zdCBpc0xlZnRFZGdlRml4ZWQgPSB0aGlzLl9wcml2YXRlX19vcHRpb25zLmZpeExlZnRFZGdlIHx8IGlzQWxsU2NhbGluZ0FuZFNjcm9sbGluZ0Rpc2FibGVkO1xuICAgICAgICBjb25zdCBpc1JpZ2h0RWRnZUZpeGVkID0gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5maXhSaWdodEVkZ2UgfHwgaXNBbGxTY2FsaW5nQW5kU2Nyb2xsaW5nRGlzYWJsZWQ7XG4gICAgICAgIGxldCB0YXJnZXRJbmRleCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgdG0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgIGlmICghKGZpcnN0QmFyIDw9IHRtLmluZGV4ICYmIHRtLmluZGV4IDw9IGxhc3RCYXIpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbGFiZWw7XG4gICAgICAgICAgICBpZiAodGFyZ2V0SW5kZXggPCB0aGlzLl9wcml2YXRlX19sYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSB0aGlzLl9wcml2YXRlX19sYWJlbHNbdGFyZ2V0SW5kZXhdO1xuICAgICAgICAgICAgICAgIGxhYmVsLmNvb3JkID0gdGhpcy5faW50ZXJuYWxfaW5kZXhUb0Nvb3JkaW5hdGUodG0uaW5kZXgpO1xuICAgICAgICAgICAgICAgIGxhYmVsLmxhYmVsID0gdGhpcy5fcHJpdmF0ZV9fZm9ybWF0TGFiZWwodG0pO1xuICAgICAgICAgICAgICAgIGxhYmVsLndlaWdodCA9IHRtLndlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsID0ge1xuICAgICAgICAgICAgICAgICAgICBuZWVkQWxpZ25Db29yZGluYXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29vcmQ6IHRoaXMuX2ludGVybmFsX2luZGV4VG9Db29yZGluYXRlKHRtLmluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuX3ByaXZhdGVfX2Zvcm1hdExhYmVsKHRtKSxcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiB0bS53ZWlnaHQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sYWJlbHMucHVzaChsYWJlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZyA+IChtYXhMYWJlbFdpZHRoIC8gMikgJiYgIWlzQWxsU2NhbGluZ0FuZFNjcm9sbGluZ0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgZW5vdWdoIHNwYWNlIHRoZW4gbGV0J3Mgc2hvdyBhbGwgdGljayBtYXJrcyBhcyB1c3VhbFxuICAgICAgICAgICAgICAgIGxhYmVsLm5lZWRBbGlnbkNvb3JkaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGlmIGEgdXNlciBpcyBhYmxlIHRvIHNjcm9sbCBhZnRlciBhIHRpY2sgbWFyayB0aGVuIHNob3cgaXQgYXMgdXN1YWwsIG90aGVyd2lzZSB0aGUgY29vcmRpbmF0ZSBtaWdodCBiZSBhbGlnbmVkXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGluZGV4IGlzIGZvciB0aGUgc2Vjb25kIChsYXN0KSBsYWJlbCBvciBsYXRlciAoZWFybGllcikgdGhlbiBtb3N0IGxpa2VseSB0aGlzIGxhYmVsIG1pZ2h0IGJlIGRpc3BsYXllZCB3aXRob3V0IGNvcnJlY3RpbmcgdGhlIGNvb3JkaW5hdGVcbiAgICAgICAgICAgICAgICBsYWJlbC5uZWVkQWxpZ25Db29yZGluYXRlID0gKGlzTGVmdEVkZ2VGaXhlZCAmJiB0bS5pbmRleCA8PSBlYXJsaWVzdEluZGV4T2ZTZWNvbmRMYWJlbCkgfHwgKGlzUmlnaHRFZGdlRml4ZWQgJiYgdG0uaW5kZXggPj0gaW5kZXhPZlNlY29uZExhc3RMYWJlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xhYmVscy5sZW5ndGggPSB0YXJnZXRJbmRleDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZU1hcmtzQ2FjaGUgPSB0aGlzLl9wcml2YXRlX19sYWJlbHM7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19sYWJlbHM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZXN0b3JlRGVmYXVsdCgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZVJhbmdlSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRCYXJTcGFjaW5nKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuYmFyU3BhY2luZyk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3NldFJpZ2h0T2Zmc2V0KHRoaXMuX3ByaXZhdGVfX29wdGlvbnMucmlnaHRPZmZzZXQpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0QmFzZUluZGV4KGJhc2VJbmRleCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX192aXNpYmxlUmFuZ2VJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Jhc2VJbmRleE9yTnVsbCA9IGJhc2VJbmRleDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29ycmVjdE9mZnNldCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kb0ZpeExlZnRFZGdlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFpvb20gaW4vb3V0IHRoZSBzY2FsZSBhcm91bmQgYSBgem9vbVBvaW50YCBvbiBgc2NhbGVgIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHpvb21Qb2ludCAtIFggY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgdG8gYXBwbHkgdGhlIHpvb20uXG4gICAgICogSWYgYHJpZ2h0QmFyU3RheXNPblNjcm9sbGAgb3B0aW9uIGlzIGRpc2FibGVkLCB0aGVuIHdpbGwgYmUgdXNlZCB0byByZXN0b3JlIHJpZ2h0IG9mZnNldC5cbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBab29tIHZhbHVlIChpbiAxLzEwIHBhcnRzIG9mIGN1cnJlbnQgYmFyIHNwYWNpbmcpLlxuICAgICAqIE5lZ2F0aXZlIHZhbHVlIG1lYW5zIHpvb20gb3V0LCBwb3NpdGl2ZSAtIHpvb20gaW4uXG4gICAgICovXG4gICAgX2ludGVybmFsX3pvb20oem9vbVBvaW50LCBzY2FsZSkge1xuICAgICAgICBjb25zdCBmbG9hdEluZGV4QXRab29tUG9pbnQgPSB0aGlzLl9wcml2YXRlX19jb29yZGluYXRlVG9GbG9hdEluZGV4KHpvb21Qb2ludCk7XG4gICAgICAgIGNvbnN0IGJhclNwYWNpbmcgPSB0aGlzLl9pbnRlcm5hbF9iYXJTcGFjaW5nKCk7XG4gICAgICAgIGNvbnN0IG5ld0JhclNwYWNpbmcgPSBiYXJTcGFjaW5nICsgc2NhbGUgKiAoYmFyU3BhY2luZyAvIDEwKTtcbiAgICAgICAgLy8gem9vbSBpbi9vdXQgYmFyIHNwYWNpbmdcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfc2V0QmFyU3BhY2luZyhuZXdCYXJTcGFjaW5nKTtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19vcHRpb25zLnJpZ2h0QmFyU3RheXNPblNjcm9sbCkge1xuICAgICAgICAgICAgLy8gYW5kIHRoZW4gY29ycmVjdCByaWdodCBvZmZzZXQgdG8gbW92ZSBpbmRleCB1bmRlciB6b29tUG9pbnQgYmFjayB0byBpdHMgY29vcmRpbmF0ZVxuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfc2V0UmlnaHRPZmZzZXQodGhpcy5faW50ZXJuYWxfcmlnaHRPZmZzZXQoKSArIChmbG9hdEluZGV4QXRab29tUG9pbnQgLSB0aGlzLl9wcml2YXRlX19jb29yZGluYXRlVG9GbG9hdEluZGV4KHpvb21Qb2ludCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RhcnRTY2FsZSh4KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zY3JvbGxTdGFydFBvaW50KSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9lbmRTY3JvbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2NhbGVTdGFydFBvaW50ICE9PSBudWxsIHx8IHRoaXMuX3ByaXZhdGVfX2NvbW1vblRyYW5zaXRpb25TdGFydFN0YXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NjYWxlU3RhcnRQb2ludCA9IHg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NhdmVDb21tb25UcmFuc2l0aW9uc1N0YXJ0U3RhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NjYWxlVG8oeCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fY29tbW9uVHJhbnNpdGlvblN0YXJ0U3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydExlbmd0aEZyb21SaWdodCA9IGNsYW1wKHRoaXMuX3ByaXZhdGVfX3dpZHRoIC0geCwgMCwgdGhpcy5fcHJpdmF0ZV9fd2lkdGgpO1xuICAgICAgICBjb25zdCBjdXJyZW50TGVuZ3RoRnJvbVJpZ2h0ID0gY2xhbXAodGhpcy5fcHJpdmF0ZV9fd2lkdGggLSBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX3NjYWxlU3RhcnRQb2ludCksIDAsIHRoaXMuX3ByaXZhdGVfX3dpZHRoKTtcbiAgICAgICAgaWYgKHN0YXJ0TGVuZ3RoRnJvbVJpZ2h0ID09PSAwIHx8IGN1cnJlbnRMZW5ndGhGcm9tUmlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRCYXJTcGFjaW5nKHRoaXMuX3ByaXZhdGVfX2NvbW1vblRyYW5zaXRpb25TdGFydFN0YXRlLl9pbnRlcm5hbF9iYXJTcGFjaW5nICogc3RhcnRMZW5ndGhGcm9tUmlnaHQgLyBjdXJyZW50TGVuZ3RoRnJvbVJpZ2h0KTtcbiAgICB9XG4gICAgX2ludGVybmFsX2VuZFNjYWxlKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2NhbGVTdGFydFBvaW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2NhbGVTdGFydFBvaW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xlYXJDb21tb25UcmFuc2l0aW9uc1N0YXJ0U3RhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3N0YXJ0U2Nyb2xsKHgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Njcm9sbFN0YXJ0UG9pbnQgIT09IG51bGwgfHwgdGhpcy5fcHJpdmF0ZV9fY29tbW9uVHJhbnNpdGlvblN0YXJ0U3RhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2Nyb2xsU3RhcnRQb2ludCA9IHg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NhdmVDb21tb25UcmFuc2l0aW9uc1N0YXJ0U3RhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Njcm9sbFRvKHgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Njcm9sbFN0YXJ0UG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaGlmdEluTG9naWNhbCA9ICh0aGlzLl9wcml2YXRlX19zY3JvbGxTdGFydFBvaW50IC0geCkgLyB0aGlzLl9pbnRlcm5hbF9iYXJTcGFjaW5nKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JpZ2h0T2Zmc2V0ID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19jb21tb25UcmFuc2l0aW9uU3RhcnRTdGF0ZSkuX2ludGVybmFsX3JpZ2h0T2Zmc2V0ICsgc2hpZnRJbkxvZ2ljYWw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gZG8gbm90IGFsbG93IHNjcm9sbCBvdXQgb2YgdmlzaWJsZSBiYXJzXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvcnJlY3RPZmZzZXQoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2VuZFNjcm9sbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Njcm9sbFN0YXJ0UG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19zY3JvbGxTdGFydFBvaW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xlYXJDb21tb25UcmFuc2l0aW9uc1N0YXJ0U3RhdGUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Njcm9sbFRvUmVhbFRpbWUoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3Njcm9sbFRvT2Zmc2V0QW5pbWF0ZWQodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5yaWdodE9mZnNldCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zY3JvbGxUb09mZnNldEFuaW1hdGVkKG9mZnNldCwgYW5pbWF0aW9uRHVyYXRpb24gPSA0MDAgLyogQ29uc3RhbnRzLkRlZmF1bHRBbmltYXRpb25EdXJhdGlvbiAqLykge1xuICAgICAgICBpZiAoIWlzRmluaXRlKG9mZnNldCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgZmluaXRlIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNGaW5pdGUoYW5pbWF0aW9uRHVyYXRpb24pIHx8IGFuaW1hdGlvbkR1cmF0aW9uIDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdhbmltYXRpb25EdXJhdGlvbiAob3B0aW9uYWwpIG11c3QgYmUgZmluaXRlIHBvc2l0aXZlIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuX3ByaXZhdGVfX3JpZ2h0T2Zmc2V0O1xuICAgICAgICBjb25zdCBhbmltYXRpb25TdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfc2V0VGltZVNjYWxlQW5pbWF0aW9uKHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9maW5pc2hlZDogKHRpbWUpID0+ICh0aW1lIC0gYW5pbWF0aW9uU3RhcnQpIC8gYW5pbWF0aW9uRHVyYXRpb24gPj0gMSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9nZXRQb3NpdGlvbjogKHRpbWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25Qcm9ncmVzcyA9ICh0aW1lIC0gYW5pbWF0aW9uU3RhcnQpIC8gYW5pbWF0aW9uRHVyYXRpb247XG4gICAgICAgICAgICAgICAgY29uc3QgZmluaXNoQW5pbWF0aW9uID0gYW5pbWF0aW9uUHJvZ3Jlc3MgPj0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmluaXNoQW5pbWF0aW9uID8gb2Zmc2V0IDogc291cmNlICsgKG9mZnNldCAtIHNvdXJjZSkgKiBhbmltYXRpb25Qcm9ncmVzcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlKG5ld1BvaW50cywgZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX192aXNpYmxlUmFuZ2VJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BvaW50cyA9IG5ld1BvaW50cztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGlja01hcmtzLl9pbnRlcm5hbF9zZXRUaW1lU2NhbGVQb2ludHMobmV3UG9pbnRzLCBmaXJzdENoYW5nZWRQb2ludEluZGV4KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29ycmVjdE9mZnNldCgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdmlzaWJsZUJhcnNDaGFuZ2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZUJhcnNDaGFuZ2VkO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbG9naWNhbFJhbmdlQ2hhbmdlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2xvZ2ljYWxSYW5nZUNoYW5nZWQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9vcHRpb25zQXBwbGllZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnNBcHBsaWVkO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYmFzZUluZGV4KCkge1xuICAgICAgICAvLyBudWxsIGlzIHVzZWQgdG8ga25vd24gdGhhdCBiYXNlSW5kZXggaXMgbm90IHNldCB5ZXRcbiAgICAgICAgLy8gc28gaW4gbWV0aG9kcyB3aGljaCBzaG91bGQga25vd24gd2hldGhlciBpdCBpcyBzZXQgb3Igbm90XG4gICAgICAgIC8vIHdlIHNob3VsZCBjaGVjayBmaWVsZCBgX2Jhc2VJbmRleE9yTnVsbGAgaW5zdGVhZCBvZiBnZXR0ZXIgYGJhc2VJbmRleCgpYFxuICAgICAgICAvLyBzZWUgbWluUmlnaHRPZmZzZXQgZm9yIGV4YW1wbGVcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2Jhc2VJbmRleE9yTnVsbCB8fCAwO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0VmlzaWJsZVJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHJhbmdlLl9pbnRlcm5hbF9jb3VudCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRCYXJTcGFjaW5nKHRoaXMuX3ByaXZhdGVfX3dpZHRoIC8gbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRPZmZzZXQgPSByYW5nZS5faW50ZXJuYWxfcmlnaHQoKSAtIHRoaXMuX2ludGVybmFsX2Jhc2VJbmRleCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jb3JyZWN0T2Zmc2V0KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3JlY2FsY3VsYXRlQWxsUGFuZXMoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX2xpZ2h0VXBkYXRlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9maXRDb250ZW50KCkge1xuICAgICAgICBjb25zdCBmaXJzdCA9IHRoaXMuX3ByaXZhdGVfX2ZpcnN0SW5kZXgoKTtcbiAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMuX3ByaXZhdGVfX2xhc3RJbmRleCgpO1xuICAgICAgICBpZiAoZmlyc3QgPT09IG51bGwgfHwgbGFzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3NldFZpc2libGVSYW5nZShuZXcgUmFuZ2VJbXBsKGZpcnN0LCBsYXN0ICsgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5yaWdodE9mZnNldCkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0TG9naWNhbFJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGJhclJhbmdlID0gbmV3IFJhbmdlSW1wbChyYW5nZS5mcm9tLCByYW5nZS50byk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3NldFZpc2libGVSYW5nZShiYXJSYW5nZSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9mb3JtYXREYXRlVGltZSh0aW1lU2NhbGVQb2ludCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fbG9jYWxpemF0aW9uT3B0aW9ucy50aW1lRm9ybWF0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19sb2NhbGl6YXRpb25PcHRpb25zLnRpbWVGb3JtYXR0ZXIodGltZVNjYWxlUG9pbnQub3JpZ2luYWxUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IuZm9ybWF0SG9yekl0ZW0odGltZVNjYWxlUG9pbnQudGltZSk7XG4gICAgfVxuICAgIF9wcml2YXRlX19pc0FsbFNjYWxpbmdBbmRTY3JvbGxpbmdEaXNhYmxlZCgpIHtcbiAgICAgICAgY29uc3QgeyBoYW5kbGVTY3JvbGwsIGhhbmRsZVNjYWxlIH0gPSB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICByZXR1cm4gIWhhbmRsZVNjcm9sbC5ob3J6VG91Y2hEcmFnXG4gICAgICAgICAgICAmJiAhaGFuZGxlU2Nyb2xsLm1vdXNlV2hlZWxcbiAgICAgICAgICAgICYmICFoYW5kbGVTY3JvbGwucHJlc3NlZE1vdXNlTW92ZVxuICAgICAgICAgICAgJiYgIWhhbmRsZVNjcm9sbC52ZXJ0VG91Y2hEcmFnXG4gICAgICAgICAgICAmJiAhaGFuZGxlU2NhbGUuYXhpc0RvdWJsZUNsaWNrUmVzZXQudGltZVxuICAgICAgICAgICAgJiYgIWhhbmRsZVNjYWxlLmF4aXNQcmVzc2VkTW91c2VNb3ZlLnRpbWVcbiAgICAgICAgICAgICYmICFoYW5kbGVTY2FsZS5tb3VzZVdoZWVsXG4gICAgICAgICAgICAmJiAhaGFuZGxlU2NhbGUucGluY2g7XG4gICAgfVxuICAgIF9wcml2YXRlX19maXJzdEluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcG9pbnRzLmxlbmd0aCA9PT0gMCA/IG51bGwgOiAwO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fbGFzdEluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcG9pbnRzLmxlbmd0aCA9PT0gMCA/IG51bGwgOiAodGhpcy5fcHJpdmF0ZV9fcG9pbnRzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fcmlnaHRPZmZzZXRGb3JDb29yZGluYXRlKHgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9wcml2YXRlX193aWR0aCAtIDEgLSB4KSAvIHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmc7XG4gICAgfVxuICAgIF9wcml2YXRlX19jb29yZGluYXRlVG9GbG9hdEluZGV4KHgpIHtcbiAgICAgICAgY29uc3QgZGVsdGFGcm9tUmlnaHQgPSB0aGlzLl9wcml2YXRlX19yaWdodE9mZnNldEZvckNvb3JkaW5hdGUoeCk7XG4gICAgICAgIGNvbnN0IGJhc2VJbmRleCA9IHRoaXMuX2ludGVybmFsX2Jhc2VJbmRleCgpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGJhc2VJbmRleCArIHRoaXMuX3ByaXZhdGVfX3JpZ2h0T2Zmc2V0IC0gZGVsdGFGcm9tUmlnaHQ7XG4gICAgICAgIC8vIEphdmFTY3JpcHQgdXNlcyB2ZXJ5IHN0cmFuZ2Ugcm91bmRpbmdcbiAgICAgICAgLy8gd2UgbmVlZCByb3VuZGluZyB0byBhdm9pZCBwcm9ibGVtcyB3aXRoIGNhbGN1bGF0aW9uIGVycm9yc1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChpbmRleCAqIDEwMDAwMDApIC8gMTAwMDAwMDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3NldEJhclNwYWNpbmcobmV3QmFyU3BhY2luZykge1xuICAgICAgICBjb25zdCBvbGRCYXJTcGFjaW5nID0gdGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZyA9IG5ld0JhclNwYWNpbmc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvcnJlY3RCYXJTcGFjaW5nKCk7XG4gICAgICAgIC8vIHRoaXMuX2JhclNwYWNpbmcgbWlnaHQgYmUgY2hhbmdlZCBpbiBfY29ycmVjdEJhclNwYWNpbmdcbiAgICAgICAgaWYgKG9sZEJhclNwYWNpbmcgIT09IHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Jlc2V0VGltZU1hcmtzQ2FjaGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fdXBkYXRlVmlzaWJsZVJhbmdlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZVJhbmdlSW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2V0VmlzaWJsZVJhbmdlKFRpbWVTY2FsZVZpc2libGVSYW5nZS5faW50ZXJuYWxfaW52YWxpZCgpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXNlSW5kZXggPSB0aGlzLl9pbnRlcm5hbF9iYXNlSW5kZXgoKTtcbiAgICAgICAgY29uc3QgbmV3QmFyc0xlbmd0aCA9IHRoaXMuX3ByaXZhdGVfX3dpZHRoIC8gdGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZztcbiAgICAgICAgY29uc3QgcmlnaHRCb3JkZXIgPSB0aGlzLl9wcml2YXRlX19yaWdodE9mZnNldCArIGJhc2VJbmRleDtcbiAgICAgICAgY29uc3QgbGVmdEJvcmRlciA9IHJpZ2h0Qm9yZGVyIC0gbmV3QmFyc0xlbmd0aCArIDE7XG4gICAgICAgIGNvbnN0IGxvZ2ljYWxSYW5nZSA9IG5ldyBSYW5nZUltcGwobGVmdEJvcmRlciwgcmlnaHRCb3JkZXIpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRWaXNpYmxlUmFuZ2UobmV3IFRpbWVTY2FsZVZpc2libGVSYW5nZShsb2dpY2FsUmFuZ2UpKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2NvcnJlY3RCYXJTcGFjaW5nKCkge1xuICAgICAgICBjb25zdCBtaW5CYXJTcGFjaW5nID0gdGhpcy5fcHJpdmF0ZV9fbWluQmFyU3BhY2luZygpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZyA8IG1pbkJhclNwYWNpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2JhclNwYWNpbmcgPSBtaW5CYXJTcGFjaW5nO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZVJhbmdlSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX193aWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhpcyAoMSAvIENvbnN0YW50cy5NaW5WaXNpYmxlQmFyc0NvdW50KSA+PSBjb2VmZiBpbiBtYXggYmFyIHNwYWNpbmcgKGl0J3MgMC41IGhlcmUpXG4gICAgICAgICAgICBjb25zdCBtYXhCYXJTcGFjaW5nID0gdGhpcy5fcHJpdmF0ZV9fd2lkdGggKiAwLjU7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fYmFyU3BhY2luZyA+IG1heEJhclNwYWNpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19iYXJTcGFjaW5nID0gbWF4QmFyU3BhY2luZztcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX192aXNpYmxlUmFuZ2VJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX21pbkJhclNwYWNpbmcoKSB7XG4gICAgICAgIC8vIGlmIGJvdGggb3B0aW9ucyBhcmUgZW5hYmxlZCB0aGVuIGxpbWl0IGJhciBzcGFjaW5nIHNvIHRoYXQgem9vbWluZy1vdXQgaXMgbm90IHBvc3NpYmxlXG4gICAgICAgIC8vIGlmIGl0IHdvdWxkIGNhdXNlIGVpdGhlciB0aGUgZmlyc3Qgb3IgbGFzdCBwb2ludHMgdG8gbW92ZSB0b28gZmFyIGZyb20gYW4gZWRnZVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5maXhMZWZ0RWRnZSAmJiB0aGlzLl9wcml2YXRlX19vcHRpb25zLmZpeFJpZ2h0RWRnZSAmJiB0aGlzLl9wcml2YXRlX19wb2ludHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fd2lkdGggLyB0aGlzLl9wcml2YXRlX19wb2ludHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zLm1pbkJhclNwYWNpbmc7XG4gICAgfVxuICAgIF9wcml2YXRlX19jb3JyZWN0T2Zmc2V0KCkge1xuICAgICAgICAvLyBibG9jayBzY3JvbGxpbmcgb2YgdG8gcGFzdFxuICAgICAgICBjb25zdCBtaW5SaWdodE9mZnNldCA9IHRoaXMuX3ByaXZhdGVfX21pblJpZ2h0T2Zmc2V0KCk7XG4gICAgICAgIGlmIChtaW5SaWdodE9mZnNldCAhPT0gbnVsbCAmJiB0aGlzLl9wcml2YXRlX19yaWdodE9mZnNldCA8IG1pblJpZ2h0T2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodE9mZnNldCA9IG1pblJpZ2h0T2Zmc2V0O1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZVJhbmdlSW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGJsb2NrIHNjcm9sbGluZyBvZiB0byBmdXR1cmVcbiAgICAgICAgY29uc3QgbWF4UmlnaHRPZmZzZXQgPSB0aGlzLl9wcml2YXRlX19tYXhSaWdodE9mZnNldCgpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcmlnaHRPZmZzZXQgPiBtYXhSaWdodE9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRPZmZzZXQgPSBtYXhSaWdodE9mZnNldDtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fbWluUmlnaHRPZmZzZXQoKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0SW5kZXggPSB0aGlzLl9wcml2YXRlX19maXJzdEluZGV4KCk7XG4gICAgICAgIGNvbnN0IGJhc2VJbmRleCA9IHRoaXMuX3ByaXZhdGVfX2Jhc2VJbmRleE9yTnVsbDtcbiAgICAgICAgaWYgKGZpcnN0SW5kZXggPT09IG51bGwgfHwgYmFzZUluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJzRXN0aW1hdGlvbiA9IHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuZml4TGVmdEVkZ2VcbiAgICAgICAgICAgID8gdGhpcy5fcHJpdmF0ZV9fd2lkdGggLyB0aGlzLl9wcml2YXRlX19iYXJTcGFjaW5nXG4gICAgICAgICAgICA6IE1hdGgubWluKDIgLyogQ29uc3RhbnRzLk1pblZpc2libGVCYXJzQ291bnQgKi8sIHRoaXMuX3ByaXZhdGVfX3BvaW50cy5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gZmlyc3RJbmRleCAtIGJhc2VJbmRleCAtIDEgKyBiYXJzRXN0aW1hdGlvbjtcbiAgICB9XG4gICAgX3ByaXZhdGVfX21heFJpZ2h0T2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5maXhSaWdodEVkZ2VcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiAodGhpcy5fcHJpdmF0ZV9fd2lkdGggLyB0aGlzLl9wcml2YXRlX19iYXJTcGFjaW5nKSAtIE1hdGgubWluKDIgLyogQ29uc3RhbnRzLk1pblZpc2libGVCYXJzQ291bnQgKi8sIHRoaXMuX3ByaXZhdGVfX3BvaW50cy5sZW5ndGgpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2F2ZUNvbW1vblRyYW5zaXRpb25zU3RhcnRTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29tbW9uVHJhbnNpdGlvblN0YXJ0U3RhdGUgPSB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfYmFyU3BhY2luZzogdGhpcy5faW50ZXJuYWxfYmFyU3BhY2luZygpLFxuICAgICAgICAgICAgX2ludGVybmFsX3JpZ2h0T2Zmc2V0OiB0aGlzLl9pbnRlcm5hbF9yaWdodE9mZnNldCgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fY2xlYXJDb21tb25UcmFuc2l0aW9uc1N0YXJ0U3RhdGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvbW1vblRyYW5zaXRpb25TdGFydFN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2Zvcm1hdExhYmVsKHRpY2tNYXJrKSB7XG4gICAgICAgIGxldCBmb3JtYXR0ZXIgPSB0aGlzLl9wcml2YXRlX19mb3JtYXR0ZWRCeVdlaWdodC5nZXQodGlja01hcmsud2VpZ2h0KTtcbiAgICAgICAgaWYgKGZvcm1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZXIgPSBuZXcgRm9ybWF0dGVkTGFiZWxzQ2FjaGUoKG1hcmspID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZm9ybWF0TGFiZWxJbXBsKG1hcmspO1xuICAgICAgICAgICAgfSwgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZm9ybWF0dGVkQnlXZWlnaHQuc2V0KHRpY2tNYXJrLndlaWdodCwgZm9ybWF0dGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0dGVyLl9pbnRlcm5hbF9mb3JtYXQodGlja01hcmspO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZm9ybWF0TGFiZWxJbXBsKHRpY2tNYXJrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5mb3JtYXRUaWNrbWFyayh0aWNrTWFyaywgdGhpcy5fcHJpdmF0ZV9fbG9jYWxpemF0aW9uT3B0aW9ucyk7XG4gICAgfVxuICAgIF9wcml2YXRlX19zZXRWaXNpYmxlUmFuZ2UobmV3VmlzaWJsZVJhbmdlKSB7XG4gICAgICAgIGNvbnN0IG9sZFZpc2libGVSYW5nZSA9IHRoaXMuX3ByaXZhdGVfX3Zpc2libGVSYW5nZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZVJhbmdlID0gbmV3VmlzaWJsZVJhbmdlO1xuICAgICAgICBpZiAoIWFyZVJhbmdlc0VxdWFsKG9sZFZpc2libGVSYW5nZS5faW50ZXJuYWxfc3RyaWN0UmFuZ2UoKSwgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZVJhbmdlLl9pbnRlcm5hbF9zdHJpY3RSYW5nZSgpKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZUJhcnNDaGFuZ2VkLl9pbnRlcm5hbF9maXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmVSYW5nZXNFcXVhbChvbGRWaXNpYmxlUmFuZ2UuX2ludGVybmFsX2xvZ2ljYWxSYW5nZSgpLCB0aGlzLl9wcml2YXRlX192aXNpYmxlUmFuZ2UuX2ludGVybmFsX2xvZ2ljYWxSYW5nZSgpKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9naWNhbFJhbmdlQ2hhbmdlZC5faW50ZXJuYWxfZmlyZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHJlc2V0IG9ubHkgY29vcmRzIGluIGNhc2Ugd2hlbiB0aGlzLl92aXNpYmxlQmFycyBoYXMgbm90IGJlZW4gY2hhbmdlZFxuICAgICAgICB0aGlzLl9wcml2YXRlX19yZXNldFRpbWVNYXJrc0NhY2hlKCk7XG4gICAgfVxuICAgIF9wcml2YXRlX19yZXNldFRpbWVNYXJrc0NhY2hlKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lTWFya3NDYWNoZSA9IG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX19pbnZhbGlkYXRlVGlja01hcmtzKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZXNldFRpbWVNYXJrc0NhY2hlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Zvcm1hdHRlZEJ5V2VpZ2h0LmNsZWFyKCk7XG4gICAgfVxuICAgIF9wcml2YXRlX191cGRhdGVEYXRlVGltZUZvcm1hdHRlcigpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IudXBkYXRlRm9ybWF0dGVyKHRoaXMuX3ByaXZhdGVfX2xvY2FsaXphdGlvbk9wdGlvbnMpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZG9GaXhMZWZ0RWRnZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19vcHRpb25zLmZpeExlZnRFZGdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RJbmRleCA9IHRoaXMuX3ByaXZhdGVfX2ZpcnN0SW5kZXgoKTtcbiAgICAgICAgaWYgKGZpcnN0SW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aXNpYmxlUmFuZ2UgPSB0aGlzLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgaWYgKHZpc2libGVSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlbHRhID0gdmlzaWJsZVJhbmdlLl9pbnRlcm5hbF9sZWZ0KCkgLSBmaXJzdEluZGV4O1xuICAgICAgICBpZiAoZGVsdGEgPCAwKSB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0RWRnZU9mZnNldCA9IHRoaXMuX3ByaXZhdGVfX3JpZ2h0T2Zmc2V0IC0gZGVsdGEgLSAxO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfc2V0UmlnaHRPZmZzZXQobGVmdEVkZ2VPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvcnJlY3RCYXJTcGFjaW5nKCk7XG4gICAgfVxuICAgIF9wcml2YXRlX19kb0ZpeFJpZ2h0RWRnZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29ycmVjdE9mZnNldCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jb3JyZWN0QmFyU3BhY2luZygpO1xuICAgIH1cbn1cblxuY2xhc3MgTWVkaWFDb29yZGluYXRlc1BhbmVSZW5kZXJlciB7XG4gICAgX2ludGVybmFsX2RyYXcodGFyZ2V0LCBpc0hvdmVyZWQsIGhpdFRlc3REYXRhKSB7XG4gICAgICAgIHRhcmdldC51c2VNZWRpYUNvb3JkaW5hdGVTcGFjZSgoc2NvcGUpID0+IHRoaXMuX2ludGVybmFsX19kcmF3SW1wbChzY29wZSwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZHJhd0JhY2tncm91bmQodGFyZ2V0LCBpc0hvdmVyZWQsIGhpdFRlc3REYXRhKSB7XG4gICAgICAgIHRhcmdldC51c2VNZWRpYUNvb3JkaW5hdGVTcGFjZSgoc2NvcGUpID0+IHRoaXMuX2ludGVybmFsX19kcmF3QmFja2dyb3VuZEltcGwoc2NvcGUsIGlzSG92ZXJlZCwgaGl0VGVzdERhdGEpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX19kcmF3QmFja2dyb3VuZEltcGwocmVuZGVyaW5nU2NvcGUsIGlzSG92ZXJlZCwgaGl0VGVzdERhdGEpIHsgfVxufVxuXG5jbGFzcyBXYXRlcm1hcmtSZW5kZXJlciBleHRlbmRzIE1lZGlhQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWV0cmljc0NhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgX2ludGVybmFsX19kcmF3SW1wbChyZW5kZXJpbmdTY29wZSkgeyB9XG4gICAgX2ludGVybmFsX19kcmF3QmFja2dyb3VuZEltcGwocmVuZGVyaW5nU2NvcGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBjb250ZXh0OiBjdHgsIG1lZGlhU2l6ZSB9ID0gcmVuZGVyaW5nU2NvcGU7XG4gICAgICAgIGxldCB0ZXh0SGVpZ2h0ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIHRoaXMuX3ByaXZhdGVfX2RhdGEuX2ludGVybmFsX2xpbmVzKSB7XG4gICAgICAgICAgICBpZiAobGluZS5faW50ZXJuYWxfdGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5mb250ID0gbGluZS5faW50ZXJuYWxfZm9udDtcbiAgICAgICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IHRoaXMuX3ByaXZhdGVfX21ldHJpY3MoY3R4LCBsaW5lLl9pbnRlcm5hbF90ZXh0KTtcbiAgICAgICAgICAgIGlmICh0ZXh0V2lkdGggPiBtZWRpYVNpemUud2lkdGgpIHtcbiAgICAgICAgICAgICAgICBsaW5lLl9pbnRlcm5hbF96b29tID0gbWVkaWFTaXplLndpZHRoIC8gdGV4dFdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZS5faW50ZXJuYWxfem9vbSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0SGVpZ2h0ICs9IGxpbmUuX2ludGVybmFsX2xpbmVIZWlnaHQgKiBsaW5lLl9pbnRlcm5hbF96b29tO1xuICAgICAgICB9XG4gICAgICAgIGxldCB2ZXJ0T2Zmc2V0ID0gMDtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF92ZXJ0QWxpZ24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgdmVydE9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgICAgIHZlcnRPZmZzZXQgPSBNYXRoLm1heCgobWVkaWFTaXplLmhlaWdodCAtIHRleHRIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgIHZlcnRPZmZzZXQgPSBNYXRoLm1heCgobWVkaWFTaXplLmhlaWdodCAtIHRleHRIZWlnaHQpLCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfY29sb3I7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiB0aGlzLl9wcml2YXRlX19kYXRhLl9pbnRlcm5hbF9saW5lcykge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGxldCBob3J6T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fcHJpdmF0ZV9fZGF0YS5faW50ZXJuYWxfaG9yekFsaWduKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIGhvcnpPZmZzZXQgPSBsaW5lLl9pbnRlcm5hbF9saW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICBob3J6T2Zmc2V0ID0gbWVkaWFTaXplLndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgaG9yek9mZnNldCA9IG1lZGlhU2l6ZS53aWR0aCAtIDEgLSBsaW5lLl9pbnRlcm5hbF9saW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHgudHJhbnNsYXRlKGhvcnpPZmZzZXQsIHZlcnRPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBsaW5lLl9pbnRlcm5hbF9mb250O1xuICAgICAgICAgICAgY3R4LnNjYWxlKGxpbmUuX2ludGVybmFsX3pvb20sIGxpbmUuX2ludGVybmFsX3pvb20pO1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGxpbmUuX2ludGVybmFsX3RleHQsIDAsIGxpbmUuX2ludGVybmFsX3ZlcnRPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIHZlcnRPZmZzZXQgKz0gbGluZS5faW50ZXJuYWxfbGluZUhlaWdodCAqIGxpbmUuX2ludGVybmFsX3pvb207XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX21ldHJpY3MoY3R4LCB0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGZvbnRDYWNoZSA9IHRoaXMuX3ByaXZhdGVfX2ZvbnRDYWNoZShjdHguZm9udCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBmb250Q2FjaGUuZ2V0KHRleHQpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGN0eC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbiAgICAgICAgICAgIGZvbnRDYWNoZS5zZXQodGV4dCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZm9udENhY2hlKGZvbnQpIHtcbiAgICAgICAgbGV0IGZvbnRDYWNoZSA9IHRoaXMuX3ByaXZhdGVfX21ldHJpY3NDYWNoZS5nZXQoZm9udCk7XG4gICAgICAgIGlmIChmb250Q2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9udENhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWV0cmljc0NhY2hlLnNldChmb250LCBmb250Q2FjaGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb250Q2FjaGU7XG4gICAgfVxufVxuXG5jbGFzcyBXYXRlcm1hcmtQYW5lVmlldyB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJEYXRhID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX3Zpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgX2ludGVybmFsX2NvbG9yOiAnJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9saW5lczogW10sXG4gICAgICAgICAgICBfaW50ZXJuYWxfdmVydEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ob3J6QWxpZ246ICdjZW50ZXInLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlciA9IG5ldyBXYXRlcm1hcmtSZW5kZXJlcih0aGlzLl9wcml2YXRlX19yZW5kZXJlckRhdGEpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlbmRlcmVyKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZUltcGwoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fdXBkYXRlSW1wbCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX3NvdXJjZS5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJEYXRhO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF92aXNpYmxlID0gb3B0aW9ucy52aXNpYmxlO1xuICAgICAgICBpZiAoIWRhdGEuX2ludGVybmFsX3Zpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLl9pbnRlcm5hbF9jb2xvciA9IG9wdGlvbnMuY29sb3I7XG4gICAgICAgIGRhdGEuX2ludGVybmFsX2hvcnpBbGlnbiA9IG9wdGlvbnMuaG9yekFsaWduO1xuICAgICAgICBkYXRhLl9pbnRlcm5hbF92ZXJ0QWxpZ24gPSBvcHRpb25zLnZlcnRBbGlnbjtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfbGluZXMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3RleHQ6IG9wdGlvbnMudGV4dCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfZm9udDogbWFrZUZvbnQob3B0aW9ucy5mb250U2l6ZSwgb3B0aW9ucy5mb250RmFtaWx5LCBvcHRpb25zLmZvbnRTdHlsZSksXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2xpbmVIZWlnaHQ6IG9wdGlvbnMuZm9udFNpemUgKiAxLjIsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3ZlcnRPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3pvb206IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cbn1cblxuY2xhc3MgV2F0ZXJtYXJrIGV4dGVuZHMgRGF0YVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IobW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVWaWV3ID0gbmV3IFdhdGVybWFya1BhbmVWaWV3KHRoaXMpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VBeGlzVmlld3MoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgX2ludGVybmFsX3BhbmVWaWV3cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLl9wcml2YXRlX19wYW5lVmlld107XG4gICAgfVxuICAgIF9pbnRlcm5hbF9vcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucztcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZUFsbFZpZXdzKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lVmlldy5faW50ZXJuYWxfdXBkYXRlKCk7XG4gICAgfVxufVxuXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIl9idWlsZC10aW1lLWNvbnN0YW50c1wiIC8+XG4vKipcbiAqIERldGVybWluZSBob3cgdG8gZXhpdCB0aGUgdHJhY2tpbmcgbW9kZS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBtb2JpbGUgdXNlcnMgd2lsbCBsb25nIHByZXNzIHRvIGRlYWN0aXZhdGUgdGhlIHNjcm9sbCBhbmQgaGF2ZSB0aGUgYWJpbGl0eSB0byBjaGVjayB2YWx1ZXMgYW5kIGRhdGVzLlxuICogQW5vdGhlciBwcmVzcyBpcyByZXF1aXJlZCB0byBhY3RpdmF0ZSB0aGUgc2Nyb2xsLCBiZSBhYmxlIHRvIG1vdmUgbGVmdC9yaWdodCwgem9vbSwgZXRjLlxuICovXG52YXIgVHJhY2tpbmdNb2RlRXhpdE1vZGU7XG4oZnVuY3Rpb24gKFRyYWNraW5nTW9kZUV4aXRNb2RlKSB7XG4gICAgLyoqXG4gICAgICogVHJhY2tpbmcgTW9kZSB3aWxsIGJlIGRlYWN0aXZhdGVkIG9uIHRvdWNoIGVuZCBldmVudC5cbiAgICAgKi9cbiAgICBUcmFja2luZ01vZGVFeGl0TW9kZVtUcmFja2luZ01vZGVFeGl0TW9kZVtcIk9uVG91Y2hFbmRcIl0gPSAwXSA9IFwiT25Ub3VjaEVuZFwiO1xuICAgIC8qKlxuICAgICAqIFRyYWNraW5nIE1vZGUgd2lsbCBiZSBkZWFjdGl2YXRlZCBvbiB0aGUgbmV4dCB0YXAgZXZlbnQuXG4gICAgICovXG4gICAgVHJhY2tpbmdNb2RlRXhpdE1vZGVbVHJhY2tpbmdNb2RlRXhpdE1vZGVbXCJPbk5leHRUYXBcIl0gPSAxXSA9IFwiT25OZXh0VGFwXCI7XG59KShUcmFja2luZ01vZGVFeGl0TW9kZSB8fCAoVHJhY2tpbmdNb2RlRXhpdE1vZGUgPSB7fSkpO1xuY2xhc3MgQ2hhcnRNb2RlbCB7XG4gICAgY29uc3RydWN0b3IoaW52YWxpZGF0ZUhhbmRsZXIsIG9wdGlvbnMsIGhvcnpTY2FsZUJlaGF2aW9yKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVzID0gW107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc2VzID0gW107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3dpZHRoID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faG92ZXJlZFNvdXJjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGVzT3B0aW9uc0NoYW5nZWQgPSBuZXcgRGVsZWdhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyTW92ZWQgPSBuZXcgRGVsZWdhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZ3JhZGllbnRDb2xvcnNDYWNoZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVIYW5kbGVyID0gaW52YWxpZGF0ZUhhbmRsZXI7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvciA9IGhvcnpTY2FsZUJlaGF2aW9yO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlck9wdGlvbnNQcm92aWRlciA9IG5ldyBQcmljZUF4aXNSZW5kZXJlck9wdGlvbnNQcm92aWRlcih0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlID0gbmV3IFRpbWVTY2FsZSh0aGlzLCBvcHRpb25zLnRpbWVTY2FsZSwgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5sb2NhbGl6YXRpb24sIGhvcnpTY2FsZUJlaGF2aW9yKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyID0gbmV3IENyb3NzaGFpcih0aGlzLCBvcHRpb25zLmNyb3NzaGFpcik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21hZ25ldCA9IG5ldyBNYWduZXQob3B0aW9ucy5jcm9zc2hhaXIpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX193YXRlcm1hcmsgPSBuZXcgV2F0ZXJtYXJrKHRoaXMsIG9wdGlvbnMud2F0ZXJtYXJrKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfY3JlYXRlUGFuZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lc1swXS5faW50ZXJuYWxfc2V0U3RyZXRjaEZhY3RvcihERUZBVUxUX1NUUkVUQ0hfRkFDVE9SICogMik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2JhY2tncm91bmRUb3BDb2xvciA9IHRoaXMuX3ByaXZhdGVfX2dldEJhY2tncm91bmRDb2xvcigwIC8qIEJhY2tncm91bmRDb2xvclNpZGUuVG9wICovKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYmFja2dyb3VuZEJvdHRvbUNvbG9yID0gdGhpcy5fcHJpdmF0ZV9fZ2V0QmFja2dyb3VuZENvbG9yKDEgLyogQmFja2dyb3VuZENvbG9yU2lkZS5Cb3R0b20gKi8pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZnVsbFVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZShJbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfZnVsbCgpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2xpZ2h0VXBkYXRlKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlKEludmFsaWRhdGVNYXNrLl9pbnRlcm5hbF9saWdodCgpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2N1cnNvclVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZShuZXcgSW52YWxpZGF0ZU1hc2soMSAvKiBJbnZhbGlkYXRpb25MZXZlbC5DdXJzb3IgKi8pKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZVNvdXJjZShzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgaW52ID0gdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0aW9uTWFza0ZvclNvdXJjZShzb3VyY2UpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlKGludik7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9ob3ZlcmVkU291cmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9faG92ZXJlZFNvdXJjZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldEhvdmVyZWRTb3VyY2Uoc291cmNlKSB7XG4gICAgICAgIGNvbnN0IHByZXZTb3VyY2UgPSB0aGlzLl9wcml2YXRlX19ob3ZlcmVkU291cmNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ob3ZlcmVkU291cmNlID0gc291cmNlO1xuICAgICAgICBpZiAocHJldlNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlU291cmNlKHByZXZTb3VyY2UuX2ludGVybmFsX3NvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlU291cmNlKHNvdXJjZS5faW50ZXJuYWxfc291cmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBtZXJnZSh0aGlzLl9wcml2YXRlX19vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZXMuZm9yRWFjaCgocCkgPT4gcC5faW50ZXJuYWxfYXBwbHlTY2FsZU9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgICBpZiAob3B0aW9ucy50aW1lU2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucy50aW1lU2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxvY2FsaXphdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX2FwcGx5TG9jYWxpemF0aW9uT3B0aW9ucyhvcHRpb25zLmxvY2FsaXphdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGVmdFByaWNlU2NhbGUgfHwgb3B0aW9ucy5yaWdodFByaWNlU2NhbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGVzT3B0aW9uc0NoYW5nZWQuX2ludGVybmFsX2ZpcmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19iYWNrZ3JvdW5kVG9wQ29sb3IgPSB0aGlzLl9wcml2YXRlX19nZXRCYWNrZ3JvdW5kQ29sb3IoMCAvKiBCYWNrZ3JvdW5kQ29sb3JTaWRlLlRvcCAqLyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2JhY2tncm91bmRCb3R0b21Db2xvciA9IHRoaXMuX3ByaXZhdGVfX2dldEJhY2tncm91bmRDb2xvcigxIC8qIEJhY2tncm91bmRDb2xvclNpZGUuQm90dG9tICovKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfZnVsbFVwZGF0ZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXBwbHlQcmljZVNjYWxlT3B0aW9ucyhwcmljZVNjYWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHByaWNlU2NhbGVJZCA9PT0gXCJsZWZ0XCIgLyogRGVmYXVsdFByaWNlU2NhbGVJZC5MZWZ0ICovKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9hcHBseU9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIGxlZnRQcmljZVNjYWxlOiBvcHRpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJpY2VTY2FsZUlkID09PSBcInJpZ2h0XCIgLyogRGVmYXVsdFByaWNlU2NhbGVJZC5SaWdodCAqLykge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfYXBwbHlPcHRpb25zKHtcbiAgICAgICAgICAgICAgICByaWdodFByaWNlU2NhbGU6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSB0aGlzLl9pbnRlcm5hbF9maW5kUHJpY2VTY2FsZShwcmljZVNjYWxlSWQpO1xuICAgICAgICBpZiAocmVzID09PSBudWxsKSB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcnlpbmcgdG8gYXBwbHkgcHJpY2Ugc2NhbGUgb3B0aW9ucyB3aXRoIGluY29ycmVjdCBJRDogJHtwcmljZVNjYWxlSWR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzLl9pbnRlcm5hbF9wcmljZVNjYWxlLl9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGVzT3B0aW9uc0NoYW5nZWQuX2ludGVybmFsX2ZpcmUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2ZpbmRQcmljZVNjYWxlKHByaWNlU2NhbGVJZCkge1xuICAgICAgICBmb3IgKGNvbnN0IHBhbmUgb2YgdGhpcy5fcHJpdmF0ZV9fcGFuZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSBwYW5lLl9pbnRlcm5hbF9wcmljZVNjYWxlQnlJZChwcmljZVNjYWxlSWQpO1xuICAgICAgICAgICAgaWYgKHByaWNlU2NhbGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBfaW50ZXJuYWxfcGFuZTogcGFuZSxcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX3ByaWNlU2NhbGU6IHByaWNlU2NhbGUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX3RpbWVTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3BhbmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcGFuZXM7XG4gICAgfVxuICAgIF9pbnRlcm5hbF93YXRlcm1hcmtTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX193YXRlcm1hcms7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jcm9zc2hhaXJTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jcm9zc2hhaXI7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jcm9zc2hhaXJNb3ZlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpck1vdmVkO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UGFuZUhlaWdodChwYW5lLCBoZWlnaHQpIHtcbiAgICAgICAgcGFuZS5faW50ZXJuYWxfc2V0SGVpZ2h0KGhlaWdodCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3JlY2FsY3VsYXRlQWxsUGFuZXMoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFdpZHRoKHdpZHRoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3dpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfc2V0V2lkdGgodGhpcy5fcHJpdmF0ZV9fd2lkdGgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lcy5mb3JFYWNoKChwYW5lKSA9PiBwYW5lLl9pbnRlcm5hbF9zZXRXaWR0aCh3aWR0aCkpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9yZWNhbGN1bGF0ZUFsbFBhbmVzKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jcmVhdGVQYW5lKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBhbmUgPSBuZXcgUGFuZSh0aGlzLl9wcml2YXRlX190aW1lU2NhbGUsIHRoaXMpO1xuICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZXMuc3BsaWNlKGluZGV4LCAwLCBwYW5lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFkZGluZyB0byB0aGUgZW5kIC0gY29tbW9uIGNhc2VcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVzLnB1c2gocGFuZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0dWFsSW5kZXggPSAoaW5kZXggPT09IHVuZGVmaW5lZCkgPyB0aGlzLl9wcml2YXRlX19wYW5lcy5sZW5ndGggLSAxIDogaW5kZXg7XG4gICAgICAgIC8vIHdlIGFsd2F5cyBkbyBhdXRvc2NhbGluZyBvbiB0aGUgY3JlYXRpb25cbiAgICAgICAgLy8gaWYgYXV0b3NjYWxlIG9wdGlvbiBpcyB0cnVlLCBpdCBpcyBvaywganVzdCByZWNhbGN1bGF0ZSBieSBpbnZhbGlkYXRpb24gbWFza1xuICAgICAgICAvLyBpZiBhdXRvc2NhbGUgb3B0aW9uIGlzIGZhbHNlLCBhdXRvc2NhbGUgYW55d2F5IG9uIHRoZSBmaXJzdCBkcmF3XG4gICAgICAgIC8vIGFsc28gdGhlcmUgaXMgYSBzY2VuYXJpbyB3aGVuIGF1dG9zY2FsZSBpcyB0cnVlIGluIGNvbnN0cnVjdG9yIGFuZCBmYWxzZSBsYXRlciBvbiBhcHBseU9wdGlvbnNcbiAgICAgICAgY29uc3QgbWFzayA9IEludmFsaWRhdGVNYXNrLl9pbnRlcm5hbF9mdWxsKCk7XG4gICAgICAgIG1hc2suX2ludGVybmFsX2ludmFsaWRhdGVQYW5lKGFjdHVhbEluZGV4LCB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfbGV2ZWw6IDAgLyogSW52YWxpZGF0aW9uTGV2ZWwuTm9uZSAqLyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9hdXRvU2NhbGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlKG1hc2spO1xuICAgICAgICByZXR1cm4gcGFuZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3N0YXJ0U2NhbGVQcmljZShwYW5lLCBwcmljZVNjYWxlLCB4KSB7XG4gICAgICAgIHBhbmUuX2ludGVybmFsX3N0YXJ0U2NhbGVQcmljZShwcmljZVNjYWxlLCB4KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NjYWxlUHJpY2VUbyhwYW5lLCBwcmljZVNjYWxlLCB4KSB7XG4gICAgICAgIHBhbmUuX2ludGVybmFsX3NjYWxlUHJpY2VUbyhwcmljZVNjYWxlLCB4KTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlQ3Jvc3NoYWlyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGUodGhpcy5fcHJpdmF0ZV9fcGFuZUludmFsaWRhdGlvbk1hc2socGFuZSwgMiAvKiBJbnZhbGlkYXRpb25MZXZlbC5MaWdodCAqLykpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZW5kU2NhbGVQcmljZShwYW5lLCBwcmljZVNjYWxlKSB7XG4gICAgICAgIHBhbmUuX2ludGVybmFsX2VuZFNjYWxlUHJpY2UocHJpY2VTY2FsZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGUodGhpcy5fcHJpdmF0ZV9fcGFuZUludmFsaWRhdGlvbk1hc2socGFuZSwgMiAvKiBJbnZhbGlkYXRpb25MZXZlbC5MaWdodCAqLykpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RhcnRTY3JvbGxQcmljZShwYW5lLCBwcmljZVNjYWxlLCB4KSB7XG4gICAgICAgIGlmIChwcmljZVNjYWxlLl9pbnRlcm5hbF9pc0F1dG9TY2FsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcGFuZS5faW50ZXJuYWxfc3RhcnRTY3JvbGxQcmljZShwcmljZVNjYWxlLCB4KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Njcm9sbFByaWNlVG8ocGFuZSwgcHJpY2VTY2FsZSwgeCkge1xuICAgICAgICBpZiAocHJpY2VTY2FsZS5faW50ZXJuYWxfaXNBdXRvU2NhbGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHBhbmUuX2ludGVybmFsX3Njcm9sbFByaWNlVG8ocHJpY2VTY2FsZSwgeCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUNyb3NzaGFpcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlKHRoaXMuX3ByaXZhdGVfX3BhbmVJbnZhbGlkYXRpb25NYXNrKHBhbmUsIDIgLyogSW52YWxpZGF0aW9uTGV2ZWwuTGlnaHQgKi8pKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2VuZFNjcm9sbFByaWNlKHBhbmUsIHByaWNlU2NhbGUpIHtcbiAgICAgICAgaWYgKHByaWNlU2NhbGUuX2ludGVybmFsX2lzQXV0b1NjYWxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwYW5lLl9pbnRlcm5hbF9lbmRTY3JvbGxQcmljZShwcmljZVNjYWxlKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZSh0aGlzLl9wcml2YXRlX19wYW5lSW52YWxpZGF0aW9uTWFzayhwYW5lLCAyIC8qIEludmFsaWRhdGlvbkxldmVsLkxpZ2h0ICovKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZXNldFByaWNlU2NhbGUocGFuZSwgcHJpY2VTY2FsZSkge1xuICAgICAgICBwYW5lLl9pbnRlcm5hbF9yZXNldFByaWNlU2NhbGUocHJpY2VTY2FsZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGUodGhpcy5fcHJpdmF0ZV9fcGFuZUludmFsaWRhdGlvbk1hc2socGFuZSwgMiAvKiBJbnZhbGlkYXRpb25MZXZlbC5MaWdodCAqLykpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RhcnRTY2FsZVRpbWUocG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9zdGFydFNjYWxlKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogWm9vbSBpbi9vdXQgdGhlIGNoYXJ0IChkZXBlbmRzIG9uIHNjYWxlIHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb2ludFggLSBYIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IHRvIGFwcGx5IHRoZSB6b29tICh0aGUgcG9pbnQgd2hpY2ggc2hvdWxkIHN0YXkgb24gaXRzIHBsYWNlKVxuICAgICAqIEBwYXJhbSBzY2FsZSAtIFpvb20gdmFsdWUuIE5lZ2F0aXZlIHZhbHVlIG1lYW5zIHpvb20gb3V0LCBwb3NpdGl2ZSAtIHpvb20gaW4uXG4gICAgICovXG4gICAgX2ludGVybmFsX3pvb21UaW1lKHBvaW50WCwgc2NhbGUpIHtcbiAgICAgICAgY29uc3QgdGltZVNjYWxlID0gdGhpcy5faW50ZXJuYWxfdGltZVNjYWxlKCk7XG4gICAgICAgIGlmICh0aW1lU2NhbGUuX2ludGVybmFsX2lzRW1wdHkoKSB8fCBzY2FsZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZVdpZHRoID0gdGltZVNjYWxlLl9pbnRlcm5hbF93aWR0aCgpO1xuICAgICAgICBwb2ludFggPSBNYXRoLm1heCgxLCBNYXRoLm1pbihwb2ludFgsIHRpbWVTY2FsZVdpZHRoKSk7XG4gICAgICAgIHRpbWVTY2FsZS5faW50ZXJuYWxfem9vbShwb2ludFgsIHNjYWxlKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfcmVjYWxjdWxhdGVBbGxQYW5lcygpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2Nyb2xsQ2hhcnQoeCkge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9zdGFydFNjcm9sbFRpbWUoMCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3Njcm9sbFRpbWVUbyh4KTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfZW5kU2Nyb2xsVGltZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2NhbGVUaW1lVG8oeCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX3NjYWxlVG8oeCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3JlY2FsY3VsYXRlQWxsUGFuZXMoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2VuZFNjYWxlVGltZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9lbmRTY2FsZSgpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9saWdodFVwZGF0ZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RhcnRTY3JvbGxUaW1lKHgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9zdGFydFNjcm9sbCh4KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Njcm9sbFRpbWVUbyh4KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfc2Nyb2xsVG8oeCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3JlY2FsY3VsYXRlQWxsUGFuZXMoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2VuZFNjcm9sbFRpbWUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfZW5kU2Nyb2xsKCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX2xpZ2h0VXBkYXRlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXJpZXNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3Nlcmllc2VzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0QW5kU2F2ZUN1cnJlbnRQb3NpdGlvbih4LCB5LCBldmVudCwgcGFuZSwgc2tpcEV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpci5faW50ZXJuYWxfc2F2ZU9yaWdpbkNvb3JkKHgsIHkpO1xuICAgICAgICBsZXQgcHJpY2UgPSBOYU47XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfY29vcmRpbmF0ZVRvSW5kZXgoeCk7XG4gICAgICAgIGNvbnN0IHZpc2libGVCYXJzID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgaWYgKHZpc2libGVCYXJzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpbmRleCA9IE1hdGgubWluKE1hdGgubWF4KHZpc2libGVCYXJzLl9pbnRlcm5hbF9sZWZ0KCksIGluZGV4KSwgdmlzaWJsZUJhcnMuX2ludGVybmFsX3JpZ2h0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSBwYW5lLl9pbnRlcm5hbF9kZWZhdWx0UHJpY2VTY2FsZSgpO1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gcHJpY2VTY2FsZS5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJpY2UgPSBwcmljZVNjYWxlLl9pbnRlcm5hbF9jb29yZGluYXRlVG9QcmljZSh5LCBmaXJzdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBwcmljZSA9IHRoaXMuX3ByaXZhdGVfX21hZ25ldC5faW50ZXJuYWxfYWxpZ24ocHJpY2UsIGluZGV4LCBwYW5lKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyLl9pbnRlcm5hbF9zZXRQb3NpdGlvbihpbmRleCwgcHJpY2UsIHBhbmUpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9jdXJzb3JVcGRhdGUoKTtcbiAgICAgICAgaWYgKCFza2lwRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpck1vdmVkLl9pbnRlcm5hbF9maXJlKHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpci5faW50ZXJuYWxfYXBwbGllZEluZGV4KCksIHsgeCwgeSB9LCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQSBwb3NpdGlvbiBwcm92aWRlZCBleHRlcm5hbCAobm90IGZyb20gYW4gaW50ZXJuYWwgZXZlbnQgbGlzdGVuZXIpXG4gICAgX2ludGVybmFsX3NldEFuZFNhdmVTeW50aGV0aWNQb3NpdGlvbihwcmljZSwgaG9yaXpvbnRhbFBvc2l0aW9uLCBwYW5lKSB7XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSBwYW5lLl9pbnRlcm5hbF9kZWZhdWx0UHJpY2VTY2FsZSgpO1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gcHJpY2VTY2FsZS5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBjb25zdCB5ID0gcHJpY2VTY2FsZS5faW50ZXJuYWxfcHJpY2VUb0Nvb3JkaW5hdGUocHJpY2UsIGVuc3VyZU5vdE51bGwoZmlyc3RWYWx1ZSkpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfdGltZVRvSW5kZXgoaG9yaXpvbnRhbFBvc2l0aW9uLCB0cnVlKTtcbiAgICAgICAgY29uc3QgeCA9IHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfaW5kZXhUb0Nvb3JkaW5hdGUoZW5zdXJlTm90TnVsbChpbmRleCkpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9zZXRBbmRTYXZlQ3VycmVudFBvc2l0aW9uKHgsIHksIG51bGwsIHBhbmUsIHRydWUpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfY2xlYXJDdXJyZW50UG9zaXRpb24oc2tpcEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGNyb3NzaGFpciA9IHRoaXMuX2ludGVybmFsX2Nyb3NzaGFpclNvdXJjZSgpO1xuICAgICAgICBjcm9zc2hhaXIuX2ludGVybmFsX2NsZWFyUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfY3Vyc29yVXBkYXRlKCk7XG4gICAgICAgIGlmICghc2tpcEV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jcm9zc2hhaXJNb3ZlZC5faW50ZXJuYWxfZmlyZShudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlQ3Jvc3NoYWlyKCkge1xuICAgICAgICAvLyBhcHBseSBtYWduZXRcbiAgICAgICAgY29uc3QgcGFuZSA9IHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpci5faW50ZXJuYWxfcGFuZSgpO1xuICAgICAgICBpZiAocGFuZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpci5faW50ZXJuYWxfb3JpZ2luQ29vcmRYKCk7XG4gICAgICAgICAgICBjb25zdCB5ID0gdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyLl9pbnRlcm5hbF9vcmlnaW5Db29yZFkoKTtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3NldEFuZFNhdmVDdXJyZW50UG9zaXRpb24oeCwgeSwgbnVsbCwgcGFuZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyLl9pbnRlcm5hbF91cGRhdGVBbGxWaWV3cygpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlVGltZVNjYWxlKG5ld0Jhc2VJbmRleCwgbmV3UG9pbnRzLCBmaXJzdENoYW5nZWRQb2ludEluZGV4KSB7XG4gICAgICAgIGNvbnN0IG9sZEZpcnN0VGltZSA9IHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfaW5kZXhUb1RpbWUoMCk7XG4gICAgICAgIGlmIChuZXdQb2ludHMgIT09IHVuZGVmaW5lZCAmJiBmaXJzdENoYW5nZWRQb2ludEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfdXBkYXRlKG5ld1BvaW50cywgZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Rmlyc3RUaW1lID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9pbmRleFRvVGltZSgwKTtcbiAgICAgICAgY29uc3QgY3VycmVudEJhc2VJbmRleCA9IHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfYmFzZUluZGV4KCk7XG4gICAgICAgIGNvbnN0IHZpc2libGVCYXJzID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UoKTtcbiAgICAgICAgLy8gaWYgdGltZSBzY2FsZSBjYW5ub3QgcmV0dXJuIGN1cnJlbnQgdmlzaWJsZSBiYXJzIHJhbmdlIChlLmcuIHRpbWUgc2NhbGUgaGFzIHplcm8td2lkdGgpXG4gICAgICAgIC8vIHRoZW4gd2UgZG8gbm90IG5lZWQgdG8gdXBkYXRlIHJpZ2h0IG9mZnNldCB0byBzaGlmdCB2aXNpYmxlIGJhcnMgcmFuZ2UgdG8gaGF2ZSB0aGUgc2FtZSByaWdodCBvZmZzZXQgYXMgd2UgaGF2ZSBiZWZvcmUgbmV3IGJhclxuICAgICAgICAvLyAoYW5kIGFjdHVhbGx5IHdlIGNhbm5vdClcbiAgICAgICAgaWYgKHZpc2libGVCYXJzICE9PSBudWxsICYmIG9sZEZpcnN0VGltZSAhPT0gbnVsbCAmJiBuZXdGaXJzdFRpbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzTGFzdFNlcmllc0JhclZpc2libGUgPSB2aXNpYmxlQmFycy5faW50ZXJuYWxfY29udGFpbnMoY3VycmVudEJhc2VJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBpc0xlZnRCYXJTaGlmdFRvTGVmdCA9IHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmtleShvbGRGaXJzdFRpbWUpID4gdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3Iua2V5KG5ld0ZpcnN0VGltZSk7XG4gICAgICAgICAgICBjb25zdCBpc1Nlcmllc1BvaW50c0FkZGVkID0gbmV3QmFzZUluZGV4ICE9PSBudWxsICYmIG5ld0Jhc2VJbmRleCA+IGN1cnJlbnRCYXNlSW5kZXg7XG4gICAgICAgICAgICBjb25zdCBpc1Nlcmllc1BvaW50c0FkZGVkVG9SaWdodCA9IGlzU2VyaWVzUG9pbnRzQWRkZWQgJiYgIWlzTGVmdEJhclNoaWZ0VG9MZWZ0O1xuICAgICAgICAgICAgY29uc3QgYWxsb3dTaGlmdFdoZW5SZXBsYWNpbmdXaGl0ZXNwYWNlID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCkuYWxsb3dTaGlmdFZpc2libGVSYW5nZU9uV2hpdGVzcGFjZVJlcGxhY2VtZW50O1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZWRFeGlzdGluZ1doaXRlc3BhY2UgPSBmaXJzdENoYW5nZWRQb2ludEluZGV4ID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBuZWVkU2hpZnRWaXNpYmxlUmFuZ2VPbk5ld0JhciA9IGlzTGFzdFNlcmllc0JhclZpc2libGUgJiYgKCFyZXBsYWNlZEV4aXN0aW5nV2hpdGVzcGFjZSB8fCBhbGxvd1NoaWZ0V2hlblJlcGxhY2luZ1doaXRlc3BhY2UpICYmIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfb3B0aW9ucygpLnNoaWZ0VmlzaWJsZVJhbmdlT25OZXdCYXI7XG4gICAgICAgICAgICBpZiAoaXNTZXJpZXNQb2ludHNBZGRlZFRvUmlnaHQgJiYgIW5lZWRTaGlmdFZpc2libGVSYW5nZU9uTmV3QmFyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGVuc2F0aW9uU2hpZnQgPSBuZXdCYXNlSW5kZXggLSBjdXJyZW50QmFzZUluZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfc2V0UmlnaHRPZmZzZXQodGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9yaWdodE9mZnNldCgpIC0gY29tcGVuc2F0aW9uU2hpZnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfc2V0QmFzZUluZGV4KG5ld0Jhc2VJbmRleCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZWNhbGN1bGF0ZVBhbmUocGFuZSkge1xuICAgICAgICBpZiAocGFuZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFuZS5faW50ZXJuYWxfcmVjYWxjdWxhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFuZUZvclNvdXJjZShzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgcGFuZSA9IHRoaXMuX3ByaXZhdGVfX3BhbmVzLmZpbmQoKHApID0+IHAuX2ludGVybmFsX29yZGVyZWRTb3VyY2VzKCkuaW5jbHVkZXMoc291cmNlKSk7XG4gICAgICAgIHJldHVybiBwYW5lID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFuZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlY2FsY3VsYXRlQWxsUGFuZXMoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3dhdGVybWFyay5faW50ZXJuYWxfdXBkYXRlQWxsVmlld3MoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZXMuZm9yRWFjaCgocCkgPT4gcC5faW50ZXJuYWxfcmVjYWxjdWxhdGUoKSk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZUNyb3NzaGFpcigpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZXMuZm9yRWFjaCgocCkgPT4gcC5faW50ZXJuYWxfZGVzdHJveSgpKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZXMubGVuZ3RoID0gMDtcbiAgICAgICAgLy8gdG8gYXZvaWQgbWVtbGVha3NcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5sb2NhbGl6YXRpb24ucHJpY2VGb3JtYXR0ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMubG9jYWxpemF0aW9uLnBlcmNlbnRhZ2VGb3JtYXR0ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMubG9jYWxpemF0aW9uLnRpbWVGb3JtYXR0ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZW5kZXJlck9wdGlvbnNQcm92aWRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyT3B0aW9uc1Byb3ZpZGVyO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VBeGlzUmVuZGVyZXJPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zUHJvdmlkZXIuX2ludGVybmFsX29wdGlvbnMoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlU2NhbGVzT3B0aW9uc0NoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlc09wdGlvbnNDaGFuZ2VkO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfY3JlYXRlU2VyaWVzKHNlcmllc1R5cGUsIG9wdGlvbnMsIGN1c3RvbVBhbmVWaWV3KSB7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLl9wcml2YXRlX19wYW5lc1swXTtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gdGhpcy5fcHJpdmF0ZV9fY3JlYXRlU2VyaWVzKG9wdGlvbnMsIHNlcmllc1R5cGUsIHBhbmUsIGN1c3RvbVBhbmVWaWV3KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzZXMucHVzaChzZXJpZXMpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2VyaWVzZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBjYWxsIGZ1bGxVcGRhdGUgdG8gcmVjYWxjdWxhdGUgY2hhcnQncyBwYXJ0cyBnZW9tZXRyeVxuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfZnVsbFVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfbGlnaHRVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWVzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVtb3ZlU2VyaWVzKHNlcmllcykge1xuICAgICAgICBjb25zdCBwYW5lID0gdGhpcy5faW50ZXJuYWxfcGFuZUZvclNvdXJjZShzZXJpZXMpO1xuICAgICAgICBjb25zdCBzZXJpZXNJbmRleCA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllc2VzLmluZGV4T2Yoc2VyaWVzKTtcbiAgICAgICAgYXNzZXJ0KHNlcmllc0luZGV4ICE9PSAtMSwgJ1NlcmllcyBub3QgZm91bmQnKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzZXMuc3BsaWNlKHNlcmllc0luZGV4LCAxKTtcbiAgICAgICAgZW5zdXJlTm90TnVsbChwYW5lKS5faW50ZXJuYWxfcmVtb3ZlRGF0YVNvdXJjZShzZXJpZXMpO1xuICAgICAgICBpZiAoc2VyaWVzLl9pbnRlcm5hbF9kZXN0cm95KSB7XG4gICAgICAgICAgICBzZXJpZXMuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfbW92ZVNlcmllc1RvU2NhbGUoc2VyaWVzLCB0YXJnZXRTY2FsZUlkKSB7XG4gICAgICAgIGNvbnN0IHBhbmUgPSBlbnN1cmVOb3ROdWxsKHRoaXMuX2ludGVybmFsX3BhbmVGb3JTb3VyY2Uoc2VyaWVzKSk7XG4gICAgICAgIHBhbmUuX2ludGVybmFsX3JlbW92ZURhdGFTb3VyY2Uoc2VyaWVzKTtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGFyZ2V0U2NhbGVJZCBleGlzdHNcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5faW50ZXJuYWxfZmluZFByaWNlU2NhbGUodGFyZ2V0U2NhbGVJZCk7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5ldyBzY2FsZSBvbiB0aGUgc2FtZSBwYW5lXG4gICAgICAgICAgICBjb25zdCB6T3JkZXIgPSBzZXJpZXMuX2ludGVybmFsX3pvcmRlcigpO1xuICAgICAgICAgICAgcGFuZS5faW50ZXJuYWxfYWRkRGF0YVNvdXJjZShzZXJpZXMsIHRhcmdldFNjYWxlSWQsIHpPcmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiBtb3ZlIHRvIHRoZSBuZXcgc2NhbGUgb2YgdGhlIHNhbWUgcGFuZSwga2VlcCB6b3JkZXJcbiAgICAgICAgICAgIC8vIGlmIG1vdmUgdG8gbmV3IHBhbmVcbiAgICAgICAgICAgIGNvbnN0IHpPcmRlciA9ICh0YXJnZXQuX2ludGVybmFsX3BhbmUgPT09IHBhbmUpID8gc2VyaWVzLl9pbnRlcm5hbF96b3JkZXIoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRhcmdldC5faW50ZXJuYWxfcGFuZS5faW50ZXJuYWxfYWRkRGF0YVNvdXJjZShzZXJpZXMsIHRhcmdldFNjYWxlSWQsIHpPcmRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX2ZpdENvbnRlbnQoKSB7XG4gICAgICAgIGNvbnN0IG1hc2sgPSBJbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfbGlnaHQoKTtcbiAgICAgICAgbWFzay5faW50ZXJuYWxfc2V0Rml0Q29udGVudCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlKG1hc2spO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0VGFyZ2V0TG9naWNhbFJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IG1hc2sgPSBJbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfbGlnaHQoKTtcbiAgICAgICAgbWFzay5faW50ZXJuYWxfYXBwbHlSYW5nZShyYW5nZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGUobWFzayk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZXNldFRpbWVTY2FsZSgpIHtcbiAgICAgICAgY29uc3QgbWFzayA9IEludmFsaWRhdGVNYXNrLl9pbnRlcm5hbF9saWdodCgpO1xuICAgICAgICBtYXNrLl9pbnRlcm5hbF9yZXNldFRpbWVTY2FsZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlKG1hc2spO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0QmFyU3BhY2luZyhzcGFjaW5nKSB7XG4gICAgICAgIGNvbnN0IG1hc2sgPSBJbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfbGlnaHQoKTtcbiAgICAgICAgbWFzay5faW50ZXJuYWxfc2V0QmFyU3BhY2luZyhzcGFjaW5nKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZShtYXNrKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFJpZ2h0T2Zmc2V0KG9mZnNldCkge1xuICAgICAgICBjb25zdCBtYXNrID0gSW52YWxpZGF0ZU1hc2suX2ludGVybmFsX2xpZ2h0KCk7XG4gICAgICAgIG1hc2suX2ludGVybmFsX3NldFJpZ2h0T2Zmc2V0KG9mZnNldCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGUobWFzayk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRUaW1lU2NhbGVBbmltYXRpb24oYW5pbWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1hc2sgPSBJbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfbGlnaHQoKTtcbiAgICAgICAgbWFzay5faW50ZXJuYWxfc2V0VGltZVNjYWxlQW5pbWF0aW9uKGFuaW1hdGlvbik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGUobWFzayk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zdG9wVGltZVNjYWxlQW5pbWF0aW9uKCkge1xuICAgICAgICBjb25zdCBtYXNrID0gSW52YWxpZGF0ZU1hc2suX2ludGVybmFsX2xpZ2h0KCk7XG4gICAgICAgIG1hc2suX2ludGVybmFsX3N0b3BUaW1lU2NhbGVBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZShtYXNrKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RlZmF1bHRWaXNpYmxlUHJpY2VTY2FsZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5yaWdodFByaWNlU2NhbGUudmlzaWJsZSA/IFwicmlnaHRcIiAvKiBEZWZhdWx0UHJpY2VTY2FsZUlkLlJpZ2h0ICovIDogXCJsZWZ0XCIgLyogRGVmYXVsdFByaWNlU2NhbGVJZC5MZWZ0ICovO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYmFja2dyb3VuZEJvdHRvbUNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYmFja2dyb3VuZEJvdHRvbUNvbG9yO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYmFja2dyb3VuZFRvcENvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fYmFja2dyb3VuZFRvcENvbG9yO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYmFja2dyb3VuZENvbG9yQXRZUGVyY2VudEZyb21Ub3AocGVyY2VudCkge1xuICAgICAgICBjb25zdCBib3R0b21Db2xvciA9IHRoaXMuX3ByaXZhdGVfX2JhY2tncm91bmRCb3R0b21Db2xvcjtcbiAgICAgICAgY29uc3QgdG9wQ29sb3IgPSB0aGlzLl9wcml2YXRlX19iYWNrZ3JvdW5kVG9wQ29sb3I7XG4gICAgICAgIGlmIChib3R0b21Db2xvciA9PT0gdG9wQ29sb3IpIHtcbiAgICAgICAgICAgIC8vIHNvbGlkIGJhY2tncm91bmRcbiAgICAgICAgICAgIHJldHVybiBib3R0b21Db2xvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBncmFkaWVudCBiYWNrZ3JvdW5kXG4gICAgICAgIC8vIHBlcmNlbnQgc2hvdWxkIGJlIGZyb20gMCB0byAxMDAgKHdlJ3JlIHVzaW5nIG9ubHkgaW50ZWdlciB2YWx1ZXMgdG8gbWFrZSBjYWNoZSBtb3JlIGVmZmljaWVudClcbiAgICAgICAgcGVyY2VudCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgTWF0aC5yb3VuZChwZXJjZW50ICogMTAwKSkpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZ3JhZGllbnRDb2xvcnNDYWNoZSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZ3JhZGllbnRDb2xvcnNDYWNoZS5faW50ZXJuYWxfdG9wQ29sb3IgIT09IHRvcENvbG9yIHx8IHRoaXMuX3ByaXZhdGVfX2dyYWRpZW50Q29sb3JzQ2FjaGUuX2ludGVybmFsX2JvdHRvbUNvbG9yICE9PSBib3R0b21Db2xvcikge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZ3JhZGllbnRDb2xvcnNDYWNoZSA9IHtcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdG9wQ29sb3I6IHRvcENvbG9yLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9ib3R0b21Db2xvcjogYm90dG9tQ29sb3IsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2NvbG9yczogbmV3IE1hcCgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZFZhbHVlID0gdGhpcy5fcHJpdmF0ZV9fZ3JhZGllbnRDb2xvcnNDYWNoZS5faW50ZXJuYWxfY29sb3JzLmdldChwZXJjZW50KTtcbiAgICAgICAgICAgIGlmIChjYWNoZWRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdyYWRpZW50Q29sb3JBdFBlcmNlbnQodG9wQ29sb3IsIGJvdHRvbUNvbG9yLCBwZXJjZW50IC8gMTAwKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZ3JhZGllbnRDb2xvcnNDYWNoZS5faW50ZXJuYWxfY29sb3JzLnNldChwZXJjZW50LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fcGFuZUludmFsaWRhdGlvbk1hc2socGFuZSwgbGV2ZWwpIHtcbiAgICAgICAgY29uc3QgaW52ID0gbmV3IEludmFsaWRhdGVNYXNrKGxldmVsKTtcbiAgICAgICAgaWYgKHBhbmUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fcGFuZXMuaW5kZXhPZihwYW5lKTtcbiAgICAgICAgICAgIGludi5faW50ZXJuYWxfaW52YWxpZGF0ZVBhbmUoaW5kZXgsIHtcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfbGV2ZWw6IGxldmVsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludjtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2ludmFsaWRhdGlvbk1hc2tGb3JTb3VyY2Uoc291cmNlLCBpbnZhbGlkYXRlVHlwZSkge1xuICAgICAgICBpZiAoaW52YWxpZGF0ZVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW52YWxpZGF0ZVR5cGUgPSAyIC8qIEludmFsaWRhdGlvbkxldmVsLkxpZ2h0ICovO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lSW52YWxpZGF0aW9uTWFzayh0aGlzLl9pbnRlcm5hbF9wYW5lRm9yU291cmNlKHNvdXJjZSksIGludmFsaWRhdGVUeXBlKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2ludmFsaWRhdGUobWFzaykge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZUhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVIYW5kbGVyKG1hc2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVzLmZvckVhY2goKHBhbmUpID0+IHBhbmUuX2ludGVybmFsX2dyaWQoKS5faW50ZXJuYWxfcGFuZVZpZXcoKS5faW50ZXJuYWxfdXBkYXRlKCkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fY3JlYXRlU2VyaWVzKG9wdGlvbnMsIHNlcmllc1R5cGUsIHBhbmUsIGN1c3RvbVBhbmVWaWV3KSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IG5ldyBTZXJpZXModGhpcywgb3B0aW9ucywgc2VyaWVzVHlwZSwgcGFuZSwgY3VzdG9tUGFuZVZpZXcpO1xuICAgICAgICBjb25zdCB0YXJnZXRTY2FsZUlkID0gb3B0aW9ucy5wcmljZVNjYWxlSWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMucHJpY2VTY2FsZUlkIDogdGhpcy5faW50ZXJuYWxfZGVmYXVsdFZpc2libGVQcmljZVNjYWxlSWQoKTtcbiAgICAgICAgcGFuZS5faW50ZXJuYWxfYWRkRGF0YVNvdXJjZShzZXJpZXMsIHRhcmdldFNjYWxlSWQpO1xuICAgICAgICBpZiAoIWlzRGVmYXVsdFByaWNlU2NhbGUodGFyZ2V0U2NhbGVJZCkpIHtcbiAgICAgICAgICAgIC8vIGxldCdzIGFwcGx5IHRoYXQgb3B0aW9ucyBhZ2FpbiB0byBhcHBseSBtYXJnaW5zXG4gICAgICAgICAgICBzZXJpZXMuX2ludGVybmFsX2FwcGx5T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWVzO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZ2V0QmFja2dyb3VuZENvbG9yKHNpZGUpIHtcbiAgICAgICAgY29uc3QgbGF5b3V0T3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX29wdGlvbnMubGF5b3V0O1xuICAgICAgICBpZiAobGF5b3V0T3B0aW9ucy5iYWNrZ3JvdW5kLnR5cGUgPT09IFwiZ3JhZGllbnRcIiAvKiBDb2xvclR5cGUuVmVydGljYWxHcmFkaWVudCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHNpZGUgPT09IDAgLyogQmFja2dyb3VuZENvbG9yU2lkZS5Ub3AgKi8gP1xuICAgICAgICAgICAgICAgIGxheW91dE9wdGlvbnMuYmFja2dyb3VuZC50b3BDb2xvciA6XG4gICAgICAgICAgICAgICAgbGF5b3V0T3B0aW9ucy5iYWNrZ3JvdW5kLmJvdHRvbUNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYXlvdXRPcHRpb25zLmJhY2tncm91bmQuY29sb3I7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmaWxsVXBEb3duQ2FuZGxlc3RpY2tzQ29sb3JzKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5ib3JkZXJDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuYm9yZGVyVXBDb2xvciA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgIG9wdGlvbnMuYm9yZGVyRG93bkNvbG9yID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMud2lja0NvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9ucy53aWNrVXBDb2xvciA9IG9wdGlvbnMud2lja0NvbG9yO1xuICAgICAgICBvcHRpb25zLndpY2tEb3duQ29sb3IgPSBvcHRpb25zLndpY2tDb2xvcjtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgdGhlIGxhc3QgcHJpY2UgYW5pbWF0aW9uIGZvciBzZXJpZXMgc3VjaCBhcyBhcmVhIG9yIGxpbmUuXG4gKi9cbnZhciBMYXN0UHJpY2VBbmltYXRpb25Nb2RlO1xuKGZ1bmN0aW9uIChMYXN0UHJpY2VBbmltYXRpb25Nb2RlKSB7XG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIGlzIGFsd2F5cyBkaXNhYmxlZFxuICAgICAqL1xuICAgIExhc3RQcmljZUFuaW1hdGlvbk1vZGVbTGFzdFByaWNlQW5pbWF0aW9uTW9kZVtcIkRpc2FibGVkXCJdID0gMF0gPSBcIkRpc2FibGVkXCI7XG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIGlzIGFsd2F5cyBlbmFibGVkLlxuICAgICAqL1xuICAgIExhc3RQcmljZUFuaW1hdGlvbk1vZGVbTGFzdFByaWNlQW5pbWF0aW9uTW9kZVtcIkNvbnRpbnVvdXNcIl0gPSAxXSA9IFwiQ29udGludW91c1wiO1xuICAgIC8qKlxuICAgICAqIEFuaW1hdGlvbiBpcyBhY3RpdmUgYWZ0ZXIgbmV3IGRhdGEuXG4gICAgICovXG4gICAgTGFzdFByaWNlQW5pbWF0aW9uTW9kZVtMYXN0UHJpY2VBbmltYXRpb25Nb2RlW1wiT25EYXRhVXBkYXRlXCJdID0gMl0gPSBcIk9uRGF0YVVwZGF0ZVwiO1xufSkoTGFzdFByaWNlQW5pbWF0aW9uTW9kZSB8fCAoTGFzdFByaWNlQW5pbWF0aW9uTW9kZSA9IHt9KSk7XG5mdW5jdGlvbiBwcmVjaXNpb25CeU1pbk1vdmUobWluTW92ZSkge1xuICAgIGlmIChtaW5Nb3ZlID49IDEpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IDg7IGkrKykge1xuICAgICAgICBjb25zdCBpbnRQYXJ0ID0gTWF0aC5yb3VuZChtaW5Nb3ZlKTtcbiAgICAgICAgY29uc3QgZnJhY3RQYXJ0ID0gTWF0aC5hYnMoaW50UGFydCAtIG1pbk1vdmUpO1xuICAgICAgICBpZiAoZnJhY3RQYXJ0IDwgMWUtOCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgICAgbWluTW92ZSA9IG1pbk1vdmUgKiAxMDtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG59XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHNvdXJjZSBvZiBkYXRhIHRvIGJlIHVzZWQgZm9yIHRoZSBob3Jpem9udGFsIHByaWNlIGxpbmUuXG4gKi9cbnZhciBQcmljZUxpbmVTb3VyY2U7XG4oZnVuY3Rpb24gKFByaWNlTGluZVNvdXJjZSkge1xuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgbGFzdCBiYXIgZGF0YS5cbiAgICAgKi9cbiAgICBQcmljZUxpbmVTb3VyY2VbUHJpY2VMaW5lU291cmNlW1wiTGFzdEJhclwiXSA9IDBdID0gXCJMYXN0QmFyXCI7XG4gICAgLyoqXG4gICAgICogVXNlIHRoZSBsYXN0IHZpc2libGUgZGF0YSBvZiB0aGUgY2hhcnQgdmlld3BvcnQuXG4gICAgICovXG4gICAgUHJpY2VMaW5lU291cmNlW1ByaWNlTGluZVNvdXJjZVtcIkxhc3RWaXNpYmxlXCJdID0gMV0gPSBcIkxhc3RWaXNpYmxlXCI7XG59KShQcmljZUxpbmVTb3VyY2UgfHwgKFByaWNlTGluZVNvdXJjZSA9IHt9KSk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHR5cGUgb2YgY29sb3IuXG4gKi9cbnZhciBDb2xvclR5cGU7XG4oZnVuY3Rpb24gKENvbG9yVHlwZSkge1xuICAgIC8qKiBTb2xpZCBjb2xvciAqL1xuICAgIENvbG9yVHlwZVtcIlNvbGlkXCJdID0gXCJzb2xpZFwiO1xuICAgIC8qKiBWZXJ0aWNhbCBncmFkaWVudCBjb2xvciAqL1xuICAgIENvbG9yVHlwZVtcIlZlcnRpY2FsR3JhZGllbnRcIl0gPSBcImdyYWRpZW50XCI7XG59KShDb2xvclR5cGUgfHwgKENvbG9yVHlwZSA9IHt9KSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0aW1lIHZhbHVlIGlzIGEgYnVzaW5lc3MgZGF5IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gdGltZSAtIFRoZSB0aW1lIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIGB0aW1lYCBpcyBhIHtAbGluayBCdXNpbmVzc0RheX0gb2JqZWN0LCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzQnVzaW5lc3NEYXkodGltZSkge1xuICAgIHJldHVybiAhaXNOdW1iZXIodGltZSkgJiYgIWlzU3RyaW5nKHRpbWUpO1xufVxuLyoqXG4gKiBDaGVjayBpZiBhIHRpbWUgdmFsdWUgaXMgYSBVVEMgdGltZXN0YW1wIG51bWJlci5cbiAqXG4gKiBAcGFyYW0gdGltZSAtIFRoZSB0aW1lIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIGB0aW1lYCBpcyBhIHtAbGluayBVVENUaW1lc3RhbXB9IG51bWJlciwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1VUQ1RpbWVzdGFtcCh0aW1lKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHRpbWUpO1xufVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSB0eXBlIG9mIGEgdGljayBtYXJrIG9uIHRoZSB0aW1lIGF4aXMuXG4gKi9cbnZhciBUaWNrTWFya1R5cGU7XG4oZnVuY3Rpb24gKFRpY2tNYXJrVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBzdGFydCBvZiB0aGUgeWVhciAoZS5nLiBpdCdzIHRoZSBmaXJzdCB0aWNrIG1hcmsgaW4gYSB5ZWFyKS5cbiAgICAgKi9cbiAgICBUaWNrTWFya1R5cGVbVGlja01hcmtUeXBlW1wiWWVhclwiXSA9IDBdID0gXCJZZWFyXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHN0YXJ0IG9mIHRoZSBtb250aCAoZS5nLiBpdCdzIHRoZSBmaXJzdCB0aWNrIG1hcmsgaW4gYSBtb250aCkuXG4gICAgICovXG4gICAgVGlja01hcmtUeXBlW1RpY2tNYXJrVHlwZVtcIk1vbnRoXCJdID0gMV0gPSBcIk1vbnRoXCI7XG4gICAgLyoqXG4gICAgICogQSBkYXkgb2YgdGhlIG1vbnRoLlxuICAgICAqL1xuICAgIFRpY2tNYXJrVHlwZVtUaWNrTWFya1R5cGVbXCJEYXlPZk1vbnRoXCJdID0gMl0gPSBcIkRheU9mTW9udGhcIjtcbiAgICAvKipcbiAgICAgKiBBIHRpbWUgd2l0aG91dCBzZWNvbmRzLlxuICAgICAqL1xuICAgIFRpY2tNYXJrVHlwZVtUaWNrTWFya1R5cGVbXCJUaW1lXCJdID0gM10gPSBcIlRpbWVcIjtcbiAgICAvKipcbiAgICAgKiBBIHRpbWUgd2l0aCBzZWNvbmRzLlxuICAgICAqL1xuICAgIFRpY2tNYXJrVHlwZVtUaWNrTWFya1R5cGVbXCJUaW1lV2l0aFNlY29uZHNcIl0gPSA0XSA9IFwiVGltZVdpdGhTZWNvbmRzXCI7XG59KShUaWNrTWFya1R5cGUgfHwgKFRpY2tNYXJrVHlwZSA9IHt9KSk7XG5cbmNvbnN0IGdldE1vbnRoID0gKGRhdGUpID0+IGRhdGUuZ2V0VVRDTW9udGgoKSArIDE7XG5jb25zdCBnZXREYXkgPSAoZGF0ZSkgPT4gZGF0ZS5nZXRVVENEYXRlKCk7XG5jb25zdCBnZXRZZWFyID0gKGRhdGUpID0+IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbmNvbnN0IGRkID0gKGRhdGUpID0+IG51bWJlclRvU3RyaW5nV2l0aExlYWRpbmdaZXJvKGdldERheShkYXRlKSwgMik7XG5jb25zdCBNTU1NID0gKGRhdGUsIGxvY2FsZSkgPT4gbmV3IERhdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIDEpXG4gICAgLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgeyBtb250aDogJ2xvbmcnIH0pO1xuY29uc3QgTU1NID0gKGRhdGUsIGxvY2FsZSkgPT4gbmV3IERhdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIDEpXG4gICAgLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgeyBtb250aDogJ3Nob3J0JyB9KTtcbmNvbnN0IE1NID0gKGRhdGUpID0+IG51bWJlclRvU3RyaW5nV2l0aExlYWRpbmdaZXJvKGdldE1vbnRoKGRhdGUpLCAyKTtcbmNvbnN0IHl5ID0gKGRhdGUpID0+IG51bWJlclRvU3RyaW5nV2l0aExlYWRpbmdaZXJvKGdldFllYXIoZGF0ZSkgJSAxMDAsIDIpO1xuY29uc3QgeXl5eSA9IChkYXRlKSA9PiBudW1iZXJUb1N0cmluZ1dpdGhMZWFkaW5nWmVybyhnZXRZZWFyKGRhdGUpLCA0KTtcbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gZm9ybWF0XG4gICAgICAgIC5yZXBsYWNlKC95eXl5L2csIHl5eXkoZGF0ZSkpXG4gICAgICAgIC5yZXBsYWNlKC95eS9nLCB5eShkYXRlKSlcbiAgICAgICAgLnJlcGxhY2UoL01NTU0vZywgTU1NTShkYXRlLCBsb2NhbGUpKVxuICAgICAgICAucmVwbGFjZSgvTU1NL2csIE1NTShkYXRlLCBsb2NhbGUpKVxuICAgICAgICAucmVwbGFjZSgvTU0vZywgTU0oZGF0ZSkpXG4gICAgICAgIC5yZXBsYWNlKC9kZC9nLCBkZChkYXRlKSk7XG59XG5cbmNsYXNzIERhdGVGb3JtYXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGVGb3JtYXQgPSAneXl5eS1NTS1kZCcsIGxvY2FsZSA9ICdkZWZhdWx0Jykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRlRm9ybWF0ID0gZGF0ZUZvcm1hdDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9jYWxlID0gbG9jYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZm9ybWF0KGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgdGhpcy5fcHJpdmF0ZV9fZGF0ZUZvcm1hdCwgdGhpcy5fcHJpdmF0ZV9fbG9jYWxlKTtcbiAgICB9XG59XG5cbmNsYXNzIFRpbWVGb3JtYXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGZvcm1hdCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19mb3JtYXRTdHIgPSBmb3JtYXQgfHwgJyVoOiVtOiVzJztcbiAgICB9XG4gICAgX2ludGVybmFsX2Zvcm1hdChkYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19mb3JtYXRTdHIucmVwbGFjZSgnJWgnLCBudW1iZXJUb1N0cmluZ1dpdGhMZWFkaW5nWmVybyhkYXRlLmdldFVUQ0hvdXJzKCksIDIpKS5cbiAgICAgICAgICAgIHJlcGxhY2UoJyVtJywgbnVtYmVyVG9TdHJpbmdXaXRoTGVhZGluZ1plcm8oZGF0ZS5nZXRVVENNaW51dGVzKCksIDIpKS5cbiAgICAgICAgICAgIHJlcGxhY2UoJyVzJywgbnVtYmVyVG9TdHJpbmdXaXRoTGVhZGluZ1plcm8oZGF0ZS5nZXRVVENTZWNvbmRzKCksIDIpKTtcbiAgICB9XG59XG5cbmNvbnN0IGRlZmF1bHRQYXJhbXMgPSB7XG4gICAgX2ludGVybmFsX2RhdGVGb3JtYXQ6ICd5eXl5LU1NLWRkJyxcbiAgICBfaW50ZXJuYWxfdGltZUZvcm1hdDogJyVoOiVtOiVzJyxcbiAgICBfaW50ZXJuYWxfZGF0ZVRpbWVTZXBhcmF0b3I6ICcgJyxcbiAgICBfaW50ZXJuYWxfbG9jYWxlOiAnZGVmYXVsdCcsXG59O1xuY2xhc3MgRGF0ZVRpbWVGb3JtYXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlclBhcmFtcyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFBhcmFtcyksIHBhcmFtcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGVGb3JtYXR0ZXIgPSBuZXcgRGF0ZUZvcm1hdHRlcihmb3JtYXR0ZXJQYXJhbXMuX2ludGVybmFsX2RhdGVGb3JtYXQsIGZvcm1hdHRlclBhcmFtcy5faW50ZXJuYWxfbG9jYWxlKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUZvcm1hdHRlciA9IG5ldyBUaW1lRm9ybWF0dGVyKGZvcm1hdHRlclBhcmFtcy5faW50ZXJuYWxfdGltZUZvcm1hdCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NlcGFyYXRvciA9IGZvcm1hdHRlclBhcmFtcy5faW50ZXJuYWxfZGF0ZVRpbWVTZXBhcmF0b3I7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9mb3JtYXQoZGF0ZVRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuX3ByaXZhdGVfX2RhdGVGb3JtYXR0ZXIuX2ludGVybmFsX2Zvcm1hdChkYXRlVGltZSl9JHt0aGlzLl9wcml2YXRlX19zZXBhcmF0b3J9JHt0aGlzLl9wcml2YXRlX190aW1lRm9ybWF0dGVyLl9pbnRlcm5hbF9mb3JtYXQoZGF0ZVRpbWUpfWA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0VGlja01hcmtGb3JtYXR0ZXIodGltZVBvaW50LCB0aWNrTWFya1R5cGUsIGxvY2FsZSkge1xuICAgIGNvbnN0IGZvcm1hdE9wdGlvbnMgPSB7fTtcbiAgICBzd2l0Y2ggKHRpY2tNYXJrVHlwZSkge1xuICAgICAgICBjYXNlIDAgLyogVGlja01hcmtUeXBlLlllYXIgKi86XG4gICAgICAgICAgICBmb3JtYXRPcHRpb25zLnllYXIgPSAnbnVtZXJpYyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxIC8qIFRpY2tNYXJrVHlwZS5Nb250aCAqLzpcbiAgICAgICAgICAgIGZvcm1hdE9wdGlvbnMubW9udGggPSAnc2hvcnQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMiAvKiBUaWNrTWFya1R5cGUuRGF5T2ZNb250aCAqLzpcbiAgICAgICAgICAgIGZvcm1hdE9wdGlvbnMuZGF5ID0gJ251bWVyaWMnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMyAvKiBUaWNrTWFya1R5cGUuVGltZSAqLzpcbiAgICAgICAgICAgIGZvcm1hdE9wdGlvbnMuaG91cjEyID0gZmFsc2U7XG4gICAgICAgICAgICBmb3JtYXRPcHRpb25zLmhvdXIgPSAnMi1kaWdpdCc7XG4gICAgICAgICAgICBmb3JtYXRPcHRpb25zLm1pbnV0ZSA9ICcyLWRpZ2l0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQgLyogVGlja01hcmtUeXBlLlRpbWVXaXRoU2Vjb25kcyAqLzpcbiAgICAgICAgICAgIGZvcm1hdE9wdGlvbnMuaG91cjEyID0gZmFsc2U7XG4gICAgICAgICAgICBmb3JtYXRPcHRpb25zLmhvdXIgPSAnMi1kaWdpdCc7XG4gICAgICAgICAgICBmb3JtYXRPcHRpb25zLm1pbnV0ZSA9ICcyLWRpZ2l0JztcbiAgICAgICAgICAgIGZvcm1hdE9wdGlvbnMuc2Vjb25kID0gJzItZGlnaXQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGRhdGUgPSB0aW1lUG9pbnQuX2ludGVybmFsX2J1c2luZXNzRGF5ID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBuZXcgRGF0ZSh0aW1lUG9pbnQuX2ludGVybmFsX3RpbWVzdGFtcCAqIDEwMDApXG4gICAgICAgIDogbmV3IERhdGUoRGF0ZS5VVEModGltZVBvaW50Ll9pbnRlcm5hbF9idXNpbmVzc0RheS55ZWFyLCB0aW1lUG9pbnQuX2ludGVybmFsX2J1c2luZXNzRGF5Lm1vbnRoIC0gMSwgdGltZVBvaW50Ll9pbnRlcm5hbF9idXNpbmVzc0RheS5kYXkpKTtcbiAgICAvLyBmcm9tIGdpdmVuIGRhdGUgd2Ugc2hvdWxkIHVzZSBvbmx5IGFzIFVUQyBkYXRlIG9yIHRpbWVzdGFtcFxuICAgIC8vIGJ1dCB0byBmb3JtYXQgYXMgbG9jYWxlIGRhdGUgd2UgY2FuIGNvbnZlcnQgVVRDIGRhdGUgdG8gbG9jYWwgZGF0ZVxuICAgIGNvbnN0IGxvY2FsRGF0ZUZyb21VdGMgPSBuZXcgRGF0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZS5nZXRVVENEYXRlKCksIGRhdGUuZ2V0VVRDSG91cnMoKSwgZGF0ZS5nZXRVVENNaW51dGVzKCksIGRhdGUuZ2V0VVRDU2Vjb25kcygpLCBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgICByZXR1cm4gbG9jYWxEYXRlRnJvbVV0Yy50b0xvY2FsZVN0cmluZyhsb2NhbGUsIGZvcm1hdE9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBob3Vycyhjb3VudCkge1xuICAgIHJldHVybiBjb3VudCAqIDYwICogNjAgKiAxMDAwO1xufVxuZnVuY3Rpb24gbWludXRlcyhjb3VudCkge1xuICAgIHJldHVybiBjb3VudCAqIDYwICogMTAwMDtcbn1cbmZ1bmN0aW9uIHNlY29uZHMoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgKiAxMDAwO1xufVxuY29uc3QgaW50cmFkYXlXZWlnaHREaXZpc29ycyA9IFtcbiAgICB7IF9pbnRlcm5hbF9kaXZpc29yOiBzZWNvbmRzKDEpLCBfaW50ZXJuYWxfd2VpZ2h0OiAxMCAvKiBUaWNrTWFya1dlaWdodC5TZWNvbmQgKi8gfSxcbiAgICB7IF9pbnRlcm5hbF9kaXZpc29yOiBtaW51dGVzKDEpLCBfaW50ZXJuYWxfd2VpZ2h0OiAyMCAvKiBUaWNrTWFya1dlaWdodC5NaW51dGUxICovIH0sXG4gICAgeyBfaW50ZXJuYWxfZGl2aXNvcjogbWludXRlcyg1KSwgX2ludGVybmFsX3dlaWdodDogMjEgLyogVGlja01hcmtXZWlnaHQuTWludXRlNSAqLyB9LFxuICAgIHsgX2ludGVybmFsX2Rpdmlzb3I6IG1pbnV0ZXMoMzApLCBfaW50ZXJuYWxfd2VpZ2h0OiAyMiAvKiBUaWNrTWFya1dlaWdodC5NaW51dGUzMCAqLyB9LFxuICAgIHsgX2ludGVybmFsX2Rpdmlzb3I6IGhvdXJzKDEpLCBfaW50ZXJuYWxfd2VpZ2h0OiAzMCAvKiBUaWNrTWFya1dlaWdodC5Ib3VyMSAqLyB9LFxuICAgIHsgX2ludGVybmFsX2Rpdmlzb3I6IGhvdXJzKDMpLCBfaW50ZXJuYWxfd2VpZ2h0OiAzMSAvKiBUaWNrTWFya1dlaWdodC5Ib3VyMyAqLyB9LFxuICAgIHsgX2ludGVybmFsX2Rpdmlzb3I6IGhvdXJzKDYpLCBfaW50ZXJuYWxfd2VpZ2h0OiAzMiAvKiBUaWNrTWFya1dlaWdodC5Ib3VyNiAqLyB9LFxuICAgIHsgX2ludGVybmFsX2Rpdmlzb3I6IGhvdXJzKDEyKSwgX2ludGVybmFsX3dlaWdodDogMzMgLyogVGlja01hcmtXZWlnaHQuSG91cjEyICovIH0sXG5dO1xuZnVuY3Rpb24gd2VpZ2h0QnlUaW1lKGN1cnJlbnREYXRlLCBwcmV2RGF0ZSkge1xuICAgIGlmIChjdXJyZW50RGF0ZS5nZXRVVENGdWxsWWVhcigpICE9PSBwcmV2RGF0ZS5nZXRVVENGdWxsWWVhcigpKSB7XG4gICAgICAgIHJldHVybiA3MCAvKiBUaWNrTWFya1dlaWdodC5ZZWFyICovO1xuICAgIH1cbiAgICBlbHNlIGlmIChjdXJyZW50RGF0ZS5nZXRVVENNb250aCgpICE9PSBwcmV2RGF0ZS5nZXRVVENNb250aCgpKSB7XG4gICAgICAgIHJldHVybiA2MCAvKiBUaWNrTWFya1dlaWdodC5Nb250aCAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAoY3VycmVudERhdGUuZ2V0VVRDRGF0ZSgpICE9PSBwcmV2RGF0ZS5nZXRVVENEYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIDUwIC8qIFRpY2tNYXJrV2VpZ2h0LkRheSAqLztcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IGludHJhZGF5V2VpZ2h0RGl2aXNvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKE1hdGguZmxvb3IocHJldkRhdGUuZ2V0VGltZSgpIC8gaW50cmFkYXlXZWlnaHREaXZpc29yc1tpXS5faW50ZXJuYWxfZGl2aXNvcikgIT09IE1hdGguZmxvb3IoY3VycmVudERhdGUuZ2V0VGltZSgpIC8gaW50cmFkYXlXZWlnaHREaXZpc29yc1tpXS5faW50ZXJuYWxfZGl2aXNvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRyYWRheVdlaWdodERpdmlzb3JzW2ldLl9pbnRlcm5hbF93ZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDAgLyogVGlja01hcmtXZWlnaHQuTGVzc1RoYW5TZWNvbmQgKi87XG59XG5mdW5jdGlvbiBjYXN0KHQpIHtcbiAgICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIGZpbGxXZWlnaHRzRm9yUG9pbnRzKHNvcnRlZFRpbWVQb2ludHMsIHN0YXJ0SW5kZXggPSAwKSB7XG4gICAgaWYgKHNvcnRlZFRpbWVQb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHByZXZUaW1lID0gc3RhcnRJbmRleCA9PT0gMCA/IG51bGwgOiBjYXN0KHNvcnRlZFRpbWVQb2ludHNbc3RhcnRJbmRleCAtIDFdLnRpbWUpLl9pbnRlcm5hbF90aW1lc3RhbXA7XG4gICAgbGV0IHByZXZEYXRlID0gcHJldlRpbWUgIT09IG51bGwgPyBuZXcgRGF0ZShwcmV2VGltZSAqIDEwMDApIDogbnVsbDtcbiAgICBsZXQgdG90YWxUaW1lRGlmZiA9IDA7XG4gICAgZm9yIChsZXQgaW5kZXggPSBzdGFydEluZGV4OyBpbmRleCA8IHNvcnRlZFRpbWVQb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb2ludCA9IHNvcnRlZFRpbWVQb2ludHNbaW5kZXhdO1xuICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKGNhc3QoY3VycmVudFBvaW50LnRpbWUpLl9pbnRlcm5hbF90aW1lc3RhbXAgKiAxMDAwKTtcbiAgICAgICAgaWYgKHByZXZEYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjdXJyZW50UG9pbnQudGltZVdlaWdodCA9IHdlaWdodEJ5VGltZShjdXJyZW50RGF0ZSwgcHJldkRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHRvdGFsVGltZURpZmYgKz0gY2FzdChjdXJyZW50UG9pbnQudGltZSkuX2ludGVybmFsX3RpbWVzdGFtcCAtIChwcmV2VGltZSB8fCBjYXN0KGN1cnJlbnRQb2ludC50aW1lKS5faW50ZXJuYWxfdGltZXN0YW1wKTtcbiAgICAgICAgcHJldlRpbWUgPSBjYXN0KGN1cnJlbnRQb2ludC50aW1lKS5faW50ZXJuYWxfdGltZXN0YW1wO1xuICAgICAgICBwcmV2RGF0ZSA9IGN1cnJlbnREYXRlO1xuICAgIH1cbiAgICBpZiAoc3RhcnRJbmRleCA9PT0gMCAmJiBzb3J0ZWRUaW1lUG9pbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gbGV0J3MgZ3Vlc3MgYSB3ZWlnaHQgZm9yIHRoZSBmaXJzdCBwb2ludFxuICAgICAgICAvLyBsZXQncyBzYXkgdGhlIHByZXZpb3VzIHBvaW50IHdhcyBhdmVyYWdlIHRpbWUgYmFjayBpbiB0aGUgaGlzdG9yeVxuICAgICAgICBjb25zdCBhdmVyYWdlVGltZURpZmYgPSBNYXRoLmNlaWwodG90YWxUaW1lRGlmZiAvIChzb3J0ZWRUaW1lUG9pbnRzLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgY29uc3QgYXBwcm94UHJldkRhdGUgPSBuZXcgRGF0ZSgoY2FzdChzb3J0ZWRUaW1lUG9pbnRzWzBdLnRpbWUpLl9pbnRlcm5hbF90aW1lc3RhbXAgLSBhdmVyYWdlVGltZURpZmYpICogMTAwMCk7XG4gICAgICAgIHNvcnRlZFRpbWVQb2ludHNbMF0udGltZVdlaWdodCA9IHdlaWdodEJ5VGltZShuZXcgRGF0ZShjYXN0KHNvcnRlZFRpbWVQb2ludHNbMF0udGltZSkuX2ludGVybmFsX3RpbWVzdGFtcCAqIDEwMDApLCBhcHByb3hQcmV2RGF0ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidXNpbmVzc0RheUNvbnZlcnRlcih0aW1lKSB7XG4gICAgbGV0IGJ1c2luZXNzRGF5ID0gdGltZTtcbiAgICBpZiAoaXNTdHJpbmcodGltZSkpIHtcbiAgICAgICAgYnVzaW5lc3NEYXkgPSBzdHJpbmdUb0J1c2luZXNzRGF5KHRpbWUpO1xuICAgIH1cbiAgICBpZiAoIWlzQnVzaW5lc3NEYXkoYnVzaW5lc3NEYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndGltZSBtdXN0IGJlIG9mIHR5cGUgQnVzaW5lc3NEYXknKTtcbiAgICB9XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGJ1c2luZXNzRGF5LnllYXIsIGJ1c2luZXNzRGF5Lm1vbnRoIC0gMSwgYnVzaW5lc3NEYXkuZGF5LCAwLCAwLCAwLCAwKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2ludGVybmFsX3RpbWVzdGFtcDogTWF0aC5yb3VuZChkYXRlLmdldFRpbWUoKSAvIDEwMDApLFxuICAgICAgICBfaW50ZXJuYWxfYnVzaW5lc3NEYXk6IGJ1c2luZXNzRGF5LFxuICAgIH07XG59XG5mdW5jdGlvbiB0aW1lc3RhbXBDb252ZXJ0ZXIodGltZSkge1xuICAgIGlmICghaXNVVENUaW1lc3RhbXAodGltZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aW1lIG11c3QgYmUgb2YgdHlwZSBpc1VUQ1RpbWVzdGFtcCcpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBfaW50ZXJuYWxfdGltZXN0YW1wOiB0aW1lLFxuICAgIH07XG59XG5mdW5jdGlvbiBzZWxlY3RUaW1lQ29udmVydGVyKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0J1c2luZXNzRGF5KGRhdGFbMF0udGltZSkgfHwgaXNTdHJpbmcoZGF0YVswXS50aW1lKSkge1xuICAgICAgICByZXR1cm4gYnVzaW5lc3NEYXlDb252ZXJ0ZXI7XG4gICAgfVxuICAgIHJldHVybiB0aW1lc3RhbXBDb252ZXJ0ZXI7XG59XG5jb25zdCB2YWxpZERhdGVSZWdleCA9IC9eXFxkXFxkXFxkXFxkLVxcZFxcZC1cXGRcXGQkLztcbmZ1bmN0aW9uIGNvbnZlcnRUaW1lKHRpbWUpIHtcbiAgICBpZiAoaXNVVENUaW1lc3RhbXAodGltZSkpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVzdGFtcENvbnZlcnRlcih0aW1lKTtcbiAgICB9XG4gICAgaWYgKCFpc0J1c2luZXNzRGF5KHRpbWUpKSB7XG4gICAgICAgIHJldHVybiBidXNpbmVzc0RheUNvbnZlcnRlcihzdHJpbmdUb0J1c2luZXNzRGF5KHRpbWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1c2luZXNzRGF5Q29udmVydGVyKHRpbWUpO1xufVxuZnVuY3Rpb24gc3RyaW5nVG9CdXNpbmVzc0RheSh2YWx1ZSkge1xuICAgIHtcbiAgICAgICAgLy8gaW4gc29tZSBicm93c2VycyAoSSBsb29rIGF0IHlvdXIgQ2hyb21lKSB0aGUgRGF0ZSBjb25zdHJ1Y3RvciBtYXkgYWNjZXB0IGludmFsaWQgZGF0ZSBzdHJpbmdcbiAgICAgICAgLy8gYnV0IHBhcnNlcyB0aGVtIGluICdpbXBsZW1lbnRhdGlvbiBzcGVjaWZpYycgd2F5XG4gICAgICAgIC8vIGZvciBleGFtcGxlIDIwMTktMS0xIGlzbid0IHRoZSBzYW1lIGFzIDIwMTktMDEtMDEgKGZvciBDaHJvbWUgYm90aCBhcmUgJ3ZhbGlkJyBkYXRlIHN0cmluZ3MpXG4gICAgICAgIC8vIHNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05Njg5MzlcbiAgICAgICAgLy8gc28sIHdlIG5lZWQgdG8gYmUgc3VyZSB0aGF0IGRhdGUgaGFzIHZhbGlkIGZvcm1hdCB0byBhdm9pZCBzdHJhbmdlIGJlaGF2aW9yIGFuZCBob3VycyBvZiBkZWJ1Z2dpbmdcbiAgICAgICAgLy8gYnV0IGxldCdzIGRvIHRoaXMgaW4gZGV2ZWxvcG1lbnQgYnVpbGQgb25seSBiZWNhdXNlIG9mIHBlcmZcbiAgICAgICAgaWYgKCF2YWxpZERhdGVSZWdleC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGRhdGUgc3RyaW5nPSR7dmFsdWV9LCBleHBlY3RlZCBmb3JtYXQ9eXl5eS1tbS1kZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgaWYgKGlzTmFOKGQuZ2V0VGltZSgpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGF0ZSBzdHJpbmc9JHt2YWx1ZX0sIGV4cGVjdGVkIGZvcm1hdD15eXl5LW1tLWRkYCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGRheTogZC5nZXRVVENEYXRlKCksXG4gICAgICAgIG1vbnRoOiBkLmdldFVUQ01vbnRoKCkgKyAxLFxuICAgICAgICB5ZWFyOiBkLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRTdHJpbmdUb0J1c2luZXNzRGF5KHZhbHVlKSB7XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlLnRpbWUpKSB7XG4gICAgICAgIHZhbHVlLnRpbWUgPSBzdHJpbmdUb0J1c2luZXNzRGF5KHZhbHVlLnRpbWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbnZlcnRTdHJpbmdzVG9CdXNpbmVzc0RheXMoZGF0YSkge1xuICAgIHJldHVybiBkYXRhLmZvckVhY2goY29udmVydFN0cmluZ1RvQnVzaW5lc3NEYXkpO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gd2VpZ2h0VG9UaWNrTWFya1R5cGUod2VpZ2h0LCB0aW1lVmlzaWJsZSwgc2Vjb25kc1Zpc2libGUpIHtcbiAgICBzd2l0Y2ggKHdlaWdodCkge1xuICAgICAgICBjYXNlIDAgLyogVGlja01hcmtXZWlnaHQuTGVzc1RoYW5TZWNvbmQgKi86XG4gICAgICAgIGNhc2UgMTAgLyogVGlja01hcmtXZWlnaHQuU2Vjb25kICovOlxuICAgICAgICAgICAgcmV0dXJuIHRpbWVWaXNpYmxlXG4gICAgICAgICAgICAgICAgPyAoc2Vjb25kc1Zpc2libGUgPyA0IC8qIFRpY2tNYXJrVHlwZS5UaW1lV2l0aFNlY29uZHMgKi8gOiAzIC8qIFRpY2tNYXJrVHlwZS5UaW1lICovKVxuICAgICAgICAgICAgICAgIDogMiAvKiBUaWNrTWFya1R5cGUuRGF5T2ZNb250aCAqLztcbiAgICAgICAgY2FzZSAyMCAvKiBUaWNrTWFya1dlaWdodC5NaW51dGUxICovOlxuICAgICAgICBjYXNlIDIxIC8qIFRpY2tNYXJrV2VpZ2h0Lk1pbnV0ZTUgKi86XG4gICAgICAgIGNhc2UgMjIgLyogVGlja01hcmtXZWlnaHQuTWludXRlMzAgKi86XG4gICAgICAgIGNhc2UgMzAgLyogVGlja01hcmtXZWlnaHQuSG91cjEgKi86XG4gICAgICAgIGNhc2UgMzEgLyogVGlja01hcmtXZWlnaHQuSG91cjMgKi86XG4gICAgICAgIGNhc2UgMzIgLyogVGlja01hcmtXZWlnaHQuSG91cjYgKi86XG4gICAgICAgIGNhc2UgMzMgLyogVGlja01hcmtXZWlnaHQuSG91cjEyICovOlxuICAgICAgICAgICAgcmV0dXJuIHRpbWVWaXNpYmxlID8gMyAvKiBUaWNrTWFya1R5cGUuVGltZSAqLyA6IDIgLyogVGlja01hcmtUeXBlLkRheU9mTW9udGggKi87XG4gICAgICAgIGNhc2UgNTAgLyogVGlja01hcmtXZWlnaHQuRGF5ICovOlxuICAgICAgICAgICAgcmV0dXJuIDIgLyogVGlja01hcmtUeXBlLkRheU9mTW9udGggKi87XG4gICAgICAgIGNhc2UgNjAgLyogVGlja01hcmtXZWlnaHQuTW9udGggKi86XG4gICAgICAgICAgICByZXR1cm4gMSAvKiBUaWNrTWFya1R5cGUuTW9udGggKi87XG4gICAgICAgIGNhc2UgNzAgLyogVGlja01hcmtXZWlnaHQuWWVhciAqLzpcbiAgICAgICAgICAgIHJldHVybiAwIC8qIFRpY2tNYXJrVHlwZS5ZZWFyICovO1xuICAgIH1cbn1cbmNsYXNzIEhvcnpTY2FsZUJlaGF2aW9yVGltZSB7XG4gICAgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX29wdGlvbnM7XG4gICAgfVxuICAgIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy51cGRhdGVGb3JtYXR0ZXIob3B0aW9ucy5sb2NhbGl6YXRpb24pO1xuICAgIH1cbiAgICBwcmVwcm9jZXNzRGF0YShkYXRhKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICBjb252ZXJ0U3RyaW5nc1RvQnVzaW5lc3NEYXlzKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udmVydFN0cmluZ1RvQnVzaW5lc3NEYXkoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlQ29udmVydGVyVG9JbnRlcm5hbE9iaihkYXRhKSB7XG4gICAgICAgIHJldHVybiBlbnN1cmVOb3ROdWxsKHNlbGVjdFRpbWVDb252ZXJ0ZXIoZGF0YSkpO1xuICAgIH1cbiAgICBrZXkoaXRlbSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBcIl9pbnRlcm5hbF90aW1lc3RhbXBcIiBpbiBpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5faW50ZXJuYWxfdGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMua2V5KHRoaXMuY29udmVydEhvcnpJdGVtVG9JbnRlcm5hbChpdGVtKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FjaGVLZXkoaXRlbSkge1xuICAgICAgICBjb25zdCB0aW1lID0gaXRlbTtcbiAgICAgICAgcmV0dXJuIHRpbWUuX2ludGVybmFsX2J1c2luZXNzRGF5ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IERhdGUodGltZS5faW50ZXJuYWxfdGltZXN0YW1wICogMTAwMCkuZ2V0VGltZSgpXG4gICAgICAgICAgICA6IG5ldyBEYXRlKERhdGUuVVRDKHRpbWUuX2ludGVybmFsX2J1c2luZXNzRGF5LnllYXIsIHRpbWUuX2ludGVybmFsX2J1c2luZXNzRGF5Lm1vbnRoIC0gMSwgdGltZS5faW50ZXJuYWxfYnVzaW5lc3NEYXkuZGF5KSkuZ2V0VGltZSgpO1xuICAgIH1cbiAgICBjb252ZXJ0SG9yekl0ZW1Ub0ludGVybmFsKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRUaW1lKGl0ZW0pO1xuICAgIH1cbiAgICB1cGRhdGVGb3JtYXR0ZXIob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX29wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRlRm9ybWF0ID0gb3B0aW9ucy5kYXRlRm9ybWF0O1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy50aW1lU2NhbGUudGltZVZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGVUaW1lRm9ybWF0dGVyID0gbmV3IERhdGVUaW1lRm9ybWF0dGVyKHtcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdCxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdGltZUZvcm1hdDogdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy50aW1lU2NhbGUuc2Vjb25kc1Zpc2libGUgPyAnJWg6JW06JXMnIDogJyVoOiVtJyxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfZGF0ZVRpbWVTZXBhcmF0b3I6ICcgICAnLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9sb2NhbGU6IG9wdGlvbnMubG9jYWxlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRlVGltZUZvcm1hdHRlciA9IG5ldyBEYXRlRm9ybWF0dGVyKGRhdGVGb3JtYXQsIG9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3JtYXRIb3J6SXRlbShpdGVtKSB7XG4gICAgICAgIGNvbnN0IHRwID0gaXRlbTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2RhdGVUaW1lRm9ybWF0dGVyLl9pbnRlcm5hbF9mb3JtYXQobmV3IERhdGUodHAuX2ludGVybmFsX3RpbWVzdGFtcCAqIDEwMDApKTtcbiAgICB9XG4gICAgZm9ybWF0VGlja21hcmsodGlja01hcmssIGxvY2FsaXphdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGlja01hcmtUeXBlID0gd2VpZ2h0VG9UaWNrTWFya1R5cGUodGlja01hcmsud2VpZ2h0LCB0aGlzLl9wcml2YXRlX19vcHRpb25zLnRpbWVTY2FsZS50aW1lVmlzaWJsZSwgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy50aW1lU2NhbGUuc2Vjb25kc1Zpc2libGUpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy50aW1lU2NhbGU7XG4gICAgICAgIGlmIChvcHRpb25zLnRpY2tNYXJrRm9ybWF0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tNYXJrU3RyaW5nID0gb3B0aW9ucy50aWNrTWFya0Zvcm1hdHRlcih0aWNrTWFyay5vcmlnaW5hbFRpbWUsIHRpY2tNYXJrVHlwZSwgbG9jYWxpemF0aW9uT3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICAgICAgaWYgKHRpY2tNYXJrU3RyaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpY2tNYXJrU3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0VGlja01hcmtGb3JtYXR0ZXIodGlja01hcmsudGltZSwgdGlja01hcmtUeXBlLCBsb2NhbGl6YXRpb25PcHRpb25zLmxvY2FsZSk7XG4gICAgfVxuICAgIG1heFRpY2tNYXJrV2VpZ2h0KHRpY2tNYXJrcykge1xuICAgICAgICBsZXQgbWF4V2VpZ2h0ID0gdGlja01hcmtzLnJlZHVjZShtYXJrV2l0aEdyZWF0ZXJXZWlnaHQsIHRpY2tNYXJrc1swXSkud2VpZ2h0O1xuICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IGl0IGxvb2tzIHN0cmFuZ2UgaWYgMTU6MDAgaXMgYm9sZCBidXQgMTQ6MDAgaXMgbm90XG4gICAgICAgIC8vIHNvIGlmIG1heFdlaWdodCA+IFRpY2tNYXJrV2VpZ2h0LkhvdXIxIGFuZCA8IFRpY2tNYXJrV2VpZ2h0LkRheSByZWR1Y2UgaXQgdG8gVGlja01hcmtXZWlnaHQuSG91cjFcbiAgICAgICAgaWYgKG1heFdlaWdodCA+IDMwIC8qIFRpY2tNYXJrV2VpZ2h0LkhvdXIxICovICYmIG1heFdlaWdodCA8IDUwIC8qIFRpY2tNYXJrV2VpZ2h0LkRheSAqLykge1xuICAgICAgICAgICAgbWF4V2VpZ2h0ID0gMzAgLyogVGlja01hcmtXZWlnaHQuSG91cjEgKi87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heFdlaWdodDtcbiAgICB9XG4gICAgZmlsbFdlaWdodHNGb3JQb2ludHMoc29ydGVkVGltZVBvaW50cywgc3RhcnRJbmRleCkge1xuICAgICAgICBmaWxsV2VpZ2h0c0ZvclBvaW50cyhzb3J0ZWRUaW1lUG9pbnRzLCBzdGFydEluZGV4KTtcbiAgICB9XG4gICAgc3RhdGljIF9pbnRlcm5hbF9hcHBseURlZmF1bHRzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKHsgbG9jYWxpemF0aW9uOiB7IGRhdGVGb3JtYXQ6ICdkZCBNTU0gXFwneXknIH0gfSwgb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge30pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBXaGVuIHlvdSdyZSB0cnlpbmcgdG8gdXNlIHRoZSBsaWJyYXJ5IGluIHNlcnZlci1zaWRlIGNvbnRleHQgKGZvciBpbnN0YW5jZSBpbiBTU1IpXG4gKiB5b3UgZG9uJ3QgaGF2ZSBzb21lIGJyb3dzZXItc3BlY2lmaWMgdmFyaWFibGVzIGxpa2UgbmF2aWdhdG9yIG9yIHdpbmRvd1xuICogYW5kIGlmIHRoZSBsaWJyYXJ5IHdpbGwgdXNlIHRoZW0gb24gdGhlIHRvcCBsZXZlbCBvZiB0aGUgbGlicmFyeVxuICogdGhlIGltcG9ydCB3aWxsIGZhaWwgZHVlIFJlZmVyZW5jZUVycm9yXG4gKiB0aHVzLCB0aGlzIGFsbG93cyB1c2UgdGhlIG5hdmlnYXRvciBvbiB0aGUgdG9wIGxldmVsIGFuZCBiZWluZyBpbXBvcnRlZCBpbiBzZXJ2ZXItc2lkZSBjb250ZXh0IGFzIHdlbGxcbiAqIFNlZSBpc3N1ZSAjNDQ2XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdHNsaW50L2NvbmZpZ1xuY29uc3QgaXNSdW5uaW5nT25DbGllbnRTaWRlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5cbmZ1bmN0aW9uIGlzRkYoKSB7XG4gICAgaWYgKCFpc1J1bm5pbmdPbkNsaWVudFNpZGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgPiAtMTtcbn1cbmZ1bmN0aW9uIGlzSU9TKCkge1xuICAgIGlmICghaXNSdW5uaW5nT25DbGllbnRTaWRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgcmV0dXJuIC9pUGhvbmV8aVBhZHxpUG9kLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0pO1xufVxuZnVuY3Rpb24gaXNDaHJvbWUoKSB7XG4gICAgaWYgKCFpc1J1bm5pbmdPbkNsaWVudFNpZGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gd2luZG93LmNocm9tZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgcnVubmluZyBvbiB3aW5kb3dzLlxuZnVuY3Rpb24gaXNXaW5kb3dzKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWlzUnVubmluZ09uQ2xpZW50U2lkZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIG1vcmUgYWNjdXJhdGUgaWYgYXZhaWxhYmxlXG4gICAgaWYgKChfYSA9IG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci51c2VyQWdlbnREYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGxhdGZvcm0pIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnREYXRhLnBsYXRmb3JtID09PSAnV2luZG93cyc7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignd2luJykgPj0gMDtcbn1cbi8vIERldGVybWluZSB3aGV0aGVyIHRoZSBicm93c2VyIGlzIENocm9taXVtIGJhc2VkLlxuZnVuY3Rpb24gaXNDaHJvbWl1bUJhc2VkKCkge1xuICAgIGlmICghaXNSdW5uaW5nT25DbGllbnRTaWRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFuYXZpZ2F0b3IudXNlckFnZW50RGF0YSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50RGF0YS5icmFuZHMuc29tZSgoYnJhbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIGJyYW5kLmJyYW5kLmluY2x1ZGVzKCdDaHJvbWl1bScpO1xuICAgIH0pO1xufVxuXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIl9idWlsZC10aW1lLWNvbnN0YW50c1wiIC8+XG5mdW5jdGlvbiB3YXJuKG1zZykge1xuICAgIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgfVxufVxuXG4vLyBvbiBIaS1EUEkgQ1NTIHNpemUgKiBEZXZpY2UgUGl4ZWwgUmF0aW8gc2hvdWxkIGJlIGludGVnZXIgdG8gYXZvaWQgc21vb3RoaW5nXG4vLyBGb3IgY2hhcnQgd2lkZ2V0IHdlIGRlY3JlYXNlIHRoZSBzaXplIGJlY2F1c2Ugd2UgbXVzdCBiZSBpbnNpZGUgY29udGFpbmVyLlxuLy8gRm9yIHRpbWUgYXhpcyB0aGlzIGlzIG5vdCBpbXBvcnRhbnQsIHNpbmNlIGl0IGp1c3QgYWZmZWN0cyBzcGFjZSBmb3IgcGFuZSB3aWRnZXRzXG5mdW5jdGlvbiBzdWdnZXN0Q2hhcnRTaXplKG9yaWdpbmFsU2l6ZSkge1xuICAgIGNvbnN0IGludGVnZXJXaWR0aCA9IE1hdGguZmxvb3Iob3JpZ2luYWxTaXplLndpZHRoKTtcbiAgICBjb25zdCBpbnRlZ2VySGVpZ2h0ID0gTWF0aC5mbG9vcihvcmlnaW5hbFNpemUuaGVpZ2h0KTtcbiAgICBjb25zdCB3aWR0aCA9IGludGVnZXJXaWR0aCAtIChpbnRlZ2VyV2lkdGggJSAyKTtcbiAgICBjb25zdCBoZWlnaHQgPSBpbnRlZ2VySGVpZ2h0IC0gKGludGVnZXJIZWlnaHQgJSAyKTtcbiAgICByZXR1cm4gc2l6ZSQxKHsgd2lkdGgsIGhlaWdodCB9KTtcbn1cbmZ1bmN0aW9uIHN1Z2dlc3RUaW1lU2NhbGVIZWlnaHQob3JpZ2luYWxIZWlnaHQpIHtcbiAgICByZXR1cm4gb3JpZ2luYWxIZWlnaHQgKyAob3JpZ2luYWxIZWlnaHQgJSAyKTtcbn1cbmZ1bmN0aW9uIHN1Z2dlc3RQcmljZVNjYWxlV2lkdGgob3JpZ2luYWxXaWR0aCkge1xuICAgIHJldHVybiBvcmlnaW5hbFdpZHRoICsgKG9yaWdpbmFsV2lkdGggJSAyKTtcbn1cblxuZnVuY3Rpb24gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHBvczEsIHBvczIpIHtcbiAgICByZXR1cm4gcG9zMS5faW50ZXJuYWxfcG9zaXRpb24gLSBwb3MyLl9pbnRlcm5hbF9wb3NpdGlvbjtcbn1cbmZ1bmN0aW9uIHNwZWVkUHhQZXJNU2VjKHBvczEsIHBvczIsIG1heFNwZWVkKSB7XG4gICAgY29uc3Qgc3BlZWQgPSAocG9zMS5faW50ZXJuYWxfcG9zaXRpb24gLSBwb3MyLl9pbnRlcm5hbF9wb3NpdGlvbikgLyAocG9zMS5faW50ZXJuYWxfdGltZSAtIHBvczIuX2ludGVybmFsX3RpbWUpO1xuICAgIHJldHVybiBNYXRoLnNpZ24oc3BlZWQpICogTWF0aC5taW4oTWF0aC5hYnMoc3BlZWQpLCBtYXhTcGVlZCk7XG59XG5mdW5jdGlvbiBkdXJhdGlvbk1TZWMoc3BlZWQsIGR1bXBpbmdDb2VmZikge1xuICAgIGNvbnN0IGxuRHVtcGluZ0NvZWZmID0gTWF0aC5sb2coZHVtcGluZ0NvZWZmKTtcbiAgICByZXR1cm4gTWF0aC5sb2coKDEgLyogQ29uc3RhbnRzLkVwc2lsb25EaXN0YW5jZSAqLyAqIGxuRHVtcGluZ0NvZWZmKSAvIC1zcGVlZCkgLyAobG5EdW1waW5nQ29lZmYpO1xufVxuY2xhc3MgS2luZXRpY0FuaW1hdGlvbiB7XG4gICAgY29uc3RydWN0b3IobWluU3BlZWQsIG1heFNwZWVkLCBkdW1waW5nQ29lZmYsIG1pbk1vdmUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24yID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb240ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYW5pbWF0aW9uU3RhcnRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2R1cmF0aW9uTXNlY3MgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zcGVlZFB4UGVyTXNlYyA9IDA7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21pblNwZWVkID0gbWluU3BlZWQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21heFNwZWVkID0gbWF4U3BlZWQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2R1bXBpbmdDb2VmZiA9IGR1bXBpbmdDb2VmZjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbWluTW92ZSA9IG1pbk1vdmU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hZGRQb3NpdGlvbihwb3NpdGlvbiwgdGltZSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xLl9pbnRlcm5hbF90aW1lID09PSB0aW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xLl9pbnRlcm5hbF9wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLl9wcml2YXRlX19wb3NpdGlvbjEuX2ludGVybmFsX3Bvc2l0aW9uIC0gcG9zaXRpb24pIDwgdGhpcy5fcHJpdmF0ZV9fbWluTW92ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19wb3NpdGlvbjQgPSB0aGlzLl9wcml2YXRlX19wb3NpdGlvbjM7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uMyA9IHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uMjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24yID0gdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wb3NpdGlvbjEgPSB7IF9pbnRlcm5hbF90aW1lOiB0aW1lLCBfaW50ZXJuYWxfcG9zaXRpb246IHBvc2l0aW9uIH07XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zdGFydChwb3NpdGlvbiwgdGltZSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xID09PSBudWxsIHx8IHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uMiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lIC0gdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xLl9pbnRlcm5hbF90aW1lID4gNTAgLyogQ29uc3RhbnRzLk1heFN0YXJ0RGVsYXkgKi8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUbyBjYWxjdWxhdGUgYWxsIHRoZSByZXN0IHBhcmFtZXRlcnMgd2Ugc2hvdWxkIGNhbGN1bGF0ZSB0aGUgc3BlZWQgYWYgZmlyc3RcbiAgICAgICAgbGV0IHRvdGFsRGlzdGFuY2UgPSAwO1xuICAgICAgICBjb25zdCBzcGVlZDEgPSBzcGVlZFB4UGVyTVNlYyh0aGlzLl9wcml2YXRlX19wb3NpdGlvbjEsIHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uMiwgdGhpcy5fcHJpdmF0ZV9fbWF4U3BlZWQpO1xuICAgICAgICBjb25zdCBkaXN0YW5jZTEgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHModGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24xLCB0aGlzLl9wcml2YXRlX19wb3NpdGlvbjIpO1xuICAgICAgICAvLyBXZSdyZSBjYWxjdWxhdGluZyB3ZWlnaHRlZCBhdmVyYWdlIHNwZWVkXG4gICAgICAgIC8vIFRoYW4gbW9yZSBkaXN0YW5jZSBmb3IgYSBzZWdtZW50LCB0aGFuIG1vcmUgaXRzIHdlaWdodFxuICAgICAgICBjb25zdCBzcGVlZEl0ZW1zID0gW3NwZWVkMV07XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlSXRlbXMgPSBbZGlzdGFuY2UxXTtcbiAgICAgICAgdG90YWxEaXN0YW5jZSArPSBkaXN0YW5jZTE7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19wb3NpdGlvbjMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwZWVkMiA9IHNwZWVkUHhQZXJNU2VjKHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uMiwgdGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24zLCB0aGlzLl9wcml2YXRlX19tYXhTcGVlZCk7XG4gICAgICAgICAgICAvLyBzdG9wIGF0IHRoaXMgbW9tZW50IGlmIGRpcmVjdGlvbiBvZiB0aGUgc2VnbWVudCBpcyBvcHBvc2l0ZVxuICAgICAgICAgICAgaWYgKE1hdGguc2lnbihzcGVlZDIpID09PSBNYXRoLnNpZ24oc3BlZWQxKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlMiA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyh0aGlzLl9wcml2YXRlX19wb3NpdGlvbjIsIHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uMyk7XG4gICAgICAgICAgICAgICAgc3BlZWRJdGVtcy5wdXNoKHNwZWVkMik7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2VJdGVtcy5wdXNoKGRpc3RhbmNlMik7XG4gICAgICAgICAgICAgICAgdG90YWxEaXN0YW5jZSArPSBkaXN0YW5jZTI7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uNCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGVlZDMgPSBzcGVlZFB4UGVyTVNlYyh0aGlzLl9wcml2YXRlX19wb3NpdGlvbjMsIHRoaXMuX3ByaXZhdGVfX3Bvc2l0aW9uNCwgdGhpcy5fcHJpdmF0ZV9fbWF4U3BlZWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5zaWduKHNwZWVkMykgPT09IE1hdGguc2lnbihzcGVlZDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZTMgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHModGhpcy5fcHJpdmF0ZV9fcG9zaXRpb24zLCB0aGlzLl9wcml2YXRlX19wb3NpdGlvbjQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWRJdGVtcy5wdXNoKHNwZWVkMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZUl0ZW1zLnB1c2goZGlzdGFuY2UzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsRGlzdGFuY2UgKz0gZGlzdGFuY2UzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHRTcGVlZCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BlZWRJdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmVzdWx0U3BlZWQgKz0gZGlzdGFuY2VJdGVtc1tpXSAvIHRvdGFsRGlzdGFuY2UgKiBzcGVlZEl0ZW1zW2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChNYXRoLmFicyhyZXN1bHRTcGVlZCkgPCB0aGlzLl9wcml2YXRlX19taW5TcGVlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FuaW1hdGlvblN0YXJ0UG9zaXRpb24gPSB7IF9pbnRlcm5hbF9wb3NpdGlvbjogcG9zaXRpb24sIF9pbnRlcm5hbF90aW1lOiB0aW1lIH07XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NwZWVkUHhQZXJNc2VjID0gcmVzdWx0U3BlZWQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2R1cmF0aW9uTXNlY3MgPSBkdXJhdGlvbk1TZWMoTWF0aC5hYnMocmVzdWx0U3BlZWQpLCB0aGlzLl9wcml2YXRlX19kdW1waW5nQ29lZmYpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZ2V0UG9zaXRpb24odGltZSkge1xuICAgICAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19hbmltYXRpb25TdGFydFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgZHVyYXRpb25Nc2VjcyA9IHRpbWUgLSBzdGFydFBvc2l0aW9uLl9pbnRlcm5hbF90aW1lO1xuICAgICAgICByZXR1cm4gc3RhcnRQb3NpdGlvbi5faW50ZXJuYWxfcG9zaXRpb24gKyB0aGlzLl9wcml2YXRlX19zcGVlZFB4UGVyTXNlYyAqIChNYXRoLnBvdyh0aGlzLl9wcml2YXRlX19kdW1waW5nQ29lZmYsIGR1cmF0aW9uTXNlY3MpIC0gMSkgLyAoTWF0aC5sb2codGhpcy5fcHJpdmF0ZV9fZHVtcGluZ0NvZWZmKSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9maW5pc2hlZCh0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19hbmltYXRpb25TdGFydFBvc2l0aW9uID09PSBudWxsIHx8IHRoaXMuX3ByaXZhdGVfX3Byb2dyZXNzRHVyYXRpb24odGltZSkgPT09IHRoaXMuX3ByaXZhdGVfX2R1cmF0aW9uTXNlY3M7XG4gICAgfVxuICAgIF9wcml2YXRlX19wcm9ncmVzc0R1cmF0aW9uKHRpbWUpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fYW5pbWF0aW9uU3RhcnRQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gdGltZSAtIHN0YXJ0UG9zaXRpb24uX2ludGVybmFsX3RpbWU7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihwcm9ncmVzcywgdGhpcy5fcHJpdmF0ZV9fZHVyYXRpb25Nc2Vjcyk7XG4gICAgfVxufVxuXG5jb25zdCBzdmcgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAzNSAxOVwiIHdpZHRoPVwiMzVcIiBoZWlnaHQ9XCIxOVwiIGZpbGw9XCJub25lXCI+PGcgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcGF0aD1cInVybCgjYSlcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCI+PHBhdGggZmlsbD1cInZhcigtLXN0cm9rZSlcIiBkPVwiTTIgMEgwdjEwaDZ2OWgyMS40bC41LTEuMyA2LTE1IDEtMi43SDIzLjdsLS41IDEuMy0uMi42YTUgNSAwIDAgMC03LS45VjBIMlptMjAgMTdoNGw1LjItMTMgLjgtMmgtN2wtMSAyLjUtLjIuNS0xLjUgMy44LS4zLjdWMTdabS0uOC0xMGEzIDMgMCAwIDAgLjctMi43QTMgMyAwIDEgMCAxNi44IDdoNC40Wk0xNCA3VjJIMnY2aDZ2OWg0VjdoMlpcIi8+PHBhdGggZmlsbD1cInZhcigtLWZpbGwpXCIgZD1cIk0xNCAySDJ2Nmg2djloNlYyWm0xMiAxNWgtN2w2LTE1aDdsLTYgMTVabS03LTlhMyAzIDAgMSAwIDAtNiAzIDMgMCAwIDAgMCA2WlwiLz48L2c+PGRlZnM+PGNsaXBQYXRoIGlkPVwiYVwiPjxwYXRoIGZpbGw9XCJ2YXIoLS1zdHJva2UpXCIgZD1cIk0wIDBoMzV2MTlIMHpcIi8+PC9jbGlwUGF0aD48L2RlZnM+PC9zdmc+YDtcbmNvbnN0IGNzcyA9IGBhI3R2LWF0dHItbG9nb3stLWZpbGw6IzEzMTcyMjstLXN0cm9rZTojZmZmO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MTBweDtib3R0b206MTBweDtoZWlnaHQ6MTlweDt3aWR0aDozNXB4O21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDt6LWluZGV4OjM7fWEjdHYtYXR0ci1sb2dvW2RhdGEtZGFya117LS1maWxsOiNEMUQ0REM7LS1zdHJva2U6IzEzMTcyMjt9YDtcbi8vIFRoaXMgd2lkZ2V0IGRvZXNuJ3Qgc3VwcG9ydCBkeW5hbWljYWxseSByZXNwb25kaW5nIHRvIG9wdGlvbnMgY2hhbmdlc1xuLy8gYmVjYXVzZSBpdCBpcyBleHBlY3RlZCB0aGF0IHRoZSBgYXR0cmlidXRpb25Mb2dvYCBvcHRpb24gd29uJ3QgYmUgY2hhbmdlZFxuLy8gYW5kIHRoaXMgc2F2ZXMgc29tZSBidW5kbGUgc2l6ZS5cbmNsYXNzIEF0dHJpYnV0aW9uTG9nb1dpZGdldCB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBjaGFydCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jc3NFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aGVtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlbmRlcigpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXIoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlbW92ZUVsZW1lbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fcHJpdmF0ZV9fZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2Nzc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLl9wcml2YXRlX19jc3NFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jc3NFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2hvdWxkVXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fdmlzaWJsZSAhPT0gdGhpcy5fcHJpdmF0ZV9fc2hvdWxkQmVWaXNpYmxlKCkgfHwgdGhpcy5fcHJpdmF0ZV9fdGhlbWUgIT09IHRoaXMuX3ByaXZhdGVfX3RoZW1lVG9Vc2UoKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3RoZW1lVG9Vc2UoKSB7XG4gICAgICAgIHJldHVybiBjb2xvclN0cmluZ1RvR3JheXNjYWxlKHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9vcHRpb25zKCkubGF5b3V0LnRleHRDb2xvcikgPiAxNjAgPyAnZGFyaycgOiAnbGlnaHQnO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2hvdWxkQmVWaXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX29wdGlvbnMoKS5sYXlvdXQuYXR0cmlidXRpb25Mb2dvO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZ2V0VVRNU291cmNlKCkge1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBpZiAoIXVybC5ob3N0bmFtZSkge1xuICAgICAgICAgICAgLy8gaWdub3JlIGxvY2FsIHRlc3RpbmdcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyZ1dG1fc291cmNlPScgKyB1cmwuaG9zdG5hbWUgKyB1cmwucGF0aG5hbWU7XG4gICAgfVxuICAgIF9wcml2YXRlX19yZW5kZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fc2hvdWxkVXBkYXRlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF9yZW1vdmVFbGVtZW50KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Zpc2libGUgPSB0aGlzLl9wcml2YXRlX19zaG91bGRCZVZpc2libGUoKTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Zpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RoZW1lID0gdGhpcy5fcHJpdmF0ZV9fdGhlbWVUb1VzZSgpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3NzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jc3NFbGVtZW50LmlubmVyVGV4dCA9IGNzcztcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50LmhyZWYgPSBgaHR0cHM6Ly93d3cudHJhZGluZ3ZpZXcuY29tLz91dG1fbWVkaXVtPWx3Yy1saW5rJnV0bV9jYW1wYWlnbj1sd2MtY2hhcnQke3RoaXMuX3ByaXZhdGVfX2dldFVUTVNvdXJjZSgpfWA7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50LnRpdGxlID0gJ0NoYXJ0aW5nIGJ5IFRyYWRpbmdWaWV3JztcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQuaWQgPSAndHYtYXR0ci1sb2dvJztcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQudGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50LmlubmVySFRNTCA9IHN2ZztcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQudG9nZ2xlQXR0cmlidXRlKCdkYXRhLWRhcmsnLCB0aGlzLl9wcml2YXRlX190aGVtZSA9PT0gJ2RhcmsnKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX19jc3NFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX19lbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQm91bmRDYW52YXMocGFyZW50RWxlbWVudCwgc2l6ZSkge1xuICAgIGNvbnN0IGRvYyA9IGVuc3VyZU5vdE51bGwocGFyZW50RWxlbWVudC5vd25lckRvY3VtZW50KTtcbiAgICBjb25zdCBjYW52YXMgPSBkb2MuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgIGNvbnN0IGJpbmRpbmcgPSBiaW5kQ2FudmFzRWxlbWVudEJpdG1hcFNpemVUbyhjYW52YXMsIHtcbiAgICAgICAgdHlwZTogJ2RldmljZS1waXhlbC1jb250ZW50LWJveCcsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGFsbG93UmVzaXplT2JzZXJ2ZXI6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm06IChiaXRtYXBTaXplLCBjYW52YXNFbGVtZW50Q2xpZW50U2l6ZSkgPT4gKHtcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLm1heChiaXRtYXBTaXplLndpZHRoLCBjYW52YXNFbGVtZW50Q2xpZW50U2l6ZS53aWR0aCksXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgubWF4KGJpdG1hcFNpemUuaGVpZ2h0LCBjYW52YXNFbGVtZW50Q2xpZW50U2l6ZS5oZWlnaHQpLFxuICAgICAgICB9KSxcbiAgICB9KTtcbiAgICBiaW5kaW5nLnJlc2l6ZUNhbnZhc0VsZW1lbnQoc2l6ZSk7XG4gICAgcmV0dXJuIGJpbmRpbmc7XG59XG5mdW5jdGlvbiByZWxlYXNlQ2FudmFzKGNhbnZhcykge1xuICAgIHZhciBfYTtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGZpeGVzIHRoZSBpT1MgU2FmYXJpIGVycm9yIFwiVG90YWwgY2FudmFzIG1lbW9yeSB1c2UgZXhjZWVkcyB0aGUgbWF4aW11bSBsaW1pdFwiLlxuICAgIC8vIFNlZW1zIHRoYXQgaU9TIFNhZmFyaSBzdG9yZXMgY2FudmFzIGVsZW1lbnRzIGZvciBzb21lIGFkZGl0aW9uYWwgdGltZSBpbnRlcm5hbGx5LlxuICAgIC8vIFNvIGlmIHdlIGNyZWF0ZS9kZXN0cm95IGEgbG90IG9mIGNhbnZhcyBlbGVtZW50cyBpbiBhIHNob3J0IHBlcmlvZCBvZiB0aW1lIHdlIGNhbiBnZXQgdGhpcyBlcnJvci5cbiAgICAvLyBXZSByZXNpemUgdGhlIGNhbnZhcyB0byAxeDEgcGl4ZWxzIHRvIGZvcmNlIGl0IHRvIHJlbGVhc2UgbWVtbW9yeSByZXNvdXJjZXMuXG4gICAgY2FudmFzLndpZHRoID0gMTtcbiAgICBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICAoX2EgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsZWFyUmVjdCgwLCAwLCAxLCAxKTtcbn1cblxuZnVuY3Rpb24gZHJhd0JhY2tncm91bmQocmVuZGVyZXIsIHRhcmdldCwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSkge1xuICAgIGlmIChyZW5kZXJlci5faW50ZXJuYWxfZHJhd0JhY2tncm91bmQpIHtcbiAgICAgICAgcmVuZGVyZXIuX2ludGVybmFsX2RyYXdCYWNrZ3JvdW5kKHRhcmdldCwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhd0ZvcmVncm91bmQocmVuZGVyZXIsIHRhcmdldCwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSkge1xuICAgIHJlbmRlcmVyLl9pbnRlcm5hbF9kcmF3KHRhcmdldCwgaXNIb3ZlcmVkLCBoaXRUZXN0RGF0YSk7XG59XG5mdW5jdGlvbiBkcmF3U291cmNlUGFuZVZpZXdzKHBhbmVWaWV3c0dldHRlciwgZHJhd1JlbmRlcmVyRm4sIHNvdXJjZSwgcGFuZSkge1xuICAgIGNvbnN0IHBhbmVWaWV3cyA9IHBhbmVWaWV3c0dldHRlcihzb3VyY2UsIHBhbmUpO1xuICAgIGZvciAoY29uc3QgcGFuZVZpZXcgb2YgcGFuZVZpZXdzKSB7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gcGFuZVZpZXcuX2ludGVybmFsX3JlbmRlcmVyKCk7XG4gICAgICAgIGlmIChyZW5kZXJlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZHJhd1JlbmRlcmVyRm4ocmVuZGVyZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcmV2ZW50U2Nyb2xsQnlXaGVlbENsaWNrKGVsKSB7XG4gICAgaWYgKCFpc0Nocm9tZSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUuYnV0dG9uID09PSAxIC8qIE1vdXNlRXZlbnRCdXR0b24uTWlkZGxlICovKSB7XG4gICAgICAgICAgICAvLyBwcmV2ZW50IGluY29ycmVjdCBzY3JvbGxpbmcgZXZlbnRcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pO1xufVxuXG4vLyBUT0RPOiBnZXQgcmlkIG9mIGEgbG90IG9mIGJvb2xlYW4gZmxhZ3MsIHByb2JhYmx5IHdlIHNob3VsZCByZXBsYWNlIGl0IHdpdGggc29tZSBlbnVtXG5jbGFzcyBNb3VzZUV2ZW50SGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsaWNrQ291bnQgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jbGlja1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsaWNrUG9zaXRpb24gPSB7IF9pbnRlcm5hbF94OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksIF9pbnRlcm5hbF95OiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFwQ291bnQgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YXBUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YXBQb3NpdGlvbiA9IHsgX2ludGVybmFsX3g6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgX2ludGVybmFsX3k6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb25nVGFwVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9uZ1RhcEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZU1vdmVTdGFydFBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG91Y2hNb3ZlU3RhcnRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvdWNoTW92ZUV4Y2VlZGVkTWFuaGF0dGFuRGlzdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FuY2VsQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FuY2VsVGFwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlT3V0c2lkZU1vdXNlRXZlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVPdXRzaWRlVG91Y2hFdmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZU1vYmlsZVNhZmFyaUV2ZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlTW91c2Vtb3ZlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVSb290TW91c2VFdmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RUb3VjaEV2ZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXJ0UGluY2hNaWRkbGVQb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXJ0UGluY2hEaXN0YW5jZSA9IDA7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BpbmNoUHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByZXZlbnRUb3VjaERyYWdQcm9jZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vdXNlUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sYXN0VG91Y2hFdmVudFRpbWVTdGFtcCA9IDA7XG4gICAgICAgIC8vIGZvciB0b3VjaHN0YXJ0L3RvdWNobW92ZS90b3VjaGVuZCBldmVudHMgd2UgaGFuZGxlIG9ubHkgZmlyc3QgdG91Y2hcbiAgICAgICAgLy8gaS5lLiB3ZSBkb24ndCBzdXBwb3J0IHNldmVyYWwgYWN0aXZlIHRvdWNoZXMgYXQgdGhlIHNhbWUgdGltZSAoZXhjZXB0IHBpbmNoIGV2ZW50KVxuICAgICAgICB0aGlzLl9wcml2YXRlX19hY3RpdmVUb3VjaElkID0gbnVsbDtcbiAgICAgICAgLy8gYWNjZXB0IGFsbCBtb3VzZSBsZWF2ZSBldmVudHMgaWYgaXQncyBub3QgYW4gaU9TIGRldmljZVxuICAgICAgICAvLyBzZWUgX21vdXNlRW50ZXJIYW5kbGVyLCBfbW91c2VNb3ZlSGFuZGxlciwgX21vdXNlTGVhdmVIYW5kbGVyXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FjY2VwdE1vdXNlTGVhdmUgPSAhaXNJT1MoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluIEZpcmVmb3ggbW91c2UgZXZlbnRzIGRvbnQndCBmaXJlIGlmIHRoZSBtb3VzZSBwb3NpdGlvbiBpcyBvdXRzaWRlIG9mIHRoZSBicm93c2VyJ3MgYm9yZGVyLlxuICAgICAgICAgKiBUbyBwcmV2ZW50IHRoZSBtb3VzZSBmcm9tIGhhbmdpbmcgd2hpbGUgcHJlc3NlZCB3ZSdyZSBzdWJzY3JpYmluZyBvbiB0aGUgbW91c2VsZWF2ZSBldmVudCBvZiB0aGUgZG9jdW1lbnQgZWxlbWVudC5cbiAgICAgICAgICogV2UncmUgc3Vic2NyaWJpbmcgb24gbW91c2VsZWF2ZSwgYnV0IHRoaXMgZXZlbnQgaXMgYWN0dWFsbHkgZmlyZWQgb24gbW91c2V1cCBvdXRzaWRlIG9mIHRoZSBicm93c2VyJ3MgYm9yZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb25GaXJlZm94T3V0c2lkZU1vdXNlVXAgPSAobW91c2VVcEV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZVVwSGFuZGxlcihtb3VzZVVwRXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2FmYXJpIGRvZXNuJ3QgZmlyZSB0b3VjaHN0YXJ0L21vdXNlZG93biBldmVudHMgb24gZG91YmxlIHRhcCBzaW5jZSBpT1MgMTMuXG4gICAgICAgICAqIFRoZXJlIGFyZSB0d28gcG9zc2libGUgc29sdXRpb25zOlxuICAgICAgICAgKiAxKSBDYWxsIHByZXZlbnREZWZhdWx0IGluIHRvdWNoRW5kIGhhbmRsZXIuIEJ1dCBpdCBhbHNvIHByZXZlbnRzIGNsaWNrIGV2ZW50IGZyb20gZmlyaW5nLlxuICAgICAgICAgKiAyKSBBZGQgbGlzdGVuZXIgb24gZGJsY2xpY2sgZXZlbnQgdGhhdCBmaXJlcyB3aXRoIHRoZSBwcmVjZWRpbmcgbW91c2Vkb3duL21vdXNldXAuXG4gICAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9mb3J1bXMvdGhyZWFkLzEyNTA3M1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb25Nb2JpbGVTYWZhcmlEb3VibGVDbGljayA9IChkYmxDbGlja0V2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZmlyZXNUb3VjaEV2ZW50cyhkYmxDbGlja0V2ZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhdEV2ZW50ID0gdGhpcy5fcHJpdmF0ZV9fbWFrZUNvbXBhdEV2ZW50KGRibENsaWNrRXZlbnQpO1xuICAgICAgICAgICAgICAgICsrdGhpcy5fcHJpdmF0ZV9fdGFwQ291bnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3RhcFRpbWVvdXRJZCAmJiB0aGlzLl9wcml2YXRlX190YXBDb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxfbWFuaGF0dGFuRGlzdGFuY2U6IG1hbmhhdHRhbkRpc3RhbmNlIH0gPSB0aGlzLl9wcml2YXRlX190b3VjaE1vdXNlTW92ZVdpdGhEb3duSW5mbyhnZXRQb3NpdGlvbihkYmxDbGlja0V2ZW50KSwgdGhpcy5fcHJpdmF0ZV9fdGFwUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFuaGF0dGFuRGlzdGFuY2UgPCAzMCAvKiBDb25zdGFudHMuRG91YmxlVGFwTWFuaGF0dGFuRGlzdGFuY2UgKi8gJiYgIXRoaXMuX3ByaXZhdGVfX2NhbmNlbFRhcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJvY2Vzc1RvdWNoRXZlbnQoY29tcGF0RXZlbnQsIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX2RvdWJsZVRhcEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yZXNldFRhcFRpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wYXRFdmVudCA9IHRoaXMuX3ByaXZhdGVfX21ha2VDb21wYXRFdmVudChkYmxDbGlja0V2ZW50KTtcbiAgICAgICAgICAgICAgICArK3RoaXMuX3ByaXZhdGVfX2NsaWNrQ291bnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2NsaWNrVGltZW91dElkICYmIHRoaXMuX3ByaXZhdGVfX2NsaWNrQ291bnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgX2ludGVybmFsX21hbmhhdHRhbkRpc3RhbmNlOiBtYW5oYXR0YW5EaXN0YW5jZSB9ID0gdGhpcy5fcHJpdmF0ZV9fdG91Y2hNb3VzZU1vdmVXaXRoRG93bkluZm8oZ2V0UG9zaXRpb24oZGJsQ2xpY2tFdmVudCksIHRoaXMuX3ByaXZhdGVfX2NsaWNrUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFuaGF0dGFuRGlzdGFuY2UgPCA1IC8qIENvbnN0YW50cy5Eb3VibGVDbGlja01hbmhhdHRhbkRpc3RhbmNlICovICYmICF0aGlzLl9wcml2YXRlX19jYW5jZWxDbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJvY2Vzc01vdXNlRXZlbnQoY29tcGF0RXZlbnQsIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX21vdXNlRG91YmxlQ2xpY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVzZXRDbGlja1RpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pbml0KCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVPdXRzaWRlTW91c2VFdmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlT3V0c2lkZU1vdXNlRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZU91dHNpZGVNb3VzZUV2ZW50cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlT3V0c2lkZVRvdWNoRXZlbnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZU91dHNpZGVUb3VjaEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVPdXRzaWRlVG91Y2hFdmVudHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZU1vdXNlbW92ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVNb3VzZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlTW91c2Vtb3ZlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVSb290TW91c2VFdmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlUm9vdE1vdXNlRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RNb3VzZUV2ZW50cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlUm9vdFRvdWNoRXZlbnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RUb3VjaEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVSb290VG91Y2hFdmVudHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZU1vYmlsZVNhZmFyaUV2ZW50cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVNb2JpbGVTYWZhcmlFdmVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlTW9iaWxlU2FmYXJpRXZlbnRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19jbGVhckxvbmdUYXBUaW1lb3V0KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Jlc2V0Q2xpY2tUaW1lb3V0KCk7XG4gICAgfVxuICAgIF9wcml2YXRlX19tb3VzZUVudGVySGFuZGxlcihlbnRlckV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZU1vdXNlbW92ZSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVNb3VzZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib3VuZE1vdXNlTW92ZUhhbmRsZXIgPSB0aGlzLl9wcml2YXRlX19tb3VzZU1vdmVIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlTW91c2Vtb3ZlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGJvdW5kTW91c2VNb3ZlSGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBib3VuZE1vdXNlTW92ZUhhbmRsZXIpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZmlyZXNUb3VjaEV2ZW50cyhlbnRlckV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbXBhdEV2ZW50ID0gdGhpcy5fcHJpdmF0ZV9fbWFrZUNvbXBhdEV2ZW50KGVudGVyRXZlbnQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcm9jZXNzTW91c2VFdmVudChjb21wYXRFdmVudCwgdGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfbW91c2VFbnRlckV2ZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYWNjZXB0TW91c2VMZWF2ZSA9IHRydWU7XG4gICAgfVxuICAgIF9wcml2YXRlX19yZXNldENsaWNrVGltZW91dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2NsaWNrVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcHJpdmF0ZV9fY2xpY2tUaW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsaWNrQ291bnQgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jbGlja1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsaWNrUG9zaXRpb24gPSB7IF9pbnRlcm5hbF94OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksIF9pbnRlcm5hbF95OiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgfTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3Jlc2V0VGFwVGltZW91dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3RhcFRpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3ByaXZhdGVfX3RhcFRpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFwQ291bnQgPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YXBUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YXBQb3NpdGlvbiA9IHsgX2ludGVybmFsX3g6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgX2ludGVybmFsX3k6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSB9O1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fbW91c2VNb3ZlSGFuZGxlcihtb3ZlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX21vdXNlUHJlc3NlZCB8fCB0aGlzLl9wcml2YXRlX190b3VjaE1vdmVTdGFydFBvc2l0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2ZpcmVzVG91Y2hFdmVudHMobW92ZUV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbXBhdEV2ZW50ID0gdGhpcy5fcHJpdmF0ZV9fbWFrZUNvbXBhdEV2ZW50KG1vdmVFdmVudCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Byb2Nlc3NNb3VzZUV2ZW50KGNvbXBhdEV2ZW50LCB0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9tb3VzZU1vdmVFdmVudCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FjY2VwdE1vdXNlTGVhdmUgPSB0cnVlO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fdG91Y2hNb3ZlSGFuZGxlcihtb3ZlRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaFdpdGhJZChtb3ZlRXZlbnQuY2hhbmdlZFRvdWNoZXMsIGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fYWN0aXZlVG91Y2hJZCkpO1xuICAgICAgICBpZiAodG91Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19sYXN0VG91Y2hFdmVudFRpbWVTdGFtcCA9IGV2ZW50VGltZVN0YW1wKG1vdmVFdmVudCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zdGFydFBpbmNoTWlkZGxlUG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcHJldmVudFRvdWNoRHJhZ1Byb2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmV2ZW50IHBpbmNoIGlmIG1vdmUgZXZlbnQgY29tZXMgZmFzdGVyIHRoYW4gdGhlIHNlY29uZCB0b3VjaFxuICAgICAgICB0aGlzLl9wcml2YXRlX19waW5jaFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IG1vdmVJbmZvID0gdGhpcy5fcHJpdmF0ZV9fdG91Y2hNb3VzZU1vdmVXaXRoRG93bkluZm8oZ2V0UG9zaXRpb24odG91Y2gpLCBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX3RvdWNoTW92ZVN0YXJ0UG9zaXRpb24pKTtcbiAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxfeE9mZnNldDogeE9mZnNldCwgX2ludGVybmFsX3lPZmZzZXQ6IHlPZmZzZXQsIF9pbnRlcm5hbF9tYW5oYXR0YW5EaXN0YW5jZTogbWFuaGF0dGFuRGlzdGFuY2UgfSA9IG1vdmVJbmZvO1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX3RvdWNoTW92ZUV4Y2VlZGVkTWFuaGF0dGFuRGlzdGFuY2UgJiYgbWFuaGF0dGFuRGlzdGFuY2UgPCA1IC8qIENvbnN0YW50cy5DYW5jZWxUYXBNYW5oYXR0YW5EaXN0YW5jZSAqLykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fdG91Y2hNb3ZlRXhjZWVkZWRNYW5oYXR0YW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgLy8gZmlyc3QgdGltZSB3aGVuIGN1cnJlbnQgcG9zaXRpb24gZXhjZWVkZWQgbWFuaGF0dGFuIGRpc3RhbmNlXG4gICAgICAgICAgICAvLyB2ZXJ0aWNhbCBkcmFnIGlzIG1vcmUgaW1wb3J0YW50IHRoYW4gaG9yaXpvbnRhbCBkcmFnXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIHNjcm9sbCB0aGUgcGFnZSB2ZXJ0aWNhbGx5IG9mdGVuIHRoYW4gaG9yaXpvbnRhbGx5XG4gICAgICAgICAgICBjb25zdCBjb3JyZWN0ZWRYT2Zmc2V0ID0geE9mZnNldCAqIDAuNTtcbiAgICAgICAgICAgIC8vIGEgZHJhZyBjYW4gYmUgb25seSBpZiB0b3VjaCBwYWdlIHNjcm9sbCBpc24ndCBhbGxvd2VkXG4gICAgICAgICAgICBjb25zdCBpc1ZlcnREcmFnID0geU9mZnNldCA+PSBjb3JyZWN0ZWRYT2Zmc2V0ICYmICF0aGlzLl9wcml2YXRlX19vcHRpb25zLl9pbnRlcm5hbF90cmVhdFZlcnRUb3VjaERyYWdBc1BhZ2VTY3JvbGwoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzSG9yekRyYWcgPSBjb3JyZWN0ZWRYT2Zmc2V0ID4geU9mZnNldCAmJiAhdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5faW50ZXJuYWxfdHJlYXRIb3J6VG91Y2hEcmFnQXNQYWdlU2Nyb2xsKCk7XG4gICAgICAgICAgICAvLyBpZiBkcmFnIGV2ZW50IGhhcHBlbmVkIHRoZW4gd2Ugc2hvdWxkIHJldmVydCBwcmV2ZW50RGVmYXVsdCBzdGF0ZSB0byBvcmlnaW5hbCBvbmVcbiAgICAgICAgICAgIC8vIGFuZCB0cnkgdG8gcHJvY2VzcyB0aGUgZHJhZyBldmVudFxuICAgICAgICAgICAgLy8gZWxzZSB3ZSBzaG91bGRuJ3QgcHJldmVudCBkZWZhdWx0IG9mIHRoZSBldmVudCBhbmQgaWdub3JlIHByb2Nlc3NpbmcgdGhlIGRyYWcgZXZlbnRcbiAgICAgICAgICAgIGlmICghaXNWZXJ0RHJhZyAmJiAhaXNIb3J6RHJhZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByZXZlbnRUb3VjaERyYWdQcm9jZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvdWNoTW92ZUV4Y2VlZGVkTWFuaGF0dGFuRGlzdGFuY2UgPSB0cnVlO1xuICAgICAgICAgICAgLy8gaWYgbWFuaGF0dGFuIGRpc3RhbmNlIGlzIG1vcmUgdGhhdCA1IC0gd2Ugc2hvdWxkIGNhbmNlbCB0YXAgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbmNlbFRhcCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jbGVhckxvbmdUYXBUaW1lb3V0KCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yZXNldFRhcFRpbWVvdXQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX3ByZXZlbnRUb3VjaERyYWdQcm9jZXNzKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wYXRFdmVudCA9IHRoaXMuX3ByaXZhdGVfX21ha2VDb21wYXRFdmVudChtb3ZlRXZlbnQsIHRvdWNoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Byb2Nlc3NUb3VjaEV2ZW50KGNvbXBhdEV2ZW50LCB0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF90b3VjaE1vdmVFdmVudCk7XG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgcHJldmVudCBkZWZhdWx0IGluIGNhc2Ugb2YgdG91Y2ggb25seVxuICAgICAgICAgICAgLy8gdG8gcHJldmVudCBzY3JvbGwgb2YgdGhlIHBhZ2VcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KG1vdmVFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX21vdXNlTW92ZVdpdGhEb3duSGFuZGxlcihtb3ZlRXZlbnQpIHtcbiAgICAgICAgaWYgKG1vdmVFdmVudC5idXR0b24gIT09IDAgLyogTW91c2VFdmVudEJ1dHRvbi5MZWZ0ICovKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW92ZUluZm8gPSB0aGlzLl9wcml2YXRlX190b3VjaE1vdXNlTW92ZVdpdGhEb3duSW5mbyhnZXRQb3NpdGlvbihtb3ZlRXZlbnQpLCBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX21vdXNlTW92ZVN0YXJ0UG9zaXRpb24pKTtcbiAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxfbWFuaGF0dGFuRGlzdGFuY2U6IG1hbmhhdHRhbkRpc3RhbmNlIH0gPSBtb3ZlSW5mbztcbiAgICAgICAgaWYgKG1hbmhhdHRhbkRpc3RhbmNlID49IDUgLyogQ29uc3RhbnRzLkNhbmNlbENsaWNrTWFuaGF0dGFuRGlzdGFuY2UgKi8pIHtcbiAgICAgICAgICAgIC8vIGlmIG1hbmhhdHRhbiBkaXN0YW5jZSBpcyBtb3JlIHRoYXQgNSAtIHdlIHNob3VsZCBjYW5jZWwgY2xpY2sgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbmNlbENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Jlc2V0Q2xpY2tUaW1lb3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2NhbmNlbENsaWNrKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzLl9jYW5jZWxDbGljayBpcyB0cnVlLCB0aGF0IG1lYW5zIHRoYXQgbWluaW11bSBtYW5oYXR0YW4gZGlzdGFuY2UgaXMgYWxyZWFkeSBleGNlZWRlZFxuICAgICAgICAgICAgY29uc3QgY29tcGF0RXZlbnQgPSB0aGlzLl9wcml2YXRlX19tYWtlQ29tcGF0RXZlbnQobW92ZUV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Byb2Nlc3NNb3VzZUV2ZW50KGNvbXBhdEV2ZW50LCB0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9wcmVzc2VkTW91c2VNb3ZlRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX190b3VjaE1vdXNlTW92ZVdpdGhEb3duSW5mbyhjdXJyZW50UG9zaXRpb24sIHN0YXJ0UG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeE9mZnNldCA9IE1hdGguYWJzKHN0YXJ0UG9zaXRpb24uX2ludGVybmFsX3ggLSBjdXJyZW50UG9zaXRpb24uX2ludGVybmFsX3gpO1xuICAgICAgICBjb25zdCB5T2Zmc2V0ID0gTWF0aC5hYnMoc3RhcnRQb3NpdGlvbi5faW50ZXJuYWxfeSAtIGN1cnJlbnRQb3NpdGlvbi5faW50ZXJuYWxfeSk7XG4gICAgICAgIGNvbnN0IG1hbmhhdHRhbkRpc3RhbmNlID0geE9mZnNldCArIHlPZmZzZXQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfeE9mZnNldDogeE9mZnNldCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF95T2Zmc2V0OiB5T2Zmc2V0LFxuICAgICAgICAgICAgX2ludGVybmFsX21hbmhhdHRhbkRpc3RhbmNlOiBtYW5oYXR0YW5EaXN0YW5jZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICBfcHJpdmF0ZV9fdG91Y2hFbmRIYW5kbGVyKHRvdWNoRW5kRXZlbnQpIHtcbiAgICAgICAgbGV0IHRvdWNoID0gdG91Y2hXaXRoSWQodG91Y2hFbmRFdmVudC5jaGFuZ2VkVG91Y2hlcywgZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19hY3RpdmVUb3VjaElkKSk7XG4gICAgICAgIGlmICh0b3VjaCA9PT0gbnVsbCAmJiB0b3VjaEVuZEV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZywgc29tZWhvdyB3ZSBtaXNzZWQgdGhlIHJlcXVpcmVkIHRvdWNoZW5kIGV2ZW50XG4gICAgICAgICAgICAvLyBwcm9iYWJseSB0aGUgYnJvd3NlciBoYXMgbm90IHNlbnQgdGhpcyBldmVudFxuICAgICAgICAgICAgdG91Y2ggPSB0b3VjaEVuZEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b3VjaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FjdGl2ZVRvdWNoSWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sYXN0VG91Y2hFdmVudFRpbWVTdGFtcCA9IGV2ZW50VGltZVN0YW1wKHRvdWNoRW5kRXZlbnQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jbGVhckxvbmdUYXBUaW1lb3V0KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvdWNoTW92ZVN0YXJ0UG9zaXRpb24gPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVSb290VG91Y2hFdmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlUm9vdFRvdWNoRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RUb3VjaEV2ZW50cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcGF0RXZlbnQgPSB0aGlzLl9wcml2YXRlX19tYWtlQ29tcGF0RXZlbnQodG91Y2hFbmRFdmVudCwgdG91Y2gpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcm9jZXNzVG91Y2hFdmVudChjb21wYXRFdmVudCwgdGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfdG91Y2hFbmRFdmVudCk7XG4gICAgICAgICsrdGhpcy5fcHJpdmF0ZV9fdGFwQ291bnQ7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX190YXBUaW1lb3V0SWQgJiYgdGhpcy5fcHJpdmF0ZV9fdGFwQ291bnQgPiAxKSB7XG4gICAgICAgICAgICAvLyBjaGVjayB0aGF0IGJvdGggY2xpY2tzIGFyZSBuZWFyIGVub3VnaFxuICAgICAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxfbWFuaGF0dGFuRGlzdGFuY2U6IG1hbmhhdHRhbkRpc3RhbmNlIH0gPSB0aGlzLl9wcml2YXRlX190b3VjaE1vdXNlTW92ZVdpdGhEb3duSW5mbyhnZXRQb3NpdGlvbih0b3VjaCksIHRoaXMuX3ByaXZhdGVfX3RhcFBvc2l0aW9uKTtcbiAgICAgICAgICAgIGlmIChtYW5oYXR0YW5EaXN0YW5jZSA8IDMwIC8qIENvbnN0YW50cy5Eb3VibGVUYXBNYW5oYXR0YW5EaXN0YW5jZSAqLyAmJiAhdGhpcy5fcHJpdmF0ZV9fY2FuY2VsVGFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJvY2Vzc1RvdWNoRXZlbnQoY29tcGF0RXZlbnQsIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX2RvdWJsZVRhcEV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Jlc2V0VGFwVGltZW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19jYW5jZWxUYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wcm9jZXNzVG91Y2hFdmVudChjb21wYXRFdmVudCwgdGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfdGFwRXZlbnQpO1xuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBmaXJlIG1vdXNlIGV2ZW50cyBpZiB0YXAgaGFuZGxlciB3YXMgZXhlY3V0ZWRcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IGNsaWNrIGV2ZW50IG9uIG5ldyBkb20gZWxlbWVudCAod2hvIGFwcGVhcmVkIGFmdGVyIHRhcClcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfdGFwRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQodG91Y2hFbmRFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHByZXZlbnQsIGZvciBleGFtcGxlLCBzYWZhcmkncyBkYmxjbGljay10by16b29tIG9yIGZhc3QtY2xpY2sgYWZ0ZXIgbG9uZy10YXBcbiAgICAgICAgLy8gd2UgaGFuZGxlIG1vdXNlRG91YmxlQ2xpY2tFdmVudCBoZXJlIG91cnNlbHZlc1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdGFwQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KHRvdWNoRW5kRXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b3VjaEVuZEV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fbG9uZ1RhcEFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xvbmdUYXBBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IG5hdGl2ZSBjbGljayBldmVudFxuICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KHRvdWNoRW5kRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19tb3VzZVVwSGFuZGxlcihtb3VzZVVwRXZlbnQpIHtcbiAgICAgICAgaWYgKG1vdXNlVXBFdmVudC5idXR0b24gIT09IDAgLyogTW91c2VFdmVudEJ1dHRvbi5MZWZ0ICovKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcGF0RXZlbnQgPSB0aGlzLl9wcml2YXRlX19tYWtlQ29tcGF0RXZlbnQobW91c2VVcEV2ZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2VNb3ZlU3RhcnRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vdXNlUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVSb290TW91c2VFdmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlUm9vdE1vdXNlRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RNb3VzZUV2ZW50cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRkYoKSkge1xuICAgICAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB0aGlzLl9wcml2YXRlX190YXJnZXQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICByb290RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5fcHJpdmF0ZV9fb25GaXJlZm94T3V0c2lkZU1vdXNlVXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19maXJlc1RvdWNoRXZlbnRzKG1vdXNlVXBFdmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19wcm9jZXNzTW91c2VFdmVudChjb21wYXRFdmVudCwgdGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfbW91c2VVcEV2ZW50KTtcbiAgICAgICAgKyt0aGlzLl9wcml2YXRlX19jbGlja0NvdW50O1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fY2xpY2tUaW1lb3V0SWQgJiYgdGhpcy5fcHJpdmF0ZV9fY2xpY2tDb3VudCA+IDEpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIHRoYXQgYm90aCBjbGlja3MgYXJlIG5lYXIgZW5vdWdoXG4gICAgICAgICAgICBjb25zdCB7IF9pbnRlcm5hbF9tYW5oYXR0YW5EaXN0YW5jZTogbWFuaGF0dGFuRGlzdGFuY2UgfSA9IHRoaXMuX3ByaXZhdGVfX3RvdWNoTW91c2VNb3ZlV2l0aERvd25JbmZvKGdldFBvc2l0aW9uKG1vdXNlVXBFdmVudCksIHRoaXMuX3ByaXZhdGVfX2NsaWNrUG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKG1hbmhhdHRhbkRpc3RhbmNlIDwgNSAvKiBDb25zdGFudHMuRG91YmxlQ2xpY2tNYW5oYXR0YW5EaXN0YW5jZSAqLyAmJiAhdGhpcy5fcHJpdmF0ZV9fY2FuY2VsQ2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wcm9jZXNzTW91c2VFdmVudChjb21wYXRFdmVudCwgdGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfbW91c2VEb3VibGVDbGlja0V2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Jlc2V0Q2xpY2tUaW1lb3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX2NhbmNlbENsaWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJvY2Vzc01vdXNlRXZlbnQoY29tcGF0RXZlbnQsIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX21vdXNlQ2xpY2tFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2NsZWFyTG9uZ1RhcFRpbWVvdXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19sb25nVGFwVGltZW91dElkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3ByaXZhdGVfX2xvbmdUYXBUaW1lb3V0SWQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb25nVGFwVGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3RvdWNoU3RhcnRIYW5kbGVyKGRvd25FdmVudCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fYWN0aXZlVG91Y2hJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvdWNoID0gZG93bkV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19hY3RpdmVUb3VjaElkID0gdG91Y2guaWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGFzdFRvdWNoRXZlbnRUaW1lU3RhbXAgPSBldmVudFRpbWVTdGFtcChkb3duRXZlbnQpO1xuICAgICAgICBjb25zdCByb290RWxlbWVudCA9IHRoaXMuX3ByaXZhdGVfX3RhcmdldC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FuY2VsVGFwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvdWNoTW92ZUV4Y2VlZGVkTWFuaGF0dGFuRGlzdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJldmVudFRvdWNoRHJhZ1Byb2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG91Y2hNb3ZlU3RhcnRQb3NpdGlvbiA9IGdldFBvc2l0aW9uKHRvdWNoKTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlUm9vdFRvdWNoRXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RUb3VjaEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVSb290VG91Y2hFdmVudHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kVG91Y2hNb3ZlV2l0aERvd25IYW5kbGVyID0gdGhpcy5fcHJpdmF0ZV9fdG91Y2hNb3ZlSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgYm91bmRUb3VjaEVuZEhhbmRsZXIgPSB0aGlzLl9wcml2YXRlX190b3VjaEVuZEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlUm9vdFRvdWNoRXZlbnRzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGJvdW5kVG91Y2hNb3ZlV2l0aERvd25IYW5kbGVyKTtcbiAgICAgICAgICAgICAgICByb290RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGJvdW5kVG91Y2hFbmRIYW5kbGVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByb290RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBib3VuZFRvdWNoTW92ZVdpdGhEb3duSGFuZGxlciwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIHJvb3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgYm91bmRUb3VjaEVuZEhhbmRsZXIsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jbGVhckxvbmdUYXBUaW1lb3V0KCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sb25nVGFwVGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLl9wcml2YXRlX19sb25nVGFwSGFuZGxlci5iaW5kKHRoaXMsIGRvd25FdmVudCksIDI0MCAvKiBEZWxheS5Mb25nVGFwICovKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wYXRFdmVudCA9IHRoaXMuX3ByaXZhdGVfX21ha2VDb21wYXRFdmVudChkb3duRXZlbnQsIHRvdWNoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJvY2Vzc1RvdWNoRXZlbnQoY29tcGF0RXZlbnQsIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX3RvdWNoU3RhcnRFdmVudCk7XG4gICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fdGFwVGltZW91dElkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX190YXBDb3VudCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX190YXBUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KHRoaXMuX3ByaXZhdGVfX3Jlc2V0VGFwVGltZW91dC5iaW5kKHRoaXMpLCA1MDAgLyogRGVsYXkuUmVzZXRDbGljayAqLyk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX190YXBQb3NpdGlvbiA9IGdldFBvc2l0aW9uKHRvdWNoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fbW91c2VEb3duSGFuZGxlcihkb3duRXZlbnQpIHtcbiAgICAgICAgaWYgKGRvd25FdmVudC5idXR0b24gIT09IDAgLyogTW91c2VFdmVudEJ1dHRvbi5MZWZ0ICovKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB0aGlzLl9wcml2YXRlX190YXJnZXQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIGlmIChpc0ZGKCkpIHtcbiAgICAgICAgICAgIHJvb3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLl9wcml2YXRlX19vbkZpcmVmb3hPdXRzaWRlTW91c2VVcCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FuY2VsQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2VNb3ZlU3RhcnRQb3NpdGlvbiA9IGdldFBvc2l0aW9uKGRvd25FdmVudCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RNb3VzZUV2ZW50cykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVSb290TW91c2VFdmVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlUm9vdE1vdXNlRXZlbnRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBib3VuZE1vdXNlTW92ZVdpdGhEb3duSGFuZGxlciA9IHRoaXMuX3ByaXZhdGVfX21vdXNlTW92ZVdpdGhEb3duSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgYm91bmRNb3VzZVVwSGFuZGxlciA9IHRoaXMuX3ByaXZhdGVfX21vdXNlVXBIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RNb3VzZUV2ZW50cyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByb290RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBib3VuZE1vdXNlTW92ZVdpdGhEb3duSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgcm9vdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGJvdW5kTW91c2VVcEhhbmRsZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJvb3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGJvdW5kTW91c2VNb3ZlV2l0aERvd25IYW5kbGVyKTtcbiAgICAgICAgICAgIHJvb3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBib3VuZE1vdXNlVXBIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZVByZXNzZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fZmlyZXNUb3VjaEV2ZW50cyhkb3duRXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcGF0RXZlbnQgPSB0aGlzLl9wcml2YXRlX19tYWtlQ29tcGF0RXZlbnQoZG93bkV2ZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJvY2Vzc01vdXNlRXZlbnQoY29tcGF0RXZlbnQsIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX21vdXNlRG93bkV2ZW50KTtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19jbGlja1RpbWVvdXRJZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xpY2tDb3VudCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jbGlja1RpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5fcHJpdmF0ZV9fcmVzZXRDbGlja1RpbWVvdXQuYmluZCh0aGlzKSwgNTAwIC8qIERlbGF5LlJlc2V0Q2xpY2sgKi8pO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xpY2tQb3NpdGlvbiA9IGdldFBvc2l0aW9uKGRvd25FdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2luaXQoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5fcHJpdmF0ZV9fbW91c2VFbnRlckhhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIC8vIERvIG5vdCBzaG93IGNvbnRleHQgbWVudSB3aGVuIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuX3ByaXZhdGVfX2NsZWFyTG9uZ1RhcFRpbWVvdXQuYmluZCh0aGlzKSk7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IHRoaXMuX3ByaXZhdGVfX3RhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgICAgICAgY29uc3Qgb3V0c2lkZUhhbmRsZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX21vdXNlRG93bk91dHNpZGVFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChldmVudC5jb21wb3NlZCAmJiB0aGlzLl9wcml2YXRlX190YXJnZXQuY29udGFpbnMoZXZlbnQuY29tcG9zZWRQYXRoKClbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAmJiB0aGlzLl9wcml2YXRlX190YXJnZXQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX21vdXNlRG93bk91dHNpZGVFdmVudCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlT3V0c2lkZVRvdWNoRXZlbnRzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb3V0c2lkZUhhbmRsZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlT3V0c2lkZU1vdXNlRXZlbnRzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvdXRzaWRlSGFuZGxlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG91dHNpZGVIYW5kbGVyKTtcbiAgICAgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb3V0c2lkZUhhbmRsZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJT1MoKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVNb2JpbGVTYWZhcmlFdmVudHMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5fcHJpdmF0ZV9fb25Nb2JpbGVTYWZhcmlEb3VibGVDbGljayk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5fcHJpdmF0ZV9fb25Nb2JpbGVTYWZhcmlEb3VibGVDbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLl9wcml2YXRlX19tb3VzZUxlYXZlSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9wcml2YXRlX190b3VjaFN0YXJ0SGFuZGxlci5iaW5kKHRoaXMpLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIHByZXZlbnRTY3JvbGxCeVdoZWVsQ2xpY2sodGhpcy5fcHJpdmF0ZV9fdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuX3ByaXZhdGVfX21vdXNlRG93bkhhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2luaXRQaW5jaCgpO1xuICAgICAgICAvLyBIZXkgbW9iaWxlIFNhZmFyaSwgd2hhdCdzIHVwP1xuICAgICAgICAvLyBJZiBtb2JpbGUgU2FmYXJpIGRvZXNuJ3QgaGF2ZSBhbnkgdG91Y2htb3ZlIGhhbmRsZXIgd2l0aCBwYXNzaXZlPWZhbHNlXG4gICAgICAgIC8vIGl0IHRyZWF0cyBhIHRvdWNoc3RhcnQgYW5kIHRoZSBmb2xsb3dpbmcgdG91Y2htb3ZlIGV2ZW50cyBhcyBjYW5jZWxhYmxlPWZhbHNlLFxuICAgICAgICAvLyBzbyB3ZSBjYW4ndCBwcmV2ZW50IHRoZW0gKGFzIHNvb24gd2Ugc3Vic2NyaWJlIG9uIHRvdWNobW92ZSBpbnNpZGUgdG91Y2hzdGFydCdzIGhhbmRsZXIpLlxuICAgICAgICAvLyBBbmQgd2UnbGwgZ2V0IHNjcm9sbCBvZiB0aGUgcGFnZSBhbG9uZyB3aXRoIGNoYXJ0J3Mgb25lIGluc3RlYWQgb2Ygb25seSBjaGFydCdzIHNjcm9sbC5cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsICgpID0+IHsgfSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2luaXRQaW5jaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX3BpbmNoU3RhcnRFdmVudCA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9waW5jaEV2ZW50ID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX3BpbmNoRW5kRXZlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKGV2ZW50KSA9PiB0aGlzLl9wcml2YXRlX19jaGVja1BpbmNoU3RhdGUoZXZlbnQudG91Y2hlcyksIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoICE9PSAyIHx8IHRoaXMuX3ByaXZhdGVfX3N0YXJ0UGluY2hNaWRkbGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9waW5jaEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50RGlzdGFuY2UgPSBnZXREaXN0YW5jZShldmVudC50b3VjaGVzWzBdLCBldmVudC50b3VjaGVzWzFdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZSA9IGN1cnJlbnREaXN0YW5jZSAvIHRoaXMuX3ByaXZhdGVfX3N0YXJ0UGluY2hEaXN0YW5jZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9waW5jaEV2ZW50KHRoaXMuX3ByaXZhdGVfX3N0YXJ0UGluY2hNaWRkbGVQb2ludCwgc2NhbGUpO1xuICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jaGVja1BpbmNoU3RhdGUoZXZlbnQudG91Y2hlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fY2hlY2tQaW5jaFN0YXRlKHRvdWNoZXMpIHtcbiAgICAgICAgaWYgKHRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19waW5jaFByZXZlbnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b3VjaGVzLmxlbmd0aCAhPT0gMiB8fCB0aGlzLl9wcml2YXRlX19waW5jaFByZXZlbnRlZCB8fCB0aGlzLl9wcml2YXRlX19sb25nVGFwQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zdG9wUGluY2goKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXJ0UGluY2godG91Y2hlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX3N0YXJ0UGluY2godG91Y2hlcykge1xuICAgICAgICBjb25zdCBib3ggPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5fcHJpdmF0ZV9fdGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3RhcnRQaW5jaE1pZGRsZVBvaW50ID0ge1xuICAgICAgICAgICAgX2ludGVybmFsX3g6ICgodG91Y2hlc1swXS5jbGllbnRYIC0gYm94LmxlZnQpICsgKHRvdWNoZXNbMV0uY2xpZW50WCAtIGJveC5sZWZ0KSkgLyAyLFxuICAgICAgICAgICAgX2ludGVybmFsX3k6ICgodG91Y2hlc1swXS5jbGllbnRZIC0gYm94LnRvcCkgKyAodG91Y2hlc1sxXS5jbGllbnRZIC0gYm94LnRvcCkpIC8gMixcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3RhcnRQaW5jaERpc3RhbmNlID0gZ2V0RGlzdGFuY2UodG91Y2hlc1swXSwgdG91Y2hlc1sxXSk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9waW5jaFN0YXJ0RXZlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfcGluY2hTdGFydEV2ZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xlYXJMb25nVGFwVGltZW91dCgpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc3RvcFBpbmNoKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhcnRQaW5jaE1pZGRsZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3RhcnRQaW5jaE1pZGRsZVBvaW50ID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIuX2ludGVybmFsX3BpbmNoRW5kRXZlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faGFuZGxlci5faW50ZXJuYWxfcGluY2hFbmRFdmVudCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19tb3VzZUxlYXZlSGFuZGxlcihldmVudCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdW5zdWJzY3JpYmVNb3VzZW1vdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Vuc3Vic2NyaWJlTW91c2Vtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2ZpcmVzVG91Y2hFdmVudHMoZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19hY2NlcHRNb3VzZUxlYXZlKSB7XG4gICAgICAgICAgICAvLyBtb2JpbGUgU2FmYXJpIHNvbWV0aW1lcyBlbWl0cyBtb3VzZSBsZWF2ZSBldmVudCBmb3Igbm8gcmVhc29uLCB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIGl0IGluIG90aGVyIHdheVxuICAgICAgICAgICAgLy8ganVzdCBpZ25vcmUgdGhpcyBldmVudCBpZiB0aGVyZSB3YXMgbm8gbW91c2UgbW92ZSBvciBtb3VzZSBlbnRlciBldmVudHNcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wYXRFdmVudCA9IHRoaXMuX3ByaXZhdGVfX21ha2VDb21wYXRFdmVudChldmVudCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Byb2Nlc3NNb3VzZUV2ZW50KGNvbXBhdEV2ZW50LCB0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9tb3VzZUxlYXZlRXZlbnQpO1xuICAgICAgICAvLyBhY2NlcHQgYWxsIG1vdXNlIGxlYXZlIGV2ZW50cyBpZiBpdCdzIG5vdCBhbiBpT1MgZGV2aWNlXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FjY2VwdE1vdXNlTGVhdmUgPSAhaXNJT1MoKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2xvbmdUYXBIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gdG91Y2hXaXRoSWQoZXZlbnQudG91Y2hlcywgZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19hY3RpdmVUb3VjaElkKSk7XG4gICAgICAgIGlmICh0b3VjaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbXBhdEV2ZW50ID0gdGhpcy5fcHJpdmF0ZV9fbWFrZUNvbXBhdEV2ZW50KGV2ZW50LCB0b3VjaCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Byb2Nlc3NUb3VjaEV2ZW50KGNvbXBhdEV2ZW50LCB0aGlzLl9wcml2YXRlX19oYW5kbGVyLl9pbnRlcm5hbF9sb25nVGFwRXZlbnQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYW5jZWxUYXAgPSB0cnVlO1xuICAgICAgICAvLyBsb25nIHRhcCBpcyBhY3RpdmUgdW50aWwgdG91Y2hlbmQgZXZlbnQgd2l0aCAwIHRvdWNoZXMgb2NjdXJyZWRcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9uZ1RhcEFjdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIF9wcml2YXRlX19maXJlc1RvdWNoRXZlbnRzKGUpIHtcbiAgICAgICAgaWYgKGUuc291cmNlQ2FwYWJpbGl0aWVzICYmIGUuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50VGltZVN0YW1wKGUpIDwgdGhpcy5fcHJpdmF0ZV9fbGFzdFRvdWNoRXZlbnRUaW1lU3RhbXAgKyA1MDAgLyogRGVsYXkuUHJldmVudEZpcmVzVG91Y2hFdmVudHMgKi87XG4gICAgfVxuICAgIF9wcml2YXRlX19wcm9jZXNzVG91Y2hFdmVudChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fcHJvY2Vzc01vdXNlRXZlbnQoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMuX3ByaXZhdGVfX2hhbmRsZXIsIGV2ZW50KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX21ha2VDb21wYXRFdmVudChldmVudCwgdG91Y2gpIHtcbiAgICAgICAgLy8gVG91Y2hFdmVudCBoYXMgbm8gY2xpZW50WC9ZIGNvb3JkaW5hdGVzOlxuICAgICAgICAvLyBXZSBoYXZlIHRvIHVzZSB0aGUgbGFzdCBUb3VjaCBpbnN0ZWFkXG4gICAgICAgIGNvbnN0IGV2ZW50TGlrZSA9IHRvdWNoIHx8IGV2ZW50O1xuICAgICAgICBjb25zdCBib3ggPSB0aGlzLl9wcml2YXRlX190YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgfHwgeyBsZWZ0OiAwLCB0b3A6IDAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsaWVudFg6IGV2ZW50TGlrZS5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WTogZXZlbnRMaWtlLmNsaWVudFksXG4gICAgICAgICAgICBwYWdlWDogZXZlbnRMaWtlLnBhZ2VYLFxuICAgICAgICAgICAgcGFnZVk6IGV2ZW50TGlrZS5wYWdlWSxcbiAgICAgICAgICAgIHNjcmVlblg6IGV2ZW50TGlrZS5zY3JlZW5YLFxuICAgICAgICAgICAgc2NyZWVuWTogZXZlbnRMaWtlLnNjcmVlblksXG4gICAgICAgICAgICBsb2NhbFg6IChldmVudExpa2UuY2xpZW50WCAtIGJveC5sZWZ0KSxcbiAgICAgICAgICAgIGxvY2FsWTogKGV2ZW50TGlrZS5jbGllbnRZIC0gYm94LnRvcCksXG4gICAgICAgICAgICBjdHJsS2V5OiBldmVudC5jdHJsS2V5LFxuICAgICAgICAgICAgYWx0S2V5OiBldmVudC5hbHRLZXksXG4gICAgICAgICAgICBzaGlmdEtleTogZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICBtZXRhS2V5OiBldmVudC5tZXRhS2V5LFxuICAgICAgICAgICAgX2ludGVybmFsX2lzVG91Y2g6ICFldmVudC50eXBlLnN0YXJ0c1dpdGgoJ21vdXNlJykgJiYgZXZlbnQudHlwZSAhPT0gJ2NvbnRleHRtZW51JyAmJiBldmVudC50eXBlICE9PSAnY2xpY2snLFxuICAgICAgICAgICAgX2ludGVybmFsX3NyY1R5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdGFyZ2V0OiBldmVudExpa2UudGFyZ2V0LFxuICAgICAgICAgICAgX2ludGVybmFsX3ZpZXc6IGV2ZW50LnZpZXcsXG4gICAgICAgICAgICBfaW50ZXJuYWxfcHJldmVudERlZmF1bHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRvdWNoc3RhcnQgaXMgcGFzc2l2ZSBhbmQgY2Fubm90IGJlIHByZXZlbnRlZFxuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdChldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHx8IHsgbGVmdDogMCwgdG9wOiAwIH07XG59XG5mdW5jdGlvbiBnZXREaXN0YW5jZShwMSwgcDIpIHtcbiAgICBjb25zdCB4RGlmZiA9IHAxLmNsaWVudFggLSBwMi5jbGllbnRYO1xuICAgIGNvbnN0IHlEaWZmID0gcDEuY2xpZW50WSAtIHAyLmNsaWVudFk7XG4gICAgcmV0dXJuIE1hdGguc3FydCh4RGlmZiAqIHhEaWZmICsgeURpZmYgKiB5RGlmZik7XG59XG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChldmVudCkge1xuICAgIGlmIChldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UG9zaXRpb24oZXZlbnRMaWtlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2ludGVybmFsX3g6IGV2ZW50TGlrZS5wYWdlWCxcbiAgICAgICAgX2ludGVybmFsX3k6IGV2ZW50TGlrZS5wYWdlWSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZXZlbnRUaW1lU3RhbXAoZSkge1xuICAgIC8vIGZvciBzb21lIHJlYXNvbiBlLnRpbWVzdGFtcCBpcyBhbHdheXMgMCBvbiBpUGFkIHdpdGggbWFnaWMgbW91c2UsIHNvIHdlIHVzZSBwZXJmb3JtYW5jZS5ub3coKSBhcyBhIGZhbGxiYWNrXG4gICAgcmV0dXJuIGUudGltZVN0YW1wIHx8IHBlcmZvcm1hbmNlLm5vdygpO1xufVxuZnVuY3Rpb24gdG91Y2hXaXRoSWQodG91Y2hlcywgaWQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdWNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHRvdWNoZXNbaV0uaWRlbnRpZmllciA9PT0gaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0b3VjaGVzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vLyByZXR1cm5zIHRydWUgaWYgaXRlbSBpcyBhYm92ZSByZWZlcmVuY2VcbmZ1bmN0aW9uIGNvbXBhcmVQcmltaXRpdmVaT3JkZXIoaXRlbSwgcmVmZXJlbmNlKSB7XG4gICAgcmV0dXJuICghcmVmZXJlbmNlIHx8XG4gICAgICAgIChpdGVtID09PSAndG9wJyAmJiByZWZlcmVuY2UgIT09ICd0b3AnKSB8fFxuICAgICAgICAoaXRlbSA9PT0gJ25vcm1hbCcgJiYgcmVmZXJlbmNlID09PSAnYm90dG9tJykpO1xufVxuZnVuY3Rpb24gZmluZEJlc3RQcmltaXRpdmVIaXRUZXN0KHNvdXJjZXMsIHgsIHkpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGxldCBiZXN0UHJpbWl0aXZlSGl0O1xuICAgIGxldCBiZXN0SGl0U291cmNlO1xuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgY29uc3QgcHJpbWl0aXZlSGl0UmVzdWx0cyA9IChfYiA9IChfYSA9IHNvdXJjZS5faW50ZXJuYWxfcHJpbWl0aXZlSGl0VGVzdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoc291cmNlLCB4LCB5KSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgICAgIGZvciAoY29uc3QgaGl0UmVzdWx0IG9mIHByaW1pdGl2ZUhpdFJlc3VsdHMpIHtcbiAgICAgICAgICAgIGlmIChjb21wYXJlUHJpbWl0aXZlWk9yZGVyKGhpdFJlc3VsdC56T3JkZXIsIGJlc3RQcmltaXRpdmVIaXQgPT09IG51bGwgfHwgYmVzdFByaW1pdGl2ZUhpdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYmVzdFByaW1pdGl2ZUhpdC56T3JkZXIpKSB7XG4gICAgICAgICAgICAgICAgYmVzdFByaW1pdGl2ZUhpdCA9IGhpdFJlc3VsdDtcbiAgICAgICAgICAgICAgICBiZXN0SGl0U291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghYmVzdFByaW1pdGl2ZUhpdCB8fCAhYmVzdEhpdFNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2ludGVybmFsX2hpdDogYmVzdFByaW1pdGl2ZUhpdCxcbiAgICAgICAgX2ludGVybmFsX3NvdXJjZTogYmVzdEhpdFNvdXJjZSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY29udmVydFByaW1pdGl2ZUhpdFJlc3VsdChwcmltaXRpdmVIaXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBfaW50ZXJuYWxfc291cmNlOiBwcmltaXRpdmVIaXQuX2ludGVybmFsX3NvdXJjZSxcbiAgICAgICAgX2ludGVybmFsX29iamVjdDoge1xuICAgICAgICAgICAgX2ludGVybmFsX2V4dGVybmFsSWQ6IHByaW1pdGl2ZUhpdC5faW50ZXJuYWxfaGl0LmV4dGVybmFsSWQsXG4gICAgICAgIH0sXG4gICAgICAgIF9pbnRlcm5hbF9jdXJzb3JTdHlsZTogcHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9oaXQuY3Vyc29yU3R5bGUsXG4gICAgfTtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBoaXQgdGVzdCBvbiBhIGNvbGxlY3Rpb24gb2YgcGFuZSB2aWV3cyB0byBkZXRlcm1pbmUgd2hpY2ggdmlldyBhbmQgb2JqZWN0XG4gKiBpcyBsb2NhdGVkIGF0IGEgZ2l2ZW4gY29vcmRpbmF0ZSAoeCwgeSkgYW5kIHJldHVybnMgdGhlIG1hdGNoaW5nIHBhbmUgdmlldyBhbmRcbiAqIGhpdC10ZXN0ZWQgcmVzdWx0IG9iamVjdCwgb3IgbnVsbCBpZiBubyBtYXRjaCBpcyBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gaGl0VGVzdFBhbmVWaWV3KHBhbmVWaWV3cywgeCwgeSkge1xuICAgIGZvciAoY29uc3QgcGFuZVZpZXcgb2YgcGFuZVZpZXdzKSB7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gcGFuZVZpZXcuX2ludGVybmFsX3JlbmRlcmVyKCk7XG4gICAgICAgIGlmIChyZW5kZXJlciAhPT0gbnVsbCAmJiByZW5kZXJlci5faW50ZXJuYWxfaGl0VGVzdCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVuZGVyZXIuX2ludGVybmFsX2hpdFRlc3QoeCwgeSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX3ZpZXc6IHBhbmVWaWV3LFxuICAgICAgICAgICAgICAgICAgICBfaW50ZXJuYWxfb2JqZWN0OiByZXN1bHQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGhpdFRlc3RQYW5lKHBhbmUsIHgsIHkpIHtcbiAgICBjb25zdCBzb3VyY2VzID0gcGFuZS5faW50ZXJuYWxfb3JkZXJlZFNvdXJjZXMoKTtcbiAgICBjb25zdCBiZXN0UHJpbWl0aXZlSGl0ID0gZmluZEJlc3RQcmltaXRpdmVIaXRUZXN0KHNvdXJjZXMsIHgsIHkpO1xuICAgIGlmICgoYmVzdFByaW1pdGl2ZUhpdCA9PT0gbnVsbCB8fCBiZXN0UHJpbWl0aXZlSGl0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBiZXN0UHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9oaXQuek9yZGVyKSA9PT0gJ3RvcCcpIHtcbiAgICAgICAgLy8gYSBwcmltaXRpdmUgaGl0IG9uIHRoZSAndG9wJyBsYXllciB3aWxsIGFsd2F5cyBiZWF0IHRoZSBidWlsdC1pbiBoaXQgdGVzdHNcbiAgICAgICAgLy8gKG9uIG5vcm1hbCBsYXllcikgc28gd2UgY2FuIHJldHVybiBlYXJseSBoZXJlLlxuICAgICAgICByZXR1cm4gY29udmVydFByaW1pdGl2ZUhpdFJlc3VsdChiZXN0UHJpbWl0aXZlSGl0KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuICAgICAgICBpZiAoYmVzdFByaW1pdGl2ZUhpdCAmJiBiZXN0UHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9zb3VyY2UgPT09IHNvdXJjZSAmJiBiZXN0UHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9oaXQuek9yZGVyICE9PSAnYm90dG9tJyAmJiAhYmVzdFByaW1pdGl2ZUhpdC5faW50ZXJuYWxfaGl0LmlzQmFja2dyb3VuZCkge1xuICAgICAgICAgICAgLy8gYSBwcmltaXRpdmUgd2lsbCBiZSBkcmF3biBhYm92ZSBhIGJ1aWx0LWluIGl0ZW0gbGlrZSBhIHNlcmllcyBtYXJrZXJcbiAgICAgICAgICAgIC8vIHRoZXJlZm9yZSBpdCB0YWtlcyBwcmVjZWRlbmNlIGhlcmUuXG4gICAgICAgICAgICByZXR1cm4gY29udmVydFByaW1pdGl2ZUhpdFJlc3VsdChiZXN0UHJpbWl0aXZlSGl0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzb3VyY2VSZXN1bHQgPSBoaXRUZXN0UGFuZVZpZXcoc291cmNlLl9pbnRlcm5hbF9wYW5lVmlld3MocGFuZSksIHgsIHkpO1xuICAgICAgICBpZiAoc291cmNlUmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9zb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdmlldzogc291cmNlUmVzdWx0Ll9pbnRlcm5hbF92aWV3LFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9vYmplY3Q6IHNvdXJjZVJlc3VsdC5faW50ZXJuYWxfb2JqZWN0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmVzdFByaW1pdGl2ZUhpdCAmJiBiZXN0UHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9zb3VyY2UgPT09IHNvdXJjZSAmJiBiZXN0UHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9oaXQuek9yZGVyICE9PSAnYm90dG9tJyAmJiBiZXN0UHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9oaXQuaXNCYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udmVydFByaW1pdGl2ZUhpdFJlc3VsdChiZXN0UHJpbWl0aXZlSGl0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmVzdFByaW1pdGl2ZUhpdCA9PT0gbnVsbCB8fCBiZXN0UHJpbWl0aXZlSGl0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBiZXN0UHJpbWl0aXZlSGl0Ll9pbnRlcm5hbF9oaXQpIHtcbiAgICAgICAgLy8gcmV0dXJuIHByaW1pdGl2ZSBoaXRzIGZvciB0aGUgJ2JvdHRvbScgbGF5ZXJcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRQcmltaXRpdmVIaXRSZXN1bHQoYmVzdFByaW1pdGl2ZUhpdCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBidWlsZFByaWNlQXhpc1ZpZXdzR2V0dGVyKHpPcmRlciwgcHJpY2VTY2FsZUlkKSB7XG4gICAgcmV0dXJuIChzb3VyY2UpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBwc0lkID0gKF9iID0gKF9hID0gc291cmNlLl9pbnRlcm5hbF9wcmljZVNjYWxlKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5faW50ZXJuYWxfaWQoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XG4gICAgICAgIGlmIChwc0lkICE9PSBwcmljZVNjYWxlSWQpIHtcbiAgICAgICAgICAgIC8vIGV4Y2x1ZGUgaWYgc291cmNlIGlzIHVzaW5nIGEgZGlmZmVyZW50IHByaWNlIHNjYWxlLlxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoX2QgPSAoX2MgPSBzb3VyY2UuX2ludGVybmFsX3ByaWNlUGFuZVZpZXdzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChzb3VyY2UsIHpPcmRlcikpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFtdO1xuICAgIH07XG59XG5mdW5jdGlvbiByZWNhbGN1bGF0ZU92ZXJsYXBwaW5nKHZpZXdzLCBkaXJlY3Rpb24sIHNjYWxlSGVpZ2h0LCByZW5kZXJlck9wdGlvbnMpIHtcbiAgICBpZiAoIXZpZXdzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjdXJyZW50R3JvdXBTdGFydCA9IDA7XG4gICAgY29uc3QgY2VudGVyID0gc2NhbGVIZWlnaHQgLyAyO1xuICAgIGNvbnN0IGluaXRMYWJlbEhlaWdodCA9IHZpZXdzWzBdLl9pbnRlcm5hbF9oZWlnaHQocmVuZGVyZXJPcHRpb25zLCB0cnVlKTtcbiAgICBsZXQgc3BhY2VCZWZvcmVDdXJyZW50R3JvdXAgPSBkaXJlY3Rpb24gPT09IDFcbiAgICAgICAgPyBjZW50ZXIgLSAodmlld3NbMF0uX2ludGVybmFsX2dldEZpeGVkQ29vcmRpbmF0ZSgpIC0gaW5pdExhYmVsSGVpZ2h0IC8gMilcbiAgICAgICAgOiB2aWV3c1swXS5faW50ZXJuYWxfZ2V0Rml4ZWRDb29yZGluYXRlKCkgLSBpbml0TGFiZWxIZWlnaHQgLyAyIC0gY2VudGVyO1xuICAgIHNwYWNlQmVmb3JlQ3VycmVudEdyb3VwID0gTWF0aC5tYXgoMCwgc3BhY2VCZWZvcmVDdXJyZW50R3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdmlld3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgICBjb25zdCBwcmV2ID0gdmlld3NbaSAtIDFdO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBwcmV2Ll9pbnRlcm5hbF9oZWlnaHQocmVuZGVyZXJPcHRpb25zLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGUgPSB2aWV3Ll9pbnRlcm5hbF9nZXRGaXhlZENvb3JkaW5hdGUoKTtcbiAgICAgICAgY29uc3QgcHJldkZpeGVkQ29vcmRpbmF0ZSA9IHByZXYuX2ludGVybmFsX2dldEZpeGVkQ29vcmRpbmF0ZSgpO1xuICAgICAgICBjb25zdCBvdmVybGFwID0gZGlyZWN0aW9uID09PSAxXG4gICAgICAgICAgICA/IGNvb3JkaW5hdGUgPiBwcmV2Rml4ZWRDb29yZGluYXRlIC0gaGVpZ2h0XG4gICAgICAgICAgICA6IGNvb3JkaW5hdGUgPCBwcmV2Rml4ZWRDb29yZGluYXRlICsgaGVpZ2h0O1xuICAgICAgICBpZiAob3ZlcmxhcCkge1xuICAgICAgICAgICAgY29uc3QgZml4ZWRDb29yZGluYXRlID0gcHJldkZpeGVkQ29vcmRpbmF0ZSAtIGhlaWdodCAqIGRpcmVjdGlvbjtcbiAgICAgICAgICAgIHZpZXcuX2ludGVybmFsX3NldEZpeGVkQ29vcmRpbmF0ZShmaXhlZENvb3JkaW5hdGUpO1xuICAgICAgICAgICAgY29uc3QgZWRnZVBvaW50ID0gZml4ZWRDb29yZGluYXRlIC0gZGlyZWN0aW9uICogaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGNvbnN0IG91dE9mVmlld3BvcnQgPSBkaXJlY3Rpb24gPT09IDEgPyBlZGdlUG9pbnQgPCAwIDogZWRnZVBvaW50ID4gc2NhbGVIZWlnaHQ7XG4gICAgICAgICAgICBpZiAob3V0T2ZWaWV3cG9ydCAmJiBzcGFjZUJlZm9yZUN1cnJlbnRHcm91cCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBzaGlmdCB0aGUgd2hvbGUgZ3JvdXAgdXAgb3IgZG93blxuICAgICAgICAgICAgICAgIGNvbnN0IGRlc2lyZWRHcm91cFNoaWZ0ID0gZGlyZWN0aW9uID09PSAxID8gLTEgLSBlZGdlUG9pbnQgOiBlZGdlUG9pbnQgLSBzY2FsZUhlaWdodDtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZVNoaWZ0ID0gTWF0aC5taW4oZGVzaXJlZEdyb3VwU2hpZnQsIHNwYWNlQmVmb3JlQ3VycmVudEdyb3VwKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gY3VycmVudEdyb3VwU3RhcnQ7IGsgPCB2aWV3cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICB2aWV3c1trXS5faW50ZXJuYWxfc2V0Rml4ZWRDb29yZGluYXRlKHZpZXdzW2tdLl9pbnRlcm5hbF9nZXRGaXhlZENvb3JkaW5hdGUoKSArIGRpcmVjdGlvbiAqIHBvc3NpYmxlU2hpZnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzcGFjZUJlZm9yZUN1cnJlbnRHcm91cCAtPSBwb3NzaWJsZVNoaWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudEdyb3VwU3RhcnQgPSBpO1xuICAgICAgICAgICAgc3BhY2VCZWZvcmVDdXJyZW50R3JvdXAgPSBkaXJlY3Rpb24gPT09IDFcbiAgICAgICAgICAgICAgICA/IHByZXZGaXhlZENvb3JkaW5hdGUgLSBoZWlnaHQgLSBjb29yZGluYXRlXG4gICAgICAgICAgICAgICAgOiBjb29yZGluYXRlIC0gKHByZXZGaXhlZENvb3JkaW5hdGUgKyBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcHJpY2VTY2FsZUNyb3NzaGFpckxhYmVsVmlzaWJsZShjcm9zc2hhaXIpIHtcbiAgICByZXR1cm4gY3Jvc3NoYWlyLm1vZGUgIT09IDIgLyogQ3Jvc3NoYWlyTW9kZS5IaWRkZW4gKi8gJiYgY3Jvc3NoYWlyLmhvcnpMaW5lLnZpc2libGUgJiYgY3Jvc3NoYWlyLmhvcnpMaW5lLmxhYmVsVmlzaWJsZTtcbn1cbmNsYXNzIFByaWNlQXhpc1dpZGdldCB7XG4gICAgY29uc3RydWN0b3IocGFuZSwgb3B0aW9ucywgcmVuZGVyZXJPcHRpb25zUHJvdmlkZXIsIHNpZGUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NpemUgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZWRvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fd2lkdGhDYWNoZSA9IG5ldyBUZXh0V2lkdGhDYWNoZSgyMDApO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19mb250ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJldk9wdGltYWxXaWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9jaGFydCgpLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9saWdodFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX190b3BDYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faXNTZXR0aW5nU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmUuX2ludGVybmFsX2NoYXJ0KCkuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX2xpZ2h0VXBkYXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmUgPSBwYW5lO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGF5b3V0T3B0aW9ucyA9IG9wdGlvbnMubGF5b3V0O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlck9wdGlvbnNQcm92aWRlciA9IHJlbmRlcmVyT3B0aW9uc1Byb3ZpZGVyO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pc0xlZnQgPSBzaWRlID09PSAnbGVmdCc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NvdXJjZVBhbmVWaWV3cyA9IGJ1aWxkUHJpY2VBeGlzVmlld3NHZXR0ZXIoJ25vcm1hbCcsIHNpZGUpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zb3VyY2VUb3BQYW5lVmlld3MgPSBidWlsZFByaWNlQXhpc1ZpZXdzR2V0dGVyKCd0b3AnLCBzaWRlKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc291cmNlQm90dG9tUGFuZVZpZXdzID0gYnVpbGRQcmljZUF4aXNWaWV3c0dldHRlcignYm90dG9tJywgc2lkZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NlbGwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbC5zdHlsZS53aWR0aCA9ICcyNXB4JztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbC5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jZWxsLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZyA9IGNyZWF0ZUJvdW5kQ2FudmFzKHRoaXMuX3ByaXZhdGVfX2NlbGwsIHNpemUkMSh7IHdpZHRoOiAxNiwgaGVpZ2h0OiAxNiB9KSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuc3Vic2NyaWJlU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWQodGhpcy5fcHJpdmF0ZV9fY2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50O1xuICAgICAgICBjYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBjYW52YXMuc3R5bGUuekluZGV4ID0gJzEnO1xuICAgICAgICBjYW52YXMuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgY2FudmFzLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZyA9IGNyZWF0ZUJvdW5kQ2FudmFzKHRoaXMuX3ByaXZhdGVfX2NlbGwsIHNpemUkMSh7IHdpZHRoOiAxNiwgaGVpZ2h0OiAxNiB9KSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc0JpbmRpbmcuc3Vic2NyaWJlU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWQodGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyKTtcbiAgICAgICAgY29uc3QgdG9wQ2FudmFzID0gdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50O1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUuekluZGV4ID0gJzInO1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgdG9wQ2FudmFzLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9tb3VzZURvd25FdmVudDogdGhpcy5fcHJpdmF0ZV9fbW91c2VEb3duRXZlbnQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90b3VjaFN0YXJ0RXZlbnQ6IHRoaXMuX3ByaXZhdGVfX21vdXNlRG93bkV2ZW50LmJpbmQodGhpcyksXG4gICAgICAgICAgICBfaW50ZXJuYWxfcHJlc3NlZE1vdXNlTW92ZUV2ZW50OiB0aGlzLl9wcml2YXRlX19wcmVzc2VkTW91c2VNb3ZlRXZlbnQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90b3VjaE1vdmVFdmVudDogdGhpcy5fcHJpdmF0ZV9fcHJlc3NlZE1vdXNlTW92ZUV2ZW50LmJpbmQodGhpcyksXG4gICAgICAgICAgICBfaW50ZXJuYWxfbW91c2VEb3duT3V0c2lkZUV2ZW50OiB0aGlzLl9wcml2YXRlX19tb3VzZURvd25PdXRzaWRlRXZlbnQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9tb3VzZVVwRXZlbnQ6IHRoaXMuX3ByaXZhdGVfX21vdXNlVXBFdmVudC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgX2ludGVybmFsX3RvdWNoRW5kRXZlbnQ6IHRoaXMuX3ByaXZhdGVfX21vdXNlVXBFdmVudC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgX2ludGVybmFsX21vdXNlRG91YmxlQ2xpY2tFdmVudDogdGhpcy5fcHJpdmF0ZV9fbW91c2VEb3VibGVDbGlja0V2ZW50LmJpbmQodGhpcyksXG4gICAgICAgICAgICBfaW50ZXJuYWxfZG91YmxlVGFwRXZlbnQ6IHRoaXMuX3ByaXZhdGVfX21vdXNlRG91YmxlQ2xpY2tFdmVudC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgX2ludGVybmFsX21vdXNlRW50ZXJFdmVudDogdGhpcy5fcHJpdmF0ZV9fbW91c2VFbnRlckV2ZW50LmJpbmQodGhpcyksXG4gICAgICAgICAgICBfaW50ZXJuYWxfbW91c2VMZWF2ZUV2ZW50OiB0aGlzLl9wcml2YXRlX19tb3VzZUxlYXZlRXZlbnQuYmluZCh0aGlzKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2VFdmVudEhhbmRsZXIgPSBuZXcgTW91c2VFdmVudEhhbmRsZXIodGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50LCBoYW5kbGVyLCB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfdHJlYXRWZXJ0VG91Y2hEcmFnQXNQYWdlU2Nyb2xsOiAoKSA9PiAhdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5oYW5kbGVTY3JvbGwudmVydFRvdWNoRHJhZyxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90cmVhdEhvcnpUb3VjaERyYWdBc1BhZ2VTY3JvbGw6ICgpID0+IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2VFdmVudEhhbmRsZXIuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy51bnN1YnNjcmliZVN1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkKHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc1N1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkSGFuZGxlcik7XG4gICAgICAgIHJlbGVhc2VDYW52YXModGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcudW5zdWJzY3JpYmVTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZCh0aGlzLl9wcml2YXRlX19jYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIpO1xuICAgICAgICByZWxlYXNlQ2FudmFzKHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuY2FudmFzRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuZGlzcG9zZSgpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZS5faW50ZXJuYWxfb25NYXJrc0NoYW5nZWQoKS5faW50ZXJuYWxfdW5zdWJzY3JpYmVBbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSA9IG51bGw7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9nZXRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2VsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX2ZvbnRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fbGF5b3V0T3B0aW9ucy5mb250U2l6ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlbmRlcmVyT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyT3B0aW9uc1Byb3ZpZGVyLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IGlzRm9udENoYW5nZWQgPSB0aGlzLl9wcml2YXRlX19mb250ICE9PSBvcHRpb25zLl9pbnRlcm5hbF9mb250O1xuICAgICAgICBpZiAoaXNGb250Q2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fd2lkdGhDYWNoZS5faW50ZXJuYWxfcmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZvbnQgPSBvcHRpb25zLl9pbnRlcm5hbF9mb250O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfb3B0aW1hbFdpZHRoKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpY2tNYXJrTWF4V2lkdGggPSAwO1xuICAgICAgICBjb25zdCByZW5kZXJlck9wdGlvbnMgPSB0aGlzLl9pbnRlcm5hbF9yZW5kZXJlck9wdGlvbnMoKTtcbiAgICAgICAgY29uc3QgY3R4ID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLmNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dCgnMmQnKSk7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNvbnN0IHRpY2tNYXJrcyA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX21hcmtzKCk7XG4gICAgICAgIGN0eC5mb250ID0gdGhpcy5fcHJpdmF0ZV9fYmFzZUZvbnQoKTtcbiAgICAgICAgaWYgKHRpY2tNYXJrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aWNrTWFya01heFdpZHRoID0gTWF0aC5tYXgodGhpcy5fcHJpdmF0ZV9fd2lkdGhDYWNoZS5faW50ZXJuYWxfbWVhc3VyZVRleHQoY3R4LCB0aWNrTWFya3NbMF0uX2ludGVybmFsX2xhYmVsKSwgdGhpcy5fcHJpdmF0ZV9fd2lkdGhDYWNoZS5faW50ZXJuYWxfbWVhc3VyZVRleHQoY3R4LCB0aWNrTWFya3NbdGlja01hcmtzLmxlbmd0aCAtIDFdLl9pbnRlcm5hbF9sYWJlbCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZpZXdzID0gdGhpcy5fcHJpdmF0ZV9fYmFja0xhYmVscygpO1xuICAgICAgICBmb3IgKGxldCBqID0gdmlld3MubGVuZ3RoOyBqLS07KSB7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX3ByaXZhdGVfX3dpZHRoQ2FjaGUuX2ludGVybmFsX21lYXN1cmVUZXh0KGN0eCwgdmlld3Nbal0uX2ludGVybmFsX3RleHQoKSk7XG4gICAgICAgICAgICBpZiAod2lkdGggPiB0aWNrTWFya01heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgdGlja01hcmtNYXhXaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9maXJzdFZhbHVlKCk7XG4gICAgICAgIGlmIChmaXJzdFZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zaXplICE9PSBudWxsICYmXG4gICAgICAgICAgICBwcmljZVNjYWxlQ3Jvc3NoYWlyTGFiZWxWaXNpYmxlKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuY3Jvc3NoYWlyKSkge1xuICAgICAgICAgICAgY29uc3QgdG9wVmFsdWUgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9jb29yZGluYXRlVG9QcmljZSgxLCBmaXJzdFZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbVZhbHVlID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZS5faW50ZXJuYWxfY29vcmRpbmF0ZVRvUHJpY2UodGhpcy5fcHJpdmF0ZV9fc2l6ZS5oZWlnaHQgLSAyLCBmaXJzdFZhbHVlKTtcbiAgICAgICAgICAgIHRpY2tNYXJrTWF4V2lkdGggPSBNYXRoLm1heCh0aWNrTWFya01heFdpZHRoLCB0aGlzLl9wcml2YXRlX193aWR0aENhY2hlLl9pbnRlcm5hbF9tZWFzdXJlVGV4dChjdHgsIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX2Zvcm1hdFByaWNlKE1hdGguZmxvb3IoTWF0aC5taW4odG9wVmFsdWUsIGJvdHRvbVZhbHVlKSkgKyAwLjExMTExMTExMTExMTExLCBmaXJzdFZhbHVlKSksIHRoaXMuX3ByaXZhdGVfX3dpZHRoQ2FjaGUuX2ludGVybmFsX21lYXN1cmVUZXh0KGN0eCwgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZS5faW50ZXJuYWxfZm9ybWF0UHJpY2UoTWF0aC5jZWlsKE1hdGgubWF4KHRvcFZhbHVlLCBib3R0b21WYWx1ZSkpIC0gMC4xMTExMTExMTExMTExMSwgZmlyc3RWYWx1ZSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICBjb25zdCByZXN1bHRUaWNrTWFya3NNYXhXaWR0aCA9IHRpY2tNYXJrTWF4V2lkdGggfHwgMzQgLyogQ29uc3RhbnRzLkRlZmF1bHRPcHRpbWFsV2lkdGggKi87XG4gICAgICAgIGNvbnN0IHJlcyA9IE1hdGguY2VpbChyZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2JvcmRlclNpemUgK1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF90aWNrTGVuZ3RoICtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ0lubmVyICtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ091dGVyICtcbiAgICAgICAgICAgIDUgLyogQ29uc3RhbnRzLkxhYmVsT2Zmc2V0ICovICtcbiAgICAgICAgICAgIHJlc3VsdFRpY2tNYXJrc01heFdpZHRoKTtcbiAgICAgICAgLy8gbWFrZSBpdCBldmVuLCByZW1vdmUgdGhpcyBhZnRlciBtaWdyYXRpb24gdG8gcGVyZmVjdCBmYW5jeSBjYW52YXNcbiAgICAgICAgcmV0dXJuIHN1Z2dlc3RQcmljZVNjYWxlV2lkdGgocmVzKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFNpemUobmV3U2l6ZSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2l6ZSA9PT0gbnVsbCB8fCAhZXF1YWxTaXplcyh0aGlzLl9wcml2YXRlX19zaXplLCBuZXdTaXplKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pc1NldHRpbmdTaXplID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcucmVzaXplQ2FudmFzRWxlbWVudChuZXdTaXplKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc0JpbmRpbmcucmVzaXplQ2FudmFzRWxlbWVudChuZXdTaXplKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NlbGwuc3R5bGUud2lkdGggPSBgJHtuZXdTaXplLndpZHRofXB4YDtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NlbGwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2l6ZS5oZWlnaHR9cHhgO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9nZXRXaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fc2l6ZSkud2lkdGg7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRQcmljZVNjYWxlKHByaWNlU2NhbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUgPT09IHByaWNlU2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZS5faW50ZXJuYWxfb25NYXJrc0NoYW5nZWQoKS5faW50ZXJuYWxfdW5zdWJzY3JpYmVBbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSA9IHByaWNlU2NhbGU7XG4gICAgICAgIHByaWNlU2NhbGUuX2ludGVybmFsX29uTWFya3NDaGFuZ2VkKCkuX2ludGVybmFsX3N1YnNjcmliZSh0aGlzLl9wcml2YXRlX19vbk1hcmtzQ2hhbmdlZC5iaW5kKHRoaXMpLCB0aGlzKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3ByaWNlU2NhbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmVzZXQoKSB7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9zdGF0ZSgpO1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX3BhbmUuX2ludGVybmFsX2NoYXJ0KCkuX2ludGVybmFsX21vZGVsKCk7XG4gICAgICAgIG1vZGVsLl9pbnRlcm5hbF9yZXNldFByaWNlU2NhbGUocGFuZSwgZW5zdXJlTm90TnVsbCh0aGlzLl9pbnRlcm5hbF9wcmljZVNjYWxlKCkpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3BhaW50KHR5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3NpemUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSAhPT0gMSAvKiBJbnZhbGlkYXRpb25MZXZlbC5DdXJzb3IgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2FsaWduTGFiZWxzKCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLmFwcGx5U3VnZ2VzdGVkQml0bWFwU2l6ZSgpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdHJ5Q3JlYXRlQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQodGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZyk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnVzZUJpdG1hcENvb3JkaW5hdGVTcGFjZSgoc2NvcGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0JhY2tncm91bmQoc2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3Qm9yZGVyKHNjb3BlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9kcmF3QWRkaXRpb25hbFNvdXJjZXModGFyZ2V0LCB0aGlzLl9wcml2YXRlX19zb3VyY2VCb3R0b21QYW5lVmlld3MpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdUaWNrTWFya3ModGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9kcmF3QWRkaXRpb25hbFNvdXJjZXModGFyZ2V0LCB0aGlzLl9wcml2YXRlX19zb3VyY2VQYW5lVmlld3MpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdCYWNrTGFiZWxzKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5hcHBseVN1Z2dlc3RlZEJpdG1hcFNpemUoKTtcbiAgICAgICAgY29uc3QgdG9wVGFyZ2V0ID0gdHJ5Q3JlYXRlQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQodGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZyk7XG4gICAgICAgIGlmICh0b3BUYXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRvcFRhcmdldC51c2VCaXRtYXBDb29yZGluYXRlU3BhY2UoKHsgY29udGV4dDogY3R4LCBiaXRtYXBTaXplIH0pID0+IHtcbiAgICAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGJpdG1hcFNpemUud2lkdGgsIGJpdG1hcFNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0Nyb3NzaGFpckxhYmVsKHRvcFRhcmdldCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9kcmF3QWRkaXRpb25hbFNvdXJjZXModG9wVGFyZ2V0LCB0aGlzLl9wcml2YXRlX19zb3VyY2VUb3BQYW5lVmlld3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9nZXRCaXRtYXBTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5iaXRtYXBTaXplO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZHJhd0JpdG1hcChjdHgsIHgsIHkpIHtcbiAgICAgICAgY29uc3QgYml0bWFwU2l6ZSA9IHRoaXMuX2ludGVybmFsX2dldEJpdG1hcFNpemUoKTtcbiAgICAgICAgaWYgKGJpdG1hcFNpemUud2lkdGggPiAwICYmIGJpdG1hcFNpemUuaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLmNhbnZhc0VsZW1lbnQsIHgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gdGhpcyBjYWxsIGhhcyBzaWRlLWVmZmVjdCAtIGl0IHJlZ2VuZXJhdGVzIG1hcmtzIG9uIHRoZSBwcmljZSBzY2FsZVxuICAgICAgICAoX2EgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuX2ludGVybmFsX21hcmtzKCk7XG4gICAgfVxuICAgIF9wcml2YXRlX19tb3VzZURvd25FdmVudChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID09PSBudWxsIHx8IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX2lzRW1wdHkoKSB8fCAhdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5oYW5kbGVTY2FsZS5heGlzUHJlc3NlZE1vdXNlTW92ZS5wcmljZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fcHJpdmF0ZV9fcGFuZS5faW50ZXJuYWxfY2hhcnQoKS5faW50ZXJuYWxfbW9kZWwoKTtcbiAgICAgICAgY29uc3QgcGFuZSA9IHRoaXMuX3ByaXZhdGVfX3BhbmUuX2ludGVybmFsX3N0YXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vdXNlZG93biA9IHRydWU7XG4gICAgICAgIG1vZGVsLl9pbnRlcm5hbF9zdGFydFNjYWxlUHJpY2UocGFuZSwgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSwgZS5sb2NhbFkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fcHJlc3NlZE1vdXNlTW92ZUV2ZW50KGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUgPT09IG51bGwgfHwgIXRoaXMuX3ByaXZhdGVfX29wdGlvbnMuaGFuZGxlU2NhbGUuYXhpc1ByZXNzZWRNb3VzZU1vdmUucHJpY2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX3BhbmUuX2ludGVybmFsX2NoYXJ0KCkuX2ludGVybmFsX21vZGVsKCk7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9zdGF0ZSgpO1xuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZTtcbiAgICAgICAgbW9kZWwuX2ludGVybmFsX3NjYWxlUHJpY2VUbyhwYW5lLCBwcmljZVNjYWxlLCBlLmxvY2FsWSk7XG4gICAgfVxuICAgIF9wcml2YXRlX19tb3VzZURvd25PdXRzaWRlRXZlbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID09PSBudWxsIHx8ICF0aGlzLl9wcml2YXRlX19vcHRpb25zLmhhbmRsZVNjYWxlLmF4aXNQcmVzc2VkTW91c2VNb3ZlLnByaWNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9jaGFydCgpLl9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICBjb25zdCBwYW5lID0gdGhpcy5fcHJpdmF0ZV9fcGFuZS5faW50ZXJuYWxfc3RhdGUoKTtcbiAgICAgICAgY29uc3QgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGU7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19tb3VzZWRvd24pIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21vdXNlZG93biA9IGZhbHNlO1xuICAgICAgICAgICAgbW9kZWwuX2ludGVybmFsX2VuZFNjYWxlUHJpY2UocGFuZSwgcHJpY2VTY2FsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX21vdXNlVXBFdmVudChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID09PSBudWxsIHx8ICF0aGlzLl9wcml2YXRlX19vcHRpb25zLmhhbmRsZVNjYWxlLmF4aXNQcmVzc2VkTW91c2VNb3ZlLnByaWNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9jaGFydCgpLl9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICBjb25zdCBwYW5lID0gdGhpcy5fcHJpdmF0ZV9fcGFuZS5faW50ZXJuYWxfc3RhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2Vkb3duID0gZmFsc2U7XG4gICAgICAgIG1vZGVsLl9pbnRlcm5hbF9lbmRTY2FsZVByaWNlKHBhbmUsIHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fbW91c2VEb3VibGVDbGlja0V2ZW50KGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuaGFuZGxlU2NhbGUuYXhpc0RvdWJsZUNsaWNrUmVzZXQucHJpY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3Jlc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX21vdXNlRW50ZXJFdmVudChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9jaGFydCgpLl9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICBpZiAobW9kZWwuX2ludGVybmFsX29wdGlvbnMoKS5oYW5kbGVTY2FsZS5heGlzUHJlc3NlZE1vdXNlTW92ZS5wcmljZSAmJiAhdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZS5faW50ZXJuYWxfaXNQZXJjZW50YWdlKCkgJiYgIXRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX2lzSW5kZXhlZFRvMTAwKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3NldEN1cnNvcigxIC8qIEN1cnNvclR5cGUuTnNSZXNpemUgKi8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19tb3VzZUxlYXZlRXZlbnQoZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRDdXJzb3IoMCAvKiBDdXJzb3JUeXBlLkRlZmF1bHQgKi8pO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fYmFja0xhYmVscygpIHtcbiAgICAgICAgY29uc3QgcmVzID0gW107XG4gICAgICAgIGNvbnN0IHByaWNlU2NhbGUgPSAodGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSA9PT0gbnVsbCkgPyB1bmRlZmluZWQgOiB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlO1xuICAgICAgICBjb25zdCBhZGRWaWV3c0ZvclNvdXJjZXMgPSAoc291cmNlcykgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3cyA9IHNvdXJjZS5faW50ZXJuYWxfcHJpY2VBeGlzVmlld3ModGhpcy5fcHJpdmF0ZV9fcGFuZS5faW50ZXJuYWxfc3RhdGUoKSwgcHJpY2VTY2FsZSk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2aWV3cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh2aWV3c1tqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBjYWxjdWxhdGUgbWF4IGFuZCBtaW4gY29vcmRpbmF0ZXMgZm9yIHZpZXdzIG9uIHNlbGVjdGlvblxuICAgICAgICAvLyBjcm9zc2hhaXIgaW5kaXZpZHVhbGx5XG4gICAgICAgIGFkZFZpZXdzRm9yU291cmNlcyh0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9zdGF0ZSgpLl9pbnRlcm5hbF9vcmRlcmVkU291cmNlcygpKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdCYWNrZ3JvdW5kKHsgY29udGV4dDogY3R4LCBiaXRtYXBTaXplIH0pIHtcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBiaXRtYXBTaXplO1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX3BhbmUuX2ludGVybmFsX3N0YXRlKCkuX2ludGVybmFsX21vZGVsKCk7XG4gICAgICAgIGNvbnN0IHRvcENvbG9yID0gbW9kZWwuX2ludGVybmFsX2JhY2tncm91bmRUb3BDb2xvcigpO1xuICAgICAgICBjb25zdCBib3R0b21Db2xvciA9IG1vZGVsLl9pbnRlcm5hbF9iYWNrZ3JvdW5kQm90dG9tQ29sb3IoKTtcbiAgICAgICAgaWYgKHRvcENvbG9yID09PSBib3R0b21Db2xvcikge1xuICAgICAgICAgICAgY2xlYXJSZWN0KGN0eCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgdG9wQ29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xlYXJSZWN0V2l0aEdyYWRpZW50KGN0eCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgdG9wQ29sb3IsIGJvdHRvbUNvbG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fZHJhd0JvcmRlcih7IGNvbnRleHQ6IGN0eCwgYml0bWFwU2l6ZSwgaG9yaXpvbnRhbFBpeGVsUmF0aW8gfSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2l6ZSA9PT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID09PSBudWxsIHx8ICF0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCkuYm9yZGVyVmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCkuYm9yZGVyQ29sb3I7XG4gICAgICAgIGNvbnN0IGJvcmRlclNpemUgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHRoaXMuX2ludGVybmFsX3JlbmRlcmVyT3B0aW9ucygpLl9pbnRlcm5hbF9ib3JkZXJTaXplICogaG9yaXpvbnRhbFBpeGVsUmF0aW8pKTtcbiAgICAgICAgbGV0IGxlZnQ7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pc0xlZnQpIHtcbiAgICAgICAgICAgIGxlZnQgPSBiaXRtYXBTaXplLndpZHRoIC0gYm9yZGVyU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxlZnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsUmVjdChsZWZ0LCAwLCBib3JkZXJTaXplLCBiaXRtYXBTaXplLmhlaWdodCk7XG4gICAgfVxuICAgIF9wcml2YXRlX19kcmF3VGlja01hcmtzKHRhcmdldCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2l6ZSA9PT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGlja01hcmtzID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZS5faW50ZXJuYWxfbWFya3MoKTtcbiAgICAgICAgY29uc3QgcHJpY2VTY2FsZU9wdGlvbnMgPSB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyT3B0aW9ucyA9IHRoaXMuX2ludGVybmFsX3JlbmRlcmVyT3B0aW9ucygpO1xuICAgICAgICBjb25zdCB0aWNrTWFya0xlZnRYID0gdGhpcy5fcHJpdmF0ZV9faXNMZWZ0ID9cbiAgICAgICAgICAgICh0aGlzLl9wcml2YXRlX19zaXplLndpZHRoIC0gcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF90aWNrTGVuZ3RoKSA6XG4gICAgICAgICAgICAwO1xuICAgICAgICBpZiAocHJpY2VTY2FsZU9wdGlvbnMuYm9yZGVyVmlzaWJsZSAmJiBwcmljZVNjYWxlT3B0aW9ucy50aWNrc1Zpc2libGUpIHtcbiAgICAgICAgICAgIHRhcmdldC51c2VCaXRtYXBDb29yZGluYXRlU3BhY2UoKHsgY29udGV4dDogY3R4LCBob3Jpem9udGFsUGl4ZWxSYXRpbywgdmVydGljYWxQaXhlbFJhdGlvIH0pID0+IHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcHJpY2VTY2FsZU9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlja0hlaWdodCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IodmVydGljYWxQaXhlbFJhdGlvKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlja09mZnNldCA9IE1hdGguZmxvb3IodmVydGljYWxQaXhlbFJhdGlvICogMC41KTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrTGVuZ3RoID0gTWF0aC5yb3VuZChyZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3RpY2tMZW5ndGggKiBob3Jpem9udGFsUGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGlja01hcmsgb2YgdGlja01hcmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZWN0KE1hdGguZmxvb3IodGlja01hcmtMZWZ0WCAqIGhvcml6b250YWxQaXhlbFJhdGlvKSwgTWF0aC5yb3VuZCh0aWNrTWFyay5faW50ZXJuYWxfY29vcmQgKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pIC0gdGlja09mZnNldCwgdGlja0xlbmd0aCwgdGlja0hlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQudXNlTWVkaWFDb29yZGluYXRlU3BhY2UoKHsgY29udGV4dDogY3R4IH0pID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGN0eC5mb250ID0gdGhpcy5fcHJpdmF0ZV9fYmFzZUZvbnQoKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAoX2EgPSBwcmljZVNjYWxlT3B0aW9ucy50ZXh0Q29sb3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuX3ByaXZhdGVfX2xheW91dE9wdGlvbnMudGV4dENvbG9yO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IHRoaXMuX3ByaXZhdGVfX2lzTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgICBjb25zdCB0ZXh0TGVmdFggPSB0aGlzLl9wcml2YXRlX19pc0xlZnQgP1xuICAgICAgICAgICAgICAgIE1hdGgucm91bmQodGlja01hcmtMZWZ0WCAtIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ0lubmVyKSA6XG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCh0aWNrTWFya0xlZnRYICsgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF90aWNrTGVuZ3RoICsgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nSW5uZXIpO1xuICAgICAgICAgICAgY29uc3QgeU1pZENvcnJlY3Rpb25zID0gdGlja01hcmtzLm1hcCgobWFyaykgPT4gdGhpcy5fcHJpdmF0ZV9fd2lkdGhDYWNoZS5faW50ZXJuYWxfeU1pZENvcnJlY3Rpb24oY3R4LCBtYXJrLl9pbnRlcm5hbF9sYWJlbCkpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRpY2tNYXJrcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrTWFyayA9IHRpY2tNYXJrc1tpXTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQodGlja01hcmsuX2ludGVybmFsX2xhYmVsLCB0ZXh0TGVmdFgsIHRpY2tNYXJrLl9pbnRlcm5hbF9jb29yZCArIHlNaWRDb3JyZWN0aW9uc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fYWxpZ25MYWJlbHMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zaXplID09PSBudWxsIHx8IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3cyA9IFtdO1xuICAgICAgICBjb25zdCBvcmRlcmVkU291cmNlcyA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX29yZGVyZWRTb3VyY2VzKCkuc2xpY2UoKTsgLy8gQ29weSBvZiBhcnJheVxuICAgICAgICBjb25zdCBwYW5lID0gdGhpcy5fcHJpdmF0ZV9fcGFuZTtcbiAgICAgICAgY29uc3QgcGFuZVN0YXRlID0gcGFuZS5faW50ZXJuYWxfc3RhdGUoKTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXJPcHRpb25zID0gdGhpcy5faW50ZXJuYWxfcmVuZGVyZXJPcHRpb25zKCk7XG4gICAgICAgIC8vIGlmIHdlIGFyZSBkZWZhdWx0IHByaWNlIHNjYWxlLCBhcHBlbmQgbGFiZWxzIGZyb20gbm8tc2NhbGVcbiAgICAgICAgY29uc3QgaXNEZWZhdWx0ID0gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSA9PT0gcGFuZVN0YXRlLl9pbnRlcm5hbF9kZWZhdWx0VmlzaWJsZVByaWNlU2NhbGUoKTtcbiAgICAgICAgaWYgKGlzRGVmYXVsdCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZS5faW50ZXJuYWxfc3RhdGUoKS5faW50ZXJuYWxfb3JkZXJlZFNvdXJjZXMoKS5mb3JFYWNoKChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGFuZVN0YXRlLl9pbnRlcm5hbF9pc092ZXJsYXkoc291cmNlKSkge1xuICAgICAgICAgICAgICAgICAgICBvcmRlcmVkU291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGU7XG4gICAgICAgIGNvbnN0IHVwZGF0ZUZvclNvdXJjZXMgPSAoc291cmNlcykgPT4ge1xuICAgICAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VWaWV3cyA9IHNvdXJjZS5faW50ZXJuYWxfcHJpY2VBeGlzVmlld3MocGFuZVN0YXRlLCBwcmljZVNjYWxlKTtcbiAgICAgICAgICAgICAgICAvLyBuZXZlciBhbGlnbiBzZWxlY3RlZCBzb3VyY2VzXG4gICAgICAgICAgICAgICAgc291cmNlVmlld3MuZm9yRWFjaCgodmlldykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2aWV3Ll9pbnRlcm5hbF9zZXRGaXhlZENvb3JkaW5hdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3Ll9pbnRlcm5hbF9pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3MucHVzaCh2aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGNyb3NzaGFpciBpbmRpdmlkdWFsbHlcbiAgICAgICAgdXBkYXRlRm9yU291cmNlcyhvcmRlcmVkU291cmNlcyk7XG4gICAgICAgIHZpZXdzLmZvckVhY2goKHZpZXcpID0+IHZpZXcuX2ludGVybmFsX3NldEZpeGVkQ29vcmRpbmF0ZSh2aWV3Ll9pbnRlcm5hbF9jb29yZGluYXRlKCkpKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUuX2ludGVybmFsX29wdGlvbnMoKTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmFsaWduTGFiZWxzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZml4TGFiZWxPdmVybGFwKHZpZXdzLCByZW5kZXJlck9wdGlvbnMpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZml4TGFiZWxPdmVybGFwKHZpZXdzLCByZW5kZXJlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3NpemUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLl9wcml2YXRlX19zaXplLmhlaWdodCAvIDI7XG4gICAgICAgIC8vIHNwbGl0IGludG8gdHdvIHBhcnRzXG4gICAgICAgIGNvbnN0IHRvcCA9IHZpZXdzLmZpbHRlcigodmlldykgPT4gdmlldy5faW50ZXJuYWxfY29vcmRpbmF0ZSgpIDw9IGNlbnRlcik7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHZpZXdzLmZpbHRlcigodmlldykgPT4gdmlldy5faW50ZXJuYWxfY29vcmRpbmF0ZSgpID4gY2VudGVyKTtcbiAgICAgICAgLy8gc29ydCB0b3AgZnJvbSBjZW50ZXIgdG8gdG9wXG4gICAgICAgIHRvcC5zb3J0KChsLCByKSA9PiByLl9pbnRlcm5hbF9jb29yZGluYXRlKCkgLSBsLl9pbnRlcm5hbF9jb29yZGluYXRlKCkpO1xuICAgICAgICBib3R0b20uc29ydCgobCwgcikgPT4gbC5faW50ZXJuYWxfY29vcmRpbmF0ZSgpIC0gci5faW50ZXJuYWxfY29vcmRpbmF0ZSgpKTtcbiAgICAgICAgZm9yIChjb25zdCB2aWV3IG9mIHZpZXdzKSB7XG4gICAgICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gTWF0aC5mbG9vcih2aWV3Ll9pbnRlcm5hbF9oZWlnaHQocmVuZGVyZXJPcHRpb25zKSAvIDIpO1xuICAgICAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHZpZXcuX2ludGVybmFsX2Nvb3JkaW5hdGUoKTtcbiAgICAgICAgICAgIGlmIChjb29yZGluYXRlID4gLWhhbGZIZWlnaHQgJiYgY29vcmRpbmF0ZSA8IGhhbGZIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2aWV3Ll9pbnRlcm5hbF9zZXRGaXhlZENvb3JkaW5hdGUoaGFsZkhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29vcmRpbmF0ZSA+ICh0aGlzLl9wcml2YXRlX19zaXplLmhlaWdodCAtIGhhbGZIZWlnaHQpICYmIGNvb3JkaW5hdGUgPCB0aGlzLl9wcml2YXRlX19zaXplLmhlaWdodCArIGhhbGZIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2aWV3Ll9pbnRlcm5hbF9zZXRGaXhlZENvb3JkaW5hdGUodGhpcy5fcHJpdmF0ZV9fc2l6ZS5oZWlnaHQgLSBoYWxmSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZWNhbGN1bGF0ZU92ZXJsYXBwaW5nKHRvcCwgMSwgdGhpcy5fcHJpdmF0ZV9fc2l6ZS5oZWlnaHQsIHJlbmRlcmVyT3B0aW9ucyk7XG4gICAgICAgIHJlY2FsY3VsYXRlT3ZlcmxhcHBpbmcoYm90dG9tLCAtMSwgdGhpcy5fcHJpdmF0ZV9fc2l6ZS5oZWlnaHQsIHJlbmRlcmVyT3B0aW9ucyk7XG4gICAgfVxuICAgIF9wcml2YXRlX19kcmF3QmFja0xhYmVscyh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3NpemUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3cyA9IHRoaXMuX3ByaXZhdGVfX2JhY2tMYWJlbHMoKTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXJPcHRpb25zID0gdGhpcy5faW50ZXJuYWxfcmVuZGVyZXJPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IGFsaWduID0gdGhpcy5fcHJpdmF0ZV9faXNMZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgdmlld3MuZm9yRWFjaCgodmlldykgPT4ge1xuICAgICAgICAgICAgaWYgKHZpZXcuX2ludGVybmFsX2lzQXhpc0xhYmVsVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB2aWV3Ll9pbnRlcm5hbF9yZW5kZXJlcihlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGUpKTtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5faW50ZXJuYWxfZHJhdyh0YXJnZXQsIHJlbmRlcmVyT3B0aW9ucywgdGhpcy5fcHJpdmF0ZV9fd2lkdGhDYWNoZSwgYWxpZ24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdDcm9zc2hhaXJMYWJlbCh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3NpemUgPT09IG51bGwgfHwgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fcHJpdmF0ZV9fcGFuZS5faW50ZXJuYWxfY2hhcnQoKS5faW50ZXJuYWxfbW9kZWwoKTtcbiAgICAgICAgY29uc3Qgdmlld3MgPSBbXTsgLy8gYXJyYXkgb2YgYXJyYXlzXG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9zdGF0ZSgpO1xuICAgICAgICBjb25zdCB2ID0gbW9kZWwuX2ludGVybmFsX2Nyb3NzaGFpclNvdXJjZSgpLl9pbnRlcm5hbF9wcmljZUF4aXNWaWV3cyhwYW5lLCB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlKTtcbiAgICAgICAgaWYgKHYubGVuZ3RoKSB7XG4gICAgICAgICAgICB2aWV3cy5wdXNoKHYpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvID0gdGhpcy5faW50ZXJuYWxfcmVuZGVyZXJPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IGFsaWduID0gdGhpcy5fcHJpdmF0ZV9faXNMZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgdmlld3MuZm9yRWFjaCgoYXJyKSA9PiB7XG4gICAgICAgICAgICBhcnIuZm9yRWFjaCgodmlldykgPT4ge1xuICAgICAgICAgICAgICAgIHZpZXcuX2ludGVybmFsX3JlbmRlcmVyKGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSkpLl9pbnRlcm5hbF9kcmF3KHRhcmdldCwgcm8sIHRoaXMuX3ByaXZhdGVfX3dpZHRoQ2FjaGUsIGFsaWduKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3NldEN1cnNvcih0eXBlKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NlbGwuc3R5bGUuY3Vyc29yID0gdHlwZSA9PT0gMSAvKiBDdXJzb3JUeXBlLk5zUmVzaXplICovID8gJ25zLXJlc2l6ZScgOiAnZGVmYXVsdCc7XG4gICAgfVxuICAgIF9wcml2YXRlX19vbk1hcmtzQ2hhbmdlZCgpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9pbnRlcm5hbF9vcHRpbWFsV2lkdGgoKTtcbiAgICAgICAgLy8gYXZvaWQgcHJpY2Ugc2NhbGUgaXMgc2hydW5rXG4gICAgICAgIC8vIHVzaW5nIDwgaW5zdGVhZCAhPT0gdG8gYXZvaWQgaW5maW5pdGUgY2hhbmdlc1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcHJldk9wdGltYWxXaWR0aCA8IHdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lLl9pbnRlcm5hbF9jaGFydCgpLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9mdWxsVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJldk9wdGltYWxXaWR0aCA9IHdpZHRoO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fYmFzZUZvbnQoKSB7XG4gICAgICAgIHJldHVybiBtYWtlRm9udCh0aGlzLl9wcml2YXRlX19sYXlvdXRPcHRpb25zLmZvbnRTaXplLCB0aGlzLl9wcml2YXRlX19sYXlvdXRPcHRpb25zLmZvbnRGYW1pbHkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc291cmNlQm90dG9tUGFuZVZpZXdzJDEoc291cmNlLCBwYW5lKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gc291cmNlLl9pbnRlcm5hbF9ib3R0b21QYW5lVmlld3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHNvdXJjZSwgcGFuZSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xufVxuZnVuY3Rpb24gc291cmNlUGFuZVZpZXdzJDEoc291cmNlLCBwYW5lKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gc291cmNlLl9pbnRlcm5hbF9wYW5lVmlld3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHNvdXJjZSwgcGFuZSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xufVxuZnVuY3Rpb24gc291cmNlTGFiZWxQYW5lVmlld3Moc291cmNlLCBwYW5lKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gc291cmNlLl9pbnRlcm5hbF9sYWJlbFBhbmVWaWV3cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoc291cmNlLCBwYW5lKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG59XG5mdW5jdGlvbiBzb3VyY2VUb3BQYW5lVmlld3MkMShzb3VyY2UsIHBhbmUpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoX2IgPSAoX2EgPSBzb3VyY2UuX2ludGVybmFsX3RvcFBhbmVWaWV3cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoc291cmNlLCBwYW5lKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG59XG5jbGFzcyBQYW5lV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgc3RhdGUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZSA9IHNpemUkMSh7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2F0dHJpYnV0aW9uTG9nb1dpZGdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXJ0U2Nyb2xsaW5nUG9zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xpY2tlZCA9IG5ldyBEZWxlZ2F0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYmxDbGlja2VkID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3ByZXZQaW5jaFNjYWxlID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9uZ1RhcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19leGl0VHJhY2tpbmdNb2RlT25OZXh0VHJ5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2luaXRDcm9zc2hhaXJQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Njcm9sbFhBbmltYXRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19pc1NldHRpbmdTaXplID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc1N1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pc1NldHRpbmdTaXplIHx8IHRoaXMuX3ByaXZhdGVfX3N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfbGlnaHRVcGRhdGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUgfHwgdGhpcy5fcHJpdmF0ZV9fc3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbCgpLl9pbnRlcm5hbF9saWdodFVwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydCA9IGNoYXJ0O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGF0ZS5faW50ZXJuYWxfb25EZXN0cm95ZWQoKS5faW50ZXJuYWxfc3Vic2NyaWJlKHRoaXMuX3ByaXZhdGVfX29uU3RhdGVEZXN0cm95ZWQuYmluZCh0aGlzKSwgdGhpcywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BhbmVDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZUNlbGwuc3R5bGUucGFkZGluZyA9ICcwJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZUNlbGwuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgICBjb25zdCBwYW5lV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBwYW5lV3JhcHBlci5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgcGFuZVdyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBwYW5lV3JhcHBlci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIHBhbmVXcmFwcGVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRBeGlzQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRBeGlzQ2VsbC5zdHlsZS5wYWRkaW5nID0gJzAnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodEF4aXNDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRBeGlzQ2VsbC5zdHlsZS5wYWRkaW5nID0gJzAnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lQ2VsbC5hcHBlbmRDaGlsZChwYW5lV3JhcHBlcik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcgPSBjcmVhdGVCb3VuZENhbnZhcyhwYW5lV3JhcHBlciwgc2l6ZSQxKHsgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2IH0pKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5zdWJzY3JpYmVTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZCh0aGlzLl9wcml2YXRlX19jYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIpO1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLmNhbnZhc0VsZW1lbnQ7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSAnMSc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICBjYW52YXMuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190b3BDYW52YXNCaW5kaW5nID0gY3JlYXRlQm91bmRDYW52YXMocGFuZVdyYXBwZXIsIHNpemUkMSh7IHdpZHRoOiAxNiwgaGVpZ2h0OiAxNiB9KSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc0JpbmRpbmcuc3Vic2NyaWJlU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWQodGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyKTtcbiAgICAgICAgY29uc3QgdG9wQ2FudmFzID0gdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50O1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUuekluZGV4ID0gJzInO1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgdG9wQ2FudmFzLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcm93RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Jvd0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fcHJpdmF0ZV9fbGVmdEF4aXNDZWxsKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcm93RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX19wYW5lQ2VsbCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Jvd0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fcHJpdmF0ZV9fcmlnaHRBeGlzQ2VsbCk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3VwZGF0ZVByaWNlQXhpc1dpZGdldHNTdGF0ZXMoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2VFdmVudEhhbmRsZXIgPSBuZXcgTW91c2VFdmVudEhhbmRsZXIodGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50LCB0aGlzLCB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfdHJlYXRWZXJ0VG91Y2hEcmFnQXNQYWdlU2Nyb2xsOiAoKSA9PiB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgPT09IG51bGwgJiYgIXRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9vcHRpb25zKCkuaGFuZGxlU2Nyb2xsLnZlcnRUb3VjaERyYWcsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdHJlYXRIb3J6VG91Y2hEcmFnQXNQYWdlU2Nyb2xsOiAoKSA9PiB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgPT09IG51bGwgJiYgIXRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9vcHRpb25zKCkuaGFuZGxlU2Nyb2xsLmhvcnpUb3VjaERyYWcsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcmlnaHRQcmljZUF4aXNXaWRnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXR0cmlidXRpb25Mb2dvV2lkZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy51bnN1YnNjcmliZVN1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkKHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc1N1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkSGFuZGxlcik7XG4gICAgICAgIHJlbGVhc2VDYW52YXModGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcudW5zdWJzY3JpYmVTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZCh0aGlzLl9wcml2YXRlX19jYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIpO1xuICAgICAgICByZWxlYXNlQ2FudmFzKHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuY2FudmFzRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuZGlzcG9zZSgpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXRlLl9pbnRlcm5hbF9vbkRlc3Ryb3llZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZUV2ZW50SGFuZGxlci5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc3RhdGUoKSB7XG4gICAgICAgIHJldHVybiBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX3N0YXRlKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFN0YXRlKHBhbmUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zdGF0ZS5faW50ZXJuYWxfb25EZXN0cm95ZWQoKS5faW50ZXJuYWxfdW5zdWJzY3JpYmVBbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3RhdGUgPSBwYW5lO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXRlLl9pbnRlcm5hbF9vbkRlc3Ryb3llZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUoUGFuZVdpZGdldC5wcm90b3R5cGUuX3ByaXZhdGVfX29uU3RhdGVEZXN0cm95ZWQuYmluZCh0aGlzKSwgdGhpcywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW50ZXJuYWxfdXBkYXRlUHJpY2VBeGlzV2lkZ2V0c1N0YXRlcygpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX3BhbmVXaWRnZXRzKCkuaW5kZXhPZih0aGlzKSA9PT0gdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX3BhbmVXaWRnZXRzKCkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXR0cmlidXRpb25Mb2dvV2lkZ2V0ID0gKF9hID0gdGhpcy5fcHJpdmF0ZV9fYXR0cmlidXRpb25Mb2dvV2lkZ2V0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgQXR0cmlidXRpb25Mb2dvV2lkZ2V0KHRoaXMuX3ByaXZhdGVfX3BhbmVDZWxsLCB0aGlzLl9wcml2YXRlX19jaGFydCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hdHRyaWJ1dGlvbkxvZ29XaWRnZXQuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKF9iID0gdGhpcy5fcHJpdmF0ZV9fYXR0cmlidXRpb25Mb2dvV2lkZ2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuX2ludGVybmFsX3JlbW92ZUVsZW1lbnQoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2F0dHJpYnV0aW9uTG9nb1dpZGdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX2NoYXJ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2hhcnQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9nZXRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcm93RWxlbWVudDtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZVByaWNlQXhpc1dpZGdldHNTdGF0ZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JlY3JlYXRlUHJpY2VBeGlzV2lkZ2V0cygpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfc2VyaWVzZXMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlQXhpc1dpZGdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgbGVmdFByaWNlU2NhbGUgPSB0aGlzLl9wcml2YXRlX19zdGF0ZS5faW50ZXJuYWxfbGVmdFByaWNlU2NhbGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQuX2ludGVybmFsX3NldFByaWNlU2NhbGUoZW5zdXJlTm90TnVsbChsZWZ0UHJpY2VTY2FsZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcmlnaHRQcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fc3RhdGUuX2ludGVybmFsX3JpZ2h0UHJpY2VTY2FsZSgpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRQcmljZUF4aXNXaWRnZXQuX2ludGVybmFsX3NldFByaWNlU2NhbGUoZW5zdXJlTm90TnVsbChyaWdodFByaWNlU2NhbGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfdXBkYXRlUHJpY2VBeGlzV2lkZ2V0cygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRQcmljZUF4aXNXaWRnZXQuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zdHJldGNoRmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fc3RhdGUgIT09IG51bGwgPyB0aGlzLl9wcml2YXRlX19zdGF0ZS5faW50ZXJuYWxfc3RyZXRjaEZhY3RvcigpIDogMDtcbiAgICB9XG4gICAgX2ludGVybmFsX3NldFN0cmV0Y2hGYWN0b3Ioc3RyZXRjaEZhY3Rvcikge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXRlLl9pbnRlcm5hbF9zZXRTdHJldGNoRmFjdG9yKHN0cmV0Y2hGYWN0b3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tb3VzZUVudGVyRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19zdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29uTW91c2VFdmVudCgpO1xuICAgICAgICBjb25zdCB4ID0gZXZlbnQubG9jYWxYO1xuICAgICAgICBjb25zdCB5ID0gZXZlbnQubG9jYWxZO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRDcm9zc2hhaXJQb3NpdGlvbih4LCB5LCBldmVudCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tb3VzZURvd25FdmVudChldmVudCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vbk1vdXNlRXZlbnQoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2VUb3VjaERvd25FdmVudCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRDcm9zc2hhaXJQb3NpdGlvbihldmVudC5sb2NhbFgsIGV2ZW50LmxvY2FsWSwgZXZlbnQpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VNb3ZlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX3N0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb25Nb3VzZUV2ZW50KCk7XG4gICAgICAgIGNvbnN0IHggPSBldmVudC5sb2NhbFg7XG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5sb2NhbFk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NldENyb3NzaGFpclBvc2l0aW9uKHgsIHksIGV2ZW50KTtcbiAgICAgICAgY29uc3QgaGl0VGVzdCA9IHRoaXMuX2ludGVybmFsX2hpdFRlc3QoeCwgeSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9zZXRDdXJzb3JTdHlsZSgoX2EgPSBoaXRUZXN0ID09PSBudWxsIHx8IGhpdFRlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhpdFRlc3QuX2ludGVybmFsX2N1cnNvclN0eWxlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfc2V0SG92ZXJlZFNvdXJjZShoaXRUZXN0ICYmIHsgX2ludGVybmFsX3NvdXJjZTogaGl0VGVzdC5faW50ZXJuYWxfc291cmNlLCBfaW50ZXJuYWxfb2JqZWN0OiBoaXRUZXN0Ll9pbnRlcm5hbF9vYmplY3QgfSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tb3VzZUNsaWNrRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb25Nb3VzZUV2ZW50KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZpcmVDbGlja2VkRGVsZWdhdGUoZXZlbnQpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VEb3VibGVDbGlja0V2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZpcmVNb3VzZUNsaWNrRGVsZWdhdGUodGhpcy5fcHJpdmF0ZV9fZGJsQ2xpY2tlZCwgZXZlbnQpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZG91YmxlVGFwRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW91c2VEb3VibGVDbGlja0V2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3ByZXNzZWRNb3VzZU1vdmVFdmVudChldmVudCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vbk1vdXNlRXZlbnQoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJlc3NlZE1vdXNlVG91Y2hNb3ZlRXZlbnQoZXZlbnQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRDcm9zc2hhaXJQb3NpdGlvbihldmVudC5sb2NhbFgsIGV2ZW50LmxvY2FsWSwgZXZlbnQpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VVcEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29uTW91c2VFdmVudCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb25nVGFwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VuZFNjcm9sbChldmVudCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF90YXBFdmVudChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19maXJlQ2xpY2tlZERlbGVnYXRlKGV2ZW50KTtcbiAgICB9XG4gICAgX2ludGVybmFsX2xvbmdUYXBFdmVudChldmVudCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb25nVGFwID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXJ0VHJhY2tQb2ludCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSB7IHg6IGV2ZW50LmxvY2FsWCwgeTogZXZlbnQubG9jYWxZIH07XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNraW5nTW9kZShwb2ludCwgcG9pbnQsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VMZWF2ZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29uTW91c2VFdmVudCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGF0ZS5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfc2V0SG92ZXJlZFNvdXJjZShudWxsKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xlYXJDcm9zc2hhaXJQb3NpdGlvbigpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfY2xpY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NsaWNrZWQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kYmxDbGlja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fZGJsQ2xpY2tlZDtcbiAgICB9XG4gICAgX2ludGVybmFsX3BpbmNoU3RhcnRFdmVudCgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJldlBpbmNoU2NhbGUgPSAxO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbCgpLl9pbnRlcm5hbF9zdG9wVGltZVNjYWxlQW5pbWF0aW9uKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9waW5jaEV2ZW50KG1pZGRsZVBvaW50LCBzY2FsZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9vcHRpb25zKCkuaGFuZGxlU2NhbGUucGluY2gpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB6b29tU2NhbGUgPSAoc2NhbGUgLSB0aGlzLl9wcml2YXRlX19wcmV2UGluY2hTY2FsZSkgKiA1O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmV2UGluY2hTY2FsZSA9IHNjYWxlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbCgpLl9pbnRlcm5hbF96b29tVGltZShtaWRkbGVQb2ludC5faW50ZXJuYWxfeCwgem9vbVNjYWxlKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3RvdWNoU3RhcnRFdmVudChldmVudCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb25nVGFwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2V4aXRUcmFja2luZ01vZGVPbk5leHRUcnkgPSB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgIT09IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vdXNlVG91Y2hEb3duRXZlbnQoKTtcbiAgICAgICAgY29uc3QgY3Jvc3NoYWlyID0gdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfY3Jvc3NoYWlyU291cmNlKCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgIT09IG51bGwgJiYgY3Jvc3NoYWlyLl9pbnRlcm5hbF92aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2luaXRDcm9zc2hhaXJQb3NpdGlvbiA9IHsgeDogY3Jvc3NoYWlyLl9pbnRlcm5hbF9hcHBsaWVkWCgpLCB5OiBjcm9zc2hhaXIuX2ludGVybmFsX2FwcGxpZWRZKCkgfTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXJ0VHJhY2tQb2ludCA9IHsgeDogZXZlbnQubG9jYWxYLCB5OiBldmVudC5sb2NhbFkgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfdG91Y2hNb3ZlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmxvY2FsWDtcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmxvY2FsWTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXJ0VHJhY2tQb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdHJhY2tpbmcgbW9kZTogbW92ZSBjcm9zc2hhaXJcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2V4aXRUcmFja2luZ01vZGVPbk5leHRUcnkgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdQb2ludCA9IGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9faW5pdENyb3NzaGFpclBvc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ggPSBvcmlnUG9pbnQueCArICh4IC0gdGhpcy5fcHJpdmF0ZV9fc3RhcnRUcmFja1BvaW50LngpO1xuICAgICAgICAgICAgY29uc3QgbmV3WSA9IG9yaWdQb2ludC55ICsgKHkgLSB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQueSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRDcm9zc2hhaXJQb3NpdGlvbihuZXdYLCBuZXdZLCBldmVudCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJlc3NlZE1vdXNlVG91Y2hNb3ZlRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfdG91Y2hFbmRFdmVudChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxfY2hhcnQoKS5faW50ZXJuYWxfb3B0aW9ucygpLnRyYWNraW5nTW9kZS5leGl0TW9kZSA9PT0gMCAvKiBUcmFja2luZ01vZGVFeGl0TW9kZS5PblRvdWNoRW5kICovKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19leGl0VHJhY2tpbmdNb2RlT25OZXh0VHJ5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX190cnlFeGl0VHJhY2tpbmdNb2RlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VuZFNjcm9sbChldmVudCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9oaXRUZXN0KHgsIHkpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9wcml2YXRlX19zdGF0ZTtcbiAgICAgICAgaWYgKHN0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGl0VGVzdFBhbmUoc3RhdGUsIHgsIHkpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0UHJpY2VBeGlzU2l6ZSh3aWR0aCwgcG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgcHJpY2VBeGlzV2lkZ2V0ID0gcG9zaXRpb24gPT09ICdsZWZ0JyA/IHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQgOiB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldDtcbiAgICAgICAgZW5zdXJlTm90TnVsbChwcmljZUF4aXNXaWRnZXQpLl9pbnRlcm5hbF9zZXRTaXplKHNpemUkMSh7IHdpZHRoLCBoZWlnaHQ6IHRoaXMuX3ByaXZhdGVfX3NpemUuaGVpZ2h0IH0pKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2dldFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19zaXplO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0U2l6ZShuZXdTaXplKSB7XG4gICAgICAgIGlmIChlcXVhbFNpemVzKHRoaXMuX3ByaXZhdGVfX3NpemUsIG5ld1NpemUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLnJlc2l6ZUNhbnZhc0VsZW1lbnQobmV3U2l6ZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc0JpbmRpbmcucmVzaXplQ2FudmFzRWxlbWVudChuZXdTaXplKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faXNTZXR0aW5nU2l6ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lQ2VsbC5zdHlsZS53aWR0aCA9IG5ld1NpemUud2lkdGggKyAncHgnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lQ2VsbC5zdHlsZS5oZWlnaHQgPSBuZXdTaXplLmhlaWdodCArICdweCc7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9yZWNhbGN1bGF0ZVByaWNlU2NhbGVzKCkge1xuICAgICAgICBjb25zdCBwYW5lID0gZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19zdGF0ZSk7XG4gICAgICAgIHBhbmUuX2ludGVybmFsX3JlY2FsY3VsYXRlUHJpY2VTY2FsZShwYW5lLl9pbnRlcm5hbF9sZWZ0UHJpY2VTY2FsZSgpKTtcbiAgICAgICAgcGFuZS5faW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVNjYWxlKHBhbmUuX2ludGVybmFsX3JpZ2h0UHJpY2VTY2FsZSgpKTtcbiAgICAgICAgZm9yIChjb25zdCBzb3VyY2Ugb2YgcGFuZS5faW50ZXJuYWxfZGF0YVNvdXJjZXMoKSkge1xuICAgICAgICAgICAgaWYgKHBhbmUuX2ludGVybmFsX2lzT3ZlcmxheShzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpY2VTY2FsZSA9IHNvdXJjZS5faW50ZXJuYWxfcHJpY2VTY2FsZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwcmljZVNjYWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhbmUuX2ludGVybmFsX3JlY2FsY3VsYXRlUHJpY2VTY2FsZShwcmljZVNjYWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZm9yIG92ZXJsYXkgZHJhd2luZ3MgcHJpY2Ugc2NhbGUgaXMgb3duZXIncyBwcmljZSBzY2FsZVxuICAgICAgICAgICAgICAgIC8vIGhvd2V2ZXIgb3duZXIncyBwcmljZSBzY2FsZSBjb3VsZCBub3QgY29udGFpbiBkc1xuICAgICAgICAgICAgICAgIHNvdXJjZS5faW50ZXJuYWxfdXBkYXRlQWxsVmlld3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfZ2V0Qml0bWFwU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuYml0bWFwU2l6ZTtcbiAgICB9XG4gICAgX2ludGVybmFsX2RyYXdCaXRtYXAoY3R4LCB4LCB5KSB7XG4gICAgICAgIGNvbnN0IGJpdG1hcFNpemUgPSB0aGlzLl9pbnRlcm5hbF9nZXRCaXRtYXBTaXplKCk7XG4gICAgICAgIGlmIChiaXRtYXBTaXplLndpZHRoID4gMCAmJiBiaXRtYXBTaXplLmhlaWdodCA+IDApIHtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50LCB4LCB5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFpbnQodHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gMCAvKiBJbnZhbGlkYXRpb25MZXZlbC5Ob25lICovKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPiAxIC8qIEludmFsaWRhdGlvbkxldmVsLkN1cnNvciAqLykge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVNjYWxlcygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9wYWludCh0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcmlnaHRQcmljZUF4aXNXaWRnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9wYWludCh0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSAhPT0gMSAvKiBJbnZhbGlkYXRpb25MZXZlbC5DdXJzb3IgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuYXBwbHlTdWdnZXN0ZWRCaXRtYXBTaXplKCk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0cnlDcmVhdGVDYW52YXNSZW5kZXJpbmdUYXJnZXQyRCh0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQudXNlQml0bWFwQ29vcmRpbmF0ZVNwYWNlKChzY29wZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3QmFja2dyb3VuZChzY29wZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdTb3VyY2VzKHRhcmdldCwgc291cmNlQm90dG9tUGFuZVZpZXdzJDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3R3JpZCh0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3V2F0ZXJtYXJrKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdTb3VyY2VzKHRhcmdldCwgc291cmNlUGFuZVZpZXdzJDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3U291cmNlcyh0YXJnZXQsIHNvdXJjZUxhYmVsUGFuZVZpZXdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5hcHBseVN1Z2dlc3RlZEJpdG1hcFNpemUoKTtcbiAgICAgICAgY29uc3QgdG9wVGFyZ2V0ID0gdHJ5Q3JlYXRlQ2FudmFzUmVuZGVyaW5nVGFyZ2V0MkQodGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZyk7XG4gICAgICAgIGlmICh0b3BUYXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRvcFRhcmdldC51c2VCaXRtYXBDb29yZGluYXRlU3BhY2UoKHsgY29udGV4dDogY3R4LCBiaXRtYXBTaXplIH0pID0+IHtcbiAgICAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGJpdG1hcFNpemUud2lkdGgsIGJpdG1hcFNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0Nyb3NzaGFpcih0b3BUYXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd1NvdXJjZXModG9wVGFyZ2V0LCBzb3VyY2VUb3BQYW5lVmlld3MkMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX2xlZnRQcmljZUF4aXNXaWRnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkZ2V0O1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmlnaHRQcmljZUF4aXNXaWRnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldDtcbiAgICB9XG4gICAgX2ludGVybmFsX2RyYXdBZGRpdGlvbmFsU291cmNlcyh0YXJnZXQsIHBhbmVWaWV3c0dldHRlcikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3U291cmNlcyh0YXJnZXQsIHBhbmVWaWV3c0dldHRlcik7XG4gICAgfVxuICAgIF9wcml2YXRlX19vblN0YXRlRGVzdHJveWVkKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3N0YXRlLl9pbnRlcm5hbF9vbkRlc3Ryb3llZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX19maXJlQ2xpY2tlZERlbGVnYXRlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ZpcmVNb3VzZUNsaWNrRGVsZWdhdGUodGhpcy5fcHJpdmF0ZV9fY2xpY2tlZCwgZXZlbnQpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZmlyZU1vdXNlQ2xpY2tEZWxlZ2F0ZShkZWxlZ2F0ZSwgZXZlbnQpIHtcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmxvY2FsWDtcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmxvY2FsWTtcbiAgICAgICAgaWYgKGRlbGVnYXRlLl9pbnRlcm5hbF9oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgICAgICAgZGVsZWdhdGUuX2ludGVybmFsX2ZpcmUodGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2Nvb3JkaW5hdGVUb0luZGV4KHgpLCB7IHgsIHkgfSwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19kcmF3QmFja2dyb3VuZCh7IGNvbnRleHQ6IGN0eCwgYml0bWFwU2l6ZSB9KSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gYml0bWFwU2l6ZTtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9wcml2YXRlX19tb2RlbCgpO1xuICAgICAgICBjb25zdCB0b3BDb2xvciA9IG1vZGVsLl9pbnRlcm5hbF9iYWNrZ3JvdW5kVG9wQ29sb3IoKTtcbiAgICAgICAgY29uc3QgYm90dG9tQ29sb3IgPSBtb2RlbC5faW50ZXJuYWxfYmFja2dyb3VuZEJvdHRvbUNvbG9yKCk7XG4gICAgICAgIGlmICh0b3BDb2xvciA9PT0gYm90dG9tQ29sb3IpIHtcbiAgICAgICAgICAgIGNsZWFyUmVjdChjdHgsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIGJvdHRvbUNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFyUmVjdFdpdGhHcmFkaWVudChjdHgsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIHRvcENvbG9yLCBib3R0b21Db2xvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdHcmlkKHRhcmdldCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fc3RhdGUpO1xuICAgICAgICBjb25zdCBwYW5lVmlldyA9IHN0YXRlLl9pbnRlcm5hbF9ncmlkKCkuX2ludGVybmFsX3BhbmVWaWV3KCk7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gcGFuZVZpZXcuX2ludGVybmFsX3JlbmRlcmVyKCk7XG4gICAgICAgIGlmIChyZW5kZXJlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVuZGVyZXIuX2ludGVybmFsX2RyYXcodGFyZ2V0LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdXYXRlcm1hcmsodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuX3ByaXZhdGVfX21vZGVsKCkuX2ludGVybmFsX3dhdGVybWFya1NvdXJjZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3U291cmNlSW1wbCh0YXJnZXQsIHNvdXJjZVBhbmVWaWV3cyQxLCBkcmF3QmFja2dyb3VuZCwgc291cmNlKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd1NvdXJjZUltcGwodGFyZ2V0LCBzb3VyY2VQYW5lVmlld3MkMSwgZHJhd0ZvcmVncm91bmQsIHNvdXJjZSk7XG4gICAgfVxuICAgIF9wcml2YXRlX19kcmF3Q3Jvc3NoYWlyKHRhcmdldCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3U291cmNlSW1wbCh0YXJnZXQsIHNvdXJjZVBhbmVWaWV3cyQxLCBkcmF3Rm9yZWdyb3VuZCwgdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfY3Jvc3NoYWlyU291cmNlKCkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZHJhd1NvdXJjZXModGFyZ2V0LCBwYW5lVmlld3NHZXR0ZXIpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX3N0YXRlKTtcbiAgICAgICAgY29uc3Qgc291cmNlcyA9IHN0YXRlLl9pbnRlcm5hbF9vcmRlcmVkU291cmNlcygpO1xuICAgICAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3U291cmNlSW1wbCh0YXJnZXQsIHBhbmVWaWV3c0dldHRlciwgZHJhd0JhY2tncm91bmQsIHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd1NvdXJjZUltcGwodGFyZ2V0LCBwYW5lVmlld3NHZXR0ZXIsIGRyYXdGb3JlZ3JvdW5kLCBzb3VyY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19kcmF3U291cmNlSW1wbCh0YXJnZXQsIHBhbmVWaWV3c0dldHRlciwgZHJhd0ZuLCBzb3VyY2UpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX3N0YXRlKTtcbiAgICAgICAgY29uc3QgaG92ZXJlZFNvdXJjZSA9IHN0YXRlLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9ob3ZlcmVkU291cmNlKCk7XG4gICAgICAgIGNvbnN0IGlzSG92ZXJlZCA9IGhvdmVyZWRTb3VyY2UgIT09IG51bGwgJiYgaG92ZXJlZFNvdXJjZS5faW50ZXJuYWxfc291cmNlID09PSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IG9iamVjSWQgPSBob3ZlcmVkU291cmNlICE9PSBudWxsICYmIGlzSG92ZXJlZCAmJiBob3ZlcmVkU291cmNlLl9pbnRlcm5hbF9vYmplY3QgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBob3ZlcmVkU291cmNlLl9pbnRlcm5hbF9vYmplY3QuX2ludGVybmFsX2hpdFRlc3REYXRhXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZHJhd1JlbmRlcmVyRm4gPSAocmVuZGVyZXIpID0+IGRyYXdGbihyZW5kZXJlciwgdGFyZ2V0LCBpc0hvdmVyZWQsIG9iamVjSWQpO1xuICAgICAgICBkcmF3U291cmNlUGFuZVZpZXdzKHBhbmVWaWV3c0dldHRlciwgZHJhd1JlbmRlcmVyRm4sIHNvdXJjZSwgc3RhdGUpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fcmVjcmVhdGVQcmljZUF4aXNXaWRnZXRzKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0O1xuICAgICAgICBjb25zdCBsZWZ0QXhpc1Zpc2libGUgPSB0aGlzLl9wcml2YXRlX19zdGF0ZS5faW50ZXJuYWxfbGVmdFByaWNlU2NhbGUoKS5faW50ZXJuYWxfb3B0aW9ucygpLnZpc2libGU7XG4gICAgICAgIGNvbnN0IHJpZ2h0QXhpc1Zpc2libGUgPSB0aGlzLl9wcml2YXRlX19zdGF0ZS5faW50ZXJuYWxfcmlnaHRQcmljZVNjYWxlKCkuX2ludGVybmFsX29wdGlvbnMoKS52aXNpYmxlO1xuICAgICAgICBpZiAoIWxlZnRBeGlzVmlzaWJsZSAmJiB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0QXhpc0NlbGwucmVtb3ZlQ2hpbGQodGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmlnaHRBeGlzVmlzaWJsZSAmJiB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRBeGlzQ2VsbC5yZW1vdmVDaGlsZCh0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVuZGVyZXJPcHRpb25zUHJvdmlkZXIgPSBjaGFydC5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfcmVuZGVyZXJPcHRpb25zUHJvdmlkZXIoKTtcbiAgICAgICAgaWYgKGxlZnRBeGlzVmlzaWJsZSAmJiB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkZ2V0ID0gbmV3IFByaWNlQXhpc1dpZGdldCh0aGlzLCBjaGFydC5faW50ZXJuYWxfb3B0aW9ucygpLCByZW5kZXJlck9wdGlvbnNQcm92aWRlciwgJ2xlZnQnKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRBeGlzQ2VsbC5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9nZXRFbGVtZW50KCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyaWdodEF4aXNWaXNpYmxlICYmIHRoaXMuX3ByaXZhdGVfX3JpZ2h0UHJpY2VBeGlzV2lkZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldCA9IG5ldyBQcmljZUF4aXNXaWRnZXQodGhpcywgY2hhcnQuX2ludGVybmFsX29wdGlvbnMoKSwgcmVuZGVyZXJPcHRpb25zUHJvdmlkZXIsICdyaWdodCcpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRBeGlzQ2VsbC5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fcHJldmVudFNjcm9sbChldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQuX2ludGVybmFsX2lzVG91Y2ggJiYgdGhpcy5fcHJpdmF0ZV9fbG9uZ1RhcCB8fCB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgIT09IG51bGw7XG4gICAgfVxuICAgIF9wcml2YXRlX19jb3JyZWN0WENvb3JkKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHgsIHRoaXMuX3ByaXZhdGVfX3NpemUud2lkdGggLSAxKSk7XG4gICAgfVxuICAgIF9wcml2YXRlX19jb3JyZWN0WUNvb3JkKHkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHksIHRoaXMuX3ByaXZhdGVfX3NpemUuaGVpZ2h0IC0gMSkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2V0Q3Jvc3NoYWlyUG9zaXRpb24oeCwgeSwgZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfc2V0QW5kU2F2ZUN1cnJlbnRQb3NpdGlvbih0aGlzLl9wcml2YXRlX19jb3JyZWN0WENvb3JkKHgpLCB0aGlzLl9wcml2YXRlX19jb3JyZWN0WUNvb3JkKHkpLCBldmVudCwgZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19zdGF0ZSkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fY2xlYXJDcm9zc2hhaXJQb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfY2xlYXJDdXJyZW50UG9zaXRpb24oKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX3RyeUV4aXRUcmFja2luZ01vZGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19leGl0VHJhY2tpbmdNb2RlT25OZXh0VHJ5KSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xlYXJDcm9zc2hhaXJQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19zdGFydFRyYWNraW5nTW9kZShzdGFydFRyYWNrUG9pbnQsIGNyb3NzSGFpclBvc2l0aW9uLCBldmVudCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFydFRyYWNrUG9pbnQgPSBzdGFydFRyYWNrUG9pbnQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2V4aXRUcmFja2luZ01vZGVPbk5leHRUcnkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2V0Q3Jvc3NoYWlyUG9zaXRpb24oY3Jvc3NIYWlyUG9zaXRpb24ueCwgY3Jvc3NIYWlyUG9zaXRpb24ueSwgZXZlbnQpO1xuICAgICAgICBjb25zdCBjcm9zc2hhaXIgPSB0aGlzLl9wcml2YXRlX19tb2RlbCgpLl9pbnRlcm5hbF9jcm9zc2hhaXJTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW5pdENyb3NzaGFpclBvc2l0aW9uID0geyB4OiBjcm9zc2hhaXIuX2ludGVybmFsX2FwcGxpZWRYKCksIHk6IGNyb3NzaGFpci5faW50ZXJuYWxfYXBwbGllZFkoKSB9O1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfbW9kZWwoKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2VuZFNjcm9sbChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX2lzU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9wcml2YXRlX19tb2RlbCgpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX2ludGVybmFsX3N0YXRlKCk7XG4gICAgICAgIG1vZGVsLl9pbnRlcm5hbF9lbmRTY3JvbGxQcmljZShzdGF0ZSwgc3RhdGUuX2ludGVybmFsX2RlZmF1bHRQcmljZVNjYWxlKCkpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zdGFydFNjcm9sbGluZ1BvcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2lzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgIG1vZGVsLl9pbnRlcm5hbF9lbmRTY3JvbGxUaW1lKCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zY3JvbGxYQW5pbWF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydEFuaW1hdGlvblRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IG1vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Njcm9sbFhBbmltYXRpb24uX2ludGVybmFsX3N0YXJ0KHRpbWVTY2FsZS5faW50ZXJuYWxfcmlnaHRPZmZzZXQoKSwgc3RhcnRBbmltYXRpb25UaW1lKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fc2Nyb2xsWEFuaW1hdGlvbi5faW50ZXJuYWxfZmluaXNoZWQoc3RhcnRBbmltYXRpb25UaW1lKSkge1xuICAgICAgICAgICAgICAgIG1vZGVsLl9pbnRlcm5hbF9zZXRUaW1lU2NhbGVBbmltYXRpb24odGhpcy5fcHJpdmF0ZV9fc2Nyb2xsWEFuaW1hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX29uTW91c2VFdmVudCgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3RhcnRUcmFja1BvaW50ID0gbnVsbDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX21vdXNlVG91Y2hEb3duRXZlbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9fc3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbCgpLl9pbnRlcm5hbF9zdG9wVGltZVNjYWxlQW5pbWF0aW9uKCk7XG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICAgLy8gSWYgYW55IGZvY3VzYWJsZSBlbGVtZW50IGV4Y2VwdCB0aGUgcGFnZSBpdHNlbGYgaXMgZm9jdXNlZCwgcmVtb3ZlIHRoZSBmb2N1c1xuICAgICAgICAgICAgZW5zdXJlTm90TnVsbChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5ibHVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBDbGVhciBzZWxlY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmljZVNjYWxlID0gdGhpcy5fcHJpdmF0ZV9fc3RhdGUuX2ludGVybmFsX2RlZmF1bHRQcmljZVNjYWxlKCk7XG4gICAgICAgIGlmIChwcmljZVNjYWxlLl9pbnRlcm5hbF9pc0VtcHR5KCkgfHwgdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKS5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgX3ByaXZhdGVfX3ByZXNzZWRNb3VzZVRvdWNoTW92ZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fcHJpdmF0ZV9fbW9kZWwoKTtcbiAgICAgICAgY29uc3QgdGltZVNjYWxlID0gbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpO1xuICAgICAgICBpZiAodGltZVNjYWxlLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydE9wdGlvbnMgPSB0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICBjb25zdCBzY3JvbGxPcHRpb25zID0gY2hhcnRPcHRpb25zLmhhbmRsZVNjcm9sbDtcbiAgICAgICAgY29uc3Qga2luZXRpY1Njcm9sbE9wdGlvbnMgPSBjaGFydE9wdGlvbnMua2luZXRpY1Njcm9sbDtcbiAgICAgICAgaWYgKCghc2Nyb2xsT3B0aW9ucy5wcmVzc2VkTW91c2VNb3ZlIHx8IGV2ZW50Ll9pbnRlcm5hbF9pc1RvdWNoKSAmJlxuICAgICAgICAgICAgKCFzY3JvbGxPcHRpb25zLmhvcnpUb3VjaERyYWcgJiYgIXNjcm9sbE9wdGlvbnMudmVydFRvdWNoRHJhZyB8fCAhZXZlbnQuX2ludGVybmFsX2lzVG91Y2gpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJpY2VTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX3N0YXRlLl9pbnRlcm5hbF9kZWZhdWx0UHJpY2VTY2FsZSgpO1xuICAgICAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3N0YXJ0U2Nyb2xsaW5nUG9zID09PSBudWxsICYmICF0aGlzLl9wcml2YXRlX19wcmV2ZW50U2Nyb2xsKGV2ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc3RhcnRTY3JvbGxpbmdQb3MgPSB7XG4gICAgICAgICAgICAgICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgICB5OiBldmVudC5jbGllbnRZLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF90aW1lc3RhbXA6IG5vdyxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfbG9jYWxYOiBldmVudC5sb2NhbFgsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX2xvY2FsWTogZXZlbnQubG9jYWxZLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc3RhcnRTY3JvbGxpbmdQb3MgIT09IG51bGwgJiZcbiAgICAgICAgICAgICF0aGlzLl9wcml2YXRlX19pc1Njcm9sbGluZyAmJlxuICAgICAgICAgICAgKHRoaXMuX3ByaXZhdGVfX3N0YXJ0U2Nyb2xsaW5nUG9zLnggIT09IGV2ZW50LmNsaWVudFggfHwgdGhpcy5fcHJpdmF0ZV9fc3RhcnRTY3JvbGxpbmdQb3MueSAhPT0gZXZlbnQuY2xpZW50WSkpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5faW50ZXJuYWxfaXNUb3VjaCAmJiBraW5ldGljU2Nyb2xsT3B0aW9ucy50b3VjaCB8fCAhZXZlbnQuX2ludGVybmFsX2lzVG91Y2ggJiYga2luZXRpY1Njcm9sbE9wdGlvbnMubW91c2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXJTcGFjaW5nID0gdGltZVNjYWxlLl9pbnRlcm5hbF9iYXJTcGFjaW5nKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2Nyb2xsWEFuaW1hdGlvbiA9IG5ldyBLaW5ldGljQW5pbWF0aW9uKDAuMiAvKiBLaW5ldGljU2Nyb2xsQ29uc3RhbnRzLk1pblNjcm9sbFNwZWVkICovIC8gYmFyU3BhY2luZywgNyAvKiBLaW5ldGljU2Nyb2xsQ29uc3RhbnRzLk1heFNjcm9sbFNwZWVkICovIC8gYmFyU3BhY2luZywgMC45OTcgLyogS2luZXRpY1Njcm9sbENvbnN0YW50cy5EdW1waW5nQ29lZmYgKi8sIDE1IC8qIEtpbmV0aWNTY3JvbGxDb25zdGFudHMuU2Nyb2xsTWluTW92ZSAqLyAvIGJhclNwYWNpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Njcm9sbFhBbmltYXRpb24uX2ludGVybmFsX2FkZFBvc2l0aW9uKHRpbWVTY2FsZS5faW50ZXJuYWxfcmlnaHRPZmZzZXQoKSwgdGhpcy5fcHJpdmF0ZV9fc3RhcnRTY3JvbGxpbmdQb3MuX2ludGVybmFsX3RpbWVzdGFtcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zY3JvbGxYQW5pbWF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcHJpY2VTY2FsZS5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgbW9kZWwuX2ludGVybmFsX3N0YXJ0U2Nyb2xsUHJpY2UodGhpcy5fcHJpdmF0ZV9fc3RhdGUsIHByaWNlU2NhbGUsIGV2ZW50LmxvY2FsWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtb2RlbC5faW50ZXJuYWxfc3RhcnRTY3JvbGxUaW1lKGV2ZW50LmxvY2FsWCk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pc1Njcm9sbGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2lzU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGFsbG93cyBzY3JvbGxpbmcgbm90IGRlZmF1bHQgcHJpY2Ugc2NhbGVzXG4gICAgICAgICAgICBpZiAoIXByaWNlU2NhbGUuX2ludGVybmFsX2lzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIG1vZGVsLl9pbnRlcm5hbF9zY3JvbGxQcmljZVRvKHRoaXMuX3ByaXZhdGVfX3N0YXRlLCBwcmljZVNjYWxlLCBldmVudC5sb2NhbFkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbW9kZWwuX2ludGVybmFsX3Njcm9sbFRpbWVUbyhldmVudC5sb2NhbFgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Njcm9sbFhBbmltYXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zY3JvbGxYQW5pbWF0aW9uLl9pbnRlcm5hbF9hZGRQb3NpdGlvbih0aW1lU2NhbGUuX2ludGVybmFsX3JpZ2h0T2Zmc2V0KCksIG5vdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFByaWNlQXhpc1N0dWIge1xuICAgIGNvbnN0cnVjdG9yKHNpZGUsIG9wdGlvbnMsIHBhcmFtcywgYm9yZGVyVmlzaWJsZSwgYm90dG9tQ29sb3IpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zaXplID0gc2l6ZSQxKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyID0gKCkgPT4gdGhpcy5faW50ZXJuYWxfcGFpbnQoMyAvKiBJbnZhbGlkYXRpb25MZXZlbC5GdWxsICovKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faXNMZWZ0ID0gc2lkZSA9PT0gJ2xlZnQnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlck9wdGlvbnNQcm92aWRlciA9IHBhcmFtcy5faW50ZXJuYWxfcmVuZGVyZXJPcHRpb25zUHJvdmlkZXI7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ib3JkZXJWaXNpYmxlID0gYm9yZGVyVmlzaWJsZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYm90dG9tQ29sb3IgPSBib3R0b21Db2xvcjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jZWxsLnN0eWxlLndpZHRoID0gJzI1cHgnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jZWxsLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nID0gY3JlYXRlQm91bmRDYW52YXModGhpcy5fcHJpdmF0ZV9fY2VsbCwgc2l6ZSQxKHsgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2IH0pKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5zdWJzY3JpYmVTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZCh0aGlzLl9wcml2YXRlX19jYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy51bnN1YnNjcmliZVN1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkKHRoaXMuX3ByaXZhdGVfX2NhbnZhc1N1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkSGFuZGxlcik7XG4gICAgICAgIHJlbGVhc2VDYW52YXModGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5kaXNwb3NlKCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9nZXRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2VsbDtcbiAgICB9XG4gICAgX2ludGVybmFsX2dldFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19zaXplO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0U2l6ZShuZXdTaXplKSB7XG4gICAgICAgIGlmICghZXF1YWxTaXplcyh0aGlzLl9wcml2YXRlX19zaXplLCBuZXdTaXplKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLnJlc2l6ZUNhbnZhc0VsZW1lbnQobmV3U2l6ZSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jZWxsLnN0eWxlLndpZHRoID0gYCR7bmV3U2l6ZS53aWR0aH1weGA7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jZWxsLnN0eWxlLmhlaWdodCA9IGAke25ld1NpemUuaGVpZ2h0fXB4YDtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFpbnQodHlwZSkge1xuICAgICAgICBpZiAodHlwZSA8IDMgLyogSW52YWxpZGF0aW9uTGV2ZWwuRnVsbCAqLyAmJiAhdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fc2l6ZS53aWR0aCA9PT0gMCB8fCB0aGlzLl9wcml2YXRlX19zaXplLmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuYXBwbHlTdWdnZXN0ZWRCaXRtYXBTaXplKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRyeUNyZWF0ZUNhbnZhc1JlbmRlcmluZ1RhcmdldDJEKHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcpO1xuICAgICAgICBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0YXJnZXQudXNlQml0bWFwQ29vcmRpbmF0ZVNwYWNlKChzY29wZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdCYWNrZ3JvdW5kKHNjb3BlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3Qm9yZGVyKHNjb3BlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9nZXRCaXRtYXBTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5iaXRtYXBTaXplO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZHJhd0JpdG1hcChjdHgsIHgsIHkpIHtcbiAgICAgICAgY29uc3QgYml0bWFwU2l6ZSA9IHRoaXMuX2ludGVybmFsX2dldEJpdG1hcFNpemUoKTtcbiAgICAgICAgaWYgKGJpdG1hcFNpemUud2lkdGggPiAwICYmIGJpdG1hcFNpemUuaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLmNhbnZhc0VsZW1lbnQsIHgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19kcmF3Qm9yZGVyKHsgY29udGV4dDogY3R4LCBiaXRtYXBTaXplLCBob3Jpem9udGFsUGl4ZWxSYXRpbywgdmVydGljYWxQaXhlbFJhdGlvIH0pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19ib3JkZXJWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy50aW1lU2NhbGUuYm9yZGVyQ29sb3I7XG4gICAgICAgIGNvbnN0IGhvcnpCb3JkZXJTaXplID0gTWF0aC5mbG9vcih0aGlzLl9wcml2YXRlX19yZW5kZXJlck9wdGlvbnNQcm92aWRlci5faW50ZXJuYWxfb3B0aW9ucygpLl9pbnRlcm5hbF9ib3JkZXJTaXplICogaG9yaXpvbnRhbFBpeGVsUmF0aW8pO1xuICAgICAgICBjb25zdCB2ZXJ0Qm9yZGVyU2l6ZSA9IE1hdGguZmxvb3IodGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zUHJvdmlkZXIuX2ludGVybmFsX29wdGlvbnMoKS5faW50ZXJuYWxfYm9yZGVyU2l6ZSAqIHZlcnRpY2FsUGl4ZWxSYXRpbyk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSAodGhpcy5fcHJpdmF0ZV9faXNMZWZ0KSA/IGJpdG1hcFNpemUud2lkdGggLSBob3J6Qm9yZGVyU2l6ZSA6IDA7XG4gICAgICAgIGN0eC5maWxsUmVjdChsZWZ0LCAwLCBob3J6Qm9yZGVyU2l6ZSwgdmVydEJvcmRlclNpemUpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZHJhd0JhY2tncm91bmQoeyBjb250ZXh0OiBjdHgsIGJpdG1hcFNpemUgfSkge1xuICAgICAgICBjbGVhclJlY3QoY3R4LCAwLCAwLCBiaXRtYXBTaXplLndpZHRoLCBiaXRtYXBTaXplLmhlaWdodCwgdGhpcy5fcHJpdmF0ZV9fYm90dG9tQ29sb3IoKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidWlsZFRpbWVBeGlzVmlld3NHZXR0ZXIoek9yZGVyKSB7XG4gICAgcmV0dXJuIChzb3VyY2UpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IHNvdXJjZS5faW50ZXJuYWxfdGltZVBhbmVWaWV3cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoc291cmNlLCB6T3JkZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXTsgfTtcbn1cbmNvbnN0IHNvdXJjZVBhbmVWaWV3cyA9IGJ1aWxkVGltZUF4aXNWaWV3c0dldHRlcignbm9ybWFsJyk7XG5jb25zdCBzb3VyY2VUb3BQYW5lVmlld3MgPSBidWlsZFRpbWVBeGlzVmlld3NHZXR0ZXIoJ3RvcCcpO1xuY29uc3Qgc291cmNlQm90dG9tUGFuZVZpZXdzID0gYnVpbGRUaW1lQXhpc1ZpZXdzR2V0dGVyKCdib3R0b20nKTtcbmNsYXNzIFRpbWVBeGlzV2lkZ2V0IHtcbiAgICBjb25zdHJ1Y3RvcihjaGFydFdpZGdldCwgaG9yelNjYWxlQmVoYXZpb3IpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFN0dWIgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFN0dWIgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZW5kZXJlck9wdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZSA9IHNpemUkMSh7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NpemVDaGFuZ2VkID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3dpZHRoQ2FjaGUgPSBuZXcgVGV4dFdpZHRoQ2FjaGUoNSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9wcml2YXRlX19pc1NldHRpbmdTaXplKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX2xpZ2h0VXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc1N1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fcHJpdmF0ZV9faXNTZXR0aW5nU2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9saWdodFVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydCA9IGNoYXJ0V2lkZ2V0O1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvciA9IGhvcnpTY2FsZUJlaGF2aW9yO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zID0gY2hhcnRXaWRnZXQuX2ludGVybmFsX29wdGlvbnMoKS5sYXlvdXQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0U3R1YkNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0U3R1YkNlbGwuc3R5bGUucGFkZGluZyA9ICcwJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRTdHViQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3JpZ2h0U3R1YkNlbGwuc3R5bGUucGFkZGluZyA9ICcwJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NlbGwuc3R5bGUuaGVpZ2h0ID0gJzI1cHgnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jZWxsLnN0eWxlLnBhZGRpbmcgPSAnMCc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2R2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2R2LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kdi5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2R2LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHYuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbC5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX19kdik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcgPSBjcmVhdGVCb3VuZENhbnZhcyh0aGlzLl9wcml2YXRlX19kdiwgc2l6ZSQxKHsgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2IH0pKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5zdWJzY3JpYmVTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZCh0aGlzLl9wcml2YXRlX19jYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIpO1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLmNhbnZhc0VsZW1lbnQ7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSAnMSc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICBjYW52YXMuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190b3BDYW52YXNCaW5kaW5nID0gY3JlYXRlQm91bmRDYW52YXModGhpcy5fcHJpdmF0ZV9fZHYsIHNpemUkMSh7IHdpZHRoOiAxNiwgaGVpZ2h0OiAxNiB9KSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc0JpbmRpbmcuc3Vic2NyaWJlU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWQodGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyKTtcbiAgICAgICAgY29uc3QgdG9wQ2FudmFzID0gdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50O1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUuekluZGV4ID0gJzInO1xuICAgICAgICB0b3BDYW52YXMuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgdG9wQ2FudmFzLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX19sZWZ0U3R1YkNlbGwpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3ByaXZhdGVfX2NlbGwpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3ByaXZhdGVfX3JpZ2h0U3R1YkNlbGwpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yZWNyZWF0ZVN0dWJzKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9wcmljZVNjYWxlc09wdGlvbnNDaGFuZ2VkKCkuX2ludGVybmFsX3N1YnNjcmliZSh0aGlzLl9wcml2YXRlX19yZWNyZWF0ZVN0dWJzLmJpbmQodGhpcyksIHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZUV2ZW50SGFuZGxlciA9IG5ldyBNb3VzZUV2ZW50SGFuZGxlcih0aGlzLl9wcml2YXRlX190b3BDYW52YXNCaW5kaW5nLmNhbnZhc0VsZW1lbnQsIHRoaXMsIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF90cmVhdFZlcnRUb3VjaERyYWdBc1BhZ2VTY3JvbGw6ICgpID0+IHRydWUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfdHJlYXRIb3J6VG91Y2hEcmFnQXNQYWdlU2Nyb2xsOiAoKSA9PiAhdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX29wdGlvbnMoKS5oYW5kbGVTY3JvbGwuaG9yelRvdWNoRHJhZyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb3VzZUV2ZW50SGFuZGxlci5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fbGVmdFN0dWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRTdHViLl9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3JpZ2h0U3R1YiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRTdHViLl9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy51bnN1YnNjcmliZVN1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkKHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc1N1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkSGFuZGxlcik7XG4gICAgICAgIHJlbGVhc2VDYW52YXModGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5jYW52YXNFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdG9wQ2FudmFzQmluZGluZy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcudW5zdWJzY3JpYmVTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZCh0aGlzLl9wcml2YXRlX19jYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIpO1xuICAgICAgICByZWxlYXNlQ2FudmFzKHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuY2FudmFzRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuZGlzcG9zZSgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9sZWZ0U3R1YigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2xlZnRTdHViO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcmlnaHRTdHViKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmlnaHRTdHViO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VEb3duRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX21vdXNlRG93bikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX21vZGVsKCk7XG4gICAgICAgIGlmIChtb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX2lzRW1wdHkoKSB8fCAhdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX29wdGlvbnMoKS5oYW5kbGVTY2FsZS5heGlzUHJlc3NlZE1vdXNlTW92ZS50aW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbW9kZWwuX2ludGVybmFsX3N0YXJ0U2NhbGVUaW1lKGV2ZW50LmxvY2FsWCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF90b3VjaFN0YXJ0RXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW91c2VEb3duRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VEb3duT3V0c2lkZUV2ZW50KCkge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICBpZiAoIW1vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfaXNFbXB0eSgpICYmIHRoaXMuX3ByaXZhdGVfX21vdXNlRG93bikge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX29wdGlvbnMoKS5oYW5kbGVTY2FsZS5heGlzUHJlc3NlZE1vdXNlTW92ZS50aW1lKSB7XG4gICAgICAgICAgICAgICAgbW9kZWwuX2ludGVybmFsX2VuZFNjYWxlVGltZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9wcmVzc2VkTW91c2VNb3ZlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfbW9kZWwoKTtcbiAgICAgICAgaWYgKG1vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfaXNFbXB0eSgpIHx8ICF0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfb3B0aW9ucygpLmhhbmRsZVNjYWxlLmF4aXNQcmVzc2VkTW91c2VNb3ZlLnRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbC5faW50ZXJuYWxfc2NhbGVUaW1lVG8oZXZlbnQubG9jYWxYKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3RvdWNoTW92ZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX3ByZXNzZWRNb3VzZU1vdmVFdmVudChldmVudCk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9tb3VzZVVwRXZlbnQoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICBpZiAobW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpLl9pbnRlcm5hbF9pc0VtcHR5KCkgJiYgIXRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9vcHRpb25zKCkuaGFuZGxlU2NhbGUuYXhpc1ByZXNzZWRNb3VzZU1vdmUudGltZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsLl9pbnRlcm5hbF9lbmRTY2FsZVRpbWUoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3RvdWNoRW5kRXZlbnQoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX21vdXNlVXBFdmVudCgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VEb3VibGVDbGlja0V2ZW50KCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX29wdGlvbnMoKS5oYW5kbGVTY2FsZS5heGlzRG91YmxlQ2xpY2tSZXNldC50aW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfcmVzZXRUaW1lU2NhbGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfZG91YmxlVGFwRXZlbnQoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX21vdXNlRG91YmxlQ2xpY2tFdmVudCgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VFbnRlckV2ZW50KCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX29wdGlvbnMoKS5oYW5kbGVTY2FsZS5heGlzUHJlc3NlZE1vdXNlTW92ZS50aW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRDdXJzb3IoMSAvKiBDdXJzb3JUeXBlLkV3UmVzaXplICovKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfbW91c2VMZWF2ZUV2ZW50KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRDdXJzb3IoMCAvKiBDdXJzb3JUeXBlLkRlZmF1bHQgKi8pO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZ2V0U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3NpemU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zaXplQ2hhbmdlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3NpemVDaGFuZ2VkO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfc2V0U2l6ZXModGltZUF4aXNTaXplLCBsZWZ0U3R1YldpZHRoLCByaWdodFN0dWJXaWR0aCkge1xuICAgICAgICBpZiAoIWVxdWFsU2l6ZXModGhpcy5fcHJpdmF0ZV9fc2l6ZSwgdGltZUF4aXNTaXplKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZSA9IHRpbWVBeGlzU2l6ZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5yZXNpemVDYW52YXNFbGVtZW50KHRpbWVBeGlzU2l6ZSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX190b3BDYW52YXNCaW5kaW5nLnJlc2l6ZUNhbnZhc0VsZW1lbnQodGltZUF4aXNTaXplKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2lzU2V0dGluZ1NpemUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NlbGwuc3R5bGUud2lkdGggPSBgJHt0aW1lQXhpc1NpemUud2lkdGh9cHhgO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbC5zdHlsZS5oZWlnaHQgPSBgJHt0aW1lQXhpc1NpemUuaGVpZ2h0fXB4YDtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3NpemVDaGFuZ2VkLl9pbnRlcm5hbF9maXJlKHRpbWVBeGlzU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2xlZnRTdHViICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0U3R1Yi5faW50ZXJuYWxfc2V0U2l6ZShzaXplJDEoeyB3aWR0aDogbGVmdFN0dWJXaWR0aCwgaGVpZ2h0OiB0aW1lQXhpc1NpemUuaGVpZ2h0IH0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fcmlnaHRTdHViICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFN0dWIuX2ludGVybmFsX3NldFNpemUoc2l6ZSQxKHsgd2lkdGg6IHJpZ2h0U3R1YldpZHRoLCBoZWlnaHQ6IHRpbWVBeGlzU2l6ZS5oZWlnaHQgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnRlcm5hbF9vcHRpbWFsSGVpZ2h0KCkge1xuICAgICAgICBjb25zdCByZW5kZXJlck9wdGlvbnMgPSB0aGlzLl9wcml2YXRlX19nZXRSZW5kZXJlck9wdGlvbnMoKTtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChcbiAgICAgICAgLy8gcmVuZGVyZXJPcHRpb25zLm9mZnNldFNpemUgK1xuICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2JvcmRlclNpemUgK1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF90aWNrTGVuZ3RoICtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfZm9udFNpemUgK1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nVG9wICtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ0JvdHRvbSArXG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2xhYmVsQm90dG9tT2Zmc2V0KTtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZSgpIHtcbiAgICAgICAgLy8gdGhpcyBjYWxsIGhhcyBzaWRlLWVmZmVjdCAtIGl0IHJlZ2VuZXJhdGVzIG1hcmtzIG9uIHRoZSB0aW1lIHNjYWxlXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF90aW1lU2NhbGUoKS5faW50ZXJuYWxfbWFya3MoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX2dldEJpdG1hcFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jYW52YXNCaW5kaW5nLmJpdG1hcFNpemU7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kcmF3Qml0bWFwKGN0eCwgeCwgeSkge1xuICAgICAgICBjb25zdCBiaXRtYXBTaXplID0gdGhpcy5faW50ZXJuYWxfZ2V0Qml0bWFwU2l6ZSgpO1xuICAgICAgICBpZiAoYml0bWFwU2l6ZS53aWR0aCA+IDAgJiYgYml0bWFwU2l6ZS5oZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcuY2FudmFzRWxlbWVudCwgeCwgeSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX3BhaW50KHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IDAgLyogSW52YWxpZGF0aW9uTGV2ZWwuTm9uZSAqLykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlICE9PSAxIC8qIEludmFsaWRhdGlvbkxldmVsLkN1cnNvciAqLykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2FudmFzQmluZGluZy5hcHBseVN1Z2dlc3RlZEJpdG1hcFNpemUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRyeUNyZWF0ZUNhbnZhc1JlbmRlcmluZ1RhcmdldDJEKHRoaXMuX3ByaXZhdGVfX2NhbnZhc0JpbmRpbmcpO1xuICAgICAgICAgICAgaWYgKHRhcmdldCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC51c2VCaXRtYXBDb29yZGluYXRlU3BhY2UoKHNjb3BlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdCYWNrZ3JvdW5kKHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0JvcmRlcihzY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdBZGRpdGlvbmFsU291cmNlcyh0YXJnZXQsIHNvdXJjZUJvdHRvbVBhbmVWaWV3cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd1RpY2tNYXJrcyh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdBZGRpdGlvbmFsU291cmNlcyh0YXJnZXQsIHNvdXJjZVBhbmVWaWV3cyk7XG4gICAgICAgICAgICAgICAgLy8gYXRtIHdlIGRvbid0IGhhdmUgc291cmNlcyB0byBiZSBkcmF3biBvbiB0aW1lIGF4aXMgZXhjZXB0IGNyb3NzaGFpciB3aGljaCBpcyByZW5kZXJlZCBvbiB0b3AgbGV2ZWwgY2FudmFzXG4gICAgICAgICAgICAgICAgLy8gc28gbGV0J3MgZG9uJ3QgY2FsbCB0aGlzIGNvZGUgYXQgYWxsIGZvciBub3dcbiAgICAgICAgICAgICAgICAvLyB0aGlzLl9kcmF3TGFiZWxzKHRoaXMuX2NoYXJ0Lm1vZGVsKCkuZGF0YVNvdXJjZXMoKSwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19sZWZ0U3R1YiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRTdHViLl9pbnRlcm5hbF9wYWludCh0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19yaWdodFN0dWIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFN0dWIuX2ludGVybmFsX3BhaW50KHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc0JpbmRpbmcuYXBwbHlTdWdnZXN0ZWRCaXRtYXBTaXplKCk7XG4gICAgICAgIGNvbnN0IHRvcFRhcmdldCA9IHRyeUNyZWF0ZUNhbnZhc1JlbmRlcmluZ1RhcmdldDJEKHRoaXMuX3ByaXZhdGVfX3RvcENhbnZhc0JpbmRpbmcpO1xuICAgICAgICBpZiAodG9wVGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0b3BUYXJnZXQudXNlQml0bWFwQ29vcmRpbmF0ZVNwYWNlKCh7IGNvbnRleHQ6IGN0eCwgYml0bWFwU2l6ZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBiaXRtYXBTaXplLndpZHRoLCBiaXRtYXBTaXplLmhlaWdodCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdMYWJlbHMoWy4uLnRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9zZXJpZXNlcygpLCB0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfY3Jvc3NoYWlyU291cmNlKCldLCB0b3BUYXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0FkZGl0aW9uYWxTb3VyY2VzKHRvcFRhcmdldCwgc291cmNlVG9wUGFuZVZpZXdzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fZHJhd0FkZGl0aW9uYWxTb3VyY2VzKHRhcmdldCwgYXhpc1ZpZXdzR2V0dGVyKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZXMgPSB0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfc2VyaWVzZXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuICAgICAgICAgICAgZHJhd1NvdXJjZVBhbmVWaWV3cyhheGlzVmlld3NHZXR0ZXIsIChyZW5kZXJlcikgPT4gZHJhd0JhY2tncm91bmQocmVuZGVyZXIsIHRhcmdldCwgZmFsc2UsIHVuZGVmaW5lZCksIHNvdXJjZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICAgICAgICBkcmF3U291cmNlUGFuZVZpZXdzKGF4aXNWaWV3c0dldHRlciwgKHJlbmRlcmVyKSA9PiBkcmF3Rm9yZWdyb3VuZChyZW5kZXJlciwgdGFyZ2V0LCBmYWxzZSwgdW5kZWZpbmVkKSwgc291cmNlLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19kcmF3QmFja2dyb3VuZCh7IGNvbnRleHQ6IGN0eCwgYml0bWFwU2l6ZSB9KSB7XG4gICAgICAgIGNsZWFyUmVjdChjdHgsIDAsIDAsIGJpdG1hcFNpemUud2lkdGgsIGJpdG1hcFNpemUuaGVpZ2h0LCB0aGlzLl9wcml2YXRlX19jaGFydC5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfYmFja2dyb3VuZEJvdHRvbUNvbG9yKCkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fZHJhd0JvcmRlcih7IGNvbnRleHQ6IGN0eCwgYml0bWFwU2l6ZSwgdmVydGljYWxQaXhlbFJhdGlvIH0pIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9vcHRpb25zKCkudGltZVNjYWxlLmJvcmRlclZpc2libGUpIHtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLl9wcml2YXRlX19saW5lQ29sb3IoKTtcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlclNpemUgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHRoaXMuX3ByaXZhdGVfX2dldFJlbmRlcmVyT3B0aW9ucygpLl9pbnRlcm5hbF9ib3JkZXJTaXplICogdmVydGljYWxQaXhlbFJhdGlvKSk7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgYml0bWFwU2l6ZS53aWR0aCwgYm9yZGVyU2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdUaWNrTWFya3ModGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF90aW1lU2NhbGUoKTtcbiAgICAgICAgY29uc3QgdGlja01hcmtzID0gdGltZVNjYWxlLl9pbnRlcm5hbF9tYXJrcygpO1xuICAgICAgICBpZiAoIXRpY2tNYXJrcyB8fCB0aWNrTWFya3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF4V2VpZ2h0ID0gdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IubWF4VGlja01hcmtXZWlnaHQodGlja01hcmtzKTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXJPcHRpb25zID0gdGhpcy5fcHJpdmF0ZV9fZ2V0UmVuZGVyZXJPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aW1lU2NhbGUuX2ludGVybmFsX29wdGlvbnMoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyVmlzaWJsZSAmJiBvcHRpb25zLnRpY2tzVmlzaWJsZSkge1xuICAgICAgICAgICAgdGFyZ2V0LnVzZUJpdG1hcENvb3JkaW5hdGVTcGFjZSgoeyBjb250ZXh0OiBjdHgsIGhvcml6b250YWxQaXhlbFJhdGlvLCB2ZXJ0aWNhbFBpeGVsUmF0aW8gfSkgPT4ge1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuX3ByaXZhdGVfX2xpbmVDb2xvcigpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLl9wcml2YXRlX19saW5lQ29sb3IoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrV2lkdGggPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKGhvcml6b250YWxQaXhlbFJhdGlvKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlja09mZnNldCA9IE1hdGguZmxvb3IoaG9yaXpvbnRhbFBpeGVsUmF0aW8gKiAwLjUpO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrTGVuID0gTWF0aC5yb3VuZChyZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3RpY2tMZW5ndGggKiB2ZXJ0aWNhbFBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gdGlja01hcmtzLmxlbmd0aDsgaW5kZXgtLTspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IE1hdGgucm91bmQodGlja01hcmtzW2luZGV4XS5jb29yZCAqIGhvcml6b250YWxQaXhlbFJhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlY3QoeCAtIHRpY2tPZmZzZXQsIDAsIHRpY2tXaWR0aCwgdGlja0xlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQudXNlTWVkaWFDb29yZGluYXRlU3BhY2UoKHsgY29udGV4dDogY3R4IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHlUZXh0ID0gKHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfYm9yZGVyU2l6ZSArXG4gICAgICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF90aWNrTGVuZ3RoICtcbiAgICAgICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3BhZGRpbmdUb3AgK1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfZm9udFNpemUgLyAyKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLl9wcml2YXRlX190ZXh0Q29sb3IoKTtcbiAgICAgICAgICAgIC8vIGRyYXcgYmFzZSBtYXJrc1xuICAgICAgICAgICAgY3R4LmZvbnQgPSB0aGlzLl9wcml2YXRlX19iYXNlRm9udCgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0aWNrTWFyayBvZiB0aWNrTWFya3MpIHtcbiAgICAgICAgICAgICAgICBpZiAodGlja01hcmsud2VpZ2h0IDwgbWF4V2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGUgPSB0aWNrTWFyay5uZWVkQWxpZ25Db29yZGluYXRlID8gdGhpcy5fcHJpdmF0ZV9fYWxpZ25UaWNrTWFya0xhYmVsQ29vcmRpbmF0ZShjdHgsIHRpY2tNYXJrLmNvb3JkLCB0aWNrTWFyay5sYWJlbCkgOiB0aWNrTWFyay5jb29yZDtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRpY2tNYXJrLmxhYmVsLCBjb29yZGluYXRlLCB5VGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9vcHRpb25zKCkudGltZVNjYWxlLmFsbG93Qm9sZExhYmVscykge1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gdGhpcy5fcHJpdmF0ZV9fYmFzZUJvbGRGb250KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRpY2tNYXJrIG9mIHRpY2tNYXJrcykge1xuICAgICAgICAgICAgICAgIGlmICh0aWNrTWFyay53ZWlnaHQgPj0gbWF4V2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGUgPSB0aWNrTWFyay5uZWVkQWxpZ25Db29yZGluYXRlID8gdGhpcy5fcHJpdmF0ZV9fYWxpZ25UaWNrTWFya0xhYmVsQ29vcmRpbmF0ZShjdHgsIHRpY2tNYXJrLmNvb3JkLCB0aWNrTWFyay5sYWJlbCkgOiB0aWNrTWFyay5jb29yZDtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRpY2tNYXJrLmxhYmVsLCBjb29yZGluYXRlLCB5VGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2FsaWduVGlja01hcmtMYWJlbENvb3JkaW5hdGUoY3R4LCBjb29yZGluYXRlLCBsYWJlbFRleHQpIHtcbiAgICAgICAgY29uc3QgbGFiZWxXaWR0aCA9IHRoaXMuX3ByaXZhdGVfX3dpZHRoQ2FjaGUuX2ludGVybmFsX21lYXN1cmVUZXh0KGN0eCwgbGFiZWxUZXh0KTtcbiAgICAgICAgY29uc3QgbGFiZWxXaWR0aEhhbGYgPSBsYWJlbFdpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgbGVmdFRleHRDb29yZGluYXRlID0gTWF0aC5mbG9vcihjb29yZGluYXRlIC0gbGFiZWxXaWR0aEhhbGYpICsgMC41O1xuICAgICAgICBpZiAobGVmdFRleHRDb29yZGluYXRlIDwgMCkge1xuICAgICAgICAgICAgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGUgKyBNYXRoLmFicygwIC0gbGVmdFRleHRDb29yZGluYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZWZ0VGV4dENvb3JkaW5hdGUgKyBsYWJlbFdpZHRoID4gdGhpcy5fcHJpdmF0ZV9fc2l6ZS53aWR0aCkge1xuICAgICAgICAgICAgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGUgLSBNYXRoLmFicyh0aGlzLl9wcml2YXRlX19zaXplLndpZHRoIC0gKGxlZnRUZXh0Q29vcmRpbmF0ZSArIGxhYmVsV2lkdGgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2RyYXdMYWJlbHMoc291cmNlcywgdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyT3B0aW9ucyA9IHRoaXMuX3ByaXZhdGVfX2dldFJlbmRlcmVyT3B0aW9ucygpO1xuICAgICAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZpZXcgb2Ygc291cmNlLl9pbnRlcm5hbF90aW1lQXhpc1ZpZXdzKCkpIHtcbiAgICAgICAgICAgICAgICB2aWV3Ll9pbnRlcm5hbF9yZW5kZXJlcigpLl9pbnRlcm5hbF9kcmF3KHRhcmdldCwgcmVuZGVyZXJPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fbGluZUNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX29wdGlvbnMoKS50aW1lU2NhbGUuYm9yZGVyQ29sb3I7XG4gICAgfVxuICAgIF9wcml2YXRlX190ZXh0Q29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zLnRleHRDb2xvcjtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2ZvbnRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5mb250U2l6ZTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2Jhc2VGb250KCkge1xuICAgICAgICByZXR1cm4gbWFrZUZvbnQodGhpcy5fcHJpdmF0ZV9fZm9udFNpemUoKSwgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5mb250RmFtaWx5KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2Jhc2VCb2xkRm9udCgpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VGb250KHRoaXMuX3ByaXZhdGVfX2ZvbnRTaXplKCksIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuZm9udEZhbWlseSwgJ2JvbGQnKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2dldFJlbmRlcmVyT3B0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3JlbmRlcmVyT3B0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9ib3JkZXJTaXplOiAxIC8qIENvbnN0YW50cy5Cb3JkZXJTaXplICovLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9iYXNlbGluZU9mZnNldDogTmFOLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9wYWRkaW5nVG9wOiBOYU4sXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3BhZGRpbmdCb3R0b206IE5hTixcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfcGFkZGluZ0hvcml6b250YWw6IE5hTixcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfdGlja0xlbmd0aDogNSAvKiBDb25zdGFudHMuVGlja0xlbmd0aCAqLyxcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfZm9udFNpemU6IE5hTixcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfZm9udDogJycsXG4gICAgICAgICAgICAgICAgX2ludGVybmFsX3dpZHRoQ2FjaGU6IG5ldyBUZXh0V2lkdGhDYWNoZSgpLFxuICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9sYWJlbEJvdHRvbU9mZnNldDogMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVuZGVyZXJPcHRpb25zID0gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zO1xuICAgICAgICBjb25zdCBuZXdGb250ID0gdGhpcy5fcHJpdmF0ZV9fYmFzZUZvbnQoKTtcbiAgICAgICAgaWYgKHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfZm9udCAhPT0gbmV3Rm9udCkge1xuICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSB0aGlzLl9wcml2YXRlX19mb250U2l6ZSgpO1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250U2l6ZSA9IGZvbnRTaXplO1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9mb250ID0gbmV3Rm9udDtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfcGFkZGluZ1RvcCA9IDMgKiBmb250U2l6ZSAvIDEyO1xuICAgICAgICAgICAgcmVuZGVyZXJPcHRpb25zLl9pbnRlcm5hbF9wYWRkaW5nQm90dG9tID0gMyAqIGZvbnRTaXplIC8gMTI7XG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX3BhZGRpbmdIb3Jpem9udGFsID0gOSAqIGZvbnRTaXplIC8gMTI7XG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnMuX2ludGVybmFsX2Jhc2VsaW5lT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfbGFiZWxCb3R0b21PZmZzZXQgPSA0ICogZm9udFNpemUgLyAxMjtcbiAgICAgICAgICAgIHJlbmRlcmVyT3B0aW9ucy5faW50ZXJuYWxfd2lkdGhDYWNoZS5faW50ZXJuYWxfcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcmVuZGVyZXJPcHRpb25zO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2V0Q3Vyc29yKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2VsbC5zdHlsZS5jdXJzb3IgPSB0eXBlID09PSAxIC8qIEN1cnNvclR5cGUuRXdSZXNpemUgKi8gPyAnZXctcmVzaXplJyA6ICdkZWZhdWx0JztcbiAgICB9XG4gICAgX3ByaXZhdGVfX3JlY3JlYXRlU3R1YnMoKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fcHJpdmF0ZV9fY2hhcnQuX2ludGVybmFsX21vZGVsKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtb2RlbC5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgICAgICBpZiAoIW9wdGlvbnMubGVmdFByaWNlU2NhbGUudmlzaWJsZSAmJiB0aGlzLl9wcml2YXRlX19sZWZ0U3R1YiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFN0dWJDZWxsLnJlbW92ZUNoaWxkKHRoaXMuX3ByaXZhdGVfX2xlZnRTdHViLl9pbnRlcm5hbF9nZXRFbGVtZW50KCkpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFN0dWIuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2xlZnRTdHViID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMucmlnaHRQcmljZVNjYWxlLnZpc2libGUgJiYgdGhpcy5fcHJpdmF0ZV9fcmlnaHRTdHViICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFN0dWJDZWxsLnJlbW92ZUNoaWxkKHRoaXMuX3ByaXZhdGVfX3JpZ2h0U3R1Yi5faW50ZXJuYWxfZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3JpZ2h0U3R1Yi5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRTdHViID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW5kZXJlck9wdGlvbnNQcm92aWRlciA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9yZW5kZXJlck9wdGlvbnNQcm92aWRlcigpO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBfaW50ZXJuYWxfcmVuZGVyZXJPcHRpb25zUHJvdmlkZXI6IHJlbmRlcmVyT3B0aW9uc1Byb3ZpZGVyLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBib3JkZXJWaXNpYmxlR2V0dGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubGVmdFByaWNlU2NhbGUuYm9yZGVyVmlzaWJsZSAmJiBtb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCkuX2ludGVybmFsX29wdGlvbnMoKS5ib3JkZXJWaXNpYmxlO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBib3R0b21Db2xvckdldHRlciA9ICgpID0+IG1vZGVsLl9pbnRlcm5hbF9iYWNrZ3JvdW5kQm90dG9tQ29sb3IoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMubGVmdFByaWNlU2NhbGUudmlzaWJsZSAmJiB0aGlzLl9wcml2YXRlX19sZWZ0U3R1YiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFN0dWIgPSBuZXcgUHJpY2VBeGlzU3R1YignbGVmdCcsIG9wdGlvbnMsIHBhcmFtcywgYm9yZGVyVmlzaWJsZUdldHRlciwgYm90dG9tQ29sb3JHZXR0ZXIpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFN0dWJDZWxsLmFwcGVuZENoaWxkKHRoaXMuX3ByaXZhdGVfX2xlZnRTdHViLl9pbnRlcm5hbF9nZXRFbGVtZW50KCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJpZ2h0UHJpY2VTY2FsZS52aXNpYmxlICYmIHRoaXMuX3ByaXZhdGVfX3JpZ2h0U3R1YiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcmlnaHRTdHViID0gbmV3IFByaWNlQXhpc1N0dWIoJ3JpZ2h0Jywgb3B0aW9ucywgcGFyYW1zLCBib3JkZXJWaXNpYmxlR2V0dGVyLCBib3R0b21Db2xvckdldHRlcik7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFN0dWJDZWxsLmFwcGVuZENoaWxkKHRoaXMuX3ByaXZhdGVfX3JpZ2h0U3R1Yi5faW50ZXJuYWxfZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3Qgd2luZG93c0Nocm9tZSA9IGlzQ2hyb21pdW1CYXNlZCgpICYmIGlzV2luZG93cygpO1xuY2xhc3MgQ2hhcnRXaWRnZXQge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucywgaG9yelNjYWxlQmVoYXZpb3IpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd1JhZklkID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fd2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZHRoID0gMDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZU1hc2sgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3UGxhbm5lZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jbGlja2VkID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RibENsaWNrZWQgPSBuZXcgRGVsZWdhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyTW92ZWQgPSBuZXcgRGVsZWdhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jdXJzb3JTdHlsZU92ZXJyaWRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IgPSBob3J6U2NhbGVCZWhhdmlvcjtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3R2LWxpZ2h0d2VpZ2h0LWNoYXJ0cycpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQuc3R5bGUuZGlyZWN0aW9uID0gJ2x0cic7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBkaXNhYmxlU2VsZWN0aW9uKHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YWJsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YWJsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdjZWxsc3BhY2luZycsICcwJyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fcHJpdmF0ZV9fdGFibGVFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb25XaGVlbEJvdW5kID0gdGhpcy5fcHJpdmF0ZV9fb25Nb3VzZXdoZWVsLmJpbmQodGhpcyk7XG4gICAgICAgIGlmIChzaG91bGRTdWJzY3JpYmVNb3VzZVdoZWVsKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRNb3VzZVdoZWVsRXZlbnRMaXN0ZW5lcih0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbCA9IG5ldyBDaGFydE1vZGVsKHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVIYW5kbGVyLmJpbmQodGhpcyksIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMsIGhvcnpTY2FsZUJlaGF2aW9yKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfY3Jvc3NoYWlyTW92ZWQoKS5faW50ZXJuYWxfc3Vic2NyaWJlKHRoaXMuX3ByaXZhdGVfX29uUGFuZVdpZGdldENyb3NzaGFpck1vdmVkLmJpbmQodGhpcyksIHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldCA9IG5ldyBUaW1lQXhpc1dpZGdldCh0aGlzLCB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvcik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RhYmxlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgY29uc3QgdXNlZE9ic2VydmVyID0gb3B0aW9ucy5hdXRvU2l6ZSAmJiB0aGlzLl9wcml2YXRlX19pbnN0YWxsT2JzZXJ2ZXIoKTtcbiAgICAgICAgLy8gb2JzZXJ2ZXIgY291bGQgbm90IGZpcmUgZXZlbnQgaW1tZWRpYXRlbHkgZm9yIHNvbWUgY2FzZXNcbiAgICAgICAgLy8gc28gd2UgaGF2ZSB0byBzZXQgaW5pdGlhbCBzaXplIG1hbnVhbGx5XG4gICAgICAgIGxldCB3aWR0aCA9IHRoaXMuX3ByaXZhdGVfX29wdGlvbnMud2lkdGg7XG4gICAgICAgIGxldCBoZWlnaHQgPSB0aGlzLl9wcml2YXRlX19vcHRpb25zLmhlaWdodDtcbiAgICAgICAgLy8gaWdub3JlIHdpZHRoL2hlaWdodCBvcHRpb25zIGlmIG9ic2VydmVyIGhhcyBhY3R1YWxseSBiZWVuIHVzZWRcbiAgICAgICAgLy8gaG93ZXZlciByZXNwZWN0IG9wdGlvbnMgaWYgaW5zdGFsbGluZyByZXNpemUgb2JzZXJ2ZXIgZmFpbGVkXG4gICAgICAgIGlmICh1c2VkT2JzZXJ2ZXIgfHwgd2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgd2lkdGggPSB3aWR0aCB8fCBjb250YWluZXJSZWN0LndpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IHx8IGNvbnRhaW5lclJlY3QuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC8vIEJFV0FSRTogcmVzaXplIG11c3QgYmUgY2FsbGVkIEJFRk9SRSBfc3luY0d1aVdpdGhNb2RlbCAoaW4gY29uc3RydWN0b3Igb25seSlcbiAgICAgICAgLy8gb3IgYWZ0ZXIgYnV0IHdpdGggYWRqdXN0U2l6ZSB0byBwcm9wZXJseSB1cGRhdGUgdGltZSBzY2FsZVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N5bmNHdWlXaXRoTW9kZWwoKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX191cGRhdGVUaW1lQXhpc1Zpc2liaWxpdHkoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpLl9pbnRlcm5hbF9vcHRpb25zQXBwbGllZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUodGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX2Z1bGxVcGRhdGUuYmluZCh0aGlzLl9wcml2YXRlX19tb2RlbCksIHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfcHJpY2VTY2FsZXNPcHRpb25zQ2hhbmdlZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUodGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX2Z1bGxVcGRhdGUuYmluZCh0aGlzLl9wcml2YXRlX19tb2RlbCksIHRoaXMpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19tb2RlbDtcbiAgICB9XG4gICAgX2ludGVybmFsX29wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFuZVdpZGdldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cztcbiAgICB9XG4gICAgX2ludGVybmFsX3RpbWVBeGlzV2lkZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRNb3VzZVdoZWVsRXZlbnRMaXN0ZW5lcihmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kcmF3UmFmSWQgIT09IDApIHtcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9wcml2YXRlX19kcmF3UmFmSWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9jcm9zc2hhaXJNb3ZlZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpLl9pbnRlcm5hbF9vcHRpb25zQXBwbGllZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3ByaWNlU2NhbGVzT3B0aW9uc0NoYW5nZWQoKS5faW50ZXJuYWxfdW5zdWJzY3JpYmVBbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgIGZvciAoY29uc3QgcGFuZVdpZGdldCBvZiB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cykge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGFibGVFbGVtZW50LnJlbW92ZUNoaWxkKHBhbmVXaWRnZXQuX2ludGVybmFsX2dldEVsZW1lbnQoKSk7XG4gICAgICAgICAgICBwYW5lV2lkZ2V0Ll9pbnRlcm5hbF9jbGlja2VkKCkuX2ludGVybmFsX3Vuc3Vic2NyaWJlQWxsKHRoaXMpO1xuICAgICAgICAgICAgcGFuZVdpZGdldC5faW50ZXJuYWxfZGJsQ2xpY2tlZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgICAgIHBhbmVXaWRnZXQuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cyA9IFtdO1xuICAgICAgICAvLyBmb3IgKGNvbnN0IHBhbmVTZXBhcmF0b3Igb2YgdGhpcy5fcGFuZVNlcGFyYXRvcnMpIHtcbiAgICAgICAgLy8gXHR0aGlzLl9kZXN0cm95U2VwYXJhdG9yKHBhbmVTZXBhcmF0b3IpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHRoaXMuX3BhbmVTZXBhcmF0b3JzID0gW107XG4gICAgICAgIGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQpLl9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19lbGVtZW50LnBhcmVudEVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLl9wcml2YXRlX19lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19jcm9zc2hhaXJNb3ZlZC5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jbGlja2VkLl9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RibENsaWNrZWQuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdW5pbnN0YWxsT2JzZXJ2ZXIoKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0LCBmb3JjZVJlcGFpbnQgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faGVpZ2h0ID09PSBoZWlnaHQgJiYgdGhpcy5fcHJpdmF0ZV9fd2lkdGggPT09IHdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2l6ZUhpbnQgPSBzdWdnZXN0Q2hhcnRTaXplKHNpemUkMSh7IHdpZHRoLCBoZWlnaHQgfSkpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19oZWlnaHQgPSBzaXplSGludC5oZWlnaHQ7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3dpZHRoID0gc2l6ZUhpbnQud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodFN0ciA9IHRoaXMuX3ByaXZhdGVfX2hlaWdodCArICdweCc7XG4gICAgICAgIGNvbnN0IHdpZHRoU3RyID0gdGhpcy5fcHJpdmF0ZV9fd2lkdGggKyAncHgnO1xuICAgICAgICBlbnN1cmVOb3ROdWxsKHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQpLnN0eWxlLmhlaWdodCA9IGhlaWdodFN0cjtcbiAgICAgICAgZW5zdXJlTm90TnVsbCh0aGlzLl9wcml2YXRlX19lbGVtZW50KS5zdHlsZS53aWR0aCA9IHdpZHRoU3RyO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YWJsZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0U3RyO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190YWJsZUVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aFN0cjtcbiAgICAgICAgaWYgKGZvcmNlUmVwYWludCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0ltcGwoSW52YWxpZGF0ZU1hc2suX2ludGVybmFsX2Z1bGwoKSwgcGVyZm9ybWFuY2Uubm93KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX2Z1bGxVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFpbnQoaW52YWxpZGF0ZU1hc2spIHtcbiAgICAgICAgaWYgKGludmFsaWRhdGVNYXNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGludmFsaWRhdGVNYXNrID0gSW52YWxpZGF0ZU1hc2suX2ludGVybmFsX2Z1bGwoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3ByaXZhdGVfX3BhbmVXaWRnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0c1tpXS5faW50ZXJuYWxfcGFpbnQoaW52YWxpZGF0ZU1hc2suX2ludGVybmFsX2ludmFsaWRhdGVGb3JQYW5lKGkpLl9pbnRlcm5hbF9sZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMudGltZVNjYWxlLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9wYWludChpbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfZnVsbEludmFsaWRhdGlvbigpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW50ZXJuYWxfYXBwbHlPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY3VycmVudGx5SGFzTW91c2VXaGVlbExpc3RlbmVyID0gc2hvdWxkU3Vic2NyaWJlTW91c2VXaGVlbCh0aGlzLl9wcml2YXRlX19vcHRpb25zKTtcbiAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBtZXJnZSBvcHRpb25zIGhlcmUgYmVjYXVzZSBpdCdzIGRvbmUgaW4gY2hhcnQgbW9kZWxcbiAgICAgICAgLy8gYW5kIHNpbmNlIGJvdGggbW9kZWwgYW5kIHdpZGdldCBzaGFyZSB0aGUgc2FtZSBvYmplY3QgaXQgd2lsbCBiZSBkb25lIGF1dG9tYXRpY2FsbHkgZm9yIHdpZGdldCBhcyB3ZWxsXG4gICAgICAgIC8vIG5vdCBpZGVhbCBzb2x1dGlvbiBmb3Igc3VyZSwgYnV0IGl0IHdvcmsncyBmb3Igbm93IMKvXFxfKOODhClfL8KvXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHNob3VsZEhhdmVNb3VzZVdoZWVsTGlzdGVuZXIgPSBzaG91bGRTdWJzY3JpYmVNb3VzZVdoZWVsKHRoaXMuX3ByaXZhdGVfX29wdGlvbnMpO1xuICAgICAgICBpZiAoc2hvdWxkSGF2ZU1vdXNlV2hlZWxMaXN0ZW5lciAhPT0gY3VycmVudGx5SGFzTW91c2VXaGVlbExpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19zZXRNb3VzZVdoZWVsRXZlbnRMaXN0ZW5lcihzaG91bGRIYXZlTW91c2VXaGVlbExpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX191cGRhdGVUaW1lQXhpc1Zpc2liaWxpdHkoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXBwbHlBdXRvU2l6ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9jbGlja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2xpY2tlZDtcbiAgICB9XG4gICAgX2ludGVybmFsX2RibENsaWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19kYmxDbGlja2VkO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfY3Jvc3NoYWlyTW92ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jcm9zc2hhaXJNb3ZlZDtcbiAgICB9XG4gICAgX2ludGVybmFsX3Rha2VTY3JlZW5zaG90KCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZU1hc2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2RyYXdJbXBsKHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVNYXNrLCBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlTWFzayA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NyZWVzaG90Qml0bWFwU2l6ZSA9IHRoaXMuX3ByaXZhdGVfX3RyYXZlcnNlTGF5b3V0KG51bGwpO1xuICAgICAgICBjb25zdCBzY3JlZW5zaG90Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIHNjcmVlbnNob3RDYW52YXMud2lkdGggPSBzY3JlZXNob3RCaXRtYXBTaXplLndpZHRoO1xuICAgICAgICBzY3JlZW5zaG90Q2FudmFzLmhlaWdodCA9IHNjcmVlc2hvdEJpdG1hcFNpemUuaGVpZ2h0O1xuICAgICAgICBjb25zdCBjdHggPSBlbnN1cmVOb3ROdWxsKHNjcmVlbnNob3RDYW52YXMuZ2V0Q29udGV4dCgnMmQnKSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RyYXZlcnNlTGF5b3V0KGN0eCk7XG4gICAgICAgIHJldHVybiBzY3JlZW5zaG90Q2FudmFzO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZ2V0UHJpY2VBeGlzV2lkdGgocG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgIXRoaXMuX3ByaXZhdGVfX2lzTGVmdEF4aXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAhdGhpcy5fcHJpdmF0ZV9faXNSaWdodEF4aXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgZXhhY3RseSBwYW5lIHdpZGdldCBoZXJlXG4gICAgICAgIC8vIGJlY2F1c2UgYWxsIHBhbmUgd2lkZ2V0cyBoYXZlIHRoZSBzYW1lIHdpZHRoIG9mIHByaWNlIGF4aXMgd2lkZ2V0XG4gICAgICAgIC8vIHNlZSBfYWRqdXN0U2l6ZUltcGxcbiAgICAgICAgY29uc3QgcHJpY2VBeGlzV2lkZ2V0ID0gcG9zaXRpb24gPT09ICdsZWZ0J1xuICAgICAgICAgICAgPyB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0c1swXS5faW50ZXJuYWxfbGVmdFByaWNlQXhpc1dpZGdldCgpXG4gICAgICAgICAgICA6IHRoaXMuX3ByaXZhdGVfX3BhbmVXaWRnZXRzWzBdLl9pbnRlcm5hbF9yaWdodFByaWNlQXhpc1dpZGdldCgpO1xuICAgICAgICByZXR1cm4gZW5zdXJlTm90TnVsbChwcmljZUF4aXNXaWRnZXQpLl9pbnRlcm5hbF9nZXRXaWR0aCgpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfYXV0b1NpemVBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19vcHRpb25zLmF1dG9TaXplICYmIHRoaXMuX3ByaXZhdGVfX29ic2VydmVyICE9PSBudWxsO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQ7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRDdXJzb3JTdHlsZShzdHlsZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jdXJzb3JTdHlsZU92ZXJyaWRlID0gc3R5bGU7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19jdXJzb3JTdHlsZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9lbGVtZW50KCkuc3R5bGUuc2V0UHJvcGVydHkoJ2N1cnNvcicsIHN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX2VsZW1lbnQoKS5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnY3Vyc29yJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2ludGVybmFsX2dldEN1cnNvck92ZXJyaWRlU3R5bGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jdXJzb3JTdHlsZU92ZXJyaWRlO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcGFuZVNpemUoKSB7XG4gICAgICAgIC8vIHdlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgYSBzaW5nbGUgcGFuZS5cbiAgICAgICAgcmV0dXJuIGVuc3VyZURlZmluZWQodGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHNbMF0pLl9pbnRlcm5hbF9nZXRTaXplKCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgX3ByaXZhdGVfX2FwcGx5QXV0b1NpemVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1NpemUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9wcml2YXRlX19vYnNlcnZlciAmJiAob3B0aW9ucy53aWR0aCAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuaGVpZ2h0ICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB3YXJuKGBZb3Ugc2hvdWxkIHR1cm4gYXV0b1NpemUgb2ZmIGV4cGxpY2l0bHkgYmVmb3JlIHNwZWNpZnlpbmcgc2l6ZXM7IHRyeSBhZGRpbmcgb3B0aW9ucy5hdXRvU2l6ZTogZmFsc2UgdG8gbmV3IG9wdGlvbnNgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5hdXRvU2l6ZSAmJiAhdGhpcy5fcHJpdmF0ZV9fb2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIC8vIGluc3RhbGxpbmcgb2JzZXJ2ZXIgd2lsbCBvdmVycmlkZSByZXNpemUgaWYgc3VjY2Vzc2Z1bFxuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW5zdGFsbE9ic2VydmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1NpemUgPT09IGZhbHNlICYmIHRoaXMuX3ByaXZhdGVfX29ic2VydmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191bmluc3RhbGxPYnNlcnZlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5hdXRvU2l6ZSAmJiAob3B0aW9ucy53aWR0aCAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuaGVpZ2h0ICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9yZXNpemUob3B0aW9ucy53aWR0aCB8fCB0aGlzLl9wcml2YXRlX193aWR0aCwgb3B0aW9ucy5oZWlnaHQgfHwgdGhpcy5fcHJpdmF0ZV9faGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHdpZGdldCdzIGxheW91dCAocGFuZSBhbmQgYXhpcyBjaGlsZCB3aWRnZXRzKSxcbiAgICAgKiBkcmF3cyB0aGUgc2NyZWVuc2hvdCAoaWYgcmVuZGVyaW5nIGNvbnRleHQgaXMgcGFzc2VkKSBhbmQgcmV0dXJucyB0aGUgc2NyZWVuc2hvdCBiaXRtYXAgc2l6ZVxuICAgICAqXG4gICAgICogQHBhcmFtIGN0eCAtIGlmIHBhc3NlZCwgdXNlZCB0byBkcmF3IHRoZSBzY3JlZW5zaG90IG9mIHdpZGdldFxuICAgICAqIEByZXR1cm5zIHNjcmVlbnNob3QgYml0bWFwIHNpemVcbiAgICAgKi9cbiAgICBfcHJpdmF0ZV9fdHJhdmVyc2VMYXlvdXQoY3R4KSB7XG4gICAgICAgIGxldCB0b3RhbFdpZHRoID0gMDtcbiAgICAgICAgbGV0IHRvdGFsSGVpZ2h0ID0gMDtcbiAgICAgICAgY29uc3QgZmlyc3RQYW5lID0gdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHNbMF07XG4gICAgICAgIGNvbnN0IGRyYXdQcmljZUF4aXNlcyA9IChwb3NpdGlvbiwgdGFyZ2V0WCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRhcmdldFkgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgcGFuZUluZGV4ID0gMDsgcGFuZUluZGV4IDwgdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHMubGVuZ3RoOyBwYW5lSW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVXaWRnZXQgPSB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0c1twYW5lSW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlQXhpc1dpZGdldCA9IGVuc3VyZU5vdE51bGwocG9zaXRpb24gPT09ICdsZWZ0JyA/IHBhbmVXaWRnZXQuX2ludGVybmFsX2xlZnRQcmljZUF4aXNXaWRnZXQoKSA6IHBhbmVXaWRnZXQuX2ludGVybmFsX3JpZ2h0UHJpY2VBeGlzV2lkZ2V0KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpdG1hcFNpemUgPSBwcmljZUF4aXNXaWRnZXQuX2ludGVybmFsX2dldEJpdG1hcFNpemUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY3R4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlQXhpc1dpZGdldC5faW50ZXJuYWxfZHJhd0JpdG1hcChjdHgsIHRhcmdldFgsIHRhcmdldFkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXJnZXRZICs9IGJpdG1hcFNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIC8vIGlmIChwYW5lSW5kZXggPCB0aGlzLl9wYW5lV2lkZ2V0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gXHRjb25zdCBzZXBhcmF0b3IgPSB0aGlzLl9wYW5lU2VwYXJhdG9yc1twYW5lSW5kZXhdO1xuICAgICAgICAgICAgICAgIC8vIFx0Y29uc3Qgc2VwYXJhdG9yQml0bWFwU2l6ZSA9IHNlcGFyYXRvci5nZXRCaXRtYXBTaXplKCk7XG4gICAgICAgICAgICAgICAgLy8gXHRpZiAoY3R4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gXHRcdHNlcGFyYXRvci5kcmF3Qml0bWFwKGN0eCwgdGFyZ2V0WCwgdGFyZ2V0WSk7XG4gICAgICAgICAgICAgICAgLy8gXHR9XG4gICAgICAgICAgICAgICAgLy8gXHR0YXJnZXRZICs9IHNlcGFyYXRvckJpdG1hcFNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gZHJhdyBsZWZ0IHByaWNlIHNjYWxlIGlmIGV4aXN0c1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faXNMZWZ0QXhpc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgZHJhd1ByaWNlQXhpc2VzKCdsZWZ0JywgMCk7XG4gICAgICAgICAgICBjb25zdCBsZWZ0QXhpc0JpdG1hcFdpZHRoID0gZW5zdXJlTm90TnVsbChmaXJzdFBhbmUuX2ludGVybmFsX2xlZnRQcmljZUF4aXNXaWRnZXQoKSkuX2ludGVybmFsX2dldEJpdG1hcFNpemUoKS53aWR0aDtcbiAgICAgICAgICAgIHRvdGFsV2lkdGggKz0gbGVmdEF4aXNCaXRtYXBXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBwYW5lSW5kZXggPSAwOyBwYW5lSW5kZXggPCB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cy5sZW5ndGg7IHBhbmVJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lV2lkZ2V0ID0gdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHNbcGFuZUluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGJpdG1hcFNpemUgPSBwYW5lV2lkZ2V0Ll9pbnRlcm5hbF9nZXRCaXRtYXBTaXplKCk7XG4gICAgICAgICAgICBpZiAoY3R4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFuZVdpZGdldC5faW50ZXJuYWxfZHJhd0JpdG1hcChjdHgsIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvdGFsSGVpZ2h0ICs9IGJpdG1hcFNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgLy8gaWYgKHBhbmVJbmRleCA8IHRoaXMuX3BhbmVXaWRnZXRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIC8vIFx0Y29uc3Qgc2VwYXJhdG9yID0gdGhpcy5fcGFuZVNlcGFyYXRvcnNbcGFuZUluZGV4XTtcbiAgICAgICAgICAgIC8vIFx0Y29uc3Qgc2VwYXJhdG9yQml0bWFwU2l6ZSA9IHNlcGFyYXRvci5nZXRCaXRtYXBTaXplKCk7XG4gICAgICAgICAgICAvLyBcdGlmIChjdHggIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFx0XHRzZXBhcmF0b3IuZHJhd0JpdG1hcChjdHgsIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0KTtcbiAgICAgICAgICAgIC8vIFx0fVxuICAgICAgICAgICAgLy8gXHR0b3RhbEhlaWdodCArPSBzZXBhcmF0b3JCaXRtYXBTaXplLmhlaWdodDtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaXJzdFBhbmVCaXRtYXBXaWR0aCA9IGZpcnN0UGFuZS5faW50ZXJuYWxfZ2V0Qml0bWFwU2l6ZSgpLndpZHRoO1xuICAgICAgICB0b3RhbFdpZHRoICs9IGZpcnN0UGFuZUJpdG1hcFdpZHRoO1xuICAgICAgICAvLyBkcmF3IHJpZ2h0IHByaWNlIHNjYWxlIGlmIGV4aXN0c1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faXNSaWdodEF4aXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIGRyYXdQcmljZUF4aXNlcygncmlnaHQnLCB0b3RhbFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0QXhpc0JpdG1hcFdpZHRoID0gZW5zdXJlTm90TnVsbChmaXJzdFBhbmUuX2ludGVybmFsX3JpZ2h0UHJpY2VBeGlzV2lkZ2V0KCkpLl9pbnRlcm5hbF9nZXRCaXRtYXBTaXplKCkud2lkdGg7XG4gICAgICAgICAgICB0b3RhbFdpZHRoICs9IHJpZ2h0QXhpc0JpdG1hcFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRyYXdTdHViID0gKHBvc2l0aW9uLCB0YXJnZXRYLCB0YXJnZXRZKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdHViID0gZW5zdXJlTm90TnVsbChwb3NpdGlvbiA9PT0gJ2xlZnQnID8gdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQuX2ludGVybmFsX2xlZnRTdHViKCkgOiB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldC5faW50ZXJuYWxfcmlnaHRTdHViKCkpO1xuICAgICAgICAgICAgc3R1Yi5faW50ZXJuYWxfZHJhd0JpdG1hcChlbnN1cmVOb3ROdWxsKGN0eCksIHRhcmdldFgsIHRhcmdldFkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBkcmF3IHRpbWUgc2NhbGUgYW5kIHN0dWJzXG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19vcHRpb25zLnRpbWVTY2FsZS52aXNpYmxlKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lQXhpc0JpdG1hcFNpemUgPSB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0Qml0bWFwU2l6ZSgpO1xuICAgICAgICAgICAgaWYgKGN0eCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRYID0gMDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faXNMZWZ0QXhpc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBkcmF3U3R1YignbGVmdCcsIHRhcmdldFgsIHRvdGFsSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WCA9IGVuc3VyZU5vdE51bGwoZmlyc3RQYW5lLl9pbnRlcm5hbF9sZWZ0UHJpY2VBeGlzV2lkZ2V0KCkpLl9pbnRlcm5hbF9nZXRCaXRtYXBTaXplKCkud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9kcmF3Qml0bWFwKGN0eCwgdGFyZ2V0WCwgdG90YWxIZWlnaHQpO1xuICAgICAgICAgICAgICAgIHRhcmdldFggKz0gdGltZUF4aXNCaXRtYXBTaXplLndpZHRoO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pc1JpZ2h0QXhpc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBkcmF3U3R1YigncmlnaHQnLCB0YXJnZXRYLCB0b3RhbEhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWxIZWlnaHQgKz0gdGltZUF4aXNCaXRtYXBTaXplLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZSQxKHtcbiAgICAgICAgICAgIHdpZHRoOiB0b3RhbFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0b3RhbEhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgX3ByaXZhdGVfX2FkanVzdFNpemVJbXBsKCkge1xuICAgICAgICBsZXQgdG90YWxTdHJldGNoID0gMDtcbiAgICAgICAgbGV0IGxlZnRQcmljZUF4aXNXaWR0aCA9IDA7XG4gICAgICAgIGxldCByaWdodFByaWNlQXhpc1dpZHRoID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBwYW5lV2lkZ2V0IG9mIHRoaXMuX3ByaXZhdGVfX3BhbmVXaWRnZXRzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faXNMZWZ0QXhpc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgIGxlZnRQcmljZUF4aXNXaWR0aCA9IE1hdGgubWF4KGxlZnRQcmljZUF4aXNXaWR0aCwgZW5zdXJlTm90TnVsbChwYW5lV2lkZ2V0Ll9pbnRlcm5hbF9sZWZ0UHJpY2VBeGlzV2lkZ2V0KCkpLl9pbnRlcm5hbF9vcHRpbWFsV2lkdGgoKSwgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5sZWZ0UHJpY2VTY2FsZS5taW5pbXVtV2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2lzUmlnaHRBeGlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmlnaHRQcmljZUF4aXNXaWR0aCA9IE1hdGgubWF4KHJpZ2h0UHJpY2VBeGlzV2lkdGgsIGVuc3VyZU5vdE51bGwocGFuZVdpZGdldC5faW50ZXJuYWxfcmlnaHRQcmljZUF4aXNXaWRnZXQoKSkuX2ludGVybmFsX29wdGltYWxXaWR0aCgpLCB0aGlzLl9wcml2YXRlX19vcHRpb25zLnJpZ2h0UHJpY2VTY2FsZS5taW5pbXVtV2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWxTdHJldGNoICs9IHBhbmVXaWRnZXQuX2ludGVybmFsX3N0cmV0Y2hGYWN0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBsZWZ0UHJpY2VBeGlzV2lkdGggPSBzdWdnZXN0UHJpY2VTY2FsZVdpZHRoKGxlZnRQcmljZUF4aXNXaWR0aCk7XG4gICAgICAgIHJpZ2h0UHJpY2VBeGlzV2lkdGggPSBzdWdnZXN0UHJpY2VTY2FsZVdpZHRoKHJpZ2h0UHJpY2VBeGlzV2lkdGgpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX3ByaXZhdGVfX3dpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl9wcml2YXRlX19oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHBhbmVXaWR0aCA9IE1hdGgubWF4KHdpZHRoIC0gbGVmdFByaWNlQXhpc1dpZHRoIC0gcmlnaHRQcmljZUF4aXNXaWR0aCwgMCk7XG4gICAgICAgIC8vIGNvbnN0IHNlcGFyYXRvckNvdW50ID0gdGhpcy5fcGFuZVNlcGFyYXRvcnMubGVuZ3RoO1xuICAgICAgICAvLyBjb25zdCBzZXBhcmF0b3JIZWlnaHQgPSBTRVBBUkFUT1JfSEVJR0hUO1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JzSGVpZ2h0ID0gMDsgLy8gc2VwYXJhdG9ySGVpZ2h0ICogc2VwYXJhdG9yQ291bnQ7XG4gICAgICAgIGNvbnN0IHRpbWVBeGlzVmlzaWJsZSA9IHRoaXMuX3ByaXZhdGVfX29wdGlvbnMudGltZVNjYWxlLnZpc2libGU7XG4gICAgICAgIGxldCB0aW1lQXhpc0hlaWdodCA9IHRpbWVBeGlzVmlzaWJsZSA/IE1hdGgubWF4KHRoaXMuX3ByaXZhdGVfX3RpbWVBeGlzV2lkZ2V0Ll9pbnRlcm5hbF9vcHRpbWFsSGVpZ2h0KCksIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMudGltZVNjYWxlLm1pbmltdW1IZWlnaHQpIDogMDtcbiAgICAgICAgdGltZUF4aXNIZWlnaHQgPSBzdWdnZXN0VGltZVNjYWxlSGVpZ2h0KHRpbWVBeGlzSGVpZ2h0KTtcbiAgICAgICAgY29uc3Qgb3RoZXJXaWRnZXRIZWlnaHQgPSBzZXBhcmF0b3JzSGVpZ2h0ICsgdGltZUF4aXNIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHRvdGFsUGFuZUhlaWdodCA9IGhlaWdodCA8IG90aGVyV2lkZ2V0SGVpZ2h0ID8gMCA6IGhlaWdodCAtIG90aGVyV2lkZ2V0SGVpZ2h0O1xuICAgICAgICBjb25zdCBzdHJldGNoUGl4ZWxzID0gdG90YWxQYW5lSGVpZ2h0IC8gdG90YWxTdHJldGNoO1xuICAgICAgICBsZXQgYWNjdW11bGF0ZWRIZWlnaHQgPSAwO1xuICAgICAgICBmb3IgKGxldCBwYW5lSW5kZXggPSAwOyBwYW5lSW5kZXggPCB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cy5sZW5ndGg7ICsrcGFuZUluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lV2lkZ2V0ID0gdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHNbcGFuZUluZGV4XTtcbiAgICAgICAgICAgIHBhbmVXaWRnZXQuX2ludGVybmFsX3NldFN0YXRlKHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9wYW5lcygpW3BhbmVJbmRleF0pO1xuICAgICAgICAgICAgbGV0IHBhbmVIZWlnaHQgPSAwO1xuICAgICAgICAgICAgbGV0IGNhbGN1bGF0ZVBhbmVIZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKHBhbmVJbmRleCA9PT0gdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZVBhbmVIZWlnaHQgPSB0b3RhbFBhbmVIZWlnaHQgLSBhY2N1bXVsYXRlZEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZVBhbmVIZWlnaHQgPSBNYXRoLnJvdW5kKHBhbmVXaWRnZXQuX2ludGVybmFsX3N0cmV0Y2hGYWN0b3IoKSAqIHN0cmV0Y2hQaXhlbHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFuZUhlaWdodCA9IE1hdGgubWF4KGNhbGN1bGF0ZVBhbmVIZWlnaHQsIDIpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZWRIZWlnaHQgKz0gcGFuZUhlaWdodDtcbiAgICAgICAgICAgIHBhbmVXaWRnZXQuX2ludGVybmFsX3NldFNpemUoc2l6ZSQxKHsgd2lkdGg6IHBhbmVXaWR0aCwgaGVpZ2h0OiBwYW5lSGVpZ2h0IH0pKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pc0xlZnRBeGlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcGFuZVdpZGdldC5faW50ZXJuYWxfc2V0UHJpY2VBeGlzU2l6ZShsZWZ0UHJpY2VBeGlzV2lkdGgsICdsZWZ0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9faXNSaWdodEF4aXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICBwYW5lV2lkZ2V0Ll9pbnRlcm5hbF9zZXRQcmljZUF4aXNTaXplKHJpZ2h0UHJpY2VBeGlzV2lkdGgsICdyaWdodCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhbmVXaWRnZXQuX2ludGVybmFsX3N0YXRlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfc2V0UGFuZUhlaWdodChwYW5lV2lkZ2V0Ll9pbnRlcm5hbF9zdGF0ZSgpLCBwYW5lSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldC5faW50ZXJuYWxfc2V0U2l6ZXMoc2l6ZSQxKHsgd2lkdGg6IHRpbWVBeGlzVmlzaWJsZSA/IHBhbmVXaWR0aCA6IDAsIGhlaWdodDogdGltZUF4aXNIZWlnaHQgfSksIHRpbWVBeGlzVmlzaWJsZSA/IGxlZnRQcmljZUF4aXNXaWR0aCA6IDAsIHRpbWVBeGlzVmlzaWJsZSA/IHJpZ2h0UHJpY2VBeGlzV2lkdGggOiAwKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3NldFdpZHRoKHBhbmVXaWR0aCk7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkdGggIT09IGxlZnRQcmljZUF4aXNXaWR0aCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbGVmdFByaWNlQXhpc1dpZHRoID0gbGVmdFByaWNlQXhpc1dpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZHRoICE9PSByaWdodFByaWNlQXhpc1dpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19yaWdodFByaWNlQXhpc1dpZHRoID0gcmlnaHRQcmljZUF4aXNXaWR0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2V0TW91c2VXaGVlbEV2ZW50TGlzdGVuZXIoYWRkKSB7XG4gICAgICAgIGlmIChhZGQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLl9wcml2YXRlX19vbldoZWVsQm91bmQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuX3ByaXZhdGVfX29uV2hlZWxCb3VuZCk7XG4gICAgfVxuICAgIF9wcml2YXRlX19kZXRlcm1pbmVXaGVlbFNwZWVkQWRqdXN0bWVudChldmVudCkge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRlbHRhTW9kZSkge1xuICAgICAgICAgICAgY2FzZSBldmVudC5ET01fREVMVEFfUEFHRTpcbiAgICAgICAgICAgICAgICAvLyBvbmUgc2NyZWVuIGF0IHRpbWUgc2Nyb2xsIG1vZGVcbiAgICAgICAgICAgICAgICByZXR1cm4gMTIwO1xuICAgICAgICAgICAgY2FzZSBldmVudC5ET01fREVMVEFfTElORTpcbiAgICAgICAgICAgICAgICAvLyBvbmUgbGluZSBhdCB0aW1lIHNjcm9sbCBtb2RlXG4gICAgICAgICAgICAgICAgcmV0dXJuIDMyO1xuICAgICAgICB9XG4gICAgICAgIGlmICghd2luZG93c0Nocm9tZSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hyb21pdW0gb24gV2luZG93cyBoYXMgYSBidWcgd2hlcmUgdGhlIHNjcm9sbCBzcGVlZCBpc24ndCBjb3JyZWN0bHlcbiAgICAgICAgLy8gYWRqdXN0ZWQgZm9yIGhpZ2ggZGVuc2l0eSBkaXNwbGF5cy4gV2UgbmVlZCB0byBjb3JyZWN0IGZvciB0aGlzIHNvIHRoYXRcbiAgICAgICAgLy8gc2Nyb2xsIHNwZWVkIGlzIGNvbnNpc3RlbnQgYmV0d2VlbiBicm93c2Vycy5cbiAgICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTAwMTczNVxuICAgICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMjA3MzA4XG4gICAgICAgIHJldHVybiAoMSAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX29uTW91c2V3aGVlbChldmVudCkge1xuICAgICAgICBpZiAoKGV2ZW50LmRlbHRhWCA9PT0gMCB8fCAhdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5oYW5kbGVTY3JvbGwubW91c2VXaGVlbCkgJiZcbiAgICAgICAgICAgIChldmVudC5kZWx0YVkgPT09IDAgfHwgIXRoaXMuX3ByaXZhdGVfX29wdGlvbnMuaGFuZGxlU2NhbGUubW91c2VXaGVlbCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY3JvbGxTcGVlZEFkanVzdG1lbnQgPSB0aGlzLl9wcml2YXRlX19kZXRlcm1pbmVXaGVlbFNwZWVkQWRqdXN0bWVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGRlbHRhWCA9IHNjcm9sbFNwZWVkQWRqdXN0bWVudCAqIGV2ZW50LmRlbHRhWCAvIDEwMDtcbiAgICAgICAgY29uc3QgZGVsdGFZID0gLShzY3JvbGxTcGVlZEFkanVzdG1lbnQgKiBldmVudC5kZWx0YVkgLyAxMDApO1xuICAgICAgICBpZiAoZXZlbnQuY2FuY2VsYWJsZSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsdGFZICE9PSAwICYmIHRoaXMuX3ByaXZhdGVfX29wdGlvbnMuaGFuZGxlU2NhbGUubW91c2VXaGVlbCkge1xuICAgICAgICAgICAgY29uc3Qgem9vbVNjYWxlID0gTWF0aC5zaWduKGRlbHRhWSkgKiBNYXRoLm1pbigxLCBNYXRoLmFicyhkZWx0YVkpKTtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbFBvc2l0aW9uID0gZXZlbnQuY2xpZW50WCAtIHRoaXMuX3ByaXZhdGVfX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3pvb21UaW1lKHNjcm9sbFBvc2l0aW9uLCB6b29tU2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWx0YVggIT09IDAgJiYgdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy5oYW5kbGVTY3JvbGwubW91c2VXaGVlbCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfc2Nyb2xsQ2hhcnQoZGVsdGFYICogLTgwKTsgLy8gODAgaXMgYSBtYWRlIHVwIGNvZWZmaWNpZW50LCBhbmQgbWludXMgaXMgZm9yIHRoZSBcIm5hdHVyYWxcIiBzY3JvbGxcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fZHJhd0ltcGwoaW52YWxpZGF0ZU1hc2ssIHRpbWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBpbnZhbGlkYXRpb25UeXBlID0gaW52YWxpZGF0ZU1hc2suX2ludGVybmFsX2Z1bGxJbnZhbGlkYXRpb24oKTtcbiAgICAgICAgLy8gYWN0aW9ucyBmb3IgZnVsbCBpbnZhbGlkYXRpb24gT05MWSAobm90IHNoYXJlZCB3aXRoIGxpZ2h0KVxuICAgICAgICBpZiAoaW52YWxpZGF0aW9uVHlwZSA9PT0gMyAvKiBJbnZhbGlkYXRpb25MZXZlbC5GdWxsICovKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX191cGRhdGVHdWkoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsaWdodCBvciBmdWxsIGludmFsaWRhdGUgYWN0aW9uc1xuICAgICAgICBpZiAoaW52YWxpZGF0aW9uVHlwZSA9PT0gMyAvKiBJbnZhbGlkYXRpb25MZXZlbC5GdWxsICovIHx8XG4gICAgICAgICAgICBpbnZhbGlkYXRpb25UeXBlID09PSAyIC8qIEludmFsaWRhdGlvbkxldmVsLkxpZ2h0ICovKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hcHBseU1vbWVudGFyeUF1dG9TY2FsZShpbnZhbGlkYXRlTWFzayk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hcHBseVRpbWVTY2FsZUludmFsaWRhdGlvbnMoaW52YWxpZGF0ZU1hc2ssIHRpbWUpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQuX2ludGVybmFsX3VwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHMuZm9yRWFjaCgocGFuZSkgPT4ge1xuICAgICAgICAgICAgICAgIHBhbmUuX2ludGVybmFsX3VwZGF0ZVByaWNlQXhpc1dpZGdldHMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2UgYSBmdWxsIGludmFsaWRhdGlvbiBoYXMgYmVlbiBwb3N0cG9uZWQgZHVyaW5nIHRoZSBkcmF3LCByZWFwcGx5XG4gICAgICAgICAgICAvLyB0aGUgdGltZXNjYWxlIGludmFsaWRhdGlvbnMuIEEgZnVsbCBpbnZhbGlkYXRpb24gd291bGQgbWVhbiB0aGVyZSBpcyBhIGNoYW5nZVxuICAgICAgICAgICAgLy8gaW4gdGhlIHRpbWVzY2FsZSB3aWR0aCAoY2F1c2VkIGJ5IHByaWNlIHNjYWxlIGNoYW5nZXMpIHRoYXQgbmVlZHMgdG8gYmUgZHJhd25cbiAgICAgICAgICAgIC8vIHJpZ2h0IGF3YXkgdG8gYXZvaWQgZmxpY2tlcmluZy5cbiAgICAgICAgICAgIGlmICgoKF9hID0gdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZU1hc2spID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5faW50ZXJuYWxfZnVsbEludmFsaWRhdGlvbigpKSA9PT0gMyAvKiBJbnZhbGlkYXRpb25MZXZlbC5GdWxsICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZU1hc2suX2ludGVybmFsX21lcmdlKGludmFsaWRhdGVNYXNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX191cGRhdGVHdWkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hcHBseU1vbWVudGFyeUF1dG9TY2FsZSh0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlTWFzayk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fYXBwbHlUaW1lU2NhbGVJbnZhbGlkYXRpb25zKHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVNYXNrLCB0aW1lKTtcbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRlTWFzayA9IHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVNYXNrO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVNYXNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnRlcm5hbF9wYWludChpbnZhbGlkYXRlTWFzayk7XG4gICAgfVxuICAgIF9wcml2YXRlX19hcHBseVRpbWVTY2FsZUludmFsaWRhdGlvbnMoaW52YWxpZGF0ZU1hc2ssIHRpbWUpIHtcbiAgICAgICAgZm9yIChjb25zdCB0c0ludmFsaWRhdGlvbiBvZiBpbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfdGltZVNjYWxlSW52YWxpZGF0aW9ucygpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19hcHBseVRpbWVTY2FsZUludmFsaWRhdGlvbih0c0ludmFsaWRhdGlvbiwgdGltZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2FwcGx5TW9tZW50YXJ5QXV0b1NjYWxlKGludmFsaWRhdGVNYXNrKSB7XG4gICAgICAgIGNvbnN0IHBhbmVzID0gdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3BhbmVzKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFuZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfaW52YWxpZGF0ZUZvclBhbmUoaSkuX2ludGVybmFsX2F1dG9TY2FsZSkge1xuICAgICAgICAgICAgICAgIHBhbmVzW2ldLl9pbnRlcm5hbF9tb21lbnRhcnlBdXRvU2NhbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fYXBwbHlUaW1lU2NhbGVJbnZhbGlkYXRpb24oaW52YWxpZGF0aW9uLCB0aW1lKSB7XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKTtcbiAgICAgICAgc3dpdGNoIChpbnZhbGlkYXRpb24uX2ludGVybmFsX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLkZpdENvbnRlbnQgKi86XG4gICAgICAgICAgICAgICAgdGltZVNjYWxlLl9pbnRlcm5hbF9maXRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEgLyogVGltZVNjYWxlSW52YWxpZGF0aW9uVHlwZS5BcHBseVJhbmdlICovOlxuICAgICAgICAgICAgICAgIHRpbWVTY2FsZS5faW50ZXJuYWxfc2V0TG9naWNhbFJhbmdlKGludmFsaWRhdGlvbi5faW50ZXJuYWxfdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyIC8qIFRpbWVTY2FsZUludmFsaWRhdGlvblR5cGUuQXBwbHlCYXJTcGFjaW5nICovOlxuICAgICAgICAgICAgICAgIHRpbWVTY2FsZS5faW50ZXJuYWxfc2V0QmFyU3BhY2luZyhpbnZhbGlkYXRpb24uX2ludGVybmFsX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMyAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLkFwcGx5UmlnaHRPZmZzZXQgKi86XG4gICAgICAgICAgICAgICAgdGltZVNjYWxlLl9pbnRlcm5hbF9zZXRSaWdodE9mZnNldChpbnZhbGlkYXRpb24uX2ludGVybmFsX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNCAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLlJlc2V0ICovOlxuICAgICAgICAgICAgICAgIHRpbWVTY2FsZS5faW50ZXJuYWxfcmVzdG9yZURlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNSAvKiBUaW1lU2NhbGVJbnZhbGlkYXRpb25UeXBlLkFuaW1hdGlvbiAqLzpcbiAgICAgICAgICAgICAgICBpZiAoIWludmFsaWRhdGlvbi5faW50ZXJuYWxfdmFsdWUuX2ludGVybmFsX2ZpbmlzaGVkKHRpbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVTY2FsZS5faW50ZXJuYWxfc2V0UmlnaHRPZmZzZXQoaW52YWxpZGF0aW9uLl9pbnRlcm5hbF92YWx1ZS5faW50ZXJuYWxfZ2V0UG9zaXRpb24odGltZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9faW52YWxpZGF0ZUhhbmRsZXIoaW52YWxpZGF0ZU1hc2spIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVNYXNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlTWFzay5faW50ZXJuYWxfbWVyZ2UoaW52YWxpZGF0ZU1hc2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZU1hc2sgPSBpbnZhbGlkYXRlTWFzaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX2RyYXdQbGFubmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3UGxhbm5lZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3UmFmSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCh0aW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd1BsYW5uZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kcmF3UmFmSWQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19pbnZhbGlkYXRlTWFzayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXNrID0gdGhpcy5fcHJpdmF0ZV9faW52YWxpZGF0ZU1hc2s7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2ludmFsaWRhdGVNYXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZHJhd0ltcGwobWFzaywgdGltZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHNJbnZhbGlkYXRpb24gb2YgbWFzay5faW50ZXJuYWxfdGltZVNjYWxlSW52YWxpZGF0aW9ucygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHNJbnZhbGlkYXRpb24uX2ludGVybmFsX3R5cGUgPT09IDUgLyogVGltZVNjYWxlSW52YWxpZGF0aW9uVHlwZS5BbmltYXRpb24gKi8gJiYgIXRzSW52YWxpZGF0aW9uLl9pbnRlcm5hbF92YWx1ZS5faW50ZXJuYWxfZmluaXNoZWQodGltZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9zZXRUaW1lU2NhbGVBbmltYXRpb24odHNJbnZhbGlkYXRpb24uX2ludGVybmFsX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX191cGRhdGVHdWkoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3N5bmNHdWlXaXRoTW9kZWwoKTtcbiAgICB9XG4gICAgLy8gcHJpdmF0ZSBfZGVzdHJveVNlcGFyYXRvcihzZXBhcmF0b3I6IFBhbmVTZXBhcmF0b3IpOiB2b2lkIHtcbiAgICAvLyBcdHRoaXMuX3RhYmxlRWxlbWVudC5yZW1vdmVDaGlsZChzZXBhcmF0b3IuZ2V0RWxlbWVudCgpKTtcbiAgICAvLyBcdHNlcGFyYXRvci5kZXN0cm95KCk7XG4gICAgLy8gfVxuICAgIF9wcml2YXRlX19zeW5jR3VpV2l0aE1vZGVsKCkge1xuICAgICAgICBjb25zdCBwYW5lcyA9IHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9wYW5lcygpO1xuICAgICAgICBjb25zdCB0YXJnZXRQYW5lV2lkZ2V0c0NvdW50ID0gcGFuZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBhY3R1YWxQYW5lV2lkZ2V0c0NvdW50ID0gdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHMubGVuZ3RoO1xuICAgICAgICAvLyBSZW1vdmUgKGlmIG5lZWRlZCkgcGFuZSB3aWRnZXRzIGFuZCBzZXBhcmF0b3JzXG4gICAgICAgIGZvciAobGV0IGkgPSB0YXJnZXRQYW5lV2lkZ2V0c0NvdW50OyBpIDwgYWN0dWFsUGFuZVdpZGdldHNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lV2lkZ2V0ID0gZW5zdXJlRGVmaW5lZCh0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cy5wb3AoKSk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX190YWJsZUVsZW1lbnQucmVtb3ZlQ2hpbGQocGFuZVdpZGdldC5faW50ZXJuYWxfZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgICAgIHBhbmVXaWRnZXQuX2ludGVybmFsX2NsaWNrZWQoKS5faW50ZXJuYWxfdW5zdWJzY3JpYmVBbGwodGhpcyk7XG4gICAgICAgICAgICBwYW5lV2lkZ2V0Ll9pbnRlcm5hbF9kYmxDbGlja2VkKCkuX2ludGVybmFsX3Vuc3Vic2NyaWJlQWxsKHRoaXMpO1xuICAgICAgICAgICAgcGFuZVdpZGdldC5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgICAgICAgICAgLy8gY29uc3QgcGFuZVNlcGFyYXRvciA9IHRoaXMuX3BhbmVTZXBhcmF0b3JzLnBvcCgpO1xuICAgICAgICAgICAgLy8gaWYgKHBhbmVTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gXHR0aGlzLl9kZXN0cm95U2VwYXJhdG9yKHBhbmVTZXBhcmF0b3IpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZSAoaWYgbmVlZGVkKSBuZXcgcGFuZSB3aWRnZXRzIGFuZCBzZXBhcmF0b3JzXG4gICAgICAgIGZvciAobGV0IGkgPSBhY3R1YWxQYW5lV2lkZ2V0c0NvdW50OyBpIDwgdGFyZ2V0UGFuZVdpZGdldHNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lV2lkZ2V0ID0gbmV3IFBhbmVXaWRnZXQodGhpcywgcGFuZXNbaV0pO1xuICAgICAgICAgICAgcGFuZVdpZGdldC5faW50ZXJuYWxfY2xpY2tlZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUodGhpcy5fcHJpdmF0ZV9fb25QYW5lV2lkZ2V0Q2xpY2tlZC5iaW5kKHRoaXMpLCB0aGlzKTtcbiAgICAgICAgICAgIHBhbmVXaWRnZXQuX2ludGVybmFsX2RibENsaWNrZWQoKS5faW50ZXJuYWxfc3Vic2NyaWJlKHRoaXMuX3ByaXZhdGVfX29uUGFuZVdpZGdldERibENsaWNrZWQuYmluZCh0aGlzKSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0cy5wdXNoKHBhbmVXaWRnZXQpO1xuICAgICAgICAgICAgLy8gY3JlYXRlIGFuZCBpbnNlcnQgc2VwYXJhdG9yXG4gICAgICAgICAgICAvLyBpZiAoaSA+IDEpIHtcbiAgICAgICAgICAgIC8vIFx0Y29uc3QgcGFuZVNlcGFyYXRvciA9IG5ldyBQYW5lU2VwYXJhdG9yKHRoaXMsIGkgLSAxLCBpLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIFx0dGhpcy5fcGFuZVNlcGFyYXRvcnMucHVzaChwYW5lU2VwYXJhdG9yKTtcbiAgICAgICAgICAgIC8vIFx0dGhpcy5fdGFibGVFbGVtZW50Lmluc2VydEJlZm9yZShwYW5lU2VwYXJhdG9yLmdldEVsZW1lbnQoKSwgdGhpcy5fdGltZUF4aXNXaWRnZXQuZ2V0RWxlbWVudCgpKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIGluc2VydCBwYW5lV2lkZ2V0XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX190YWJsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKHBhbmVXaWRnZXQuX2ludGVybmFsX2dldEVsZW1lbnQoKSwgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQuX2ludGVybmFsX2dldEVsZW1lbnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRQYW5lV2lkZ2V0c0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gcGFuZXNbaV07XG4gICAgICAgICAgICBjb25zdCBwYW5lV2lkZ2V0ID0gdGhpcy5fcHJpdmF0ZV9fcGFuZVdpZGdldHNbaV07XG4gICAgICAgICAgICBpZiAocGFuZVdpZGdldC5faW50ZXJuYWxfc3RhdGUoKSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBwYW5lV2lkZ2V0Ll9pbnRlcm5hbF9zZXRTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYW5lV2lkZ2V0Ll9pbnRlcm5hbF91cGRhdGVQcmljZUF4aXNXaWRnZXRzU3RhdGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdXBkYXRlVGltZUF4aXNWaXNpYmlsaXR5KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2FkanVzdFNpemVJbXBsKCk7XG4gICAgfVxuICAgIF9wcml2YXRlX19nZXRNb3VzZUV2ZW50UGFyYW1zSW1wbChpbmRleCwgcG9pbnQsIGV2ZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgc2VyaWVzRGF0YSA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBzZXJpZXNlcyA9IHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9zZXJpZXNlcygpO1xuICAgICAgICAgICAgc2VyaWVzZXMuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IHJlcGxhY2Ugd2l0aCBzZWFyY2ggbGVmdFxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBzLl9pbnRlcm5hbF9iYXJzKCkuX2ludGVybmFsX3NlYXJjaChpbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzRGF0YS5zZXQocywgZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNsaWVudFRpbWU7XG4gICAgICAgIGlmIChpbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgdGltZVBvaW50ID0gKF9hID0gdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpLl9pbnRlcm5hbF9pbmRleFRvVGltZVNjYWxlUG9pbnQoaW5kZXgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3JpZ2luYWxUaW1lO1xuICAgICAgICAgICAgaWYgKHRpbWVQb2ludCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2xpZW50VGltZSA9IHRpbWVQb2ludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3ZlcmVkU291cmNlID0gdGhpcy5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfaG92ZXJlZFNvdXJjZSgpO1xuICAgICAgICBjb25zdCBob3ZlcmVkU2VyaWVzID0gaG92ZXJlZFNvdXJjZSAhPT0gbnVsbCAmJiBob3ZlcmVkU291cmNlLl9pbnRlcm5hbF9zb3VyY2UgaW5zdGFuY2VvZiBTZXJpZXNcbiAgICAgICAgICAgID8gaG92ZXJlZFNvdXJjZS5faW50ZXJuYWxfc291cmNlXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgaG92ZXJlZE9iamVjdCA9IGhvdmVyZWRTb3VyY2UgIT09IG51bGwgJiYgaG92ZXJlZFNvdXJjZS5faW50ZXJuYWxfb2JqZWN0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gaG92ZXJlZFNvdXJjZS5faW50ZXJuYWxfb2JqZWN0Ll9pbnRlcm5hbF9leHRlcm5hbElkXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9vcmlnaW5hbFRpbWU6IGNsaWVudFRpbWUsXG4gICAgICAgICAgICBfaW50ZXJuYWxfaW5kZXg6IGluZGV4ICE9PSBudWxsICYmIGluZGV4ICE9PSB2b2lkIDAgPyBpbmRleCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9wb2ludDogcG9pbnQgIT09IG51bGwgJiYgcG9pbnQgIT09IHZvaWQgMCA/IHBvaW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgX2ludGVybmFsX2hvdmVyZWRTZXJpZXM6IGhvdmVyZWRTZXJpZXMsXG4gICAgICAgICAgICBfaW50ZXJuYWxfc2VyaWVzRGF0YTogc2VyaWVzRGF0YSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF9ob3ZlcmVkT2JqZWN0OiBob3ZlcmVkT2JqZWN0LFxuICAgICAgICAgICAgX2ludGVybmFsX3RvdWNoTW91c2VFdmVudERhdGE6IGV2ZW50ICE9PSBudWxsICYmIGV2ZW50ICE9PSB2b2lkIDAgPyBldmVudCA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX29uUGFuZVdpZGdldENsaWNrZWQodGltZSwgcG9pbnQsIGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsaWNrZWQuX2ludGVybmFsX2ZpcmUoKCkgPT4gdGhpcy5fcHJpdmF0ZV9fZ2V0TW91c2VFdmVudFBhcmFtc0ltcGwodGltZSwgcG9pbnQsIGV2ZW50KSk7XG4gICAgfVxuICAgIF9wcml2YXRlX19vblBhbmVXaWRnZXREYmxDbGlja2VkKHRpbWUsIHBvaW50LCBldmVudCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYmxDbGlja2VkLl9pbnRlcm5hbF9maXJlKCgpID0+IHRoaXMuX3ByaXZhdGVfX2dldE1vdXNlRXZlbnRQYXJhbXNJbXBsKHRpbWUsIHBvaW50LCBldmVudCkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fb25QYW5lV2lkZ2V0Q3Jvc3NoYWlyTW92ZWQodGltZSwgcG9pbnQsIGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpck1vdmVkLl9pbnRlcm5hbF9maXJlKCgpID0+IHRoaXMuX3ByaXZhdGVfX2dldE1vdXNlRXZlbnRQYXJhbXNJbXBsKHRpbWUsIHBvaW50LCBldmVudCkpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fdXBkYXRlVGltZUF4aXNWaXNpYmlsaXR5KCkge1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5fcHJpdmF0ZV9fb3B0aW9ucy50aW1lU2NhbGUudmlzaWJsZSA/ICcnIDogJ25vbmUnO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0RWxlbWVudCgpLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuICAgIH1cbiAgICBfcHJpdmF0ZV9faXNMZWZ0QXhpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0c1swXS5faW50ZXJuYWxfc3RhdGUoKS5faW50ZXJuYWxfbGVmdFByaWNlU2NhbGUoKS5faW50ZXJuYWxfb3B0aW9ucygpLnZpc2libGU7XG4gICAgfVxuICAgIF9wcml2YXRlX19pc1JpZ2h0QXhpc1Zpc2libGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19wYW5lV2lkZ2V0c1swXS5faW50ZXJuYWxfc3RhdGUoKS5faW50ZXJuYWxfcmlnaHRQcmljZVNjYWxlKCkuX2ludGVybmFsX29wdGlvbnMoKS52aXNpYmxlO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9faW5zdGFsbE9ic2VydmVyKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKCEoJ1Jlc2l6ZU9ic2VydmVyJyBpbiB3aW5kb3cpKSB7XG4gICAgICAgICAgICB3YXJuKCdPcHRpb25zIGNvbnRhaW5zIFwiYXV0b1NpemVcIiBmbGFnLCBidXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBSZXNpemVPYnNlcnZlciBmZWF0dXJlLiBQbGVhc2UgcHJvdmlkZSBwb2x5ZmlsbC4nKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX29ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyRW50cnkgPSBlbnRyaWVzLmZpbmQoKGVudHJ5KSA9PiBlbnRyeS50YXJnZXQgPT09IHRoaXMuX3ByaXZhdGVfX2NvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXJFbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsX3Jlc2l6ZShjb250YWluZXJFbnRyeS5jb250ZW50UmVjdC53aWR0aCwgY29udGFpbmVyRW50cnkuY29udGVudFJlY3QuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9wcml2YXRlX19jb250YWluZXIsIHsgYm94OiAnYm9yZGVyLWJveCcgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcHJpdmF0ZV9fdW5pbnN0YWxsT2JzZXJ2ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19vYnNlcnZlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29ic2VydmVyID0gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiBkaXNhYmxlU2VsZWN0aW9uKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnN0eWxlLnVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgZWxlbWVudC5zdHlsZS53ZWJraXRVc2VyU2VsZWN0ID0gJ25vbmUnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIGVsZW1lbnQuc3R5bGUubXNVc2VyU2VsZWN0ID0gJ25vbmUnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIGVsZW1lbnQuc3R5bGUuTW96VXNlclNlbGVjdCA9ICdub25lJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICBlbGVtZW50LnN0eWxlLndlYmtpdFRhcEhpZ2hsaWdodENvbG9yID0gJ3RyYW5zcGFyZW50Jztcbn1cbmZ1bmN0aW9uIHNob3VsZFN1YnNjcmliZU1vdXNlV2hlZWwob3B0aW9ucykge1xuICAgIHJldHVybiBCb29sZWFuKG9wdGlvbnMuaGFuZGxlU2Nyb2xsLm1vdXNlV2hlZWwgfHwgb3B0aW9ucy5oYW5kbGVTY2FsZS5tb3VzZVdoZWVsKTtcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlRGF0YShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEub3BlbiA9PT0gdW5kZWZpbmVkICYmIGRhdGEudmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGlzRnVsZmlsbGVkRGF0YShkYXRhKSB7XG4gICAgcmV0dXJuIGlzRnVsZmlsbGVkQmFyRGF0YShkYXRhKSB8fCBpc0Z1bGZpbGxlZExpbmVEYXRhKGRhdGEpO1xufVxuZnVuY3Rpb24gaXNGdWxmaWxsZWRCYXJEYXRhKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS5vcGVuICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc0Z1bGZpbGxlZExpbmVEYXRhKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS52YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcblxyXG5mdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cblxuZnVuY3Rpb24gZ2V0Q29sb3JlZExpbmVCYXNlZFNlcmllc1Bsb3RSb3codGltZSwgaW5kZXgsIGl0ZW0sIG9yaWdpbmFsVGltZSkge1xuICAgIGNvbnN0IHZhbCA9IGl0ZW0udmFsdWU7XG4gICAgY29uc3QgcmVzID0geyBfaW50ZXJuYWxfaW5kZXg6IGluZGV4LCBfaW50ZXJuYWxfdGltZTogdGltZSwgX2ludGVybmFsX3ZhbHVlOiBbdmFsLCB2YWwsIHZhbCwgdmFsXSwgX2ludGVybmFsX29yaWdpbmFsVGltZTogb3JpZ2luYWxUaW1lIH07XG4gICAgaWYgKGl0ZW0uY29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXMuX2ludGVybmFsX2NvbG9yID0gaXRlbS5jb2xvcjtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGdldEFyZWFTZXJpZXNQbG90Um93KHRpbWUsIGluZGV4LCBpdGVtLCBvcmlnaW5hbFRpbWUpIHtcbiAgICBjb25zdCB2YWwgPSBpdGVtLnZhbHVlO1xuICAgIGNvbnN0IHJlcyA9IHsgX2ludGVybmFsX2luZGV4OiBpbmRleCwgX2ludGVybmFsX3RpbWU6IHRpbWUsIF9pbnRlcm5hbF92YWx1ZTogW3ZhbCwgdmFsLCB2YWwsIHZhbF0sIF9pbnRlcm5hbF9vcmlnaW5hbFRpbWU6IG9yaWdpbmFsVGltZSB9O1xuICAgIGlmIChpdGVtLmxpbmVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcy5faW50ZXJuYWxfbGluZUNvbG9yID0gaXRlbS5saW5lQ29sb3I7XG4gICAgfVxuICAgIGlmIChpdGVtLnRvcENvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLl9pbnRlcm5hbF90b3BDb2xvciA9IGl0ZW0udG9wQ29sb3I7XG4gICAgfVxuICAgIGlmIChpdGVtLmJvdHRvbUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLl9pbnRlcm5hbF9ib3R0b21Db2xvciA9IGl0ZW0uYm90dG9tQ29sb3I7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBnZXRCYXNlbGluZVNlcmllc1Bsb3RSb3codGltZSwgaW5kZXgsIGl0ZW0sIG9yaWdpbmFsVGltZSkge1xuICAgIGNvbnN0IHZhbCA9IGl0ZW0udmFsdWU7XG4gICAgY29uc3QgcmVzID0geyBfaW50ZXJuYWxfaW5kZXg6IGluZGV4LCBfaW50ZXJuYWxfdGltZTogdGltZSwgX2ludGVybmFsX3ZhbHVlOiBbdmFsLCB2YWwsIHZhbCwgdmFsXSwgX2ludGVybmFsX29yaWdpbmFsVGltZTogb3JpZ2luYWxUaW1lIH07XG4gICAgaWYgKGl0ZW0udG9wTGluZUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLl9pbnRlcm5hbF90b3BMaW5lQ29sb3IgPSBpdGVtLnRvcExpbmVDb2xvcjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uYm90dG9tTGluZUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLl9pbnRlcm5hbF9ib3R0b21MaW5lQ29sb3IgPSBpdGVtLmJvdHRvbUxpbmVDb2xvcjtcbiAgICB9XG4gICAgaWYgKGl0ZW0udG9wRmlsbENvbG9yMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcy5faW50ZXJuYWxfdG9wRmlsbENvbG9yMSA9IGl0ZW0udG9wRmlsbENvbG9yMTtcbiAgICB9XG4gICAgaWYgKGl0ZW0udG9wRmlsbENvbG9yMiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcy5faW50ZXJuYWxfdG9wRmlsbENvbG9yMiA9IGl0ZW0udG9wRmlsbENvbG9yMjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uYm90dG9tRmlsbENvbG9yMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcy5faW50ZXJuYWxfYm90dG9tRmlsbENvbG9yMSA9IGl0ZW0uYm90dG9tRmlsbENvbG9yMTtcbiAgICB9XG4gICAgaWYgKGl0ZW0uYm90dG9tRmlsbENvbG9yMiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcy5faW50ZXJuYWxfYm90dG9tRmlsbENvbG9yMiA9IGl0ZW0uYm90dG9tRmlsbENvbG9yMjtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGdldEJhclNlcmllc1Bsb3RSb3codGltZSwgaW5kZXgsIGl0ZW0sIG9yaWdpbmFsVGltZSkge1xuICAgIGNvbnN0IHJlcyA9IHsgX2ludGVybmFsX2luZGV4OiBpbmRleCwgX2ludGVybmFsX3RpbWU6IHRpbWUsIF9pbnRlcm5hbF92YWx1ZTogW2l0ZW0ub3BlbiwgaXRlbS5oaWdoLCBpdGVtLmxvdywgaXRlbS5jbG9zZV0sIF9pbnRlcm5hbF9vcmlnaW5hbFRpbWU6IG9yaWdpbmFsVGltZSB9O1xuICAgIGlmIChpdGVtLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLl9pbnRlcm5hbF9jb2xvciA9IGl0ZW0uY29sb3I7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBnZXRDYW5kbGVzdGlja1Nlcmllc1Bsb3RSb3codGltZSwgaW5kZXgsIGl0ZW0sIG9yaWdpbmFsVGltZSkge1xuICAgIGNvbnN0IHJlcyA9IHsgX2ludGVybmFsX2luZGV4OiBpbmRleCwgX2ludGVybmFsX3RpbWU6IHRpbWUsIF9pbnRlcm5hbF92YWx1ZTogW2l0ZW0ub3BlbiwgaXRlbS5oaWdoLCBpdGVtLmxvdywgaXRlbS5jbG9zZV0sIF9pbnRlcm5hbF9vcmlnaW5hbFRpbWU6IG9yaWdpbmFsVGltZSB9O1xuICAgIGlmIChpdGVtLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLl9pbnRlcm5hbF9jb2xvciA9IGl0ZW0uY29sb3I7XG4gICAgfVxuICAgIGlmIChpdGVtLmJvcmRlckNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLl9pbnRlcm5hbF9ib3JkZXJDb2xvciA9IGl0ZW0uYm9yZGVyQ29sb3I7XG4gICAgfVxuICAgIGlmIChpdGVtLndpY2tDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcy5faW50ZXJuYWxfd2lja0NvbG9yID0gaXRlbS53aWNrQ29sb3I7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBnZXRDdXN0b21TZXJpZXNQbG90Um93KHRpbWUsIGluZGV4LCBpdGVtLCBvcmlnaW5hbFRpbWUsIGRhdGFUb1Bsb3RSb3cpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBlbnN1cmVEZWZpbmVkKGRhdGFUb1Bsb3RSb3cpKGl0ZW0pO1xuICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KC4uLnZhbHVlcyk7XG4gICAgY29uc3QgbWluID0gTWF0aC5taW4oLi4udmFsdWVzKTtcbiAgICBjb25zdCBsYXN0ID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCB2YWx1ZSA9IFtsYXN0LCBtYXgsIG1pbiwgbGFzdF07XG4gICAgY29uc3QgX2EgPSBpdGVtLCB7IHRpbWU6IGV4Y2x1ZGVkVGltZSwgY29sb3IgfSA9IF9hLCBkYXRhID0gX19yZXN0KF9hLCBbXCJ0aW1lXCIsIFwiY29sb3JcIl0pO1xuICAgIHJldHVybiB7IF9pbnRlcm5hbF9pbmRleDogaW5kZXgsIF9pbnRlcm5hbF90aW1lOiB0aW1lLCBfaW50ZXJuYWxfdmFsdWU6IHZhbHVlLCBfaW50ZXJuYWxfb3JpZ2luYWxUaW1lOiBvcmlnaW5hbFRpbWUsIF9pbnRlcm5hbF9kYXRhOiBkYXRhLCBfaW50ZXJuYWxfY29sb3I6IGNvbG9yIH07XG59XG5mdW5jdGlvbiBpc1Nlcmllc1Bsb3RSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5faW50ZXJuYWxfdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHdyYXBDdXN0b21WYWx1ZXMocGxvdFJvdywgYmFyKSB7XG4gICAgaWYgKGJhci5jdXN0b21WYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwbG90Um93Ll9pbnRlcm5hbF9jdXN0b21WYWx1ZXMgPSBiYXIuY3VzdG9tVmFsdWVzO1xuICAgIH1cbiAgICByZXR1cm4gcGxvdFJvdztcbn1cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZURhdGFXaXRoQ3VzdG9tQ2hlY2soYmFyLCBjdXN0b21Jc1doaXRlc3BhY2UpIHtcbiAgICBpZiAoY3VzdG9tSXNXaGl0ZXNwYWNlKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21Jc1doaXRlc3BhY2UoYmFyKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzV2hpdGVzcGFjZURhdGEoYmFyKTtcbn1cbmZ1bmN0aW9uIHdyYXBXaGl0ZXNwYWNlRGF0YShjcmVhdGVQbG90Um93Rm4pIHtcbiAgICByZXR1cm4gKHRpbWUsIGluZGV4LCBiYXIsIG9yaWdpbmFsVGltZSwgZGF0YVRvUGxvdFJvdywgY3VzdG9tSXNXaGl0ZXNwYWNlKSA9PiB7XG4gICAgICAgIGlmIChpc1doaXRlc3BhY2VEYXRhV2l0aEN1c3RvbUNoZWNrKGJhciwgY3VzdG9tSXNXaGl0ZXNwYWNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBDdXN0b21WYWx1ZXMoeyBfaW50ZXJuYWxfdGltZTogdGltZSwgX2ludGVybmFsX2luZGV4OiBpbmRleCwgX2ludGVybmFsX29yaWdpbmFsVGltZTogb3JpZ2luYWxUaW1lIH0sIGJhcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyYXBDdXN0b21WYWx1ZXMoY3JlYXRlUGxvdFJvd0ZuKHRpbWUsIGluZGV4LCBiYXIsIG9yaWdpbmFsVGltZSwgZGF0YVRvUGxvdFJvdyksIGJhcik7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlcmllc1Bsb3RSb3dDcmVhdG9yKHNlcmllc1R5cGUpIHtcbiAgICBjb25zdCBzZXJpZXNQbG90Um93Rm5NYXAgPSB7XG4gICAgICAgIENhbmRsZXN0aWNrOiB3cmFwV2hpdGVzcGFjZURhdGEoZ2V0Q2FuZGxlc3RpY2tTZXJpZXNQbG90Um93KSxcbiAgICAgICAgQmFyOiB3cmFwV2hpdGVzcGFjZURhdGEoZ2V0QmFyU2VyaWVzUGxvdFJvdyksXG4gICAgICAgIEFyZWE6IHdyYXBXaGl0ZXNwYWNlRGF0YShnZXRBcmVhU2VyaWVzUGxvdFJvdyksXG4gICAgICAgIEJhc2VsaW5lOiB3cmFwV2hpdGVzcGFjZURhdGEoZ2V0QmFzZWxpbmVTZXJpZXNQbG90Um93KSxcbiAgICAgICAgSGlzdG9ncmFtOiB3cmFwV2hpdGVzcGFjZURhdGEoZ2V0Q29sb3JlZExpbmVCYXNlZFNlcmllc1Bsb3RSb3cpLFxuICAgICAgICBMaW5lOiB3cmFwV2hpdGVzcGFjZURhdGEoZ2V0Q29sb3JlZExpbmVCYXNlZFNlcmllc1Bsb3RSb3cpLFxuICAgICAgICBDdXN0b206IHdyYXBXaGl0ZXNwYWNlRGF0YShnZXRDdXN0b21TZXJpZXNQbG90Um93KSxcbiAgICB9O1xuICAgIHJldHVybiBzZXJpZXNQbG90Um93Rm5NYXBbc2VyaWVzVHlwZV07XG59XG5cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiX2J1aWxkLXRpbWUtY29uc3RhbnRzXCIgLz5cbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5VGltZVBvaW50RGF0YSh0aW1lUG9pbnQpIHtcbiAgICByZXR1cm4geyBfaW50ZXJuYWxfaW5kZXg6IDAsIF9pbnRlcm5hbF9tYXBwaW5nOiBuZXcgTWFwKCksIF9pbnRlcm5hbF90aW1lUG9pbnQ6IHRpbWVQb2ludCB9O1xufVxuZnVuY3Rpb24gc2VyaWVzUm93c0ZpcnN0QW5kTGFzdFRpbWUoc2VyaWVzUm93cywgYmgpIHtcbiAgICBpZiAoc2VyaWVzUm93cyA9PT0gdW5kZWZpbmVkIHx8IHNlcmllc1Jvd3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIF9pbnRlcm5hbF9maXJzdFRpbWU6IGJoLmtleShzZXJpZXNSb3dzWzBdLl9pbnRlcm5hbF90aW1lKSxcbiAgICAgICAgX2ludGVybmFsX2xhc3RUaW1lOiBiaC5rZXkoc2VyaWVzUm93c1tzZXJpZXNSb3dzLmxlbmd0aCAtIDFdLl9pbnRlcm5hbF90aW1lKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gc2VyaWVzVXBkYXRlSW5mbyhzZXJpZXNSb3dzLCBwcmV2U2VyaWVzUm93cywgYmgpIHtcbiAgICBjb25zdCBmaXJzdEFuZExhc3RUaW1lID0gc2VyaWVzUm93c0ZpcnN0QW5kTGFzdFRpbWUoc2VyaWVzUm93cywgYmgpO1xuICAgIGNvbnN0IHByZXZGaXJzdEFuZExhc3RUaW1lID0gc2VyaWVzUm93c0ZpcnN0QW5kTGFzdFRpbWUocHJldlNlcmllc1Jvd3MsIGJoKTtcbiAgICBpZiAoZmlyc3RBbmRMYXN0VGltZSAhPT0gdW5kZWZpbmVkICYmIHByZXZGaXJzdEFuZExhc3RUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9sYXN0QmFyVXBkYXRlZE9yTmV3QmFyc0FkZGVkVG9UaGVSaWdodDogZmlyc3RBbmRMYXN0VGltZS5faW50ZXJuYWxfbGFzdFRpbWUgPj0gcHJldkZpcnN0QW5kTGFzdFRpbWUuX2ludGVybmFsX2xhc3RUaW1lICYmXG4gICAgICAgICAgICAgICAgZmlyc3RBbmRMYXN0VGltZS5faW50ZXJuYWxfZmlyc3RUaW1lID49IHByZXZGaXJzdEFuZExhc3RUaW1lLl9pbnRlcm5hbF9maXJzdFRpbWUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiB0aW1lU2NhbGVQb2ludFRpbWUobWVyZ2VkUG9pbnREYXRhKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBtZXJnZWRQb2ludERhdGEuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHYuX2ludGVybmFsX29yaWdpbmFsVGltZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBlbnN1cmVEZWZpbmVkKHJlc3VsdCk7XG59XG5mdW5jdGlvbiBzYXZlT3JpZ2luYWxUaW1lKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5faW50ZXJuYWxfb3JpZ2luYWxUaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGF0YS5faW50ZXJuYWxfb3JpZ2luYWxUaW1lID0gZGF0YS50aW1lO1xuICAgIH1cbn1cbmNsYXNzIERhdGFMYXllciB7XG4gICAgY29uc3RydWN0b3IoaG9yelNjYWxlQmVoYXZpb3IpIHtcbiAgICAgICAgLy8gbm90ZSB0aGF0IF9wb2ludERhdGFCeVRpbWVQb2ludCBhbmQgX3Nlcmllc1Jvd3NCeVNlcmllcyBzaGFyZXMgVEhFIFNBTUUgb2JqZWN0cyBpbiB0aGVpciB2YWx1ZXMgYmV0d2VlbiBlYWNoIG90aGVyXG4gICAgICAgIC8vIGl0J3MganVzdCBkaWZmZXJlbnQga2luZCBvZiBtYXBzIHRvIG1ha2UgdXNhZ2VzL3BlcmYgYmV0dGVyXG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3BvaW50RGF0YUJ5VGltZVBvaW50ID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXNSb3dzQnlTZXJpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc0xhc3RUaW1lUG9pbnQgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIHRoaXMgaXMga2luZCBvZiBcImRlc3RcIiB2YWx1ZXMgKGluIG9wcG9zaXRlIHRvIFwic291cmNlXCIgb25lcykgLSB3ZSBkb24ndCBuZWVkIHRvIG1vZGlmeSBpdCBtYW51YWxseSwgdGhlIG9ubHkgYnkgY2FsbGluZyBfdXBkYXRlVGltZVNjYWxlUG9pbnRzIG9yIHVwZGF0ZVNlcmllc0RhdGEgbWV0aG9kc1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zb3J0ZWRUaW1lUG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yID0gaG9yelNjYWxlQmVoYXZpb3I7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wb2ludERhdGFCeVRpbWVQb2ludC5jbGVhcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXNSb3dzQnlTZXJpZXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzTGFzdFRpbWVQb2ludC5jbGVhcigpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zb3J0ZWRUaW1lUG9pbnRzID0gW107XG4gICAgfVxuICAgIF9pbnRlcm5hbF9zZXRTZXJpZXNEYXRhKHNlcmllcywgZGF0YSkge1xuICAgICAgICBsZXQgbmVlZENsZWFudXBQb2ludHMgPSB0aGlzLl9wcml2YXRlX19wb2ludERhdGFCeVRpbWVQb2ludC5zaXplICE9PSAwO1xuICAgICAgICBsZXQgaXNUaW1lU2NhbGVBZmZlY3RlZCA9IGZhbHNlO1xuICAgICAgICAvLyBzYXZlIHByZXZpb3VzIHNlcmllcyByb3dzIGRhdGEgYmVmb3JlIGl0J3MgcmVwbGFjZWQgaW5zaWRlIHRoaXMuX3NldFJvd3NUb1Nlcmllc1xuICAgICAgICBjb25zdCBwcmV2U2VyaWVzUm93cyA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllc1Jvd3NCeVNlcmllcy5nZXQoc2VyaWVzKTtcbiAgICAgICAgaWYgKHByZXZTZXJpZXNSb3dzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19zZXJpZXNSb3dzQnlTZXJpZXMuc2l6ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIG5lZWRDbGVhbnVwUG9pbnRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNUaW1lU2NhbGVBZmZlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gcGVyZiBvcHRpbWl6YXRpb24gLSBpZiB0aGVyZSBpcyBvbmx5IDEgc2VyaWVzLCB0aGVuIHdlIGNhbiBqdXN0IGNsZWFyIGFuZCBmaWxsIGV2ZXJ5dGhpbmcgZnJvbSBzY3JhdGNoXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcG9pbnREYXRhQnlUaW1lUG9pbnQuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHBlcmYgb3B0aW1pemF0aW9uIC0gYWN0dWFsbHkgd2UgaGF2ZSB0byB1c2UgdGhpcy5fcG9pbnREYXRhQnlUaW1lUG9pbnQgZm9yIGdvaW5nIHRocm91Z2ggaGVyZVxuICAgICAgICAgICAgICAgIC8vIGJ1dCBhcyBzb29uIGFzIHRoaXMuX3NvcnRlZFRpbWVQb2ludHMgaXMganVzdCBhIGRpZmZlcmVudCBmb3JtIG9mIF9wb2ludERhdGFCeVRpbWVQb2ludCB3ZSBjYW4gdXNlIGl0IGFzIHdlbGxcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBvaW50IG9mIHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50LnBvaW50RGF0YS5faW50ZXJuYWxfbWFwcGluZy5kZWxldGUoc2VyaWVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNUaW1lU2NhbGVBZmZlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlcmllc1Jvd3MgPSBbXTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFRpbWVzID0gZGF0YS5tYXAoKGQpID0+IGQudGltZSk7XG4gICAgICAgICAgICBjb25zdCB0aW1lQ29udmVydGVyID0gdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IuY3JlYXRlQ29udmVydGVyVG9JbnRlcm5hbE9iaihkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVBsb3RSb3cgPSBnZXRTZXJpZXNQbG90Um93Q3JlYXRvcihzZXJpZXMuX2ludGVybmFsX3Nlcmllc1R5cGUoKSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhVG9QbG90Um93ID0gc2VyaWVzLl9pbnRlcm5hbF9jdXN0b21TZXJpZXNQbG90VmFsdWVzQnVpbGRlcigpO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tV2hpdGVzcGFjZUNoZWNrZXIgPSBzZXJpZXMuX2ludGVybmFsX2N1c3RvbVNlcmllc1doaXRlc3BhY2VDaGVjaygpO1xuICAgICAgICAgICAgc2VyaWVzUm93cyA9IGRhdGEubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSB0aW1lQ29udmVydGVyKGl0ZW0udGltZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaG9yekl0ZW1LZXkgPSB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkodGltZSk7XG4gICAgICAgICAgICAgICAgbGV0IHRpbWVQb2ludERhdGEgPSB0aGlzLl9wcml2YXRlX19wb2ludERhdGFCeVRpbWVQb2ludC5nZXQoaG9yekl0ZW1LZXkpO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lUG9pbnREYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGluZGV4ZXMgd2lsbCBiZSBzeW5jIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVQb2ludERhdGEgPSBjcmVhdGVFbXB0eVRpbWVQb2ludERhdGEodGltZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BvaW50RGF0YUJ5VGltZVBvaW50LnNldChob3J6SXRlbUtleSwgdGltZVBvaW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlzVGltZVNjYWxlQWZmZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSBjcmVhdGVQbG90Um93KHRpbWUsIHRpbWVQb2ludERhdGEuX2ludGVybmFsX2luZGV4LCBpdGVtLCBvcmlnaW5hbFRpbWVzW2luZGV4XSwgZGF0YVRvUGxvdFJvdywgY3VzdG9tV2hpdGVzcGFjZUNoZWNrZXIpO1xuICAgICAgICAgICAgICAgIHRpbWVQb2ludERhdGEuX2ludGVybmFsX21hcHBpbmcuc2V0KHNlcmllcywgcm93KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZWRDbGVhbnVwUG9pbnRzKSB7XG4gICAgICAgICAgICAvLyB3ZSBkZWxldGVkIHRoZSBvbGQgZGF0YSBmcm9tIG1hcHBpbmcgYW5kIGFkZGVkIHRoZSBuZXcgb25lc1xuICAgICAgICAgICAgLy8gc28gdGhlcmUgbWlnaHQgYmUgZW1wdHkgcG9pbnRzIG5vdywgbGV0J3MgcmVtb3ZlIHRoZW0gZmlyc3RcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsZWFudXBQb2ludHNEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2V0Um93c1RvU2VyaWVzKHNlcmllcywgc2VyaWVzUm93cyk7XG4gICAgICAgIGxldCBmaXJzdENoYW5nZWRQb2ludEluZGV4ID0gLTE7XG4gICAgICAgIGlmIChpc1RpbWVTY2FsZUFmZmVjdGVkKSB7XG4gICAgICAgICAgICAvLyB0aGVuIGdlbmVyYXRlIHRoZSB0aW1lIHNjYWxlIHBvaW50c1xuICAgICAgICAgICAgLy8gdGltZVdlaWdodCB3aWxsIGJlIHVwZGF0ZXMgaW4gX3VwZGF0ZVRpbWVTY2FsZVBvaW50cyBsYXRlclxuICAgICAgICAgICAgY29uc3QgbmV3VGltZVNjYWxlUG9pbnRzID0gW107XG4gICAgICAgICAgICB0aGlzLl9wcml2YXRlX19wb2ludERhdGFCeVRpbWVQb2ludC5mb3JFYWNoKChwb2ludERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBuZXdUaW1lU2NhbGVQb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVXZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IHBvaW50RGF0YS5faW50ZXJuYWxfdGltZVBvaW50LFxuICAgICAgICAgICAgICAgICAgICBwb2ludERhdGEsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGltZTogdGltZVNjYWxlUG9pbnRUaW1lKHBvaW50RGF0YS5faW50ZXJuYWxfbWFwcGluZyksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ld1RpbWVTY2FsZVBvaW50cy5zb3J0KCh0MSwgdDIpID0+IHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmtleSh0MS50aW1lKSAtIHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmtleSh0Mi50aW1lKSk7XG4gICAgICAgICAgICBmaXJzdENoYW5nZWRQb2ludEluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fcmVwbGFjZVRpbWVTY2FsZVBvaW50cyhuZXdUaW1lU2NhbGVQb2ludHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19nZXRVcGRhdGVSZXNwb25zZShzZXJpZXMsIGZpcnN0Q2hhbmdlZFBvaW50SW5kZXgsIHNlcmllc1VwZGF0ZUluZm8odGhpcy5fcHJpdmF0ZV9fc2VyaWVzUm93c0J5U2VyaWVzLmdldChzZXJpZXMpLCBwcmV2U2VyaWVzUm93cywgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3JlbW92ZVNlcmllcyhzZXJpZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX3NldFNlcmllc0RhdGEoc2VyaWVzLCBbXSk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF91cGRhdGVTZXJpZXNEYXRhKHNlcmllcywgZGF0YSkge1xuICAgICAgICBjb25zdCBleHRlbmRlZERhdGEgPSBkYXRhO1xuICAgICAgICBzYXZlT3JpZ2luYWxUaW1lKGV4dGVuZGVkRGF0YSk7XG4gICAgICAgIC8vIGNvbnZlcnRTdHJpbmdUb0J1c2luZXNzRGF5KGRhdGEpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5wcmVwcm9jZXNzRGF0YShkYXRhKTtcbiAgICAgICAgY29uc3QgdGltZUNvbnZlcnRlciA9IHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmNyZWF0ZUNvbnZlcnRlclRvSW50ZXJuYWxPYmooW2RhdGFdKTtcbiAgICAgICAgY29uc3QgdGltZSA9IHRpbWVDb252ZXJ0ZXIoZGF0YS50aW1lKTtcbiAgICAgICAgY29uc3QgbGFzdFNlcmllc1RpbWUgPSB0aGlzLl9wcml2YXRlX19zZXJpZXNMYXN0VGltZVBvaW50LmdldChzZXJpZXMpO1xuICAgICAgICBpZiAobGFzdFNlcmllc1RpbWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkodGltZSkgPCB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkobGFzdFNlcmllc1RpbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB1cGRhdGUgb2xkZXN0IGRhdGEsIGxhc3QgdGltZT0ke2xhc3RTZXJpZXNUaW1lfSwgbmV3IHRpbWU9JHt0aW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwb2ludERhdGFBdFRpbWUgPSB0aGlzLl9wcml2YXRlX19wb2ludERhdGFCeVRpbWVQb2ludC5nZXQodGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3Iua2V5KHRpbWUpKTtcbiAgICAgICAgLy8gaWYgbm8gcG9pbnQgZGF0YSBmb3VuZCBmb3IgdGhlIG5ldyBkYXRhIGl0ZW1cbiAgICAgICAgLy8gdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gdXBkYXRlIHNjYWxlXG4gICAgICAgIGNvbnN0IGFmZmVjdHNUaW1lU2NhbGUgPSBwb2ludERhdGFBdFRpbWUgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHBvaW50RGF0YUF0VGltZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0aGUgaW5kZXhlcyB3aWxsIGJlIHN5bmMgbGF0ZXJcbiAgICAgICAgICAgIHBvaW50RGF0YUF0VGltZSA9IGNyZWF0ZUVtcHR5VGltZVBvaW50RGF0YSh0aW1lKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BvaW50RGF0YUJ5VGltZVBvaW50LnNldCh0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkodGltZSksIHBvaW50RGF0YUF0VGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3JlYXRlUGxvdFJvdyA9IGdldFNlcmllc1Bsb3RSb3dDcmVhdG9yKHNlcmllcy5faW50ZXJuYWxfc2VyaWVzVHlwZSgpKTtcbiAgICAgICAgY29uc3QgZGF0YVRvUGxvdFJvdyA9IHNlcmllcy5faW50ZXJuYWxfY3VzdG9tU2VyaWVzUGxvdFZhbHVlc0J1aWxkZXIoKTtcbiAgICAgICAgY29uc3QgY3VzdG9tV2hpdGVzcGFjZUNoZWNrZXIgPSBzZXJpZXMuX2ludGVybmFsX2N1c3RvbVNlcmllc1doaXRlc3BhY2VDaGVjaygpO1xuICAgICAgICBjb25zdCBwbG90Um93ID0gY3JlYXRlUGxvdFJvdyh0aW1lLCBwb2ludERhdGFBdFRpbWUuX2ludGVybmFsX2luZGV4LCBkYXRhLCBleHRlbmRlZERhdGEuX2ludGVybmFsX29yaWdpbmFsVGltZSwgZGF0YVRvUGxvdFJvdywgY3VzdG9tV2hpdGVzcGFjZUNoZWNrZXIpO1xuICAgICAgICBwb2ludERhdGFBdFRpbWUuX2ludGVybmFsX21hcHBpbmcuc2V0KHNlcmllcywgcGxvdFJvdyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3VwZGF0ZUxhc3RTZXJpZXNSb3coc2VyaWVzLCBwbG90Um93KTtcbiAgICAgICAgY29uc3QgaW5mbyA9IHsgX2ludGVybmFsX2xhc3RCYXJVcGRhdGVkT3JOZXdCYXJzQWRkZWRUb1RoZVJpZ2h0OiBpc1Nlcmllc1Bsb3RSb3cocGxvdFJvdykgfTtcbiAgICAgICAgLy8gaWYgcG9pbnQgYWxyZWFkeSBleGlzdCBvbiB0aGUgdGltZSBzY2FsZSAtIHdlIGRvbid0IG5lZWQgdG8gbWFrZSBhIGZ1bGwgdXBkYXRlIGFuZCBqdXN0IG1ha2UgYW4gaW5jcmVtZW50YWwgb25lXG4gICAgICAgIGlmICghYWZmZWN0c1RpbWVTY2FsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2dldFVwZGF0ZVJlc3BvbnNlKHNlcmllcywgLTEsIGluZm8pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld1BvaW50ID0ge1xuICAgICAgICAgICAgdGltZVdlaWdodDogMCxcbiAgICAgICAgICAgIHRpbWU6IHBvaW50RGF0YUF0VGltZS5faW50ZXJuYWxfdGltZVBvaW50LFxuICAgICAgICAgICAgcG9pbnREYXRhOiBwb2ludERhdGFBdFRpbWUsXG4gICAgICAgICAgICBvcmlnaW5hbFRpbWU6IHRpbWVTY2FsZVBvaW50VGltZShwb2ludERhdGFBdFRpbWUuX2ludGVybmFsX21hcHBpbmcpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpbnNlcnRJbmRleCA9IGxvd2VyQm91bmQodGhpcy5fcHJpdmF0ZV9fc29ydGVkVGltZVBvaW50cywgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3Iua2V5KG5ld1BvaW50LnRpbWUpLCAoYSwgYikgPT4gdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3Iua2V5KGEudGltZSkgPCBiKTtcbiAgICAgICAgLy8geWVzLCBJIGtub3cgdGhhdCB0aGlzIGFycmF5IGlzIHJlYWRvbmx5IGFuZCB0aGlzIGNoYW5nZSBpcyBpbnRlbmRlZCB0byBtYWtlIGl0IHBlcmZvcm1hdGl2ZVxuICAgICAgICAvLyB3ZSBtYXJrZWQgX3NvcnRlZFRpbWVQb2ludHMgYXJyYXkgYXMgcmVhZG9ubHkgdG8gYXZvaWQgbW9kaWZ5aW5nIHRoaXMgYXJyYXkgYW55d2hlcmUgZWxzZVxuICAgICAgICAvLyBidXQgdGhpcyBwbGFjZSBpcyBleGNlcHRpb25hbCBjYXNlIGR1ZSBwZXJmb3JtYW5jZSByZWFzb25zLCBzb3JyeVxuICAgICAgICB0aGlzLl9wcml2YXRlX19zb3J0ZWRUaW1lUG9pbnRzLnNwbGljZShpbnNlcnRJbmRleCwgMCwgbmV3UG9pbnQpO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IGluc2VydEluZGV4OyBpbmRleCA8IHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgICBhc3NpZ25JbmRleFRvUG9pbnREYXRhKHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHNbaW5kZXhdLnBvaW50RGF0YSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmZpbGxXZWlnaHRzRm9yUG9pbnRzKHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHMsIGluc2VydEluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2dldFVwZGF0ZVJlc3BvbnNlKHNlcmllcywgaW5zZXJ0SW5kZXgsIGluZm8pO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fdXBkYXRlTGFzdFNlcmllc1JvdyhzZXJpZXMsIHBsb3RSb3cpIHtcbiAgICAgICAgbGV0IHNlcmllc0RhdGEgPSB0aGlzLl9wcml2YXRlX19zZXJpZXNSb3dzQnlTZXJpZXMuZ2V0KHNlcmllcyk7XG4gICAgICAgIGlmIChzZXJpZXNEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlcmllc0RhdGEgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc1Jvd3NCeVNlcmllcy5zZXQoc2VyaWVzLCBzZXJpZXNEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0U2VyaWVzUm93ID0gc2VyaWVzRGF0YS5sZW5ndGggIT09IDAgPyBzZXJpZXNEYXRhW3Nlcmllc0RhdGEubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgICAgICBpZiAobGFzdFNlcmllc1JvdyA9PT0gbnVsbCB8fCB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkocGxvdFJvdy5faW50ZXJuYWxfdGltZSkgPiB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkobGFzdFNlcmllc1Jvdy5faW50ZXJuYWxfdGltZSkpIHtcbiAgICAgICAgICAgIGlmIChpc1Nlcmllc1Bsb3RSb3cocGxvdFJvdykpIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNEYXRhLnB1c2gocGxvdFJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNTZXJpZXNQbG90Um93KHBsb3RSb3cpKSB7XG4gICAgICAgICAgICAgICAgc2VyaWVzRGF0YVtzZXJpZXNEYXRhLmxlbmd0aCAtIDFdID0gcGxvdFJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlcmllc0RhdGEuc3BsaWNlKC0xLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXNMYXN0VGltZVBvaW50LnNldChzZXJpZXMsIHBsb3RSb3cuX2ludGVybmFsX3RpbWUpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fc2V0Um93c1RvU2VyaWVzKHNlcmllcywgc2VyaWVzUm93cykge1xuICAgICAgICBpZiAoc2VyaWVzUm93cy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc1Jvd3NCeVNlcmllcy5zZXQoc2VyaWVzLCBzZXJpZXNSb3dzLmZpbHRlcihpc1Nlcmllc1Bsb3RSb3cpKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc0xhc3RUaW1lUG9pbnQuc2V0KHNlcmllcywgc2VyaWVzUm93c1tzZXJpZXNSb3dzLmxlbmd0aCAtIDFdLl9pbnRlcm5hbF90aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc1Jvd3NCeVNlcmllcy5kZWxldGUoc2VyaWVzKTtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc0xhc3RUaW1lUG9pbnQuZGVsZXRlKHNlcmllcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX2NsZWFudXBQb2ludHNEYXRhKCkge1xuICAgICAgICAvLyBsZXQncyB0cmVhdCBhbGwgY3VycmVudCBwb2ludHMgYXMgXCJwb3RlbnRpYWxseSByZW1vdmVkXCJcbiAgICAgICAgLy8gd2UgY291bGQgY3JlYXRlIGFuIGFycmF5IHdpdGggYWN0dWFsbHkgcG90ZW50aWFsbHkgcmVtb3ZlZCBwb2ludHNcbiAgICAgICAgLy8gYnV0IG1vc3QgbGlrZWx5IHRoaXMgYXJyYXkgd2lsbCBiZSBzaW1pbGFyIHRvIF9zb3J0ZWRUaW1lUG9pbnRzIHNvIGxldCdzIGF2b2lkIHVzaW5nIGFkZGl0aW9uYWwgbWVtb3J5XG4gICAgICAgIC8vIG5vdGUgdGhhdCB3ZSBjYW4gdXNlIF9zb3J0ZWRUaW1lUG9pbnRzIGhlcmUgc2luY2UgYSBwb2ludCBtaWdodCBiZSByZW1vdmVkIG9ubHkgaXQgd2FzIGhlcmUgcHJldmlvdXNseVxuICAgICAgICBmb3IgKGNvbnN0IHBvaW50IG9mIHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHMpIHtcbiAgICAgICAgICAgIGlmIChwb2ludC5wb2ludERhdGEuX2ludGVybmFsX21hcHBpbmcuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3BvaW50RGF0YUJ5VGltZVBvaW50LmRlbGV0ZSh0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5rZXkocG9pbnQudGltZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgbmV3IHRpbWUgc2NhbGUgYW5kIG1ha2UgaW5kZXhlcyB2YWxpZCBmb3IgYWxsIHNlcmllc1xuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjaGFuZ2VkIHBvaW50IG9yIGAtMWAgaWYgdGhlcmUgaXMgbm8gY2hhbmdlLlxuICAgICAqL1xuICAgIF9wcml2YXRlX19yZXBsYWNlVGltZVNjYWxlUG9pbnRzKG5ld1RpbWVQb2ludHMpIHtcbiAgICAgICAgbGV0IGZpcnN0Q2hhbmdlZFBvaW50SW5kZXggPSAtMTtcbiAgICAgICAgLy8gc2VhcmNoIHRoZSBmaXJzdCBkaWZmZXJlbnQgcG9pbnQgYW5kIFwic3luY2luZ1wiIHRpbWUgd2VpZ2h0IGJ5IHRoZSB3YXlcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHMubGVuZ3RoICYmIGluZGV4IDwgbmV3VGltZVBvaW50cy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZFBvaW50ID0gdGhpcy5fcHJpdmF0ZV9fc29ydGVkVGltZVBvaW50c1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCBuZXdQb2ludCA9IG5ld1RpbWVQb2ludHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmtleShvbGRQb2ludC50aW1lKSAhPT0gdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3Iua2V5KG5ld1BvaW50LnRpbWUpKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmUtYXNzaWduIHBvaW50J3MgdGltZSB3ZWlnaHQgZm9yIHBvaW50cyBpZiB0aW1lIGlzIHRoZSBzYW1lIChhbmQgYWxsIHByaW9yIHRpbWVzIHdhcyB0aGUgc2FtZSlcbiAgICAgICAgICAgIG5ld1BvaW50LnRpbWVXZWlnaHQgPSBvbGRQb2ludC50aW1lV2VpZ2h0O1xuICAgICAgICAgICAgYXNzaWduSW5kZXhUb1BvaW50RGF0YShuZXdQb2ludC5wb2ludERhdGEsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCA9PT0gLTEgJiYgdGhpcy5fcHJpdmF0ZV9fc29ydGVkVGltZVBvaW50cy5sZW5ndGggIT09IG5ld1RpbWVQb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyB0aGUgY29tbW9uIHBhcnQgb2YgdGhlIHByZXYgYW5kIHRoZSBuZXcgcG9pbnRzIGFyZSB0aGUgc2FtZVxuICAgICAgICAgICAgLy8gc28gdGhlIGZpcnN0IGNoYW5nZWQgcG9pbnQgaXMgdGhlIG5leHQgYWZ0ZXIgdGhlIGNvbW1vbiBwYXJ0XG4gICAgICAgICAgICBmaXJzdENoYW5nZWRQb2ludEluZGV4ID0gTWF0aC5taW4odGhpcy5fcHJpdmF0ZV9fc29ydGVkVGltZVBvaW50cy5sZW5ndGgsIG5ld1RpbWVQb2ludHMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGlmIG5vIHRpbWUgc2NhbGUgY2hhbmdlZCwgdGhlbiBkbyBub3RoaW5nXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGltZSBzY2FsZSBwb2ludHMgYXJlIGNoYW5nZWQgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gbWFrZSBmdWxsIHVwZGF0ZSB0byBhbGwgc2VyaWVzICh3aXRoIGNsZWFyaW5nIHBvaW50cylcbiAgICAgICAgLy8gYnV0IGZpcnN0IHdlIG5lZWQgdG8gc3luY2hyb25pemUgaW5kZXhlcyBhbmQgcmUtZmlsbCB0aW1lIHdlaWdodHNcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBmaXJzdENoYW5nZWRQb2ludEluZGV4OyBpbmRleCA8IG5ld1RpbWVQb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgICBhc3NpZ25JbmRleFRvUG9pbnREYXRhKG5ld1RpbWVQb2ludHNbaW5kZXhdLnBvaW50RGF0YSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlLWZpbGwgdGltZSB3ZWlnaHRzIGZvciBwb2ludCBhZnRlciB0aGUgZmlyc3QgY2hhbmdlZCBvbmVcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IuZmlsbFdlaWdodHNGb3JQb2ludHMobmV3VGltZVBvaW50cywgZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHMgPSBuZXdUaW1lUG9pbnRzO1xuICAgICAgICByZXR1cm4gZmlyc3RDaGFuZ2VkUG9pbnRJbmRleDtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2dldEJhc2VJbmRleCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX3Nlcmllc1Jvd3NCeVNlcmllcy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIG5vIGRhdGEgdGhlbiAncmVzZXQnIHRoZSBiYXNlIGluZGV4IHRvIG51bGxcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBiYXNlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXNSb3dzQnlTZXJpZXMuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYmFzZUluZGV4ID0gTWF0aC5tYXgoYmFzZUluZGV4LCBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uX2ludGVybmFsX2luZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBiYXNlSW5kZXg7XG4gICAgfVxuICAgIF9wcml2YXRlX19nZXRVcGRhdGVSZXNwb25zZSh1cGRhdGVkU2VyaWVzLCBmaXJzdENoYW5nZWRQb2ludEluZGV4LCBpbmZvKSB7XG4gICAgICAgIGNvbnN0IGRhdGFVcGRhdGVSZXNwb25zZSA9IHtcbiAgICAgICAgICAgIF9pbnRlcm5hbF9zZXJpZXM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIF9pbnRlcm5hbF90aW1lU2NhbGU6IHtcbiAgICAgICAgICAgICAgICBfaW50ZXJuYWxfYmFzZUluZGV4OiB0aGlzLl9wcml2YXRlX19nZXRCYXNlSW5kZXgoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChmaXJzdENoYW5nZWRQb2ludEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gVE9ETzogaXQncyBwb3NzaWJsZSB0byBtYWtlIHBlcmYgaW1wcm92ZW1lbnRzIGJ5IGNoZWNraW5nIHdoYXQgc2VyaWVzIGhhcyBkYXRhIGFmdGVyIGZpcnN0Q2hhbmdlZFBvaW50SW5kZXhcbiAgICAgICAgICAgIC8vIGJ1dCBsZXQncyBza2lwIGZvciBub3dcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc1Jvd3NCeVNlcmllcy5mb3JFYWNoKChkYXRhLCBzKSA9PiB7XG4gICAgICAgICAgICAgICAgZGF0YVVwZGF0ZVJlc3BvbnNlLl9pbnRlcm5hbF9zZXJpZXMuc2V0KHMsIHtcbiAgICAgICAgICAgICAgICAgICAgX2ludGVybmFsX2RhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIF9pbnRlcm5hbF9pbmZvOiBzID09PSB1cGRhdGVkU2VyaWVzID8gaW5mbyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaWYgdGhlIHNlcmllcyBkYXRhIHdhcyBzZXQgdG8gW10gaXQgd2lsbCBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGZyb20gX3Nlcmllc1Jvd0J5U2VyaWVzXG4gICAgICAgICAgICAvLyBtZWFuaW5nIHRoZSBmb3JFYWNoIGFib3ZlIHdvbid0IGFkZCB0aGUgc2VyaWVzIHRvIHRoZSBkYXRhIHVwZGF0ZSByZXNwb25zZVxuICAgICAgICAgICAgLy8gc28gd2UgaGFuZGxlIHRoYXQgY2FzZSBoZXJlXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3ByaXZhdGVfX3Nlcmllc1Jvd3NCeVNlcmllcy5oYXModXBkYXRlZFNlcmllcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhVXBkYXRlUmVzcG9uc2UuX2ludGVybmFsX3Nlcmllcy5zZXQodXBkYXRlZFNlcmllcywgeyBfaW50ZXJuYWxfZGF0YTogW10sIF9pbnRlcm5hbF9pbmZvOiBpbmZvIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YVVwZGF0ZVJlc3BvbnNlLl9pbnRlcm5hbF90aW1lU2NhbGUuX2ludGVybmFsX3BvaW50cyA9IHRoaXMuX3ByaXZhdGVfX3NvcnRlZFRpbWVQb2ludHM7XG4gICAgICAgICAgICBkYXRhVXBkYXRlUmVzcG9uc2UuX2ludGVybmFsX3RpbWVTY2FsZS5faW50ZXJuYWxfZmlyc3RDaGFuZ2VkUG9pbnRJbmRleCA9IGZpcnN0Q2hhbmdlZFBvaW50SW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzZXJpZXNEYXRhID0gdGhpcy5fcHJpdmF0ZV9fc2VyaWVzUm93c0J5U2VyaWVzLmdldCh1cGRhdGVkU2VyaWVzKTtcbiAgICAgICAgICAgIC8vIGlmIG5vIHNlcmllc0RhdGEgZm91bmQgdGhhdCBtZWFucyB0aGF0IHdlIGp1c3QgcmVtb3ZlZCB0aGUgc2VyaWVzXG4gICAgICAgICAgICBkYXRhVXBkYXRlUmVzcG9uc2UuX2ludGVybmFsX3Nlcmllcy5zZXQodXBkYXRlZFNlcmllcywgeyBfaW50ZXJuYWxfZGF0YTogc2VyaWVzRGF0YSB8fCBbXSwgX2ludGVybmFsX2luZm86IGluZm8gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGFVcGRhdGVSZXNwb25zZTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NpZ25JbmRleFRvUG9pbnREYXRhKHBvaW50RGF0YSwgaW5kZXgpIHtcbiAgICAvLyBmaXJzdCwgbmV2ZXJ0aGVsZXNzIHVwZGF0ZSBpbmRleCBvZiBwb2ludCBkYXRhIChcIm1ha2UgaXQgdmFsaWRcIilcbiAgICBwb2ludERhdGEuX2ludGVybmFsX2luZGV4ID0gaW5kZXg7XG4gICAgLy8gYW5kIHRoZW4gd2UgbmVlZCB0byBzeW5jIGluZGV4ZXMgZm9yIGFsbCBzZXJpZXNcbiAgICBwb2ludERhdGEuX2ludGVybmFsX21hcHBpbmcuZm9yRWFjaCgoc2VyaWVzUm93KSA9PiB7XG4gICAgICAgIHNlcmllc1Jvdy5faW50ZXJuYWxfaW5kZXggPSBpbmRleDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2luZ2xlVmFsdWVEYXRhKHBsb3RSb3cpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICB2YWx1ZTogcGxvdFJvdy5faW50ZXJuYWxfdmFsdWVbMyAvKiBQbG90Um93VmFsdWVJbmRleC5DbG9zZSAqL10sXG4gICAgICAgIHRpbWU6IHBsb3RSb3cuX2ludGVybmFsX29yaWdpbmFsVGltZSxcbiAgICB9O1xuICAgIGlmIChwbG90Um93Ll9pbnRlcm5hbF9jdXN0b21WYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkYXRhLmN1c3RvbVZhbHVlcyA9IHBsb3RSb3cuX2ludGVybmFsX2N1c3RvbVZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBsaW5lRGF0YShwbG90Um93KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc2luZ2xlVmFsdWVEYXRhKHBsb3RSb3cpO1xuICAgIGlmIChwbG90Um93Ll9pbnRlcm5hbF9jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC5jb2xvciA9IHBsb3RSb3cuX2ludGVybmFsX2NvbG9yO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gYXJlYURhdGEocGxvdFJvdykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHNpbmdsZVZhbHVlRGF0YShwbG90Um93KTtcbiAgICBpZiAocGxvdFJvdy5faW50ZXJuYWxfbGluZUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LmxpbmVDb2xvciA9IHBsb3RSb3cuX2ludGVybmFsX2xpbmVDb2xvcjtcbiAgICB9XG4gICAgaWYgKHBsb3RSb3cuX2ludGVybmFsX3RvcENvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnRvcENvbG9yID0gcGxvdFJvdy5faW50ZXJuYWxfdG9wQ29sb3I7XG4gICAgfVxuICAgIGlmIChwbG90Um93Ll9pbnRlcm5hbF9ib3R0b21Db2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC5ib3R0b21Db2xvciA9IHBsb3RSb3cuX2ludGVybmFsX2JvdHRvbUNvbG9yO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gYmFzZWxpbmVEYXRhKHBsb3RSb3cpIHtcbiAgICBjb25zdCByZXN1bHQgPSBzaW5nbGVWYWx1ZURhdGEocGxvdFJvdyk7XG4gICAgaWYgKHBsb3RSb3cuX2ludGVybmFsX3RvcExpbmVDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC50b3BMaW5lQ29sb3IgPSBwbG90Um93Ll9pbnRlcm5hbF90b3BMaW5lQ29sb3I7XG4gICAgfVxuICAgIGlmIChwbG90Um93Ll9pbnRlcm5hbF9ib3R0b21MaW5lQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQuYm90dG9tTGluZUNvbG9yID0gcGxvdFJvdy5faW50ZXJuYWxfYm90dG9tTGluZUNvbG9yO1xuICAgIH1cbiAgICBpZiAocGxvdFJvdy5faW50ZXJuYWxfdG9wRmlsbENvbG9yMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC50b3BGaWxsQ29sb3IxID0gcGxvdFJvdy5faW50ZXJuYWxfdG9wRmlsbENvbG9yMTtcbiAgICB9XG4gICAgaWYgKHBsb3RSb3cuX2ludGVybmFsX3RvcEZpbGxDb2xvcjIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQudG9wRmlsbENvbG9yMiA9IHBsb3RSb3cuX2ludGVybmFsX3RvcEZpbGxDb2xvcjI7XG4gICAgfVxuICAgIGlmIChwbG90Um93Ll9pbnRlcm5hbF9ib3R0b21GaWxsQ29sb3IxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LmJvdHRvbUZpbGxDb2xvcjEgPSBwbG90Um93Ll9pbnRlcm5hbF9ib3R0b21GaWxsQ29sb3IxO1xuICAgIH1cbiAgICBpZiAocGxvdFJvdy5faW50ZXJuYWxfYm90dG9tRmlsbENvbG9yMiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC5ib3R0b21GaWxsQ29sb3IyID0gcGxvdFJvdy5faW50ZXJuYWxfYm90dG9tRmlsbENvbG9yMjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG9obGNEYXRhKHBsb3RSb3cpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBvcGVuOiBwbG90Um93Ll9pbnRlcm5hbF92YWx1ZVswIC8qIFBsb3RSb3dWYWx1ZUluZGV4Lk9wZW4gKi9dLFxuICAgICAgICBoaWdoOiBwbG90Um93Ll9pbnRlcm5hbF92YWx1ZVsxIC8qIFBsb3RSb3dWYWx1ZUluZGV4LkhpZ2ggKi9dLFxuICAgICAgICBsb3c6IHBsb3RSb3cuX2ludGVybmFsX3ZhbHVlWzIgLyogUGxvdFJvd1ZhbHVlSW5kZXguTG93ICovXSxcbiAgICAgICAgY2xvc2U6IHBsb3RSb3cuX2ludGVybmFsX3ZhbHVlWzMgLyogUGxvdFJvd1ZhbHVlSW5kZXguQ2xvc2UgKi9dLFxuICAgICAgICB0aW1lOiBwbG90Um93Ll9pbnRlcm5hbF9vcmlnaW5hbFRpbWUsXG4gICAgfTtcbiAgICBpZiAocGxvdFJvdy5faW50ZXJuYWxfY3VzdG9tVmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGF0YS5jdXN0b21WYWx1ZXMgPSBwbG90Um93Ll9pbnRlcm5hbF9jdXN0b21WYWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gYmFyRGF0YShwbG90Um93KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gb2hsY0RhdGEocGxvdFJvdyk7XG4gICAgaWYgKHBsb3RSb3cuX2ludGVybmFsX2NvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LmNvbG9yID0gcGxvdFJvdy5faW50ZXJuYWxfY29sb3I7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjYW5kbGVzdGlja0RhdGEocGxvdFJvdykge1xuICAgIGNvbnN0IHJlc3VsdCA9IG9obGNEYXRhKHBsb3RSb3cpO1xuICAgIGNvbnN0IHsgX2ludGVybmFsX2NvbG9yOiBjb2xvciwgX2ludGVybmFsX2JvcmRlckNvbG9yOiBib3JkZXJDb2xvciwgX2ludGVybmFsX3dpY2tDb2xvcjogd2lja0NvbG9yIH0gPSBwbG90Um93O1xuICAgIGlmIChjb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC5jb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgICBpZiAoYm9yZGVyQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQuYm9yZGVyQ29sb3IgPSBib3JkZXJDb2xvcjtcbiAgICB9XG4gICAgaWYgKHdpY2tDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC53aWNrQ29sb3IgPSB3aWNrQ29sb3I7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRTZXJpZXNEYXRhQ3JlYXRvcihzZXJpZXNUeXBlKSB7XG4gICAgY29uc3Qgc2VyaWVzUGxvdFJvd1RvRGF0YU1hcCA9IHtcbiAgICAgICAgQXJlYTogKGFyZWFEYXRhKSxcbiAgICAgICAgTGluZTogKGxpbmVEYXRhKSxcbiAgICAgICAgQmFzZWxpbmU6IChiYXNlbGluZURhdGEpLFxuICAgICAgICBIaXN0b2dyYW06IChsaW5lRGF0YSksXG4gICAgICAgIEJhcjogKGJhckRhdGEpLFxuICAgICAgICBDYW5kbGVzdGljazogKGNhbmRsZXN0aWNrRGF0YSksXG4gICAgICAgIEN1c3RvbTogKGN1c3RvbURhdGEpLFxuICAgIH07XG4gICAgcmV0dXJuIHNlcmllc1Bsb3RSb3dUb0RhdGFNYXBbc2VyaWVzVHlwZV07XG59XG5mdW5jdGlvbiBjdXN0b21EYXRhKHBsb3RSb3cpIHtcbiAgICBjb25zdCB0aW1lID0gcGxvdFJvdy5faW50ZXJuYWxfb3JpZ2luYWxUaW1lO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBsb3RSb3cuX2ludGVybmFsX2RhdGEpLCB7IHRpbWUgfSk7XG59XG5cbmNvbnN0IGNyb3NzaGFpck9wdGlvbnNEZWZhdWx0cyA9IHtcbiAgICB2ZXJ0TGluZToge1xuICAgICAgICBjb2xvcjogJyM5NTk4QTEnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgc3R5bGU6IDMgLyogTGluZVN0eWxlLkxhcmdlRGFzaGVkICovLFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICBsYWJlbFZpc2libGU6IHRydWUsXG4gICAgICAgIGxhYmVsQmFja2dyb3VuZENvbG9yOiAnIzEzMTcyMicsXG4gICAgfSxcbiAgICBob3J6TGluZToge1xuICAgICAgICBjb2xvcjogJyM5NTk4QTEnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgc3R5bGU6IDMgLyogTGluZVN0eWxlLkxhcmdlRGFzaGVkICovLFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICBsYWJlbFZpc2libGU6IHRydWUsXG4gICAgICAgIGxhYmVsQmFja2dyb3VuZENvbG9yOiAnIzEzMTcyMicsXG4gICAgfSxcbiAgICBtb2RlOiAxIC8qIENyb3NzaGFpck1vZGUuTWFnbmV0ICovLFxufTtcblxuY29uc3QgZ3JpZE9wdGlvbnNEZWZhdWx0cyA9IHtcbiAgICB2ZXJ0TGluZXM6IHtcbiAgICAgICAgY29sb3I6ICcjRDZEQ0RFJyxcbiAgICAgICAgc3R5bGU6IDAgLyogTGluZVN0eWxlLlNvbGlkICovLFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgIH0sXG4gICAgaG9yekxpbmVzOiB7XG4gICAgICAgIGNvbG9yOiAnI0Q2RENERScsXG4gICAgICAgIHN0eWxlOiAwIC8qIExpbmVTdHlsZS5Tb2xpZCAqLyxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICB9LFxufTtcblxuY29uc3QgbGF5b3V0T3B0aW9uc0RlZmF1bHRzID0ge1xuICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiIC8qIENvbG9yVHlwZS5Tb2xpZCAqLyxcbiAgICAgICAgY29sb3I6ICcjRkZGRkZGJyxcbiAgICB9LFxuICAgIHRleHRDb2xvcjogJyMxOTE5MTknLFxuICAgIGZvbnRTaXplOiAxMixcbiAgICBmb250RmFtaWx5OiBkZWZhdWx0Rm9udEZhbWlseSxcbiAgICBhdHRyaWJ1dGlvbkxvZ286IHRydWUsXG59O1xuXG5jb25zdCBwcmljZVNjYWxlT3B0aW9uc0RlZmF1bHRzID0ge1xuICAgIGF1dG9TY2FsZTogdHJ1ZSxcbiAgICBtb2RlOiAwIC8qIFByaWNlU2NhbGVNb2RlLk5vcm1hbCAqLyxcbiAgICBpbnZlcnRTY2FsZTogZmFsc2UsXG4gICAgYWxpZ25MYWJlbHM6IHRydWUsXG4gICAgYm9yZGVyVmlzaWJsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogJyMyQjJCNDMnLFxuICAgIGVudGlyZVRleHRPbmx5OiBmYWxzZSxcbiAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICB0aWNrc1Zpc2libGU6IGZhbHNlLFxuICAgIHNjYWxlTWFyZ2luczoge1xuICAgICAgICBib3R0b206IDAuMSxcbiAgICAgICAgdG9wOiAwLjIsXG4gICAgfSxcbiAgICBtaW5pbXVtV2lkdGg6IDAsXG59O1xuXG5jb25zdCB0aW1lU2NhbGVPcHRpb25zRGVmYXVsdHMgPSB7XG4gICAgcmlnaHRPZmZzZXQ6IDAsXG4gICAgYmFyU3BhY2luZzogNixcbiAgICBtaW5CYXJTcGFjaW5nOiAwLjUsXG4gICAgZml4TGVmdEVkZ2U6IGZhbHNlLFxuICAgIGZpeFJpZ2h0RWRnZTogZmFsc2UsXG4gICAgbG9ja1Zpc2libGVUaW1lUmFuZ2VPblJlc2l6ZTogZmFsc2UsXG4gICAgcmlnaHRCYXJTdGF5c09uU2Nyb2xsOiBmYWxzZSxcbiAgICBib3JkZXJWaXNpYmxlOiB0cnVlLFxuICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXG4gICAgdmlzaWJsZTogdHJ1ZSxcbiAgICB0aW1lVmlzaWJsZTogZmFsc2UsXG4gICAgc2Vjb25kc1Zpc2libGU6IHRydWUsXG4gICAgc2hpZnRWaXNpYmxlUmFuZ2VPbk5ld0JhcjogdHJ1ZSxcbiAgICBhbGxvd1NoaWZ0VmlzaWJsZVJhbmdlT25XaGl0ZXNwYWNlUmVwbGFjZW1lbnQ6IGZhbHNlLFxuICAgIHRpY2tzVmlzaWJsZTogZmFsc2UsXG4gICAgdW5pZm9ybURpc3RyaWJ1dGlvbjogZmFsc2UsXG4gICAgbWluaW11bUhlaWdodDogMCxcbiAgICBhbGxvd0JvbGRMYWJlbHM6IHRydWUsXG59O1xuXG5jb25zdCB3YXRlcm1hcmtPcHRpb25zRGVmYXVsdHMgPSB7XG4gICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcbiAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICBmb250U2l6ZTogNDgsXG4gICAgZm9udEZhbWlseTogZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgZm9udFN0eWxlOiAnJyxcbiAgICB0ZXh0OiAnJyxcbiAgICBob3J6QWxpZ246ICdjZW50ZXInLFxuICAgIHZlcnRBbGlnbjogJ2NlbnRlcicsXG59O1xuXG5mdW5jdGlvbiBjaGFydE9wdGlvbnNEZWZhdWx0cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBhdXRvU2l6ZTogZmFsc2UsXG4gICAgICAgIGxheW91dDogbGF5b3V0T3B0aW9uc0RlZmF1bHRzLFxuICAgICAgICBjcm9zc2hhaXI6IGNyb3NzaGFpck9wdGlvbnNEZWZhdWx0cyxcbiAgICAgICAgZ3JpZDogZ3JpZE9wdGlvbnNEZWZhdWx0cyxcbiAgICAgICAgb3ZlcmxheVByaWNlU2NhbGVzOiBPYmplY3QuYXNzaWduKHt9LCBwcmljZVNjYWxlT3B0aW9uc0RlZmF1bHRzKSxcbiAgICAgICAgbGVmdFByaWNlU2NhbGU6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcHJpY2VTY2FsZU9wdGlvbnNEZWZhdWx0cyksIHsgdmlzaWJsZTogZmFsc2UgfSksXG4gICAgICAgIHJpZ2h0UHJpY2VTY2FsZTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcmljZVNjYWxlT3B0aW9uc0RlZmF1bHRzKSwgeyB2aXNpYmxlOiB0cnVlIH0pLFxuICAgICAgICB0aW1lU2NhbGU6IHRpbWVTY2FsZU9wdGlvbnNEZWZhdWx0cyxcbiAgICAgICAgd2F0ZXJtYXJrOiB3YXRlcm1hcmtPcHRpb25zRGVmYXVsdHMsXG4gICAgICAgIGxvY2FsaXphdGlvbjoge1xuICAgICAgICAgICAgbG9jYWxlOiBpc1J1bm5pbmdPbkNsaWVudFNpZGUgPyBuYXZpZ2F0b3IubGFuZ3VhZ2UgOiAnJyxcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6ICdkZCBNTU0gXFwneXknLFxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVTY3JvbGw6IHtcbiAgICAgICAgICAgIG1vdXNlV2hlZWw6IHRydWUsXG4gICAgICAgICAgICBwcmVzc2VkTW91c2VNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgaG9yelRvdWNoRHJhZzogdHJ1ZSxcbiAgICAgICAgICAgIHZlcnRUb3VjaERyYWc6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZVNjYWxlOiB7XG4gICAgICAgICAgICBheGlzUHJlc3NlZE1vdXNlTW92ZToge1xuICAgICAgICAgICAgICAgIHRpbWU6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJpY2U6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXhpc0RvdWJsZUNsaWNrUmVzZXQ6IHtcbiAgICAgICAgICAgICAgICB0aW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByaWNlOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdXNlV2hlZWw6IHRydWUsXG4gICAgICAgICAgICBwaW5jaDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAga2luZXRpY1Njcm9sbDoge1xuICAgICAgICAgICAgbW91c2U6IGZhbHNlLFxuICAgICAgICAgICAgdG91Y2g6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHRyYWNraW5nTW9kZToge1xuICAgICAgICAgICAgZXhpdE1vZGU6IDEgLyogVHJhY2tpbmdNb2RlRXhpdE1vZGUuT25OZXh0VGFwICovLFxuICAgICAgICB9LFxuICAgIH07XG59XG5cbmNsYXNzIFByaWNlU2NhbGVBcGkge1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0V2lkZ2V0LCBwcmljZVNjYWxlSWQpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQgPSBjaGFydFdpZGdldDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZUlkID0gcHJpY2VTY2FsZUlkO1xuICAgIH1cbiAgICBhcHBseU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfbW9kZWwoKS5faW50ZXJuYWxfYXBwbHlQcmljZVNjYWxlT3B0aW9ucyh0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlSWQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZSgpLl9pbnRlcm5hbF9vcHRpb25zKCk7XG4gICAgfVxuICAgIHdpZHRoKCkge1xuICAgICAgICBpZiAoIWlzRGVmYXVsdFByaWNlU2NhbGUodGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9nZXRQcmljZUF4aXNXaWR0aCh0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlSWQpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fcHJpY2VTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIGVuc3VyZU5vdE51bGwodGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX2ZpbmRQcmljZVNjYWxlKHRoaXMuX3ByaXZhdGVfX3ByaWNlU2NhbGVJZCkpLl9pbnRlcm5hbF9wcmljZVNjYWxlO1xuICAgIH1cbn1cblxuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJfYnVpbGQtdGltZS1jb25zdGFudHNcIiAvPlxuZnVuY3Rpb24gY2hlY2tQcmljZUxpbmVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3RzbGludC9jb25maWdcbiAgICBhc3NlcnQodHlwZW9mIG9wdGlvbnMucHJpY2UgPT09ICdudW1iZXInLCBgdGhlIHR5cGUgb2YgJ3ByaWNlJyBwcmljZSBsaW5lJ3MgcHJvcGVydHkgbXVzdCBiZSBhIG51bWJlciwgZ290ICcke3R5cGVvZiBvcHRpb25zLnByaWNlfSdgKTtcbn1cbmZ1bmN0aW9uIGNoZWNrSXRlbXNBcmVPcmRlcmVkKGRhdGEsIGJoLCBhbGxvd0R1cGxpY2F0ZXMgPSBmYWxzZSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwcmV2VGltZSA9IGJoLmtleShkYXRhWzBdLnRpbWUpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IGJoLmtleShkYXRhW2ldLnRpbWUpO1xuICAgICAgICBjb25zdCBjaGVja1Jlc3VsdCA9IGFsbG93RHVwbGljYXRlcyA/IHByZXZUaW1lIDw9IGN1cnJlbnRUaW1lIDogcHJldlRpbWUgPCBjdXJyZW50VGltZTtcbiAgICAgICAgYXNzZXJ0KGNoZWNrUmVzdWx0LCBgZGF0YSBtdXN0IGJlIGFzYyBvcmRlcmVkIGJ5IHRpbWUsIGluZGV4PSR7aX0sIHRpbWU9JHtjdXJyZW50VGltZX0sIHByZXYgdGltZT0ke3ByZXZUaW1lfWApO1xuICAgICAgICBwcmV2VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrU2VyaWVzVmFsdWVzVHlwZSh0eXBlLCBkYXRhKSB7XG4gICAgZGF0YS5mb3JFYWNoKGdldENoZWNrZXIodHlwZSkpO1xufVxuZnVuY3Rpb24gZ2V0Q2hlY2tlcih0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ0Jhcic6XG4gICAgICAgIGNhc2UgJ0NhbmRsZXN0aWNrJzpcbiAgICAgICAgICAgIHJldHVybiBjaGVja0Jhckl0ZW0uYmluZChudWxsLCB0eXBlKTtcbiAgICAgICAgY2FzZSAnQXJlYSc6XG4gICAgICAgIGNhc2UgJ0Jhc2VsaW5lJzpcbiAgICAgICAgY2FzZSAnTGluZSc6XG4gICAgICAgIGNhc2UgJ0hpc3RvZ3JhbSc6XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tMaW5lSXRlbS5iaW5kKG51bGwsIHR5cGUpO1xuICAgICAgICBjYXNlICdDdXN0b20nOlxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrQ3VzdG9tSXRlbS5iaW5kKG51bGwsIHR5cGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrQmFySXRlbSh0eXBlLCBiYXJJdGVtKSB7XG4gICAgaWYgKCFpc0Z1bGZpbGxlZEJhckRhdGEoYmFySXRlbSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3NlcnQoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC90c2xpbnQvY29uZmlnXG4gICAgdHlwZW9mIGJhckl0ZW0ub3BlbiA9PT0gJ251bWJlcicsIGAke3R5cGV9IHNlcmllcyBpdGVtIGRhdGEgdmFsdWUgb2Ygb3BlbiBtdXN0IGJlIGEgbnVtYmVyLCBnb3Q9JHt0eXBlb2YgYmFySXRlbS5vcGVufSwgdmFsdWU9JHtiYXJJdGVtLm9wZW59YCk7XG4gICAgYXNzZXJ0KFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdHNsaW50L2NvbmZpZ1xuICAgIHR5cGVvZiBiYXJJdGVtLmhpZ2ggPT09ICdudW1iZXInLCBgJHt0eXBlfSBzZXJpZXMgaXRlbSBkYXRhIHZhbHVlIG9mIGhpZ2ggbXVzdCBiZSBhIG51bWJlciwgZ290PSR7dHlwZW9mIGJhckl0ZW0uaGlnaH0sIHZhbHVlPSR7YmFySXRlbS5oaWdofWApO1xuICAgIGFzc2VydChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3RzbGludC9jb25maWdcbiAgICB0eXBlb2YgYmFySXRlbS5sb3cgPT09ICdudW1iZXInLCBgJHt0eXBlfSBzZXJpZXMgaXRlbSBkYXRhIHZhbHVlIG9mIGxvdyBtdXN0IGJlIGEgbnVtYmVyLCBnb3Q9JHt0eXBlb2YgYmFySXRlbS5sb3d9LCB2YWx1ZT0ke2Jhckl0ZW0ubG93fWApO1xuICAgIGFzc2VydChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3RzbGludC9jb25maWdcbiAgICB0eXBlb2YgYmFySXRlbS5jbG9zZSA9PT0gJ251bWJlcicsIGAke3R5cGV9IHNlcmllcyBpdGVtIGRhdGEgdmFsdWUgb2YgY2xvc2UgbXVzdCBiZSBhIG51bWJlciwgZ290PSR7dHlwZW9mIGJhckl0ZW0uY2xvc2V9LCB2YWx1ZT0ke2Jhckl0ZW0uY2xvc2V9YCk7XG59XG5mdW5jdGlvbiBjaGVja0xpbmVJdGVtKHR5cGUsIGxpbmVJdGVtKSB7XG4gICAgaWYgKCFpc0Z1bGZpbGxlZExpbmVEYXRhKGxpbmVJdGVtKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzc2VydChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3RzbGludC9jb25maWdcbiAgICB0eXBlb2YgbGluZUl0ZW0udmFsdWUgPT09ICdudW1iZXInLCBgJHt0eXBlfSBzZXJpZXMgaXRlbSBkYXRhIHZhbHVlIG11c3QgYmUgYSBudW1iZXIsIGdvdD0ke3R5cGVvZiBsaW5lSXRlbS52YWx1ZX0sIHZhbHVlPSR7bGluZUl0ZW0udmFsdWV9YCk7XG59XG5mdW5jdGlvbiBjaGVja0N1c3RvbUl0ZW0oXG4vLyB0eXBlOiAnQ3VzdG9tJyxcbi8vIGN1c3RvbUl0ZW06IFNlcmllc0RhdGFJdGVtVHlwZU1hcFt0eXBlb2YgdHlwZV1cbikge1xuICAgIC8vIE5vdGhpbmcgdG8gY2hlY2sgeWV0Li4uXG4gICAgcmV0dXJuO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0U2VyaWVzTWFya2VyKHNtLCBuZXdUaW1lLCBvcmlnaW5hbFRpbWUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBfX3Jlc3Qoc20sIFtcInRpbWVcIiwgXCJvcmlnaW5hbFRpbWVcIl0pO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9jb25zaXN0ZW50LXR5cGUtYXNzZXJ0aW9ucyAqL1xuICAgIGNvbnN0IHJlcyA9IE9iamVjdC5hc3NpZ24oeyB0aW1lOiBuZXdUaW1lIH0sIHZhbHVlcyk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnMgKi9cbiAgICBpZiAob3JpZ2luYWxUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLm9yaWdpbmFsVGltZSA9IG9yaWdpbmFsVGltZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuY29uc3QgcHJpY2VMaW5lT3B0aW9uc0RlZmF1bHRzID0ge1xuICAgIGNvbG9yOiAnI0ZGMDAwMCcsXG4gICAgcHJpY2U6IDAsXG4gICAgbGluZVN0eWxlOiAyIC8qIExpbmVTdHlsZS5EYXNoZWQgKi8sXG4gICAgbGluZVdpZHRoOiAxLFxuICAgIGxpbmVWaXNpYmxlOiB0cnVlLFxuICAgIGF4aXNMYWJlbFZpc2libGU6IHRydWUsXG4gICAgdGl0bGU6ICcnLFxuICAgIGF4aXNMYWJlbENvbG9yOiAnJyxcbiAgICBheGlzTGFiZWxUZXh0Q29sb3I6ICcnLFxufTtcblxuY2xhc3MgUHJpY2VMaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihwcmljZUxpbmUpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fcHJpY2VMaW5lID0gcHJpY2VMaW5lO1xuICAgIH1cbiAgICBhcHBseU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZUxpbmUuX2ludGVybmFsX2FwcGx5T3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gICAgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3ByaWNlTGluZS5faW50ZXJuYWxfb3B0aW9ucygpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfcHJpY2VMaW5lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcHJpY2VMaW5lO1xuICAgIH1cbn1cblxuY2xhc3MgU2VyaWVzQXBpIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJpZXMsIGRhdGFVcGRhdGVzQ29uc3VtZXIsIHByaWNlU2NhbGVBcGlQcm92aWRlciwgY2hhcnRBcGksIGhvcnpTY2FsZUJlaGF2aW9yKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFDaGFuZ2VkRGVsZWdhdGUgPSBuZXcgRGVsZWdhdGUoKTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX3NlcmllcyA9IHNlcmllcztcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX2RhdGFVcGRhdGVzQ29uc3VtZXIgPSBkYXRhVXBkYXRlc0NvbnN1bWVyO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19wcmljZVNjYWxlQXBpUHJvdmlkZXIgPSBwcmljZVNjYWxlQXBpUHJvdmlkZXI7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yID0gaG9yelNjYWxlQmVoYXZpb3I7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19jaGFydEFwaSA9IGNoYXJ0QXBpO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YUNoYW5nZWREZWxlZ2F0ZS5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgIH1cbiAgICBwcmljZUZvcm1hdHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2Zvcm1hdHRlcigpO1xuICAgIH1cbiAgICBwcmljZVRvQ29vcmRpbmF0ZShwcmljZSkge1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX3ByaWNlU2NhbGUoKS5faW50ZXJuYWxfcHJpY2VUb0Nvb3JkaW5hdGUocHJpY2UsIGZpcnN0VmFsdWUuX2ludGVybmFsX3ZhbHVlKTtcbiAgICB9XG4gICAgY29vcmRpbmF0ZVRvUHJpY2UoY29vcmRpbmF0ZSkge1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfZmlyc3RWYWx1ZSgpO1xuICAgICAgICBpZiAoZmlyc3RWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX3ByaWNlU2NhbGUoKS5faW50ZXJuYWxfY29vcmRpbmF0ZVRvUHJpY2UoY29vcmRpbmF0ZSwgZmlyc3RWYWx1ZS5faW50ZXJuYWxfdmFsdWUpO1xuICAgIH1cbiAgICBiYXJzSW5Mb2dpY2FsUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgaWYgKHJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSB1c2UgVGltZVNjYWxlVmlzaWJsZVJhbmdlIGhlcmUgdG8gY29udmVydCBMb2dpY2FsUmFuZ2UgdG8gc3RyaWN0IHJhbmdlIHByb3Blcmx5XG4gICAgICAgIGNvbnN0IGNvcnJlY3RlZFJhbmdlID0gbmV3IFRpbWVTY2FsZVZpc2libGVSYW5nZShuZXcgUmFuZ2VJbXBsKHJhbmdlLmZyb20sIHJhbmdlLnRvKSkuX2ludGVybmFsX3N0cmljdFJhbmdlKCk7XG4gICAgICAgIGNvbnN0IGJhcnMgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9iYXJzKCk7XG4gICAgICAgIGlmIChiYXJzLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGFGaXJzdEJhckluUmFuZ2UgPSBiYXJzLl9pbnRlcm5hbF9zZWFyY2goY29ycmVjdGVkUmFuZ2UuX2ludGVybmFsX2xlZnQoKSwgMSAvKiBNaXNtYXRjaERpcmVjdGlvbi5OZWFyZXN0UmlnaHQgKi8pO1xuICAgICAgICBjb25zdCBkYXRhTGFzdEJhckluUmFuZ2UgPSBiYXJzLl9pbnRlcm5hbF9zZWFyY2goY29ycmVjdGVkUmFuZ2UuX2ludGVybmFsX3JpZ2h0KCksIC0xIC8qIE1pc21hdGNoRGlyZWN0aW9uLk5lYXJlc3RMZWZ0ICovKTtcbiAgICAgICAgY29uc3QgZGF0YUZpcnN0SW5kZXggPSBlbnN1cmVOb3ROdWxsKGJhcnMuX2ludGVybmFsX2ZpcnN0SW5kZXgoKSk7XG4gICAgICAgIGNvbnN0IGRhdGFMYXN0SW5kZXggPSBlbnN1cmVOb3ROdWxsKGJhcnMuX2ludGVybmFsX2xhc3RJbmRleCgpKTtcbiAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHdlIHJlcXVlc3QgZGF0YSBpbiB0aGUgZGF0YSBnYXBcbiAgICAgICAgLy8gZS5nLiBsZXQncyBzYXkgd2UgaGF2ZSBzZXJpZXMgd2l0aCBkYXRhIFswLi4xMCwgMzAuLjYwXVxuICAgICAgICAvLyBhbmQgd2UgcmVxdWVzdCBiYXJzIGluZm8gaW4gcmFuZ2UgWzE1LCAyNV1cbiAgICAgICAgLy8gdGh1cywgZGF0YUZpcnN0QmFySW5SYW5nZSB3aWxsIGJlIHdpdGggaW5kZXggMzAgYW5kIGRhdGFMYXN0QmFySW5SYW5nZSB3aXRoIDEwXG4gICAgICAgIGlmIChkYXRhRmlyc3RCYXJJblJhbmdlICE9PSBudWxsICYmIGRhdGFMYXN0QmFySW5SYW5nZSAhPT0gbnVsbCAmJiBkYXRhRmlyc3RCYXJJblJhbmdlLl9pbnRlcm5hbF9pbmRleCA+IGRhdGFMYXN0QmFySW5SYW5nZS5faW50ZXJuYWxfaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYmFyc0JlZm9yZTogcmFuZ2UuZnJvbSAtIGRhdGFGaXJzdEluZGV4LFxuICAgICAgICAgICAgICAgIGJhcnNBZnRlcjogZGF0YUxhc3RJbmRleCAtIHJhbmdlLnRvLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJzQmVmb3JlID0gKGRhdGFGaXJzdEJhckluUmFuZ2UgPT09IG51bGwgfHwgZGF0YUZpcnN0QmFySW5SYW5nZS5faW50ZXJuYWxfaW5kZXggPT09IGRhdGFGaXJzdEluZGV4KVxuICAgICAgICAgICAgPyByYW5nZS5mcm9tIC0gZGF0YUZpcnN0SW5kZXhcbiAgICAgICAgICAgIDogZGF0YUZpcnN0QmFySW5SYW5nZS5faW50ZXJuYWxfaW5kZXggLSBkYXRhRmlyc3RJbmRleDtcbiAgICAgICAgY29uc3QgYmFyc0FmdGVyID0gKGRhdGFMYXN0QmFySW5SYW5nZSA9PT0gbnVsbCB8fCBkYXRhTGFzdEJhckluUmFuZ2UuX2ludGVybmFsX2luZGV4ID09PSBkYXRhTGFzdEluZGV4KVxuICAgICAgICAgICAgPyBkYXRhTGFzdEluZGV4IC0gcmFuZ2UudG9cbiAgICAgICAgICAgIDogZGF0YUxhc3RJbmRleCAtIGRhdGFMYXN0QmFySW5SYW5nZS5faW50ZXJuYWxfaW5kZXg7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgYmFyc0JlZm9yZSwgYmFyc0FmdGVyIH07XG4gICAgICAgIC8vIGFjdHVhbGx5IHRoZXkgY2FuJ3QgZXhpc3Qgc2VwYXJhdGVseVxuICAgICAgICBpZiAoZGF0YUZpcnN0QmFySW5SYW5nZSAhPT0gbnVsbCAmJiBkYXRhTGFzdEJhckluUmFuZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5mcm9tID0gZGF0YUZpcnN0QmFySW5SYW5nZS5faW50ZXJuYWxfb3JpZ2luYWxUaW1lO1xuICAgICAgICAgICAgcmVzdWx0LnRvID0gZGF0YUxhc3RCYXJJblJhbmdlLl9pbnRlcm5hbF9vcmlnaW5hbFRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIGNoZWNrSXRlbXNBcmVPcmRlcmVkKGRhdGEsIHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yKTtcbiAgICAgICAgY2hlY2tTZXJpZXNWYWx1ZXNUeXBlKHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX3Nlcmllc1R5cGUoKSwgZGF0YSk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19kYXRhVXBkYXRlc0NvbnN1bWVyLl9pbnRlcm5hbF9hcHBseU5ld0RhdGEodGhpcy5faW50ZXJuYWxfX3NlcmllcywgZGF0YSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29uRGF0YUNoYW5nZWQoJ2Z1bGwnKTtcbiAgICB9XG4gICAgdXBkYXRlKGJhcikge1xuICAgICAgICBjaGVja1Nlcmllc1ZhbHVlc1R5cGUodGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfc2VyaWVzVHlwZSgpLCBbYmFyXSk7XG4gICAgICAgIHRoaXMuX2ludGVybmFsX19kYXRhVXBkYXRlc0NvbnN1bWVyLl9pbnRlcm5hbF91cGRhdGVEYXRhKHRoaXMuX2ludGVybmFsX19zZXJpZXMsIGJhcik7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX29uRGF0YUNoYW5nZWQoJ3VwZGF0ZScpO1xuICAgIH1cbiAgICBkYXRhQnlJbmRleChsb2dpY2FsSW5kZXgsIG1pc21hdGNoRGlyZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9iYXJzKCkuX2ludGVybmFsX3NlYXJjaChsb2dpY2FsSW5kZXgsIG1pc21hdGNoRGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGl0IGNhbiBiZSBhIHdoaXRlc3BhY2VcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNyZWF0b3IgPSBnZXRTZXJpZXNEYXRhQ3JlYXRvcih0aGlzLnNlcmllc1R5cGUoKSk7XG4gICAgICAgIHJldHVybiBjcmVhdG9yKGRhdGEpO1xuICAgIH1cbiAgICBkYXRhKCkge1xuICAgICAgICBjb25zdCBzZXJpZXNDcmVhdG9yID0gZ2V0U2VyaWVzRGF0YUNyZWF0b3IodGhpcy5zZXJpZXNUeXBlKCkpO1xuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfYmFycygpLl9pbnRlcm5hbF9yb3dzKCk7XG4gICAgICAgIHJldHVybiByb3dzLm1hcCgocm93KSA9PiBzZXJpZXNDcmVhdG9yKHJvdykpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVEYXRhQ2hhbmdlZChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFDaGFuZ2VkRGVsZWdhdGUuX2ludGVybmFsX3N1YnNjcmliZShoYW5kbGVyKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmVEYXRhQ2hhbmdlZChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFDaGFuZ2VkRGVsZWdhdGUuX2ludGVybmFsX3Vuc3Vic2NyaWJlKGhhbmRsZXIpO1xuICAgIH1cbiAgICBzZXRNYXJrZXJzKGRhdGEpIHtcbiAgICAgICAgY2hlY2tJdGVtc0FyZU9yZGVyZWQoZGF0YSwgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IsIHRydWUpO1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRNYXJrZXJzID0gZGF0YS5tYXAoKG1hcmtlcikgPT4gY29udmVydFNlcmllc01hcmtlcihtYXJrZXIsIHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmNvbnZlcnRIb3J6SXRlbVRvSW50ZXJuYWwobWFya2VyLnRpbWUpLCBtYXJrZXIudGltZSkpO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9zZXRNYXJrZXJzKGNvbnZlcnRlZE1hcmtlcnMpO1xuICAgIH1cbiAgICBtYXJrZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfbWFya2VycygpLm1hcCgoaW50ZXJuYWxJdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29udmVydFNlcmllc01hcmtlcihpbnRlcm5hbEl0ZW0sIGludGVybmFsSXRlbS5vcmlnaW5hbFRpbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhcHBseU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9hcHBseU9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICAgIG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBjbG9uZSh0aGlzLl9pbnRlcm5hbF9fc2VyaWVzLl9pbnRlcm5hbF9vcHRpb25zKCkpO1xuICAgIH1cbiAgICBwcmljZVNjYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fcHJpY2VTY2FsZUFwaVByb3ZpZGVyLnByaWNlU2NhbGUodGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfcHJpY2VTY2FsZSgpLl9pbnRlcm5hbF9pZCgpKTtcbiAgICB9XG4gICAgY3JlYXRlUHJpY2VMaW5lKG9wdGlvbnMpIHtcbiAgICAgICAgY2hlY2tQcmljZUxpbmVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBzdHJpY3RPcHRpb25zID0gbWVyZ2UoY2xvbmUocHJpY2VMaW5lT3B0aW9uc0RlZmF1bHRzKSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHByaWNlTGluZSA9IHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2NyZWF0ZVByaWNlTGluZShzdHJpY3RPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmljZUxpbmUocHJpY2VMaW5lKTtcbiAgICB9XG4gICAgcmVtb3ZlUHJpY2VMaW5lKGxpbmUpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfcmVtb3ZlUHJpY2VMaW5lKGxpbmUuX2ludGVybmFsX3ByaWNlTGluZSgpKTtcbiAgICB9XG4gICAgc2VyaWVzVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX3Nlcmllc1R5cGUoKTtcbiAgICB9XG4gICAgYXR0YWNoUHJpbWl0aXZlKHByaW1pdGl2ZSkge1xuICAgICAgICAvLyBhdCB0aGlzIHBvaW50IHdlIGNhc3QgdGhlIGdlbmVyaWMgdG8gdW5rbm93biBiZWNhdXNlIHdlXG4gICAgICAgIC8vIGRvbid0IHdhbnQgdGhlIG1vZGVsIHRvIGtub3cgdGhlIHR5cGVzIG9mIHRoZSBBUEkgKOKXkV/il5EpXG4gICAgICAgIHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX2F0dGFjaFByaW1pdGl2ZShwcmltaXRpdmUpO1xuICAgICAgICBpZiAocHJpbWl0aXZlLmF0dGFjaGVkKSB7XG4gICAgICAgICAgICBwcmltaXRpdmUuYXR0YWNoZWQoe1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzLl9pbnRlcm5hbF9fY2hhcnRBcGksXG4gICAgICAgICAgICAgICAgc2VyaWVzOiB0aGlzLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RVcGRhdGU6ICgpID0+IHRoaXMuX2ludGVybmFsX19zZXJpZXMuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX2Z1bGxVcGRhdGUoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRldGFjaFByaW1pdGl2ZShwcmltaXRpdmUpIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxfX3Nlcmllcy5faW50ZXJuYWxfZGV0YWNoUHJpbWl0aXZlKHByaW1pdGl2ZSk7XG4gICAgICAgIGlmIChwcmltaXRpdmUuZGV0YWNoZWQpIHtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5kZXRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcml2YXRlX19vbkRhdGFDaGFuZ2VkKHNjb3BlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19kYXRhQ2hhbmdlZERlbGVnYXRlLl9pbnRlcm5hbF9oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGF0YUNoYW5nZWREZWxlZ2F0ZS5faW50ZXJuYWxfZmlyZShzY29wZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFRpbWVTY2FsZUFwaSB7XG4gICAgY29uc3RydWN0b3IobW9kZWwsIHRpbWVBeGlzV2lkZ2V0LCBob3J6U2NhbGVCZWhhdmlvcikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lUmFuZ2VDaGFuZ2VkID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xvZ2ljYWxSYW5nZUNoYW5nZWQgPSBuZXcgRGVsZWdhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZUNoYW5nZWQgPSBuZXcgRGVsZWdhdGUoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlID0gbW9kZWwuX2ludGVybmFsX3RpbWVTY2FsZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldCA9IHRpbWVBeGlzV2lkZ2V0O1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX3Zpc2libGVCYXJzQ2hhbmdlZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUodGhpcy5fcHJpdmF0ZV9fb25WaXNpYmxlQmFyc0NoYW5nZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfbG9naWNhbFJhbmdlQ2hhbmdlZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUodGhpcy5fcHJpdmF0ZV9fb25WaXNpYmxlTG9naWNhbFJhbmdlQ2hhbmdlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQuX2ludGVybmFsX3NpemVDaGFuZ2VkKCkuX2ludGVybmFsX3N1YnNjcmliZSh0aGlzLl9wcml2YXRlX19vblNpemVDaGFuZ2VkLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvciA9IGhvcnpTY2FsZUJlaGF2aW9yO1xuICAgIH1cbiAgICBfaW50ZXJuYWxfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlQmFyc0NoYW5nZWQoKS5faW50ZXJuYWxfdW5zdWJzY3JpYmVBbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfbG9naWNhbFJhbmdlQ2hhbmdlZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQuX2ludGVybmFsX3NpemVDaGFuZ2VkKCkuX2ludGVybmFsX3Vuc3Vic2NyaWJlQWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lUmFuZ2VDaGFuZ2VkLl9pbnRlcm5hbF9kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xvZ2ljYWxSYW5nZUNoYW5nZWQuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZUNoYW5nZWQuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICB9XG4gICAgc2Nyb2xsUG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX3JpZ2h0T2Zmc2V0KCk7XG4gICAgfVxuICAgIHNjcm9sbFRvUG9zaXRpb24ocG9zaXRpb24sIGFuaW1hdGVkKSB7XG4gICAgICAgIGlmICghYW5pbWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF9zZXRSaWdodE9mZnNldChwb3NpdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9zY3JvbGxUb09mZnNldEFuaW1hdGVkKHBvc2l0aW9uLCAxMDAwIC8qIENvbnN0YW50cy5BbmltYXRpb25EdXJhdGlvbk1zICovKTtcbiAgICB9XG4gICAgc2Nyb2xsVG9SZWFsVGltZSgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9zY3JvbGxUb1JlYWxUaW1lKCk7XG4gICAgfVxuICAgIGdldFZpc2libGVSYW5nZSgpIHtcbiAgICAgICAgY29uc3QgdGltZVJhbmdlID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF92aXNpYmxlVGltZVJhbmdlKCk7XG4gICAgICAgIGlmICh0aW1lUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmcm9tOiB0aW1lUmFuZ2UuZnJvbS5vcmlnaW5hbFRpbWUsXG4gICAgICAgICAgICB0bzogdGltZVJhbmdlLnRvLm9yaWdpbmFsVGltZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0VmlzaWJsZVJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZFJhbmdlID0ge1xuICAgICAgICAgICAgZnJvbTogdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IuY29udmVydEhvcnpJdGVtVG9JbnRlcm5hbChyYW5nZS5mcm9tKSxcbiAgICAgICAgICAgIHRvOiB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvci5jb252ZXJ0SG9yekl0ZW1Ub0ludGVybmFsKHJhbmdlLnRvKSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbG9naWNhbFJhbmdlID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9sb2dpY2FsUmFuZ2VGb3JUaW1lUmFuZ2UoY29udmVydGVkUmFuZ2UpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfc2V0VGFyZ2V0TG9naWNhbFJhbmdlKGxvZ2ljYWxSYW5nZSk7XG4gICAgfVxuICAgIGdldFZpc2libGVMb2dpY2FsUmFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IGxvZ2ljYWxSYW5nZSA9IHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfdmlzaWJsZUxvZ2ljYWxSYW5nZSgpO1xuICAgICAgICBpZiAobG9naWNhbFJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJvbTogbG9naWNhbFJhbmdlLl9pbnRlcm5hbF9sZWZ0KCksXG4gICAgICAgICAgICB0bzogbG9naWNhbFJhbmdlLl9pbnRlcm5hbF9yaWdodCgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzZXRWaXNpYmxlTG9naWNhbFJhbmdlKHJhbmdlKSB7XG4gICAgICAgIGFzc2VydChyYW5nZS5mcm9tIDw9IHJhbmdlLnRvLCAnVGhlIGZyb20gaW5kZXggY2Fubm90IGJlIGFmdGVyIHRoZSB0byBpbmRleC4nKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX3NldFRhcmdldExvZ2ljYWxSYW5nZShyYW5nZSk7XG4gICAgfVxuICAgIHJlc2V0VGltZVNjYWxlKCkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfcmVzZXRUaW1lU2NhbGUoKTtcbiAgICB9XG4gICAgZml0Q29udGVudCgpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbW9kZWwuX2ludGVybmFsX2ZpdENvbnRlbnQoKTtcbiAgICB9XG4gICAgbG9naWNhbFRvQ29vcmRpbmF0ZShsb2dpY2FsKSB7XG4gICAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IHRoaXMuX3ByaXZhdGVfX21vZGVsLl9pbnRlcm5hbF90aW1lU2NhbGUoKTtcbiAgICAgICAgaWYgKHRpbWVTY2FsZS5faW50ZXJuYWxfaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lU2NhbGUuX2ludGVybmFsX2luZGV4VG9Db29yZGluYXRlKGxvZ2ljYWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvb3JkaW5hdGVUb0xvZ2ljYWwoeCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX3RpbWVTY2FsZS5faW50ZXJuYWxfY29vcmRpbmF0ZVRvSW5kZXgoeCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGltZVRvQ29vcmRpbmF0ZSh0aW1lKSB7XG4gICAgICAgIGNvbnN0IHRpbWVQb2ludCA9IHRoaXMuX3ByaXZhdGVfX2hvcnpTY2FsZUJlaGF2aW9yLmNvbnZlcnRIb3J6SXRlbVRvSW50ZXJuYWwodGltZSk7XG4gICAgICAgIGNvbnN0IHRpbWVQb2ludEluZGV4ID0gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF90aW1lVG9JbmRleCh0aW1lUG9pbnQsIGZhbHNlKTtcbiAgICAgICAgaWYgKHRpbWVQb2ludEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9pbmRleFRvQ29vcmRpbmF0ZSh0aW1lUG9pbnRJbmRleCk7XG4gICAgfVxuICAgIGNvb3JkaW5hdGVUb1RpbWUoeCkge1xuICAgICAgICBjb25zdCB0aW1lU2NhbGUgPSB0aGlzLl9wcml2YXRlX19tb2RlbC5faW50ZXJuYWxfdGltZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IHRpbWVQb2ludEluZGV4ID0gdGltZVNjYWxlLl9pbnRlcm5hbF9jb29yZGluYXRlVG9JbmRleCh4KTtcbiAgICAgICAgY29uc3QgdGltZVBvaW50ID0gdGltZVNjYWxlLl9pbnRlcm5hbF9pbmRleFRvVGltZVNjYWxlUG9pbnQodGltZVBvaW50SW5kZXgpO1xuICAgICAgICBpZiAodGltZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZVBvaW50Lm9yaWdpbmFsVGltZTtcbiAgICB9XG4gICAgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0U2l6ZSgpLndpZHRoO1xuICAgIH1cbiAgICBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX190aW1lQXhpc1dpZGdldC5faW50ZXJuYWxfZ2V0U2l6ZSgpLmhlaWdodDtcbiAgICB9XG4gICAgc3Vic2NyaWJlVmlzaWJsZVRpbWVSYW5nZUNoYW5nZShoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVSYW5nZUNoYW5nZWQuX2ludGVybmFsX3N1YnNjcmliZShoYW5kbGVyKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmVWaXNpYmxlVGltZVJhbmdlQ2hhbmdlKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fdGltZVJhbmdlQ2hhbmdlZC5faW50ZXJuYWxfdW5zdWJzY3JpYmUoaGFuZGxlcik7XG4gICAgfVxuICAgIHN1YnNjcmliZVZpc2libGVMb2dpY2FsUmFuZ2VDaGFuZ2UoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19sb2dpY2FsUmFuZ2VDaGFuZ2VkLl9pbnRlcm5hbF9zdWJzY3JpYmUoaGFuZGxlcik7XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlVmlzaWJsZUxvZ2ljYWxSYW5nZUNoYW5nZShoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2xvZ2ljYWxSYW5nZUNoYW5nZWQuX2ludGVybmFsX3Vuc3Vic2NyaWJlKGhhbmRsZXIpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVTaXplQ2hhbmdlKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZUNoYW5nZWQuX2ludGVybmFsX3N1YnNjcmliZShoYW5kbGVyKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmVTaXplQ2hhbmdlKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2l6ZUNoYW5nZWQuX2ludGVybmFsX3Vuc3Vic2NyaWJlKGhhbmRsZXIpO1xuICAgIH1cbiAgICBhcHBseU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX2FwcGx5T3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gICAgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY2xvbmUodGhpcy5fcHJpdmF0ZV9fdGltZVNjYWxlLl9pbnRlcm5hbF9vcHRpb25zKCkpKSwgeyBiYXJTcGFjaW5nOiB0aGlzLl9wcml2YXRlX190aW1lU2NhbGUuX2ludGVybmFsX2JhclNwYWNpbmcoKSB9KTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX29uVmlzaWJsZUJhcnNDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJpdmF0ZV9fdGltZVJhbmdlQ2hhbmdlZC5faW50ZXJuYWxfaGFzTGlzdGVuZXJzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVfX3RpbWVSYW5nZUNoYW5nZWQuX2ludGVybmFsX2ZpcmUodGhpcy5nZXRWaXNpYmxlUmFuZ2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX29uVmlzaWJsZUxvZ2ljYWxSYW5nZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19sb2dpY2FsUmFuZ2VDaGFuZ2VkLl9pbnRlcm5hbF9oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fbG9naWNhbFJhbmdlQ2hhbmdlZC5faW50ZXJuYWxfZmlyZSh0aGlzLmdldFZpc2libGVMb2dpY2FsUmFuZ2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3ByaXZhdGVfX29uU2l6ZUNoYW5nZWQoc2l6ZSkge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zaXplQ2hhbmdlZC5faW50ZXJuYWxfZmlyZShzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXRjaFByaWNlRm9ybWF0KHByaWNlRm9ybWF0KSB7XG4gICAgaWYgKHByaWNlRm9ybWF0ID09PSB1bmRlZmluZWQgfHwgcHJpY2VGb3JtYXQudHlwZSA9PT0gJ2N1c3RvbScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcmljZUZvcm1hdEJ1aWx0SW4gPSBwcmljZUZvcm1hdDtcbiAgICBpZiAocHJpY2VGb3JtYXRCdWlsdEluLm1pbk1vdmUgIT09IHVuZGVmaW5lZCAmJiBwcmljZUZvcm1hdEJ1aWx0SW4ucHJlY2lzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJpY2VGb3JtYXRCdWlsdEluLnByZWNpc2lvbiA9IHByZWNpc2lvbkJ5TWluTW92ZShwcmljZUZvcm1hdEJ1aWx0SW4ubWluTW92ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWlncmF0ZUhhbmRsZVNjYWxlU2Nyb2xsT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKGlzQm9vbGVhbihvcHRpb25zLmhhbmRsZVNjYWxlKSkge1xuICAgICAgICBjb25zdCBoYW5kbGVTY2FsZSA9IG9wdGlvbnMuaGFuZGxlU2NhbGU7XG4gICAgICAgIG9wdGlvbnMuaGFuZGxlU2NhbGUgPSB7XG4gICAgICAgICAgICBheGlzRG91YmxlQ2xpY2tSZXNldDoge1xuICAgICAgICAgICAgICAgIHRpbWU6IGhhbmRsZVNjYWxlLFxuICAgICAgICAgICAgICAgIHByaWNlOiBoYW5kbGVTY2FsZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBheGlzUHJlc3NlZE1vdXNlTW92ZToge1xuICAgICAgICAgICAgICAgIHRpbWU6IGhhbmRsZVNjYWxlLFxuICAgICAgICAgICAgICAgIHByaWNlOiBoYW5kbGVTY2FsZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb3VzZVdoZWVsOiBoYW5kbGVTY2FsZSxcbiAgICAgICAgICAgIHBpbmNoOiBoYW5kbGVTY2FsZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5oYW5kbGVTY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHsgYXhpc1ByZXNzZWRNb3VzZU1vdmUsIGF4aXNEb3VibGVDbGlja1Jlc2V0IH0gPSBvcHRpb25zLmhhbmRsZVNjYWxlO1xuICAgICAgICBpZiAoaXNCb29sZWFuKGF4aXNQcmVzc2VkTW91c2VNb3ZlKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5oYW5kbGVTY2FsZS5heGlzUHJlc3NlZE1vdXNlTW92ZSA9IHtcbiAgICAgICAgICAgICAgICB0aW1lOiBheGlzUHJlc3NlZE1vdXNlTW92ZSxcbiAgICAgICAgICAgICAgICBwcmljZTogYXhpc1ByZXNzZWRNb3VzZU1vdmUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Jvb2xlYW4oYXhpc0RvdWJsZUNsaWNrUmVzZXQpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmhhbmRsZVNjYWxlLmF4aXNEb3VibGVDbGlja1Jlc2V0ID0ge1xuICAgICAgICAgICAgICAgIHRpbWU6IGF4aXNEb3VibGVDbGlja1Jlc2V0LFxuICAgICAgICAgICAgICAgIHByaWNlOiBheGlzRG91YmxlQ2xpY2tSZXNldCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaGFuZGxlU2Nyb2xsID0gb3B0aW9ucy5oYW5kbGVTY3JvbGw7XG4gICAgaWYgKGlzQm9vbGVhbihoYW5kbGVTY3JvbGwpKSB7XG4gICAgICAgIG9wdGlvbnMuaGFuZGxlU2Nyb2xsID0ge1xuICAgICAgICAgICAgaG9yelRvdWNoRHJhZzogaGFuZGxlU2Nyb2xsLFxuICAgICAgICAgICAgdmVydFRvdWNoRHJhZzogaGFuZGxlU2Nyb2xsLFxuICAgICAgICAgICAgbW91c2VXaGVlbDogaGFuZGxlU2Nyb2xsLFxuICAgICAgICAgICAgcHJlc3NlZE1vdXNlTW92ZTogaGFuZGxlU2Nyb2xsLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRvSW50ZXJuYWxPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBtaWdyYXRlSGFuZGxlU2NhbGVTY3JvbGxPcHRpb25zKG9wdGlvbnMpO1xuICAgIHJldHVybiBvcHRpb25zO1xufVxuY2xhc3MgQ2hhcnRBcGkge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgaG9yelNjYWxlQmVoYXZpb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXNNYXBSZXZlcnNlZCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xpY2tlZERlbGVnYXRlID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RibENsaWNrZWREZWxlZ2F0ZSA9IG5ldyBEZWxlZ2F0ZSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jcm9zc2hhaXJNb3ZlZERlbGVnYXRlID0gbmV3IERlbGVnYXRlKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RhdGFMYXllciA9IG5ldyBEYXRhTGF5ZXIoaG9yelNjYWxlQmVoYXZpb3IpO1xuICAgICAgICBjb25zdCBpbnRlcm5hbE9wdGlvbnMgPSAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSA/XG4gICAgICAgICAgICBjbG9uZShjaGFydE9wdGlvbnNEZWZhdWx0cygpKSA6XG4gICAgICAgICAgICBtZXJnZShjbG9uZShjaGFydE9wdGlvbnNEZWZhdWx0cygpKSwgdG9JbnRlcm5hbE9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19ob3J6U2NhbGVCZWhhdmlvciA9IGhvcnpTY2FsZUJlaGF2aW9yO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldCA9IG5ldyBDaGFydFdpZGdldChjb250YWluZXIsIGludGVybmFsT3B0aW9ucywgaG9yelNjYWxlQmVoYXZpb3IpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfY2xpY2tlZCgpLl9pbnRlcm5hbF9zdWJzY3JpYmUoKHBhcmFtU3VwcGxpZXIpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcml2YXRlX19jbGlja2VkRGVsZWdhdGUuX2ludGVybmFsX2hhc0xpc3RlbmVycygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2xpY2tlZERlbGVnYXRlLl9pbnRlcm5hbF9maXJlKHRoaXMuX3ByaXZhdGVfX2NvbnZlcnRNb3VzZVBhcmFtcyhwYXJhbVN1cHBsaWVyKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9kYmxDbGlja2VkKCkuX2ludGVybmFsX3N1YnNjcmliZSgocGFyYW1TdXBwbGllcikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2RibENsaWNrZWREZWxlZ2F0ZS5faW50ZXJuYWxfaGFzTGlzdGVuZXJzKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcml2YXRlX19kYmxDbGlja2VkRGVsZWdhdGUuX2ludGVybmFsX2ZpcmUodGhpcy5fcHJpdmF0ZV9fY29udmVydE1vdXNlUGFyYW1zKHBhcmFtU3VwcGxpZXIoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX2Nyb3NzaGFpck1vdmVkKCkuX2ludGVybmFsX3N1YnNjcmliZSgocGFyYW1TdXBwbGllcikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpck1vdmVkRGVsZWdhdGUuX2ludGVybmFsX2hhc0xpc3RlbmVycygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyTW92ZWREZWxlZ2F0ZS5faW50ZXJuYWxfZmlyZSh0aGlzLl9wcml2YXRlX19jb252ZXJ0TW91c2VQYXJhbXMocGFyYW1TdXBwbGllcigpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGVBcGkgPSBuZXcgVGltZVNjYWxlQXBpKG1vZGVsLCB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfdGltZUF4aXNXaWRnZXQoKSwgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IpO1xuICAgIH1cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9jbGlja2VkKCkuX2ludGVybmFsX3Vuc3Vic2NyaWJlQWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfZGJsQ2xpY2tlZCgpLl9pbnRlcm5hbF91bnN1YnNjcmliZUFsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX2Nyb3NzaGFpck1vdmVkKCkuX2ludGVybmFsX3Vuc3Vic2NyaWJlQWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX190aW1lU2NhbGVBcGkuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzTWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc01hcFJldmVyc2VkLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsaWNrZWREZWxlZ2F0ZS5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYmxDbGlja2VkRGVsZWdhdGUuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY3Jvc3NoYWlyTW92ZWREZWxlZ2F0ZS5faW50ZXJuYWxfZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19kYXRhTGF5ZXIuX2ludGVybmFsX2Rlc3Ryb3koKTtcbiAgICB9XG4gICAgcmVzaXplKHdpZHRoLCBoZWlnaHQsIGZvcmNlUmVwYWludCkge1xuICAgICAgICBpZiAodGhpcy5hdXRvU2l6ZUFjdGl2ZSgpKSB7XG4gICAgICAgICAgICAvLyBXZSByZXR1cm4gZWFybHkgaGVyZSBpbnN0ZWFkIG9mIGNoZWNraW5nIHRoaXMgd2l0aGluIHRoZSBhY3R1YWwgX2NoYXJ0V2lkZ2V0LnJlc2l6ZSBtZXRob2RcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhpcyBzaG91bGQgb25seSBhcHBseSB0byBleHRlcm5hbCByZXNpemUgcmVxdWVzdHMuXG4gICAgICAgICAgICB3YXJuKGBIZWlnaHQgYW5kIHdpZHRoIHZhbHVlcyBpZ25vcmVkIGJlY2F1c2UgJ2F1dG9TaXplJyBvcHRpb24gaXMgZW5hYmxlZC5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfcmVzaXplKHdpZHRoLCBoZWlnaHQsIGZvcmNlUmVwYWludCk7XG4gICAgfVxuICAgIGFkZEN1c3RvbVNlcmllcyhjdXN0b21QYW5lVmlldywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYW5lVmlldyA9IGVuc3VyZShjdXN0b21QYW5lVmlldyk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjdXN0b21TdHlsZURlZmF1bHRzKSwgcGFuZVZpZXcuZGVmYXVsdE9wdGlvbnMoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19hZGRTZXJpZXNJbXBsKCdDdXN0b20nLCBkZWZhdWx0cywgb3B0aW9ucywgcGFuZVZpZXcpO1xuICAgIH1cbiAgICBhZGRBcmVhU2VyaWVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2FkZFNlcmllc0ltcGwoJ0FyZWEnLCBhcmVhU3R5bGVEZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFkZEJhc2VsaW5lU2VyaWVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2FkZFNlcmllc0ltcGwoJ0Jhc2VsaW5lJywgYmFzZWxpbmVTdHlsZURlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYWRkQmFyU2VyaWVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2FkZFNlcmllc0ltcGwoJ0JhcicsIGJhclN0eWxlRGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhZGRDYW5kbGVzdGlja1NlcmllcyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgZmlsbFVwRG93bkNhbmRsZXN0aWNrc0NvbG9ycyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2FkZFNlcmllc0ltcGwoJ0NhbmRsZXN0aWNrJywgY2FuZGxlc3RpY2tTdHlsZURlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYWRkSGlzdG9ncmFtU2VyaWVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2FkZFNlcmllc0ltcGwoJ0hpc3RvZ3JhbScsIGhpc3RvZ3JhbVN0eWxlRGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhZGRMaW5lU2VyaWVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVfX2FkZFNlcmllc0ltcGwoJ0xpbmUnLCBsaW5lU3R5bGVEZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJlbW92ZVNlcmllcyhzZXJpZXNBcGkpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gZW5zdXJlRGVmaW5lZCh0aGlzLl9wcml2YXRlX19zZXJpZXNNYXAuZ2V0KHNlcmllc0FwaSkpO1xuICAgICAgICBjb25zdCB1cGRhdGUgPSB0aGlzLl9wcml2YXRlX19kYXRhTGF5ZXIuX2ludGVybmFsX3JlbW92ZVNlcmllcyhzZXJpZXMpO1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICBtb2RlbC5faW50ZXJuYWxfcmVtb3ZlU2VyaWVzKHNlcmllcyk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NlbmRVcGRhdGVUb0NoYXJ0KHVwZGF0ZSk7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3Nlcmllc01hcC5kZWxldGUoc2VyaWVzQXBpKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzTWFwUmV2ZXJzZWQuZGVsZXRlKHNlcmllcyk7XG4gICAgfVxuICAgIF9pbnRlcm5hbF9hcHBseU5ld0RhdGEoc2VyaWVzLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NlbmRVcGRhdGVUb0NoYXJ0KHRoaXMuX3ByaXZhdGVfX2RhdGFMYXllci5faW50ZXJuYWxfc2V0U2VyaWVzRGF0YShzZXJpZXMsIGRhdGEpKTtcbiAgICB9XG4gICAgX2ludGVybmFsX3VwZGF0ZURhdGEoc2VyaWVzLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX3NlbmRVcGRhdGVUb0NoYXJ0KHRoaXMuX3ByaXZhdGVfX2RhdGFMYXllci5faW50ZXJuYWxfdXBkYXRlU2VyaWVzRGF0YShzZXJpZXMsIGRhdGEpKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlQ2xpY2soaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jbGlja2VkRGVsZWdhdGUuX2ludGVybmFsX3N1YnNjcmliZShoYW5kbGVyKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmVDbGljayhoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NsaWNrZWREZWxlZ2F0ZS5faW50ZXJuYWxfdW5zdWJzY3JpYmUoaGFuZGxlcik7XG4gICAgfVxuICAgIHN1YnNjcmliZUNyb3NzaGFpck1vdmUoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9wcml2YXRlX19jcm9zc2hhaXJNb3ZlZERlbGVnYXRlLl9pbnRlcm5hbF9zdWJzY3JpYmUoaGFuZGxlcik7XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlQ3Jvc3NoYWlyTW92ZShoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2Nyb3NzaGFpck1vdmVkRGVsZWdhdGUuX2ludGVybmFsX3Vuc3Vic2NyaWJlKGhhbmRsZXIpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVEYmxDbGljayhoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2RibENsaWNrZWREZWxlZ2F0ZS5faW50ZXJuYWxfc3Vic2NyaWJlKGhhbmRsZXIpO1xuICAgIH1cbiAgICB1bnN1YnNjcmliZURibENsaWNrKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fZGJsQ2xpY2tlZERlbGVnYXRlLl9pbnRlcm5hbF91bnN1YnNjcmliZShoYW5kbGVyKTtcbiAgICB9XG4gICAgcHJpY2VTY2FsZShwcmljZVNjYWxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmljZVNjYWxlQXBpKHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0LCBwcmljZVNjYWxlSWQpO1xuICAgIH1cbiAgICB0aW1lU2NhbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX190aW1lU2NhbGVBcGk7XG4gICAgfVxuICAgIGFwcGx5T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9hcHBseU9wdGlvbnModG9JbnRlcm5hbE9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cbiAgICBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX29wdGlvbnMoKTtcbiAgICB9XG4gICAgdGFrZVNjcmVlbnNob3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfdGFrZVNjcmVlbnNob3QoKTtcbiAgICB9XG4gICAgYXV0b1NpemVBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfYXV0b1NpemVBY3RpdmUoKTtcbiAgICB9XG4gICAgY2hhcnRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX2VsZW1lbnQoKTtcbiAgICB9XG4gICAgcGFuZVNpemUoKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9wcml2YXRlX19jaGFydFdpZGdldC5faW50ZXJuYWxfcGFuZVNpemUoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0Q3Jvc3NoYWlyUG9zaXRpb24ocHJpY2UsIGhvcml6b250YWxQb3NpdGlvbiwgc2VyaWVzQXBpKSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHRoaXMuX3ByaXZhdGVfX3Nlcmllc01hcC5nZXQoc2VyaWVzQXBpKTtcbiAgICAgICAgaWYgKHNlcmllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFuZSA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9wYW5lRm9yU291cmNlKHNlcmllcyk7XG4gICAgICAgIGlmIChwYW5lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX3NldEFuZFNhdmVTeW50aGV0aWNQb3NpdGlvbihwcmljZSwgaG9yaXpvbnRhbFBvc2l0aW9uLCBwYW5lKTtcbiAgICB9XG4gICAgY2xlYXJDcm9zc2hhaXJQb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fY2hhcnRXaWRnZXQuX2ludGVybmFsX21vZGVsKCkuX2ludGVybmFsX2NsZWFyQ3VycmVudFBvc2l0aW9uKHRydWUpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fYWRkU2VyaWVzSW1wbCh0eXBlLCBzdHlsZURlZmF1bHRzLCBvcHRpb25zID0ge30sIGN1c3RvbVBhbmVWaWV3KSB7XG4gICAgICAgIHBhdGNoUHJpY2VGb3JtYXQob3B0aW9ucy5wcmljZUZvcm1hdCk7XG4gICAgICAgIGNvbnN0IHN0cmljdE9wdGlvbnMgPSBtZXJnZShjbG9uZShzZXJpZXNPcHRpb25zRGVmYXVsdHMpLCBjbG9uZShzdHlsZURlZmF1bHRzKSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9tb2RlbCgpLl9pbnRlcm5hbF9jcmVhdGVTZXJpZXModHlwZSwgc3RyaWN0T3B0aW9ucywgY3VzdG9tUGFuZVZpZXcpO1xuICAgICAgICBjb25zdCByZXMgPSBuZXcgU2VyaWVzQXBpKHNlcmllcywgdGhpcywgdGhpcywgdGhpcywgdGhpcy5fcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IpO1xuICAgICAgICB0aGlzLl9wcml2YXRlX19zZXJpZXNNYXAuc2V0KHJlcywgc2VyaWVzKTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZV9fc2VyaWVzTWFwUmV2ZXJzZWQuc2V0KHNlcmllcywgcmVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX3ByaXZhdGVfX3NlbmRVcGRhdGVUb0NoYXJ0KHVwZGF0ZSkge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0Ll9pbnRlcm5hbF9tb2RlbCgpO1xuICAgICAgICBtb2RlbC5faW50ZXJuYWxfdXBkYXRlVGltZVNjYWxlKHVwZGF0ZS5faW50ZXJuYWxfdGltZVNjYWxlLl9pbnRlcm5hbF9iYXNlSW5kZXgsIHVwZGF0ZS5faW50ZXJuYWxfdGltZVNjYWxlLl9pbnRlcm5hbF9wb2ludHMsIHVwZGF0ZS5faW50ZXJuYWxfdGltZVNjYWxlLl9pbnRlcm5hbF9maXJzdENoYW5nZWRQb2ludEluZGV4KTtcbiAgICAgICAgdXBkYXRlLl9pbnRlcm5hbF9zZXJpZXMuZm9yRWFjaCgodmFsdWUsIHNlcmllcykgPT4gc2VyaWVzLl9pbnRlcm5hbF9zZXREYXRhKHZhbHVlLl9pbnRlcm5hbF9kYXRhLCB2YWx1ZS5faW50ZXJuYWxfaW5mbykpO1xuICAgICAgICBtb2RlbC5faW50ZXJuYWxfcmVjYWxjdWxhdGVBbGxQYW5lcygpO1xuICAgIH1cbiAgICBfcHJpdmF0ZV9fbWFwU2VyaWVzVG9BcGkoc2VyaWVzKSB7XG4gICAgICAgIHJldHVybiBlbnN1cmVEZWZpbmVkKHRoaXMuX3ByaXZhdGVfX3Nlcmllc01hcFJldmVyc2VkLmdldChzZXJpZXMpKTtcbiAgICB9XG4gICAgX3ByaXZhdGVfX2NvbnZlcnRNb3VzZVBhcmFtcyhwYXJhbSkge1xuICAgICAgICBjb25zdCBzZXJpZXNEYXRhID0gbmV3IE1hcCgpO1xuICAgICAgICBwYXJhbS5faW50ZXJuYWxfc2VyaWVzRGF0YS5mb3JFYWNoKChwbG90Um93LCBzZXJpZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllc1R5cGUgPSBzZXJpZXMuX2ludGVybmFsX3Nlcmllc1R5cGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRTZXJpZXNEYXRhQ3JlYXRvcihzZXJpZXNUeXBlKShwbG90Um93KTtcbiAgICAgICAgICAgIGlmIChzZXJpZXNUeXBlICE9PSAnQ3VzdG9tJykge1xuICAgICAgICAgICAgICAgIGFzc2VydChpc0Z1bGZpbGxlZERhdGEoZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tV2hpdGVzcGFjZUNoZWNrZXIgPSBzZXJpZXMuX2ludGVybmFsX2N1c3RvbVNlcmllc1doaXRlc3BhY2VDaGVjaygpO1xuICAgICAgICAgICAgICAgIGFzc2VydCghY3VzdG9tV2hpdGVzcGFjZUNoZWNrZXIgfHwgY3VzdG9tV2hpdGVzcGFjZUNoZWNrZXIoZGF0YSkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcmllc0RhdGEuc2V0KHRoaXMuX3ByaXZhdGVfX21hcFNlcmllc1RvQXBpKHNlcmllcyksIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaG92ZXJlZFNlcmllcyA9IHBhcmFtLl9pbnRlcm5hbF9ob3ZlcmVkU2VyaWVzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICF0aGlzLl9wcml2YXRlX19zZXJpZXNNYXBSZXZlcnNlZC5oYXMocGFyYW0uX2ludGVybmFsX2hvdmVyZWRTZXJpZXMpXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiB0aGlzLl9wcml2YXRlX19tYXBTZXJpZXNUb0FwaShwYXJhbS5faW50ZXJuYWxfaG92ZXJlZFNlcmllcyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aW1lOiBwYXJhbS5faW50ZXJuYWxfb3JpZ2luYWxUaW1lLFxuICAgICAgICAgICAgbG9naWNhbDogcGFyYW0uX2ludGVybmFsX2luZGV4LFxuICAgICAgICAgICAgcG9pbnQ6IHBhcmFtLl9pbnRlcm5hbF9wb2ludCxcbiAgICAgICAgICAgIGhvdmVyZWRTZXJpZXMsXG4gICAgICAgICAgICBob3ZlcmVkT2JqZWN0SWQ6IHBhcmFtLl9pbnRlcm5hbF9ob3ZlcmVkT2JqZWN0LFxuICAgICAgICAgICAgc2VyaWVzRGF0YSxcbiAgICAgICAgICAgIHNvdXJjZUV2ZW50OiBwYXJhbS5faW50ZXJuYWxfdG91Y2hNb3VzZUV2ZW50RGF0YSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBvZiB0aGUgTGlnaHR3ZWlnaHQgQ2hhcnRpbmcgTGlicmFyeS4gSWYgeW91IGFyZSB1c2luZyB0aW1lIHZhbHVlc1xuICogZm9yIHRoZSBob3Jpem9udGFsIHNjYWxlIHRoZW4gaXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3UgcmF0aGVyIHVzZSB0aGUge0BsaW5rIGNyZWF0ZUNoYXJ0fSBmdW5jdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgSG9yelNjYWxlSXRlbSAtIHR5cGUgb2YgcG9pbnRzIG9uIHRoZSBob3Jpem9udGFsIHNjYWxlXG4gKiBAdGVtcGxhdGUgVEhvcnpTY2FsZUJlaGF2aW9yIC0gdHlwZSBvZiBob3Jpem9udGFsIGF4aXMgc3RyYXRlZ3kgdGhhdCBlbmNhcHN1bGF0ZSBhbGwgdGhlIHNwZWNpZmljIGJlaGF2aW9ycyBvZiB0aGUgaG9yaXpvbnRhbCBzY2FsZSB0eXBlXG4gKlxuICogQHBhcmFtIGNvbnRhaW5lciAtIElEIG9mIEhUTUwgZWxlbWVudCBvciBlbGVtZW50IGl0c2VsZlxuICogQHBhcmFtIGhvcnpTY2FsZUJlaGF2aW9yIC0gSG9yaXpvbnRhbCBzY2FsZSBiZWhhdmlvclxuICogQHBhcmFtIG9wdGlvbnMgLSBBbnkgc3Vic2V0IG9mIG9wdGlvbnMgdG8gYmUgYXBwbGllZCBhdCBzdGFydC5cbiAqIEByZXR1cm5zIEFuIGludGVyZmFjZSB0byB0aGUgY3JlYXRlZCBjaGFydFxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFydEV4KGNvbnRhaW5lciwgaG9yelNjYWxlQmVoYXZpb3IsIG9wdGlvbnMpIHtcbiAgICBsZXQgaHRtbEVsZW1lbnQ7XG4gICAgaWYgKGlzU3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRhaW5lcik7XG4gICAgICAgIGFzc2VydChlbGVtZW50ICE9PSBudWxsLCBgQ2Fubm90IGZpbmQgZWxlbWVudCBpbiBET00gd2l0aCBpZD0ke2NvbnRhaW5lcn1gKTtcbiAgICAgICAgaHRtbEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaHRtbEVsZW1lbnQgPSBjb250YWluZXI7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IG5ldyBDaGFydEFwaShodG1sRWxlbWVudCwgaG9yelNjYWxlQmVoYXZpb3IsIG9wdGlvbnMpO1xuICAgIGhvcnpTY2FsZUJlaGF2aW9yLnNldE9wdGlvbnMocmVzLm9wdGlvbnMoKSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyB0aGUgc2ltcGxpZmllZCBtYWluIGVudHJ5IHBvaW50IG9mIHRoZSBMaWdodHdlaWdodCBDaGFydGluZyBMaWJyYXJ5IHdpdGggdGltZSBwb2ludHMgZm9yIHRoZSBob3Jpem9udGFsIHNjYWxlLlxuICpcbiAqIEBwYXJhbSBjb250YWluZXIgLSBJRCBvZiBIVE1MIGVsZW1lbnQgb3IgZWxlbWVudCBpdHNlbGZcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW55IHN1YnNldCBvZiBvcHRpb25zIHRvIGJlIGFwcGxpZWQgYXQgc3RhcnQuXG4gKiBAcmV0dXJucyBBbiBpbnRlcmZhY2UgdG8gdGhlIGNyZWF0ZWQgY2hhcnRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhcnQoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYXJ0RXgoY29udGFpbmVyLCBuZXcgSG9yelNjYWxlQmVoYXZpb3JUaW1lKCksIEhvcnpTY2FsZUJlaGF2aW9yVGltZS5faW50ZXJuYWxfYXBwbHlEZWZhdWx0cyhvcHRpb25zKSk7XG59XG4vKipcbiAqIFByb3ZpZGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBob3Jpem9udGFsIHNjYWxlICh0aW1lLWJhc2VkKSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgYmFzZSBmb3IgZXh0ZW5kaW5nIHRoZSBob3Jpem9udGFsIHNjYWxlIHdpdGggY3VzdG9tIGJlaGF2aW9yLlxuICogVGhpcyBhbGxvd3MgZm9yIHRoZSBpbnRyb2R1Y3Rpb24gb2YgY3VzdG9tIGZ1bmN0aW9uYWxpdHkgd2l0aG91dCByZS1pbXBsZW1lbnRpbmcgdGhlIGVudGlyZSB7QGxpbmsgSUhvcnpTY2FsZUJlaGF2aW9yfSZsdDt7QGxpbmsgVGltZX0mZ3Q7IGludGVyZmFjZS5cbiAqXG4gKiBGb3IgZnVydGhlciBkZXRhaWxzLCByZWZlciB0byB0aGUge0BsaW5rIGNyZWF0ZUNoYXJ0RXh9IGNoYXJ0IGNvbnN0cnVjdG9yIG1ldGhvZC5cbiAqXG4gKiBAcmV0dXJucyBBbiB1bmluaXRpYWxpemVkIGNsYXNzIGltcGxlbWVudGluZyB0aGUge0BsaW5rIElIb3J6U2NhbGVCZWhhdmlvcn0mbHQ7e0BsaW5rIFRpbWV9Jmd0OyBpbnRlcmZhY2VcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdEhvcnpTY2FsZUJlaGF2aW9yKCkge1xuICAgIHJldHVybiBIb3J6U2NhbGVCZWhhdmlvclRpbWU7XG59XG5cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiX2J1aWxkLXRpbWUtY29uc3RhbnRzXCIgLz5cbmNvbnN0IGN1c3RvbVNlcmllc0RlZmF1bHRPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzZXJpZXNPcHRpb25zRGVmYXVsdHMpLCBjdXN0b21TdHlsZURlZmF1bHRzKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCB2ZXJzaW9uIGFzIGEgc3RyaW5nLiBGb3IgZXhhbXBsZSBgJzMuMy4wJ2AuXG4gKi9cbmZ1bmN0aW9uIHZlcnNpb24oKSB7XG4gICAgcmV0dXJuIFwiNC4yLjNcIjtcbn1cblxuZXhwb3J0IHsgQ29sb3JUeXBlLCBDcm9zc2hhaXJNb2RlLCBMYXN0UHJpY2VBbmltYXRpb25Nb2RlLCBMaW5lU3R5bGUsIExpbmVUeXBlLCBNaXNtYXRjaERpcmVjdGlvbiwgUHJpY2VMaW5lU291cmNlLCBQcmljZVNjYWxlTW9kZSwgVGlja01hcmtUeXBlLCBUcmFja2luZ01vZGVFeGl0TW9kZSwgY3JlYXRlQ2hhcnQsIGNyZWF0ZUNoYXJ0RXgsIGN1c3RvbVNlcmllc0RlZmF1bHRPcHRpb25zLCBkZWZhdWx0SG9yelNjYWxlQmVoYXZpb3IsIGlzQnVzaW5lc3NEYXksIGlzVVRDVGltZXN0YW1wLCB2ZXJzaW9uIH07XG4iXSwibmFtZXMiOlsic2l6ZSIsInNpemUkMSIsImJpbmRDYW52YXNFbGVtZW50Qml0bWFwU2l6ZVRvIiwiZXF1YWxTaXplcyIsInRyeUNyZWF0ZUNhbnZhc1JlbmRlcmluZ1RhcmdldDJEIiwiY2FuZGxlc3RpY2tTdHlsZURlZmF1bHRzIiwidXBDb2xvciIsImRvd25Db2xvciIsIndpY2tWaXNpYmxlIiwiYm9yZGVyVmlzaWJsZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyVXBDb2xvciIsImJvcmRlckRvd25Db2xvciIsIndpY2tDb2xvciIsIndpY2tVcENvbG9yIiwid2lja0Rvd25Db2xvciIsImJhclN0eWxlRGVmYXVsdHMiLCJvcGVuVmlzaWJsZSIsInRoaW5CYXJzIiwibGluZVN0eWxlRGVmYXVsdHMiLCJjb2xvciIsImxpbmVTdHlsZSIsImxpbmVXaWR0aCIsImxpbmVUeXBlIiwibGluZVZpc2libGUiLCJjcm9zc2hhaXJNYXJrZXJWaXNpYmxlIiwiY3Jvc3NoYWlyTWFya2VyUmFkaXVzIiwiY3Jvc3NoYWlyTWFya2VyQm9yZGVyQ29sb3IiLCJjcm9zc2hhaXJNYXJrZXJCb3JkZXJXaWR0aCIsImNyb3NzaGFpck1hcmtlckJhY2tncm91bmRDb2xvciIsImxhc3RQcmljZUFuaW1hdGlvbiIsInBvaW50TWFya2Vyc1Zpc2libGUiLCJhcmVhU3R5bGVEZWZhdWx0cyIsInRvcENvbG9yIiwiYm90dG9tQ29sb3IiLCJpbnZlcnRGaWxsZWRBcmVhIiwibGluZUNvbG9yIiwiYmFzZWxpbmVTdHlsZURlZmF1bHRzIiwiYmFzZVZhbHVlIiwidHlwZSIsInByaWNlIiwidG9wRmlsbENvbG9yMSIsInRvcEZpbGxDb2xvcjIiLCJ0b3BMaW5lQ29sb3IiLCJib3R0b21GaWxsQ29sb3IxIiwiYm90dG9tRmlsbENvbG9yMiIsImJvdHRvbUxpbmVDb2xvciIsImhpc3RvZ3JhbVN0eWxlRGVmYXVsdHMiLCJiYXNlIiwiY3VzdG9tU3R5bGVEZWZhdWx0cyIsInNlcmllc09wdGlvbnNEZWZhdWx0cyIsInRpdGxlIiwidmlzaWJsZSIsImxhc3RWYWx1ZVZpc2libGUiLCJwcmljZUxpbmVWaXNpYmxlIiwicHJpY2VMaW5lU291cmNlIiwicHJpY2VMaW5lV2lkdGgiLCJwcmljZUxpbmVDb2xvciIsInByaWNlTGluZVN0eWxlIiwiYmFzZUxpbmVWaXNpYmxlIiwiYmFzZUxpbmVXaWR0aCIsImJhc2VMaW5lQ29sb3IiLCJiYXNlTGluZVN0eWxlIiwicHJpY2VGb3JtYXQiLCJwcmVjaXNpb24iLCJtaW5Nb3ZlIiwiTGluZVR5cGUiLCJMaW5lU3R5bGUiLCJzZXRMaW5lU3R5bGUiLCJjdHgiLCJzdHlsZSIsImRhc2hQYXR0ZXJucyIsImRhc2hQYXR0ZXJuIiwic2V0TGluZURhc2giLCJkcmF3SG9yaXpvbnRhbExpbmUiLCJ5IiwibGVmdCIsInJpZ2h0IiwiYmVnaW5QYXRoIiwiY29ycmVjdGlvbiIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImRyYXdWZXJ0aWNhbExpbmUiLCJ4IiwidG9wIiwiYm90dG9tIiwic3Ryb2tlSW5QaXhlbCIsImRyYXdGdW5jdGlvbiIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyZXN0b3JlIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwiZW5zdXJlRGVmaW5lZCIsInZhbHVlIiwidW5kZWZpbmVkIiwiZW5zdXJlTm90TnVsbCIsImVuc3VyZSIsImVuc3VyZU5ldmVyIiwibmFtZWRDb2xvclJnYkhleFN0cmluZ3MiLCJraGFraSIsImF6dXJlIiwiYWxpY2VibHVlIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJnYWluc2Jvcm8iLCJncmF5IiwiZ3JlZW4iLCJob25leWRldyIsImZsb3JhbHdoaXRlIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxlbW9uY2hpZmZvbiIsImhvdHBpbmsiLCJsaWdodHllbGxvdyIsImdyZWVueWVsbG93IiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaW1lZ3JlZW4iLCJsaW5lbiIsImxpZ2h0Y3lhbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJvbGl2ZSIsIm9yYW5nZSIsIm9sZGxhY2UiLCJtZWRpdW1ibHVlIiwidHJhbnNwYXJlbnQiLCJsaW1lIiwibGlnaHRwaW5rIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJtaWRuaWdodGJsdWUiLCJvcmNoaWQiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW10dXJxdW9pc2UiLCJvcmFuZ2VyZWQiLCJyb3lhbGJsdWUiLCJwb3dkZXJibHVlIiwicmVkIiwiY29yYWwiLCJ0dXJxdW9pc2UiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ3aGVhdCIsInRlYWwiLCJzdGVlbGJsdWUiLCJiaXNxdWUiLCJhcXVhbWFyaW5lIiwiYXF1YSIsInNpZW5uYSIsInNpbHZlciIsInNwcmluZ2dyZWVuIiwiYW50aXF1ZXdoaXRlIiwiYnVybHl3b29kIiwiYnJvd24iLCJiZWlnZSIsImNob2NvbGF0ZSIsImNoYXJ0cmV1c2UiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImNhZGV0Ymx1ZSIsInRvbWF0byIsImZ1Y2hzaWEiLCJibHVlIiwic2FsbW9uIiwiYmxhbmNoZWRhbG1vbmQiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJ0aGlzdGxlIiwidGFuIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJibHVldmlvbGV0IiwiYmxhY2siLCJkYXJrbWFnZW50YSIsImRhcmtzbGF0ZWJsdWUiLCJkYXJra2hha2kiLCJkYXJrb3JjaGlkIiwiZGFya29yYW5nZSIsImRhcmtncmVlbiIsImRhcmtyZWQiLCJkb2RnZXJibHVlIiwiZGFya3NsYXRlZ3JheSIsImRpbWdyYXkiLCJkZWVwc2t5Ymx1ZSIsImZpcmVicmljayIsImZvcmVzdGdyZWVuIiwiaW5kaWdvIiwiaXZvcnkiLCJsYXZlbmRlcmJsdXNoIiwiZmVsZHNwYXIiLCJpbmRpYW5yZWQiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlYmx1ZSIsInNub3ciLCJsaWdodHNlYWdyZWVuIiwibGlnaHRzYWxtb24iLCJkYXJrc2FsbW9uIiwiZGFya3Zpb2xldCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bWFxdWFtYXJpbmUiLCJza3libHVlIiwibGF2ZW5kZXIiLCJsaWdodHN0ZWVsYmx1ZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pbnRjcmVhbSIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9saXZlZHJhYiIsInBhbGV2aW9sZXRyZWQiLCJ2aW9sZXRyZWQiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImxhd25ncmVlbiIsInBpbmsiLCJwYWxldHVycXVvaXNlIiwicGFsZWdvbGRlbnJvZCIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya3NlYWdyZWVuIiwiZGFya3R1cnF1b2lzZSIsInBlYWNocHVmZiIsImRlZXBwaW5rIiwidmlvbGV0IiwicGFsZWdyZWVuIiwibWVkaXVtc2VhZ3JlZW4iLCJwZXJ1Iiwic2FkZGxlYnJvd24iLCJzYW5keWJyb3duIiwicm9zeWJyb3duIiwicHVycGxlIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInBhcGF5YXdoaXAiLCJtZWRpdW1zbGF0ZWJsdWUiLCJwbHVtIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJub3JtYWxpemVSZ2JDb21wb25lbnQiLCJjb21wb25lbnQiLCJNYXRoIiwicm91bmQiLCJub3JtYWxpemVBbHBoYUNvbXBvbmVudCIsIm1pbiIsIm1heCIsInNob3J0SGV4UmUiLCJoZXhSZSIsInJnYlJlIiwicmdiYVJlIiwiY29sb3JTdHJpbmdUb1JnYmEiLCJjb2xvclN0cmluZyIsInRvTG93ZXJDYXNlIiwibWF0Y2hlcyIsImV4ZWMiLCJwYXJzZUludCIsImxlbmd0aCIsInBhcnNlRmxvYXQiLCJyZ2JhVG9HcmF5c2NhbGUiLCJyZ2JWYWx1ZSIsInJlZENvbXBvbmVudEdyYXlzY2FsZVdlaWdodCIsImdyZWVuQ29tcG9uZW50R3JheXNjYWxlV2VpZ2h0IiwiYmx1ZUNvbXBvbmVudEdyYXlzY2FsZVdlaWdodCIsImFwcGx5QWxwaGEiLCJhbHBoYSIsIm9yaWdpblJnYmEiLCJvcmlnaW5BbHBoYSIsImdlbmVyYXRlQ29udHJhc3RDb2xvcnMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJyZ2IiLCJfaW50ZXJuYWxfYmFja2dyb3VuZCIsIl9pbnRlcm5hbF9mb3JlZ3JvdW5kIiwiY29sb3JTdHJpbmdUb0dyYXlzY2FsZSIsImdyYWRpZW50Q29sb3JBdFBlcmNlbnQiLCJwZXJjZW50IiwidG9wUiIsInRvcEciLCJ0b3BCIiwidG9wQSIsImJvdHRvbVIiLCJib3R0b21HIiwiYm90dG9tQiIsImJvdHRvbUEiLCJyZXN1bHRSZ2JhIiwiRGVsZWdhdGUiLCJjb25zdHJ1Y3RvciIsIl9wcml2YXRlX19saXN0ZW5lcnMiLCJfaW50ZXJuYWxfc3Vic2NyaWJlIiwiY2FsbGJhY2siLCJsaW5rZWRPYmplY3QiLCJzaW5nbGVzaG90IiwibGlzdGVuZXIiLCJfaW50ZXJuYWxfY2FsbGJhY2siLCJfaW50ZXJuYWxfbGlua2VkT2JqZWN0IiwiX2ludGVybmFsX3NpbmdsZXNob3QiLCJwdXNoIiwiX2ludGVybmFsX3Vuc3Vic2NyaWJlIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJfaW50ZXJuYWxfdW5zdWJzY3JpYmVBbGwiLCJmaWx0ZXIiLCJfaW50ZXJuYWxfZmlyZSIsInBhcmFtMSIsInBhcmFtMiIsInBhcmFtMyIsImxpc3RlbmVyc1NuYXBzaG90IiwiZm9yRWFjaCIsIl9pbnRlcm5hbF9oYXNMaXN0ZW5lcnMiLCJfaW50ZXJuYWxfZGVzdHJveSIsIm1lcmdlIiwiZHN0Iiwic291cmNlcyIsInNyYyIsImkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmNsdWRlcyIsIkFycmF5IiwiaXNBcnJheSIsImlzTnVtYmVyIiwiaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1N0cmluZyIsImlzQm9vbGVhbiIsImNsb25lIiwib2JqZWN0IiwibyIsImMiLCJwIiwidiIsIm5vdE51bGwiLCJ0IiwidW5kZWZpbmVkSWZOdWxsIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJtYWtlRm9udCIsImZhbWlseSIsIlByaWNlQXhpc1JlbmRlcmVyT3B0aW9uc1Byb3ZpZGVyIiwiY2hhcnRNb2RlbCIsIl9wcml2YXRlX19yZW5kZXJlck9wdGlvbnMiLCJfaW50ZXJuYWxfYm9yZGVyU2l6ZSIsIl9pbnRlcm5hbF90aWNrTGVuZ3RoIiwiX2ludGVybmFsX2ZvbnRTaXplIiwiTmFOIiwiX2ludGVybmFsX2ZvbnQiLCJfaW50ZXJuYWxfZm9udEZhbWlseSIsIl9pbnRlcm5hbF9jb2xvciIsIl9pbnRlcm5hbF9wYW5lQmFja2dyb3VuZENvbG9yIiwiX2ludGVybmFsX3BhZGRpbmdCb3R0b20iLCJfaW50ZXJuYWxfcGFkZGluZ0lubmVyIiwiX2ludGVybmFsX3BhZGRpbmdPdXRlciIsIl9pbnRlcm5hbF9wYWRkaW5nVG9wIiwiX2ludGVybmFsX2Jhc2VsaW5lT2Zmc2V0IiwiX3ByaXZhdGVfX2NoYXJ0TW9kZWwiLCJfaW50ZXJuYWxfb3B0aW9ucyIsInJlbmRlcmVyT3B0aW9ucyIsImN1cnJlbnRGb250U2l6ZSIsIl9wcml2YXRlX19mb250U2l6ZSIsImN1cnJlbnRGb250RmFtaWx5IiwiX3ByaXZhdGVfX2ZvbnRGYW1pbHkiLCJfcHJpdmF0ZV9fdGV4dENvbG9yIiwiX3ByaXZhdGVfX3BhbmVCYWNrZ3JvdW5kQ29sb3IiLCJsYXlvdXQiLCJ0ZXh0Q29sb3IiLCJfaW50ZXJuYWxfYmFja2dyb3VuZFRvcENvbG9yIiwiZm9udFNpemUiLCJmb250RmFtaWx5IiwiQ29tcG9zaXRlUmVuZGVyZXIiLCJfcHJpdmF0ZV9fcmVuZGVyZXJzIiwiX2ludGVybmFsX3NldFJlbmRlcmVycyIsInJlbmRlcmVycyIsIl9pbnRlcm5hbF9kcmF3IiwidGFyZ2V0IiwiaXNIb3ZlcmVkIiwiaGl0VGVzdERhdGEiLCJyIiwiQml0bWFwQ29vcmRpbmF0ZXNQYW5lUmVuZGVyZXIiLCJ1c2VCaXRtYXBDb29yZGluYXRlU3BhY2UiLCJzY29wZSIsIl9pbnRlcm5hbF9fZHJhd0ltcGwiLCJQYW5lUmVuZGVyZXJNYXJrcyIsImFyZ3VtZW50cyIsIl9pbnRlcm5hbF9fZGF0YSIsIl9pbnRlcm5hbF9zZXREYXRhIiwiZGF0YSIsImNvbnRleHQiLCJob3Jpem9udGFsUGl4ZWxSYXRpbyIsInZlcnRpY2FsUGl4ZWxSYXRpbyIsIl9pbnRlcm5hbF92aXNpYmxlUmFuZ2UiLCJ2aXNpYmxlUmFuZ2UiLCJ0aWNrV2lkdGgiLCJmbG9vciIsImRyYXciLCJyYWRpdXNNZWRpYSIsInRvIiwiZnJvbSIsInBvaW50IiwiX2ludGVybmFsX2l0ZW1zIiwiY2VudGVyWCIsIl9pbnRlcm5hbF94IiwiY2VudGVyWSIsIl9pbnRlcm5hbF95IiwicmFkaXVzIiwiYXJjIiwiUEkiLCJmaWxsIiwiX2ludGVybmFsX2xpbmVXaWR0aCIsImZpbGxTdHlsZSIsIl9pbnRlcm5hbF9iYWNrQ29sb3IiLCJfaW50ZXJuYWxfcmFkaXVzIiwiX2ludGVybmFsX2xpbmVDb2xvciIsImNyZWF0ZUVtcHR5TWFya2VyRGF0YSIsIl9pbnRlcm5hbF90aW1lIiwiX2ludGVybmFsX3ByaWNlIiwicmFuZ2VGb3JTaW5nbGVQb2ludCIsIkNyb3NzaGFpck1hcmtzUGFuZVZpZXciLCJjcm9zc2hhaXIiLCJfcHJpdmF0ZV9fY29tcG9zaXRlUmVuZGVyZXIiLCJfcHJpdmF0ZV9fbWFya2Vyc1JlbmRlcmVycyIsIl9wcml2YXRlX19tYXJrZXJzRGF0YSIsIl9wcml2YXRlX19pbnZhbGlkYXRlZCIsIl9wcml2YXRlX19jcm9zc2hhaXIiLCJfaW50ZXJuYWxfdXBkYXRlIiwidXBkYXRlVHlwZSIsInNlcmllc2VzIiwiX2ludGVybmFsX3Nlcmllc2VzIiwibWFwIiwicmVzIiwiX2ludGVybmFsX3JlbmRlcmVyIiwiX3ByaXZhdGVfX3VwZGF0ZUltcGwiLCJmb3JjZUhpZGRlbiIsIm1vZGUiLCJ0aW1lUG9pbnRJbmRleCIsIl9pbnRlcm5hbF9hcHBsaWVkSW5kZXgiLCJ0aW1lU2NhbGUiLCJfaW50ZXJuYWxfdGltZVNjYWxlIiwicyIsIl9hIiwic2VyaWVzRGF0YSIsIl9pbnRlcm5hbF9tYXJrZXJEYXRhQXRJbmRleCIsIl9pbnRlcm5hbF92aXNpYmxlIiwiZmlyc3RWYWx1ZSIsIl9pbnRlcm5hbF9maXJzdFZhbHVlIiwiX2ludGVybmFsX2JhY2tncm91bmRDb2xvciIsIl9pbnRlcm5hbF9ib3JkZXJXaWR0aCIsIl9pbnRlcm5hbF9wcmljZVNjYWxlIiwiX2ludGVybmFsX3ByaWNlVG9Db29yZGluYXRlIiwiX2ludGVybmFsX3ZhbHVlIiwiX2ludGVybmFsX2JvcmRlckNvbG9yIiwiX2ludGVybmFsX2JhY2tncm91bmRDb2xvckF0WVBlcmNlbnRGcm9tVG9wIiwiX2ludGVybmFsX2hlaWdodCIsIl9pbnRlcm5hbF9pbmRleFRvQ29vcmRpbmF0ZSIsIkNyb3NzaGFpclJlbmRlcmVyIiwiX3ByaXZhdGVfX2RhdGEiLCJiaXRtYXBTaXplIiwidmVydExpbmVzVmlzaWJsZSIsIl9pbnRlcm5hbF92ZXJ0TGluZSIsImhvcnpMaW5lc1Zpc2libGUiLCJfaW50ZXJuYWxfaG9yekxpbmUiLCJsaW5lQ2FwIiwic3Ryb2tlU3R5bGUiLCJfaW50ZXJuYWxfbGluZVN0eWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJDcm9zc2hhaXJQYW5lVmlldyIsInNvdXJjZSIsIl9wcml2YXRlX19yZW5kZXJlckRhdGEiLCJfcHJpdmF0ZV9fcmVuZGVyZXIiLCJfcHJpdmF0ZV9fc291cmNlIiwicGFuZSIsIl9pbnRlcm5hbF9wYW5lIiwiY3Jvc3NoYWlyT3B0aW9ucyIsIl9pbnRlcm5hbF9tb2RlbCIsIl9pbnRlcm5hbF9ob3J6TGluZVZpc2libGUiLCJfaW50ZXJuYWxfdmVydExpbmVWaXNpYmxlIiwiaG9yekxpbmUiLCJ2ZXJ0TGluZSIsIl9pbnRlcm5hbF9hcHBsaWVkWCIsIl9pbnRlcm5hbF9hcHBsaWVkWSIsImZpbGxSZWN0SW5uZXJCb3JkZXIiLCJib3JkZXJXaWR0aCIsImZpbGxSZWN0IiwiY2xlYXJSZWN0IiwidyIsImgiLCJjbGVhckNvbG9yIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiY2hhbmdlQm9yZGVyUmFkaXVzIiwiYm9yZGVyUmFkaXVzIiwib2Zmc2V0IiwiZHJhd1JvdW5kUmVjdCIsInJhZGlpIiwicm91bmRSZWN0IiwiYXJjVG8iLCJkcmF3Um91bmRSZWN0V2l0aEJvcmRlciIsIm91dGVyQm9yZGVyUmFkaXVzIiwiaGFsZkJvcmRlcldpZHRoIiwiY2xvc2VQYXRoIiwiY2xlYXJSZWN0V2l0aEdyYWRpZW50IiwiZ3JhZGllbnQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsIlByaWNlQXhpc1ZpZXdSZW5kZXJlciIsImNvbW1vbkRhdGEiLCJfcHJpdmF0ZV9fY29tbW9uRGF0YSIsInVzZVNlY29uZExpbmUiLCJ0ZXh0V2lkdGhDYWNoZSIsImFsaWduIiwiX2ludGVybmFsX3RleHQiLCJnZW9tZXRyeSIsImZvbnQiLCJnZW9tIiwiX3ByaXZhdGVfX2NhbGN1bGF0ZUdlb21ldHJ5IiwiZ2IiLCJfaW50ZXJuYWxfYml0bWFwIiwiX2ludGVybmFsX2FsaWduUmlnaHQiLCJfaW50ZXJuYWxfeE91dHNpZGUiLCJfaW50ZXJuYWxfeVRvcCIsIl9pbnRlcm5hbF90b3RhbFdpZHRoIiwiX2ludGVybmFsX3RvdGFsSGVpZ2h0IiwiX2ludGVybmFsX2hvcnpCb3JkZXIiLCJfaW50ZXJuYWxfeEluc2lkZSIsIl9pbnRlcm5hbF90aWNrVmlzaWJsZSIsIl9pbnRlcm5hbF95TWlkIiwiX2ludGVybmFsX3hUaWNrIiwiX2ludGVybmFsX3RpY2tIZWlnaHQiLCJfaW50ZXJuYWxfYm9yZGVyVmlzaWJsZSIsIl9pbnRlcm5hbF9yaWdodCIsIl9pbnRlcm5hbF95Qm90dG9tIiwidXNlTWVkaWFDb29yZGluYXRlU3BhY2UiLCJnbSIsIl9pbnRlcm5hbF9tZWRpYSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwiX2ludGVybmFsX3hUZXh0IiwiX2ludGVybmFsX3RleHRNaWRDb3JyZWN0aW9uIiwibWVkaWFTaXplIiwidGlja1NpemUiLCJfaW50ZXJuYWxfbW92ZVRleHRUb0ludmlzaWJsZVRpY2siLCJob3J6Qm9yZGVyIiwiX2ludGVybmFsX3NlcGFyYXRvclZpc2libGUiLCJwYWRkaW5nVG9wIiwiX2ludGVybmFsX2FkZGl0aW9uYWxQYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIl9pbnRlcm5hbF9hZGRpdGlvbmFsUGFkZGluZ0JvdHRvbSIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdPdXRlciIsInRleHQiLCJhY3R1YWxUZXh0SGVpZ2h0IiwidGV4dE1pZENvcnJlY3Rpb24iLCJfaW50ZXJuYWxfeU1pZENvcnJlY3Rpb24iLCJ0ZXh0V2lkdGgiLCJjZWlsIiwiX2ludGVybmFsX21lYXN1cmVUZXh0IiwidG90YWxIZWlnaHQiLCJ0b3RhbFdpZHRoIiwidGlja0hlaWdodEJpdG1hcCIsInRvdGFsSGVpZ2h0Qml0bWFwIiwiaG9yekJvcmRlckJpdG1hcCIsInRvdGFsV2lkdGhCaXRtYXAiLCJ0aWNrU2l6ZUJpdG1hcCIsInlNaWQiLCJfaW50ZXJuYWxfZml4ZWRDb29yZGluYXRlIiwiX2ludGVybmFsX2Nvb3JkaW5hdGUiLCJ5TWlkQml0bWFwIiwieVRvcEJpdG1hcCIsInlCb3R0b21CaXRtYXAiLCJhbGlnblJpZ2h0IiwieEluc2lkZSIsInhJbnNpZGVCaXRtYXAiLCJ4T3V0c2lkZUJpdG1hcCIsInhUaWNrQml0bWFwIiwieFRleHQiLCJQcmljZUF4aXNWaWV3IiwiY3RvciIsIl9wcml2YXRlX19jb21tb25SZW5kZXJlckRhdGEiLCJfcHJpdmF0ZV9fYXhpc1JlbmRlcmVyRGF0YSIsIl9wcml2YXRlX19wYW5lUmVuZGVyZXJEYXRhIiwiX3ByaXZhdGVfX2F4aXNSZW5kZXJlciIsIl9wcml2YXRlX19wYW5lUmVuZGVyZXIiLCJfcHJpdmF0ZV9fdXBkYXRlUmVuZGVyZXJEYXRhSWZOZWVkZWQiLCJfaW50ZXJuYWxfZ2V0Rml4ZWRDb29yZGluYXRlIiwiX2ludGVybmFsX3NldEZpeGVkQ29vcmRpbmF0ZSIsIl9pbnRlcm5hbF9pc1Zpc2libGUiLCJfaW50ZXJuYWxfaXNBeGlzTGFiZWxWaXNpYmxlIiwicHJpY2VTY2FsZSIsInRpY2tzVmlzaWJsZSIsIl9pbnRlcm5hbF9wYW5lUmVuZGVyZXIiLCJfaW50ZXJuYWxfX3VwZGF0ZVJlbmRlcmVyRGF0YSIsIkNyb3NzaGFpclByaWNlQXhpc1ZpZXciLCJ2YWx1ZVByb3ZpZGVyIiwiX3ByaXZhdGVfX3ByaWNlU2NhbGUiLCJfcHJpdmF0ZV9fdmFsdWVQcm92aWRlciIsImF4aXNSZW5kZXJlckRhdGEiLCJwYW5lUmVuZGVyZXJEYXRhIiwiY29tbW9uUmVuZGVyZXJEYXRhIiwib3B0aW9ucyIsImxhYmVsVmlzaWJsZSIsIl9pbnRlcm5hbF9pc0VtcHR5IiwiY29sb3JzIiwibGFiZWxCYWNrZ3JvdW5kQ29sb3IiLCJhZGRpdGlvbmFsUGFkZGluZyIsIl9pbnRlcm5hbF9mb3JtYXRQcmljZSIsIm9wdGltaXphdGlvblJlcGxhY2VtZW50UmUiLCJyYWRpdXMkMSIsIlRpbWVBeGlzVmlld1JlbmRlcmVyIiwiX2ludGVybmFsX3dpZHRoQ2FjaGUiLCJob3J6TWFyZ2luIiwiX2ludGVybmFsX3BhZGRpbmdIb3Jpem9udGFsIiwibGFiZWxXaWR0aCIsImxhYmVsV2lkdGhIYWxmIiwidGltZVNjYWxlV2lkdGgiLCJfaW50ZXJuYWxfd2lkdGgiLCJjb29yZGluYXRlIiwieDEiLCJhYnMiLCJ4MiIsInkxIiwieTIiLCJ4MXNjYWxlZCIsInkxc2NhbGVkIiwieDJzY2FsZWQiLCJ5MnNjYWxlZCIsInJhZGl1c1NjYWxlZCIsInRpY2tYIiwidGlja1RvcCIsInRpY2tCb3R0b20iLCJ0aWNrT2Zmc2V0IiwieVRleHQiLCJ0ZXh0WUNvcnJlY3Rpb24iLCJDcm9zc2hhaXJUaW1lQXhpc1ZpZXciLCJtb2RlbCIsIl9wcml2YXRlX19tb2RlbCIsImN1cnJlbnRUaW1lIiwiX2ludGVybmFsX2luZGV4VG9UaW1lU2NhbGVQb2ludCIsIl9pbnRlcm5hbF9mb3JtYXREYXRlVGltZSIsIkRhdGFTb3VyY2UiLCJfaW50ZXJuYWxfX3ByaWNlU2NhbGUiLCJfcHJpdmF0ZV9fem9yZGVyIiwiX2ludGVybmFsX3pvcmRlciIsIl9pbnRlcm5hbF9zZXRab3JkZXIiLCJ6b3JkZXIiLCJfaW50ZXJuYWxfc2V0UHJpY2VTY2FsZSIsIl9pbnRlcm5hbF9sYWJlbFBhbmVWaWV3cyIsIl9pbnRlcm5hbF90aW1lQXhpc1ZpZXdzIiwiQ3Jvc3NoYWlyTW9kZSIsIkNyb3NzaGFpciIsIl9wcml2YXRlX19wYW5lIiwiX3ByaXZhdGVfX3ByaWNlIiwiX3ByaXZhdGVfX2luZGV4IiwiX3ByaXZhdGVfX3Zpc2libGUiLCJfcHJpdmF0ZV9fcHJpY2VBeGlzVmlld3MiLCJNYXAiLCJfcHJpdmF0ZV9fc3Vic2NyaWJlZCIsIl9wcml2YXRlX194IiwiX3ByaXZhdGVfX3kiLCJfcHJpdmF0ZV9fb3JpZ2luWCIsIl9wcml2YXRlX19vcmlnaW5ZIiwiX3ByaXZhdGVfX29wdGlvbnMiLCJfcHJpdmF0ZV9fbWFya2Vyc1BhbmVWaWV3IiwidmFsdWVQcmljZVByb3ZpZGVyIiwicmF3UHJpY2VQcm92aWRlciIsInJhd0Nvb3JkaW5hdGVQcm92aWRlciIsInJhd1ByaWNlIiwiX2ludGVybmFsX2RlZmF1bHRQcmljZVNjYWxlIiwiX2ludGVybmFsX2Nvb3JkaW5hdGVUb1ByaWNlIiwidmFsdWVUaW1lUHJvdmlkZXIiLCJyYXdJbmRleFByb3ZpZGVyIiwidGltZSIsIl9pbnRlcm5hbF9pbmRleFRvVGltZSIsIk51bWJlciIsIl9wcml2YXRlX19jdXJyZW50UG9zUHJpY2VQcm92aWRlciIsImN1cnJlbnRQb3NUaW1lUHJvdmlkZXIiLCJfcHJpdmF0ZV9fdGltZUF4aXNWaWV3IiwiX3ByaXZhdGVfX3BhbmVWaWV3IiwiX2ludGVybmFsX3NhdmVPcmlnaW5Db29yZCIsIl9pbnRlcm5hbF9jbGVhck9yaWdpbkNvb3JkIiwiX2ludGVybmFsX29yaWdpbkNvb3JkWCIsIl9pbnRlcm5hbF9vcmlnaW5Db29yZFkiLCJfaW50ZXJuYWxfc2V0UG9zaXRpb24iLCJfcHJpdmF0ZV9fdHJ5VG9VcGRhdGVWaWV3cyIsIl9pbnRlcm5hbF9jbGVhclBvc2l0aW9uIiwiX3ByaXZhdGVfX3NldEluZGV4VG9MYXN0U2VyaWVzQmFySW5kZXgiLCJfaW50ZXJuYWxfcGFuZVZpZXdzIiwiX2ludGVybmFsX3ByaWNlQXhpc1ZpZXdzIiwiY2xlYXIiLCJ2aWV3cyIsIl9wcml2YXRlX19jcmVhdGVQcmljZUF4aXNWaWV3T25EZW1hbmQiLCJfaW50ZXJuYWxfdXBkYXRlQWxsVmlld3MiLCJfcHJpdmF0ZV9fcHJpY2VTY2FsZUJ5UGFuZSIsIl9wcml2YXRlX190cnlUb1VwZGF0ZURhdGEiLCJuZXdJbmRleCIsIm5ld1ByaWNlIiwibmV3UGFuZSIsIm9sZFgiLCJvbGRZIiwib2xkUHJpY2UiLCJvbGRJbmRleCIsIm9sZFBhbmUiLCJpc05hTiIsImxhc3RJbmRleGVzIiwiX2ludGVybmFsX2JhcnMiLCJfaW50ZXJuYWxfbGFzdEluZGV4IiwibGFzdEJhckluZGV4IiwidmlldyIsImdldCIsInNldCIsImlzRGVmYXVsdFByaWNlU2NhbGUiLCJwcmljZVNjYWxlSWQiLCJtZXJnZVBhbmVJbnZhbGlkYXRpb24iLCJiZWZvcmVWYWx1ZSIsIm5ld1ZhbHVlIiwibGV2ZWwiLCJfaW50ZXJuYWxfbGV2ZWwiLCJhdXRvU2NhbGUiLCJfaW50ZXJuYWxfYXV0b1NjYWxlIiwiSW52YWxpZGF0ZU1hc2siLCJnbG9iYWxMZXZlbCIsIl9wcml2YXRlX19pbnZhbGlkYXRlZFBhbmVzIiwiX3ByaXZhdGVfX3RpbWVTY2FsZUludmFsaWRhdGlvbnMiLCJfcHJpdmF0ZV9fZ2xvYmFsTGV2ZWwiLCJfaW50ZXJuYWxfaW52YWxpZGF0ZVBhbmUiLCJwYW5lSW5kZXgiLCJpbnZhbGlkYXRpb24iLCJwcmV2VmFsdWUiLCJfaW50ZXJuYWxfZnVsbEludmFsaWRhdGlvbiIsIl9pbnRlcm5hbF9pbnZhbGlkYXRlRm9yUGFuZSIsInBhbmVJbnZhbGlkYXRpb24iLCJfaW50ZXJuYWxfc2V0Rml0Q29udGVudCIsIl9pbnRlcm5hbF9zdG9wVGltZVNjYWxlQW5pbWF0aW9uIiwiX2ludGVybmFsX3R5cGUiLCJfaW50ZXJuYWxfYXBwbHlSYW5nZSIsInJhbmdlIiwiX2ludGVybmFsX3NldFRpbWVTY2FsZUFuaW1hdGlvbiIsImFuaW1hdGlvbiIsIl9wcml2YXRlX19yZW1vdmVUaW1lU2NhbGVBbmltYXRpb24iLCJfaW50ZXJuYWxfcmVzZXRUaW1lU2NhbGUiLCJfaW50ZXJuYWxfc2V0QmFyU3BhY2luZyIsImJhclNwYWNpbmciLCJfaW50ZXJuYWxfc2V0UmlnaHRPZmZzZXQiLCJfaW50ZXJuYWxfdGltZVNjYWxlSW52YWxpZGF0aW9ucyIsIl9pbnRlcm5hbF9tZXJnZSIsIm90aGVyIiwidHNJbnZhbGlkYXRpb24iLCJfcHJpdmF0ZV9fYXBwbHlUaW1lU2NhbGVJbnZhbGlkYXRpb24iLCJfaW50ZXJuYWxfbGlnaHQiLCJfaW50ZXJuYWxfZnVsbCIsImludiIsImZvcm1hdHRlck9wdGlvbnMiLCJfaW50ZXJuYWxfZGVjaW1hbFNpZ24iLCJfaW50ZXJuYWxfZGVjaW1hbFNpZ25GcmFjdGlvbmFsIiwibnVtYmVyVG9TdHJpbmdXaXRoTGVhZGluZ1plcm8iLCJUeXBlRXJyb3IiLCJ0b1N0cmluZyIsImR1bW15U3RyaW5nIiwic2xpY2UiLCJQcmljZUZvcm1hdHRlciIsIl9wcml2YXRlX19taW5Nb3ZlIiwiX3ByaXZhdGVfX2NhbGN1bGF0ZURlY2ltYWwiLCJmb3JtYXQiLCJzaWduIiwiX3ByaXZhdGVfX2Zvcm1hdEFzRGVjaW1hbCIsIl9pbnRlcm5hbF9fZnJhY3Rpb25hbExlbmd0aCIsImludFBhcnQiLCJmcmFjU3RyaW5nIiwiZnJhY0xlbmd0aCIsImZyYWNQYXJ0IiwidG9GaXhlZCIsIlBlcmNlbnRhZ2VGb3JtYXR0ZXIiLCJWb2x1bWVGb3JtYXR0ZXIiLCJfcHJpdmF0ZV9fcHJlY2lzaW9uIiwidm9sIiwiX3ByaXZhdGVfX2Zvcm1hdE51bWJlciIsInBvdyIsInJlcGxhY2UiLCJTdHJpbmciLCJlIiwicDEiLCJ3YWxrTGluZSIsInJlbmRlcmluZ1Njb3BlIiwiaXRlbXMiLCJiYXJXaWR0aCIsInN0eWxlR2V0dGVyIiwiZmluaXNoU3R5bGVkQXJlYSIsImZpcnN0SXRlbSIsImN1cnJlbnRTdHlsZSIsImN1cnJlbnRTdHlsZUZpcnN0SXRlbSIsImhhbGZCYXJXaWR0aCIsIml0ZW0xIiwiaXRlbTIiLCJjaGFuZ2VTdHlsZSIsIm5ld1N0eWxlIiwiY3VycmVudEl0ZW0iLCJpdGVtU3R5bGUiLCJjcDEiLCJjcDIiLCJnZXRDb250cm9sUG9pbnRzIiwiYmV6aWVyQ3VydmVUbyIsImN1cnZlVGVuc2lvbiIsInN1YnRyYWN0IiwicDIiLCJhZGQiLCJkaXZpZGUiLCJuIiwicG9pbnRzIiwiZnJvbVBvaW50SW5kZXgiLCJ0b1BvaW50SW5kZXgiLCJiZWZvcmVGcm9tUG9pbnRJbmRleCIsImFmdGVyVG9Qb2ludEluZGV4IiwiZmluaXNoU3R5bGVkQXJlYSQxIiwiYmFzZUxldmVsQ29vcmRpbmF0ZSIsImFyZWFGaXJzdEl0ZW0iLCJuZXdBcmVhRmlyc3RJdGVtIiwiUGFuZVJlbmRlcmVyQXJlYUJhc2UiLCJfaW50ZXJuYWxfYmFyV2lkdGgiLCJfaW50ZXJuYWxfbGluZVR5cGUiLCJfaW50ZXJuYWxfYmFzZUxldmVsQ29vcmRpbmF0ZSIsIl9pbnRlcm5hbF9pbnZlcnRGaWxsZWRBcmVhIiwibGluZUpvaW4iLCJfaW50ZXJuYWxfX2ZpbGxTdHlsZSIsImJpbmQiLCJjbGFtcCIsIm1pblZhbCIsIm1heFZhbCIsImlzQmFzZURlY2ltYWwiLCJjdXJyZW50IiwiZ3JlYXRlck9yRXF1YWwiLCJlcHNpbG9uIiwiZXF1YWwiLCJhcnIiLCJjZWlsZWRFdmVuIiwiY2VpbGVkIiwiY2VpbGVkT2RkIiwiR3JhZGllbnRTdHlsZUNhY2hlIiwiX2ludGVybmFsX2dldCIsInBhcmFtcyIsImNhY2hlZFBhcmFtcyIsIl9wcml2YXRlX19wYXJhbXMiLCJfaW50ZXJuYWxfdG9wQ29sb3IxIiwidG9wQ29sb3IxIiwiX2ludGVybmFsX3RvcENvbG9yMiIsInRvcENvbG9yMiIsIl9pbnRlcm5hbF9ib3R0b21Db2xvcjEiLCJib3R0b21Db2xvcjEiLCJfaW50ZXJuYWxfYm90dG9tQ29sb3IyIiwiYm90dG9tQ29sb3IyIiwiX2ludGVybmFsX2JvdHRvbSIsIl9wcml2YXRlX19jYWNoZWRWYWx1ZSIsImJhc2VsaW5lUGVyY2VudCIsIlBhbmVSZW5kZXJlckFyZWEiLCJfcHJpdmF0ZV9fZmlsbENhY2hlIiwiaXRlbSIsIl9pbnRlcm5hbF90b3BDb2xvciIsIl9pbnRlcm5hbF9ib3R0b21Db2xvciIsImRyYXdTZXJpZXNQb2ludE1hcmtlcnMiLCJwb2ludE1hcmtlcnNSYWRpdXMiLCJwcmV2U3R5bGUiLCJQYW5lUmVuZGVyZXJMaW5lQmFzZSIsIl9pbnRlcm5hbF9wb2ludE1hcmtlcnNSYWRpdXMiLCJfaW50ZXJuYWxfX3N0cm9rZVN0eWxlIiwiUGFuZVJlbmRlcmVyTGluZSIsImJvdW5kQ29tcGFyZSIsImxvd2VyIiwiY29tcGFyZSIsInN0YXJ0IiwiY291bnQiLCJjb3VudDIiLCJtaWQiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImxvd2VyQm91bmRJdGVtc0NvbXBhcmUiLCJ1cHBlckJvdW5kSXRlbXNDb21wYXJlIiwidmlzaWJsZVRpbWVkVmFsdWVzIiwiZXh0ZW5kZWRSYW5nZSIsImZpcnN0QmFyIiwiX2ludGVybmFsX2xlZnQiLCJsYXN0QmFyIiwiZXh0ZW5kZWRGcm9tIiwiZXh0ZW5kZWRUbyIsIlNlcmllc1BhbmVWaWV3QmFzZSIsInNlcmllcyIsImV4dGVuZGVkVmlzaWJsZVJhbmdlIiwiX2ludGVybmFsX19pbnZhbGlkYXRlZCIsIl9pbnRlcm5hbF9fZGF0YUludmFsaWRhdGVkIiwiX2ludGVybmFsX19vcHRpb25zSW52YWxpZGF0ZWQiLCJfaW50ZXJuYWxfX2l0ZW1zIiwiX2ludGVybmFsX19pdGVtc1Zpc2libGVSYW5nZSIsIl9pbnRlcm5hbF9fc2VyaWVzIiwiX2ludGVybmFsX19tb2RlbCIsIl9wcml2YXRlX19leHRlbmRlZFZpc2libGVSYW5nZSIsIl9wcml2YXRlX19tYWtlVmFsaWQiLCJfaW50ZXJuYWxfX3JlbmRlcmVyIiwiX2ludGVybmFsX191cGRhdGVPcHRpb25zIiwiYXNzaWduIiwiX2ludGVybmFsX2JhckNvbG9yZXIiLCJfaW50ZXJuYWxfYmFyU3R5bGUiLCJfaW50ZXJuYWxfX2NsZWFyVmlzaWJsZVJhbmdlIiwiX2ludGVybmFsX19maWxsUmF3UG9pbnRzIiwiX3ByaXZhdGVfX21ha2VWYWxpZEltcGwiLCJ2aXNpYmxlQmFycyIsIl9pbnRlcm5hbF92aXNpYmxlU3RyaWN0UmFuZ2UiLCJfaW50ZXJuYWxfc2l6ZSIsIl9pbnRlcm5hbF9fY29udmVydFRvQ29vcmRpbmF0ZXMiLCJfaW50ZXJuYWxfX3ByZXBhcmVSZW5kZXJlckRhdGEiLCJMaW5lUGFuZVZpZXdCYXNlIiwiX2ludGVybmFsX2luZGV4ZXNUb0Nvb3JkaW5hdGVzIiwiX2ludGVybmFsX3BvaW50c0FycmF5VG9Db29yZGluYXRlcyIsIl9pbnRlcm5hbF9fY3JlYXRlUmF3SXRlbUJhc2UiLCJjb2xvcmVyIiwiX2ludGVybmFsX3Jvd3MiLCJyb3ciLCJfaW50ZXJuYWxfX2NyZWF0ZVJhd0l0ZW0iLCJfaW50ZXJuYWxfaW5kZXgiLCJTZXJpZXNBcmVhUGFuZVZpZXciLCJfcHJpdmF0ZV9fYXJlYVJlbmRlcmVyIiwiX3ByaXZhdGVfX2xpbmVSZW5kZXJlciIsIl9pbnRlcm5hbF9iYXJTcGFjaW5nIiwib3B0aW1hbEJhcldpZHRoIiwicGl4ZWxSYXRpbyIsIm9wdGltYWxDYW5kbGVzdGlja1dpZHRoIiwiYmFyU3BhY2luZ1NwZWNpYWxDYXNlRnJvbSIsImJhclNwYWNpbmdTcGVjaWFsQ2FzZVRvIiwiYmFyU3BhY2luZ1NwZWNpYWxDYXNlQ29lZmYiLCJiYXJTcGFjaW5nUmVkdWNpbmdDb2VmZiIsImNvZWZmIiwiYXRhbiIsInNjYWxlZEJhclNwYWNpbmciLCJvcHRpbWFsIiwiUGFuZVJlbmRlcmVyQmFycyIsIl9wcml2YXRlX19iYXJXaWR0aCIsIl9wcml2YXRlX19iYXJMaW5lV2lkdGgiLCJfcHJpdmF0ZV9fY2FsY0JhcldpZHRoIiwiX2ludGVybmFsX3RoaW5CYXJzIiwicHJldkNvbG9yIiwiZHJhd09wZW5DbG9zZSIsImJhciIsIl9pbnRlcm5hbF9iYXJDb2xvciIsImJvZHlXaWR0aEhhbGYiLCJib2R5Q2VudGVyIiwiYm9keUxlZnQiLCJib2R5V2lkdGgiLCJib2R5UmlnaHQiLCJoaWdoIiwiX2ludGVybmFsX2hpZ2hZIiwiX2ludGVybmFsX2xvd1kiLCJsb3ciLCJib2R5VG9wIiwiYm9keUJvdHRvbSIsImJvZHlIZWlnaHQiLCJzaWRlV2lkdGgiLCJfaW50ZXJuYWxfb3BlblZpc2libGUiLCJvcGVuTGVmdCIsIm9wZW5Ub3AiLCJfaW50ZXJuYWxfb3BlblkiLCJvcGVuQm90dG9tIiwiY2xvc2VSaWdodCIsImNsb3NlVG9wIiwiX2ludGVybmFsX2Nsb3NlWSIsImNsb3NlQm90dG9tIiwibGltaXQiLCJCYXJzUGFuZVZpZXdCYXNlIiwiX2ludGVybmFsX2JhclByaWNlc1RvQ29vcmRpbmF0ZXMiLCJfaW50ZXJuYWxfX2NyZWF0ZURlZmF1bHRJdGVtIiwiX2ludGVybmFsX29wZW4iLCJfaW50ZXJuYWxfaGlnaCIsIl9pbnRlcm5hbF9sb3ciLCJfaW50ZXJuYWxfY2xvc2UiLCJTZXJpZXNCYXJzUGFuZVZpZXciLCJiYXJTdHlsZVByb3BzIiwiUGFuZVJlbmRlcmVyQmFzZWxpbmVBcmVhIiwiX2ludGVybmFsX3RvcEZpbGxDb2xvcjEiLCJfaW50ZXJuYWxfdG9wRmlsbENvbG9yMiIsIl9pbnRlcm5hbF9ib3R0b21GaWxsQ29sb3IxIiwiX2ludGVybmFsX2JvdHRvbUZpbGxDb2xvcjIiLCJQYW5lUmVuZGVyZXJCYXNlbGluZUxpbmUiLCJfcHJpdmF0ZV9fc3Ryb2tlQ2FjaGUiLCJfaW50ZXJuYWxfdG9wTGluZUNvbG9yIiwiX2ludGVybmFsX2JvdHRvbUxpbmVDb2xvciIsIlNlcmllc0Jhc2VsaW5lUGFuZVZpZXciLCJfcHJpdmF0ZV9fYmFzZWxpbmVBcmVhUmVuZGVyZXIiLCJfcHJpdmF0ZV9fYmFzZWxpbmVMaW5lUmVuZGVyZXIiLCJQYW5lUmVuZGVyZXJDYW5kbGVzdGlja3MiLCJ3aWNrV2lkdGgiLCJiYXJzIiwiX2ludGVybmFsX3dpY2tWaXNpYmxlIiwiX3ByaXZhdGVfX2RyYXdXaWNrcyIsIl9wcml2YXRlX19kcmF3Qm9yZGVyIiwiX3ByaXZhdGVfX2NhbGN1bGF0ZUJvcmRlcldpZHRoIiwiX3ByaXZhdGVfX2RyYXdDYW5kbGVzIiwicHJldldpY2tDb2xvciIsIndpY2tPZmZzZXQiLCJwcmV2RWRnZSIsIl9pbnRlcm5hbF9iYXJXaWNrQ29sb3IiLCJzY2FsZWRYIiwicHJldkJvcmRlckNvbG9yIiwiX2ludGVybmFsX2JhckJvcmRlckNvbG9yIiwicHJldkJhckNvbG9yIiwiYmFyQ29sb3IiLCJTZXJpZXNDYW5kbGVzdGlja3NQYW5lVmlldyIsImNhbmRsZXN0aWNrU3R5bGVQcm9wcyIsIkN1c3RvbVNlcmllc1BhbmVSZW5kZXJlcldyYXBwZXIiLCJzb3VyY2VSZW5kZXJlciIsIl9wcml2YXRlX19zb3VyY2VSZW5kZXJlciIsIlNlcmllc0N1c3RvbVBhbmVWaWV3IiwicGFuZVZpZXciLCJyZW5kZXJlciIsIl9pbnRlcm5hbF9wcmljZVZhbHVlQnVpbGRlciIsInBsb3RSb3ciLCJwcmljZVZhbHVlQnVpbGRlciIsIl9pbnRlcm5hbF9pc1doaXRlc3BhY2UiLCJpc1doaXRlc3BhY2UiLCJfaW50ZXJuYWxfb3JpZ2luYWxEYXRhIiwiX2ludGVybmFsX2RhdGEiLCJ1cGRhdGUiLCJ1bndyYXBJdGVtRGF0YSIsIm9yaWdpbmFsRGF0YSIsInNob3dTcGFjaW5nTWluaW1hbEJhcldpZHRoIiwiYWxpZ25Ub01pbmltYWxXaWR0aExpbWl0IiwiUGFuZVJlbmRlcmVySGlzdG9ncmFtIiwiX3ByaXZhdGVfX3ByZWNhbGN1bGF0ZWRDYWNoZSIsIl9wcml2YXRlX19maWxsUHJlY2FsY3VsYXRlZENhY2hlIiwiaGlzdG9ncmFtQmFzZSIsIl9pbnRlcm5hbF9oaXN0b2dyYW1CYXNlIiwidG9wSGlzdG9ncmFtQmFzZSIsImJvdHRvbUhpc3RvZ3JhbUJhc2UiLCJzcGFjaW5nIiwiY29sdW1uV2lkdGgiLCJoYWxmV2lkdGgiLCJfaW50ZXJuYWxfcm91bmRlZENlbnRlciIsIl9pbnRlcm5hbF9jZW50ZXIiLCJwcmV2IiwibWluV2lkdGgiLCJTZXJpZXNIaXN0b2dyYW1QYW5lVmlldyIsIlNlcmllc0xpbmVQYW5lVmlldyIsImRlZmF1bHRSZXBsYWNlbWVudFJlIiwiVGV4dFdpZHRoQ2FjaGUiLCJfcHJpdmF0ZV9fYWN0dWFsU2l6ZSIsIl9wcml2YXRlX191c2FnZVRpY2siLCJfcHJpdmF0ZV9fb2xkZXN0VGljayIsIl9wcml2YXRlX190aWNrMkxhYmVscyIsIl9wcml2YXRlX19jYWNoZSIsIl9wcml2YXRlX19tYXhTaXplIiwiX2ludGVybmFsX3Jlc2V0IiwiX3ByaXZhdGVfX2dldE1ldHJpY3MiLCJtZXRyaWNzIiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJyZSIsImNhY2hlU3RyaW5nIiwiaGFzIiwiX2ludGVybmFsX21ldHJpY3MiLCJvbGRlc3RWYWx1ZSIsImRlbGV0ZSIsIm1lYXN1cmVUZXh0IiwiX2ludGVybmFsX3RpY2siLCJQYW5lUHJpY2VBeGlzVmlld1JlbmRlcmVyIiwiX3ByaXZhdGVfX3ByaWNlQXhpc1ZpZXdSZW5kZXJlciIsIl9wcml2YXRlX19hbGlnbiIsIl9wcml2YXRlX190ZXh0V2lkdGhDYWNoZSIsIl9pbnRlcm5hbF9zZXRQYXJhbXMiLCJwcmljZUF4aXNWaWV3UmVuZGVyZXIiLCJQYW5lUHJpY2VBeGlzVmlldyIsInByaWNlQXhpc1ZpZXciLCJkYXRhU291cmNlIiwiX3ByaXZhdGVfX3ByaWNlQXhpc1ZpZXciLCJfcHJpdmF0ZV9fZGF0YVNvdXJjZSIsIl9pbnRlcm5hbF9wYW5lRm9yU291cmNlIiwiX2ludGVybmFsX2lzT3ZlcmxheSIsIl9pbnRlcm5hbF9kZWZhdWx0VmlzaWJsZVByaWNlU2NhbGUiLCJwb3NpdGlvbiIsIl9pbnRlcm5hbF9wcmljZVNjYWxlUG9zaXRpb24iLCJfaW50ZXJuYWxfcHJpY2VBeGlzUmVuZGVyZXJPcHRpb25zIiwiSG9yaXpvbnRhbExpbmVSZW5kZXJlciIsIl9pbnRlcm5hbF9oaXRUZXN0IiwiaXRlbVkiLCJfaW50ZXJuYWxfZXh0ZXJuYWxJZCIsImV4dGVybmFsSWQiLCJfaW50ZXJuYWxfaGl0VGVzdERhdGEiLCJTZXJpZXNIb3Jpem9udGFsTGluZVBhbmVWaWV3IiwiX2ludGVybmFsX19saW5lUmVuZGVyZXJEYXRhIiwiX2ludGVybmFsX19saW5lUmVuZGVyZXIiLCJfaW50ZXJuYWxfX3VwZGF0ZUltcGwiLCJTZXJpZXNIb3Jpem9udGFsQmFzZUxpbmVQYW5lVmlldyIsIl9pbnRlcm5hbF9tb2RlIiwic2VyaWVzT3B0aW9ucyIsIlNlcmllc0xhc3RQcmljZUFuaW1hdGlvblJlbmRlcmVyIiwiX2ludGVybmFsX3Nlcmllc0xpbmVDb2xvciIsImNlbnRlclBvaW50UmFkaXVzIiwiX2ludGVybmFsX3Nlcmllc0xpbmVXaWR0aCIsIl9pbnRlcm5hbF9maWxsQ29sb3IiLCJfaW50ZXJuYWxfc3Ryb2tlQ29sb3IiLCJhbmltYXRpb25TdGFnZXNEYXRhIiwiX2ludGVybmFsX3N0YXJ0IiwiX2ludGVybmFsX2VuZCIsIl9pbnRlcm5hbF9zdGFydFJhZGl1cyIsIl9pbnRlcm5hbF9lbmRSYWRpdXMiLCJfaW50ZXJuYWxfc3RhcnRGaWxsQWxwaGEiLCJfaW50ZXJuYWxfZW5kRmlsbEFscGhhIiwiX2ludGVybmFsX3N0YXJ0U3Ryb2tlQWxwaGEiLCJfaW50ZXJuYWxfZW5kU3Ryb2tlQWxwaGEiLCJzZXJpZXNMaW5lQ29sb3IiLCJzdGFnZSIsInN0YXJ0QWxwaGEiLCJlbmRBbHBoYSIsInN0YXJ0UmFkaXVzIiwiZW5kUmFkaXVzIiwiYW5pbWF0aW9uRGF0YSIsImR1cmF0aW9uU2luY2VTdGFydCIsImdsb2JhbFN0YWdlIiwiY3VycmVudFN0YWdlRGF0YSIsInN0YWdlRGF0YSIsInN1YlN0YWdlIiwiU2VyaWVzTGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXciLCJfcHJpdmF0ZV9fc3RhZ2VJbnZhbGlkYXRlZCIsIl9wcml2YXRlX19zdGFydFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIl9wcml2YXRlX19lbmRUaW1lIiwiX3ByaXZhdGVfX3NlcmllcyIsIl9pbnRlcm5hbF9vbkRhdGFDbGVhcmVkIiwiX2ludGVybmFsX29uTmV3UmVhbHRpbWVEYXRhUmVjZWl2ZWQiLCJ0aW1lVG9BbmltYXRpb25FbmQiLCJfaW50ZXJuYWxfaW52YWxpZGF0ZVN0YWdlIiwiX2ludGVybmFsX2FuaW1hdGlvbkFjdGl2ZSIsIl9wcml2YXRlX191cGRhdGVSZW5kZXJlckRhdGFTdGFnZSIsImxhc3RWYWx1ZSIsIl9pbnRlcm5hbF9sYXN0VmFsdWVEYXRhIiwiX2ludGVybmFsX25vRGF0YSIsIl9pbnRlcm5hbF9jb250YWlucyIsImxhc3RWYWx1ZVBvaW50Iiwic2VyaWVzTGluZVdpZHRoIiwiX3ByaXZhdGVfX2R1cmF0aW9uIiwicmVuZGVyZXJEYXRhIiwicmVzdWx0Iiwic2hhcGVTaXplIiwic2hhcGUiLCJvcmlnaW5hbFNpemUiLCJjYWxjdWxhdGVTaGFwZUhlaWdodCIsInNoYXBlTWFyZ2luIiwiY2FsY3VsYXRlQWRqdXN0ZWRNYXJnaW4iLCJtYXJnaW4iLCJoYXNTaWRlIiwiaGFzSW5CYXIiLCJkcmF3U3F1YXJlIiwiY29vcmRzIiwic3F1YXJlU2l6ZSIsImhhbGZTaXplIiwiX2ludGVybmFsX3BpeGVsUmF0aW8iLCJoaXRUZXN0U3F1YXJlIiwiZHJhd0Fycm93IiwidXAiLCJhcnJvd1NpemUiLCJoYWxmQXJyb3dTaXplIiwiYmFzZVNpemUiLCJoYWxmQmFzZVNpemUiLCJoaXRUZXN0QXJyb3ciLCJkcmF3Q2lyY2xlIiwiY2lyY2xlU2l6ZSIsImhpdFRlc3RDaXJjbGUiLCJ0b2xlcmFuY2UiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImRpc3QiLCJzcXJ0IiwiZHJhd1RleHQiLCJzY2FsZSIsImhpdFRlc3RUZXh0IiwidGV4dFgiLCJ0ZXh0WSIsInRleHRIZWlnaHQiLCJoYWxmSGVpZ2h0IiwiU2VyaWVzTWFya2Vyc1JlbmRlcmVyIiwiX3ByaXZhdGVfX2ZvbnQiLCJoaXRUZXN0SXRlbSIsIl9pbnRlcm5hbF9pbnRlcm5hbElkIiwiX2ludGVybmFsX2NvbnRlbnQiLCJkcmF3SXRlbSIsImJpdG1hcFNoYXBlSXRlbUNvb3JkaW5hdGVzIiwiZHJhd1NoYXBlIiwiY29vcmRpbmF0ZXMiLCJfaW50ZXJuYWxfc2hhcGUiLCJoaXRUZXN0U2hhcGUiLCJmaWxsU2l6ZUFuZFkiLCJyZW5kZXJlckl0ZW0iLCJtYXJrZXIiLCJvZmZzZXRzIiwiaW5CYXJQcmljZSIsImhpZ2hQcmljZSIsImxvd1ByaWNlIiwic2l6ZU11bHRpcGxpZXIiLCJfaW50ZXJuYWxfYWJvdmVCYXIiLCJfaW50ZXJuYWxfYmVsb3dCYXIiLCJTZXJpZXNNYXJrZXJzUGFuZVZpZXciLCJfcHJpdmF0ZV9fZGF0YUludmFsaWRhdGVkIiwiX3ByaXZhdGVfX2F1dG9TY2FsZU1hcmdpbnNJbnZhbGlkYXRlZCIsIl9wcml2YXRlX19hdXRvU2NhbGVNYXJnaW5zIiwiX3ByaXZhdGVfX21hcmtlcnNQb3NpdGlvbnMiLCJhZGRBbmNob3JzIiwiX2ludGVybmFsX19tYWtlVmFsaWQiLCJfaW50ZXJuYWxfYXV0b1NjYWxlTWFyZ2lucyIsIl9pbnRlcm5hbF9pbmRleGVkTWFya2VycyIsInNoYXBlTWFyZ2luJDEiLCJtYXJnaW5WYWx1ZSIsInBvc2l0aW9ucyIsIl9pbnRlcm5hbF9fZ2V0TWFya2VyUG9zaXRpb25zIiwiYWJvdmUiLCJhYm92ZUJhciIsImluQmFyIiwiYmVsb3ciLCJiZWxvd0JhciIsInJlZHVjZSIsImFjYyIsInNlcmllc01hcmtlcnMiLCJpZCIsImxheW91dE9wdGlvbnMiLCJwcmV2VGltZUluZGV4IiwiZGF0YUF0IiwiX2ludGVybmFsX2RhdGFBdCIsIlNlcmllc1ByaWNlTGluZVBhbmVWaWV3IiwibGFzdFZhbHVlRGF0YSIsIl9pbnRlcm5hbF9wcmljZUxpbmVDb2xvciIsIlNlcmllc1ByaWNlQXhpc1ZpZXciLCJzaG93U2VyaWVzTGFzdFZhbHVlIiwic2hvd1N5bWJvbExhYmVsIiwiX2ludGVybmFsX3RpdGxlIiwic2hvd1ByaWNlQW5kUGVyY2VudGFnZSIsInNlcmllc0xhc3RWYWx1ZU1vZGUiLCJfaW50ZXJuYWxfX2F4aXNUZXh0IiwiX2ludGVybmFsX19wYW5lVGV4dCIsImxhc3RWYWx1ZUNvbG9yIiwiX2ludGVybmFsX2lzUGVyY2VudGFnZSIsIl9pbnRlcm5hbF9mb3JtYXR0ZWRQcmljZUFic29sdXRlIiwiX2ludGVybmFsX2Zvcm1hdHRlZFByaWNlUGVyY2VudGFnZSIsInRyaW0iLCJjb21wdXRlRmluaXRlUmVzdWx0IiwibWV0aG9kIiwidmFsdWVPbmUiLCJ2YWx1ZVR3byIsImZhbGxiYWNrIiwiZmlyc3RGaW5pdGUiLCJzZWNvbmRGaW5pdGUiLCJQcmljZVJhbmdlSW1wbCIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJfcHJpdmF0ZV9fbWluVmFsdWUiLCJfcHJpdmF0ZV9fbWF4VmFsdWUiLCJfaW50ZXJuYWxfZXF1YWxzIiwicHIiLCJfaW50ZXJuYWxfY2xvbmUiLCJfaW50ZXJuYWxfbWluVmFsdWUiLCJfaW50ZXJuYWxfbWF4VmFsdWUiLCJfaW50ZXJuYWxfbGVuZ3RoIiwiYW5vdGhlclJhbmdlIiwiSW5maW5pdHkiLCJfaW50ZXJuYWxfc2NhbGVBcm91bmRDZW50ZXIiLCJkZWx0YSIsImNlbnRlciIsIm1heERlbHRhIiwibWluRGVsdGEiLCJfaW50ZXJuYWxfc2hpZnQiLCJfaW50ZXJuYWxfdG9SYXciLCJfaW50ZXJuYWxfZnJvbVJhdyIsInJhdyIsIkF1dG9zY2FsZUluZm9JbXBsIiwicHJpY2VSYW5nZSIsIm1hcmdpbnMiLCJfcHJpdmF0ZV9fcHJpY2VSYW5nZSIsIl9wcml2YXRlX19tYXJnaW5zIiwiX2ludGVybmFsX3ByaWNlUmFuZ2UiLCJfaW50ZXJuYWxfbWFyZ2lucyIsIkN1c3RvbVByaWNlTGluZVBhbmVWaWV3IiwicHJpY2VMaW5lIiwiX3ByaXZhdGVfX3ByaWNlTGluZSIsImxpbmVPcHRpb25zIiwiX2ludGVybmFsX3lDb29yZCIsIkN1c3RvbVByaWNlTGluZVByaWNlQXhpc1ZpZXciLCJheGlzTGFiZWxWaXNpYmxlIiwic2hvd1BhbmVMYWJlbCIsIl9wcml2YXRlX19mb3JtYXRQcmljZSIsImF4aXNMYWJlbENvbG9yIiwiYXhpc0xhYmVsVGV4dENvbG9yIiwiQ3VzdG9tUHJpY2VMaW5lIiwiX3ByaXZhdGVfX3ByaWNlTGluZVZpZXciLCJfcHJpdmF0ZV9fcGFuZVByaWNlQXhpc1ZpZXciLCJfaW50ZXJuYWxfYXBwbHlPcHRpb25zIiwiX2ludGVybmFsX2xpZ2h0VXBkYXRlIiwiX2ludGVybmFsX3BhbmVWaWV3IiwiX2ludGVybmFsX2xhYmVsUGFuZVZpZXciLCJfaW50ZXJuYWxfcHJpY2VBeGlzVmlldyIsIlByaWNlRGF0YVNvdXJjZSIsImJhclN0eWxlRm5NYXAiLCJCYXIiLCJmaW5kQmFyIiwiYmFyU3R5bGUiLCJiYXJJbmRleCIsInByZWNvbXB1dGVkQmFycyIsImN1cnJlbnRCYXIiLCJpc1VwIiwiQ2FuZGxlc3RpY2siLCJjYW5kbGVzdGlja1N0eWxlIiwiX2IiLCJfYyIsIl9pbnRlcm5hbF93aWNrQ29sb3IiLCJDdXN0b20iLCJjdXN0b21TdHlsZSIsIkFyZWEiLCJhcmVhU3R5bGUiLCJfZCIsIkJhc2VsaW5lIiwiYmFzZWxpbmVTdHlsZSIsIl9lIiwiX2YiLCJpc0Fib3ZlQmFzZWxpbmUiLCJMaW5lIiwiSGlzdG9ncmFtIiwiaGlzdG9ncmFtU3R5bGUiLCJTZXJpZXNCYXJDb2xvcmVyIiwiX3ByaXZhdGVfX2ZpbmRCYXIiLCJfaW50ZXJuYWxfdmFsdWVBdCIsIl9wcml2YXRlX19zdHlsZUdldHRlciIsIl9pbnRlcm5hbF9zZXJpZXNUeXBlIiwiTWlzbWF0Y2hEaXJlY3Rpb24iLCJDSFVOS19TSVpFIiwiUGxvdExpc3QiLCJfcHJpdmF0ZV9faXRlbXMiLCJfcHJpdmF0ZV9fbWluTWF4Q2FjaGUiLCJfcHJpdmF0ZV9fcm93U2VhcmNoQ2FjaGUiLCJfaW50ZXJuYWxfbGFzdCIsIl9pbnRlcm5hbF9maXJzdEluZGV4IiwiX3ByaXZhdGVfX2luZGV4QXQiLCJfcHJpdmF0ZV9fc2VhcmNoIiwiX2ludGVybmFsX3NlYXJjaCIsInNlYXJjaE1vZGUiLCJwb3MiLCJfcHJpdmF0ZV9fdmFsdWVBdCIsIl9pbnRlcm5hbF9taW5NYXhPblJhbmdlQ2FjaGVkIiwiZW5kIiwicGxvdHMiLCJwbG90IiwicGxvdE1pbk1heCIsIl9wcml2YXRlX19taW5NYXhPblJhbmdlQ2FjaGVkSW1wbCIsIm1lcmdlTWluTWF4IiwicGxvdFJvd3MiLCJleGFjdFBvcyIsIl9wcml2YXRlX19ic2VhcmNoIiwiX3ByaXZhdGVfX3NlYXJjaE5lYXJlc3RMZWZ0IiwiX3ByaXZhdGVfX3NlYXJjaE5lYXJlc3RSaWdodCIsIm5lYXJlc3RMZWZ0UG9zIiwiX3ByaXZhdGVfX2xvd2VyYm91bmQiLCJuZWFyZXN0UmlnaHRQb3MiLCJfcHJpdmF0ZV9fdXBwZXJib3VuZCIsImEiLCJiIiwiX3ByaXZhdGVfX3Bsb3RNaW5NYXgiLCJzdGFydEluZGV4IiwiZW5kSW5kZXhFeGNsdXNpdmUiLCJwbG90SW5kZXgiLCJ2YWx1ZXMiLCJfaW50ZXJuYWxfbWluIiwiX2ludGVybmFsX21heCIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJjYWNoZWRMb3ciLCJjYWNoZWRIaWdoIiwiZW5kSW5kZXgiLCJtaW5NYXhDYWNoZSIsImNodW5rSW5kZXgiLCJjaHVua01pbk1heCIsImNodW5rU3RhcnQiLCJjaHVua0VuZCIsImZpcnN0Iiwic2Vjb25kIiwiY3JlYXRlU2VyaWVzUGxvdExpc3QiLCJTZXJpZXNQcmltaXRpdmVSZW5kZXJlcldyYXBwZXIiLCJiYXNlUmVuZGVyZXIiLCJfcHJpdmF0ZV9fYmFzZVJlbmRlcmVyIiwiX2ludGVybmFsX2RyYXdCYWNrZ3JvdW5kIiwiZHJhd0JhY2tncm91bmQiLCJTZXJpZXNQcmltaXRpdmVQYW5lVmlld1dyYXBwZXIiLCJfaW50ZXJuYWxfYmFzZSIsIl9pbnRlcm5hbF93cmFwcGVyIiwid3JhcHBlciIsIl9pbnRlcm5hbF96T3JkZXIiLCJ6T3JkZXIiLCJnZXRBeGlzVmlld0RhdGEiLCJiYXNlVmlldyIsImZpeGVkQ29vcmRpbmF0ZSIsImJhY2tDb2xvciIsInRpY2tWaXNpYmxlIiwiU2VyaWVzUHJpbWl0aXZlVGltZUF4aXNWaWV3V3JhcHBlciIsIl9wcml2YXRlX19iYXNlVmlldyIsIl9wcml2YXRlX190aW1lU2NhbGUiLCJTZXJpZXNQcmltaXRpdmVQcmljZUF4aXNWaWV3V3JhcHBlciIsIlNlcmllc1ByaW1pdGl2ZVdyYXBwZXIiLCJwcmltaXRpdmUiLCJfcHJpdmF0ZV9fcGFuZVZpZXdzQ2FjaGUiLCJfcHJpdmF0ZV9fdGltZUF4aXNWaWV3c0NhY2hlIiwiX3ByaXZhdGVfX3ByaWNlQXhpc1ZpZXdzQ2FjaGUiLCJfcHJpdmF0ZV9fcHJpY2VBeGlzUGFuZVZpZXdzQ2FjaGUiLCJfcHJpdmF0ZV9fdGltZUF4aXNQYW5lVmlld3NDYWNoZSIsIl9wcml2YXRlX19wcmltaXRpdmUiLCJfaW50ZXJuYWxfcHJpbWl0aXZlIiwidXBkYXRlQWxsVmlld3MiLCJwYW5lVmlld3MiLCJwdyIsInRpbWVBeGlzVmlld3MiLCJhdyIsInByaWNlQXhpc1ZpZXdzIiwiX2ludGVybmFsX3ByaWNlQXhpc1BhbmVWaWV3cyIsInByaWNlQXhpc1BhbmVWaWV3cyIsIl9pbnRlcm5hbF90aW1lQXhpc1BhbmVWaWV3cyIsInRpbWVBeGlzUGFuZVZpZXdzIiwiX2ludGVybmFsX2F1dG9zY2FsZUluZm8iLCJzdGFydFRpbWVQb2ludCIsImVuZFRpbWVQb2ludCIsImF1dG9zY2FsZUluZm8iLCJoaXRUZXN0IiwiZXh0cmFjdFByaW1pdGl2ZVBhbmVWaWV3cyIsInByaW1pdGl2ZXMiLCJleHRyYWN0b3IiLCJkZXN0aW5hdGlvbiIsInByaW1pdGl2ZVBhbmVWaWV3c0V4dHJhY3RvciIsInByaW1pdGl2ZVByaWNlUGFuZVZpZXdzRXh0cmFjdG9yIiwicHJpbWl0aXZlVGltZVBhbmVWaWV3c0V4dHJhY3RvciIsIlNlcmllcyIsInNlcmllc1R5cGUiLCJjdXN0b21QYW5lVmlldyIsIl9wcml2YXRlX19jdXN0b21QcmljZUxpbmVzIiwiX3ByaXZhdGVfX2Jhc2VIb3Jpem9udGFsTGluZVZpZXciLCJfcHJpdmF0ZV9fbGFzdFByaWNlQW5pbWF0aW9uUGFuZVZpZXciLCJfcHJpdmF0ZV9fYmFyQ29sb3JlckNhY2hlIiwiX3ByaXZhdGVfX21hcmtlcnMiLCJfcHJpdmF0ZV9faW5kZXhlZE1hcmtlcnMiLCJfcHJpdmF0ZV9fYW5pbWF0aW9uVGltZW91dElkIiwiX3ByaXZhdGVfX3ByaW1pdGl2ZXMiLCJfcHJpdmF0ZV9fc2VyaWVzVHlwZSIsIl9wcml2YXRlX19yZWNyZWF0ZUZvcm1hdHRlciIsIl9wcml2YXRlX19yZWNyZWF0ZVBhbmVWaWV3cyIsImNsZWFyVGltZW91dCIsImxhc3RCYXJDb2xvciIsImdsb2JhbExhc3QiLCJub0RhdGFSZXMiLCJlbmRCYXIiLCJiYXJDb2xvcmVyIiwiX2ludGVybmFsX2Zvcm1hdFByaWNlQWJzb2x1dGUiLCJfaW50ZXJuYWxfZm9ybWF0UHJpY2VQZXJjZW50YWdlIiwidGFyZ2V0UHJpY2VTY2FsZUlkIiwiX2ludGVybmFsX21vdmVTZXJpZXNUb1NjYWxlIiwiX2ludGVybmFsX2Z1bGxVcGRhdGUiLCJfaW50ZXJuYWxfdXBkYXRlU291cmNlIiwiX2ludGVybmFsX3VwZGF0ZUNyb3NzaGFpciIsInVwZGF0ZUluZm8iLCJfcHJpdmF0ZV9fcmVjYWxjdWxhdGVNYXJrZXJzIiwiX2ludGVybmFsX2xhc3RCYXJVcGRhdGVkT3JOZXdCYXJzQWRkZWRUb1RoZVJpZ2h0Iiwic291cmNlUGFuZSIsIl9pbnRlcm5hbF9yZWNhbGN1bGF0ZVBhbmUiLCJfaW50ZXJuYWxfc2V0TWFya2VycyIsIl9pbnRlcm5hbF9tYXJrZXJzIiwiX2ludGVybmFsX2NyZWF0ZVByaWNlTGluZSIsIl9pbnRlcm5hbF9yZW1vdmVQcmljZUxpbmUiLCJsaW5lIiwiaW5kZXhPZiIsIl9pbnRlcm5hbF9maXJzdEJhciIsIl9pbnRlcm5hbF90aW1lUG9pbnQiLCJwcmljZXMiLCJfaW50ZXJuYWxfdG9wUGFuZVZpZXdzIiwiYW5pbWF0aW9uUGFuZVZpZXciLCJzZXRUaW1lb3V0IiwiX2ludGVybmFsX2N1cnNvclVwZGF0ZSIsInVuc2hpZnQiLCJfcHJpdmF0ZV9faXNPdmVybGF5IiwicHJpY2VMaW5lVmlld3MiLCJfaW50ZXJuYWxfYm90dG9tUGFuZVZpZXdzIiwiX3ByaXZhdGVfX2V4dHJhY3RQYW5lVmlld3MiLCJfaW50ZXJuYWxfcHJpY2VQYW5lVmlld3MiLCJfaW50ZXJuYWxfdGltZVBhbmVWaWV3cyIsIl9pbnRlcm5hbF9wcmltaXRpdmVIaXRUZXN0IiwiY3VzdG9tUHJpY2VMaW5lIiwiYXV0b3NjYWxlSW5mb1Byb3ZpZGVyIiwiX3ByaXZhdGVfX2F1dG9zY2FsZUluZm9JbXBsIiwiX2ludGVybmFsX21pbk1vdmUiLCJfaW50ZXJuYWxfZm9ybWF0dGVyIiwiX3ByaXZhdGVfX2Zvcm1hdHRlciIsImdldFZhbHVlIiwiX3ByaXZhdGVfX21hcmtlclJhZGl1cyIsIl9wcml2YXRlX19tYXJrZXJCb3JkZXJDb2xvciIsIl9wcml2YXRlX19tYXJrZXJCb3JkZXJXaWR0aCIsIl9wcml2YXRlX19tYXJrZXJCYWNrZ3JvdW5kQ29sb3IiLCJfaW50ZXJuYWxfYXR0YWNoUHJpbWl0aXZlIiwiX2ludGVybmFsX2RldGFjaFByaW1pdGl2ZSIsIl9pbnRlcm5hbF9jdXN0b21TZXJpZXNQbG90VmFsdWVzQnVpbGRlciIsIl9pbnRlcm5hbF9jdXN0b21TZXJpZXNXaGl0ZXNwYWNlQ2hlY2siLCJfaW50ZXJuYWxfaWQiLCJiYXJzTWluTWF4IiwicmFuZ2VXaXRoQmFzZSIsInByaW1pdGl2ZUF1dG9zY2FsZSIsInByaW1pdGl2ZVJhbmdlIiwibWVyZ2VNYXJnaW5zIiwiZm9ybWF0dGVyIiwiX2ludGVybmFsX3VwZGF0ZUZvcm1hdHRlciIsIl9pbnRlcm5hbF9oYXNQb2ludHMiLCJmaXJzdERhdGFJbmRleCIsIl9pbnRlcm5hbF90aW1lVG9JbmRleCIsInNlcmllc0RhdGFJbmRleCIsIm9yaWdpbmFsVGltZSIsImFkZGl0aW9uYWxNYXJnaW4iLCJNYWduZXQiLCJfaW50ZXJuYWxfYWxpZ24iLCJkZWZhdWx0UHJpY2VTY2FsZSIsIl9pbnRlcm5hbF9kYXRhU291cmNlcyIsImRzIiwiY2FuZGlkYXRlcyIsInBzIiwiZmlyc3RQcmljZSIsImNvbmNhdCIsInNvcnQiLCJuZWFyZXN0IiwiR3JpZFJlbmRlcmVyIiwiX2ludGVybmFsX3ZlcnRMaW5lc1Zpc2libGUiLCJfaW50ZXJuYWxfdmVydExpbmVzQ29sb3IiLCJfaW50ZXJuYWxfdmVydExpbmVTdHlsZSIsInRpbWVNYXJrIiwiX2ludGVybmFsX3RpbWVNYXJrcyIsIl9pbnRlcm5hbF9jb29yZCIsIl9pbnRlcm5hbF9ob3J6TGluZXNWaXNpYmxlIiwiX2ludGVybmFsX2hvcnpMaW5lc0NvbG9yIiwiX2ludGVybmFsX2hvcnpMaW5lU3R5bGUiLCJwcmljZU1hcmsiLCJfaW50ZXJuYWxfcHJpY2VNYXJrcyIsIkdyaWRQYW5lVmlldyIsImdyaWRPcHRpb25zIiwiZ3JpZCIsImhvcnpMaW5lcyIsInZlcnRMaW5lcyIsIl9pbnRlcm5hbF9tYXJrcyIsInRtIiwiY29vcmQiLCJHcmlkIiwiZGVmTG9nRm9ybXVsYSIsIl9pbnRlcm5hbF9sb2dpY2FsT2Zmc2V0IiwiX2ludGVybmFsX2Nvb3JkT2Zmc2V0IiwiZnJvbVBlcmNlbnQiLCJ0b1BlcmNlbnQiLCJ0b1BlcmNlbnRSYW5nZSIsIm1pblBlcmNlbnQiLCJtYXhQZXJjZW50IiwiZnJvbUluZGV4ZWRUbzEwMCIsInRvSW5kZXhlZFRvMTAwIiwidG9JbmRleGVkVG8xMDBSYW5nZSIsInRvTG9nIiwibG9nRm9ybXVsYSIsIm0iLCJsb2cxMCIsImZyb21Mb2ciLCJsb2dpY2FsIiwiY29udmVydFByaWNlUmFuZ2VUb0xvZyIsImNhbkNvbnZlcnRQcmljZVJhbmdlRnJvbUxvZyIsImNvbnZlcnRQcmljZVJhbmdlRnJvbUxvZyIsImxvZ0Zvcm11bGFGb3JQcmljZVJhbmdlIiwiZGlmZiIsImRpZ2l0cyIsImxvZ2ljYWxPZmZzZXQiLCJjb29yZE9mZnNldCIsImxvZ0Zvcm11bGFzQXJlU2FtZSIsImYxIiwiZjIiLCJQcmljZVRpY2tTcGFuQ2FsY3VsYXRvciIsImludGVncmFsRGl2aWRlcnMiLCJfcHJpdmF0ZV9fYmFzZSIsIl9wcml2YXRlX19pbnRlZ3JhbERpdmlkZXJzIiwiX3ByaXZhdGVfX2ZyYWN0aW9uYWxEaXZpZGVycyIsImJhc2VSZXN0IiwiX2ludGVybmFsX3RpY2tTcGFuIiwibWF4VGlja1NwYW4iLCJtaW5Nb3ZlbWVudCIsInJlc3VsdFRpY2tTcGFuIiwicmVzdWx0VGlja1NwYW5MYXJnZXJNaW5Nb3ZlbWVudCIsInJlc3VsdFRpY2tTcGFuTGFyZ2VyTWF4VGlja1NwYW4iLCJyZXN1bHRUaWNrU3BhbkxhcmdlcjEiLCJoYXZlVG9Db250aW51ZSIsIlRJQ0tfREVOU0lUWSIsIlByaWNlVGlja01hcmtCdWlsZGVyIiwiY29vcmRpbmF0ZVRvTG9naWNhbEZ1bmMiLCJsb2dpY2FsVG9Db29yZGluYXRlRnVuYyIsIl9wcml2YXRlX19tYXJrcyIsIl9wcml2YXRlX19jb29yZGluYXRlVG9Mb2dpY2FsRnVuYyIsIl9wcml2YXRlX19sb2dpY2FsVG9Db29yZGluYXRlRnVuYyIsInNjYWxlSGVpZ2h0IiwibWFya0hlaWdodCIsIl9wcml2YXRlX190aWNrTWFya0hlaWdodCIsInNwYW5DYWxjdWxhdG9yMSIsInNwYW5DYWxjdWxhdG9yMiIsInNwYW5DYWxjdWxhdG9yMyIsInNwYW5zIiwiX2ludGVybmFsX3JlYnVpbGRUaWNrTWFya3MiLCJleHRyYVRvcEJvdHRvbU1hcmdpbiIsImVudGlyZVRleHRPbmx5IiwiX3ByaXZhdGVfX2ZvbnRIZWlnaHQiLCJtaW5Db29yZCIsIm1heENvb3JkIiwic3BhbiIsIm1vZCIsInByZXZDb29yZCIsInRhcmdldEluZGV4IiwiX2ludGVybmFsX2xhYmVsIiwiX2ludGVybmFsX2Zvcm1hdExvZ2ljYWwiLCJfaW50ZXJuYWxfaXNMb2ciLCJzb3J0U291cmNlcyIsInMxIiwiczIiLCJQcmljZVNjYWxlTW9kZSIsInBlcmNlbnRhZ2VGb3JtYXR0ZXIiLCJkZWZhdWx0UHJpY2VGb3JtYXR0ZXIiLCJQcmljZVNjYWxlIiwibG9jYWxpemF0aW9uT3B0aW9ucyIsIl9wcml2YXRlX19oZWlnaHQiLCJfcHJpdmF0ZV9faW50ZXJuYWxIZWlnaHRDYWNoZSIsIl9wcml2YXRlX19wcmljZVJhbmdlU25hcHNob3QiLCJfcHJpdmF0ZV9faW52YWxpZGF0ZWRGb3JSYW5nZSIsIl9pbnRlcm5hbF9pc1ZhbGlkIiwiX2ludGVybmFsX3Zpc2libGVCYXJzIiwiX3ByaXZhdGVfX21hcmdpbkFib3ZlIiwiX3ByaXZhdGVfX21hcmdpbkJlbG93IiwiX3ByaXZhdGVfX29uTWFya3NDaGFuZ2VkIiwiX3ByaXZhdGVfX21vZGVDaGFuZ2VkIiwiX3ByaXZhdGVfX2RhdGFTb3VyY2VzIiwiX3ByaXZhdGVfX2NhY2hlZE9yZGVyZWRTb3VyY2VzIiwiX3ByaXZhdGVfX21hcmtzQ2FjaGUiLCJfcHJpdmF0ZV9fc2NhbGVTdGFydFBvaW50IiwiX3ByaXZhdGVfX3Njcm9sbFN0YXJ0UG9pbnQiLCJfcHJpdmF0ZV9fbG9nRm9ybXVsYSIsIl9wcml2YXRlX19pZCIsIl9wcml2YXRlX19sYXlvdXRPcHRpb25zIiwiX3ByaXZhdGVfX2xvY2FsaXphdGlvbk9wdGlvbnMiLCJfcHJpdmF0ZV9fbWFya0J1aWxkZXIiLCJfcHJpdmF0ZV9fY29vcmRpbmF0ZVRvTG9naWNhbCIsIl9wcml2YXRlX19sb2dpY2FsVG9Db29yZGluYXRlIiwiX2ludGVybmFsX3NldE1vZGUiLCJzY2FsZU1hcmdpbnMiLCJfcHJpdmF0ZV9faW52YWxpZGF0ZUludGVybmFsSGVpZ2h0Q2FjaGUiLCJfaW50ZXJuYWxfaXNBdXRvU2NhbGUiLCJfaW50ZXJuYWxfaXNJbmRleGVkVG8xMDAiLCJfaW50ZXJuYWxfaXNJbnZlcnRlZCIsImludmVydFNjYWxlIiwibmV3TW9kZSIsIm9sZE1vZGUiLCJfaW50ZXJuYWxfc2V0UHJpY2VSYW5nZSIsIm1vZGVDaGFuZ2VkIiwiX3ByaXZhdGVfX29uSXNJbnZlcnRlZENoYW5nZWQiLCJfaW50ZXJuYWxfbW9kZUNoYW5nZWQiLCJfaW50ZXJuYWxfc2V0SGVpZ2h0IiwiX2ludGVybmFsX2ludGVybmFsSGVpZ2h0IiwiX3ByaXZhdGVfX3RvcE1hcmdpblB4IiwiX3ByaXZhdGVfX2JvdHRvbU1hcmdpblB4IiwiX3ByaXZhdGVfX21ha2VTdXJlSXRJc1ZhbGlkIiwibmV3UHJpY2VSYW5nZSIsImlzRm9yY2VTZXRWYWx1ZSIsIm9sZFByaWNlUmFuZ2UiLCJfaW50ZXJuYWxfaW52ZXJ0ZWRDb29yZGluYXRlIiwiYmgiLCJpaCIsImlzSW52ZXJ0ZWQiLCJobW0iLCJmcm9tSW5kZXgiLCJ0b0luZGV4IiwidHJhbnNmb3JtRm4iLCJfcHJpdmF0ZV9fZ2V0Q29vcmRpbmF0ZVRyYW5zZm9ybWVyIiwiaW52Q29vcmRpbmF0ZSIsInByaWNlc0xpc3QiLCJvcGVuTG9naWNhbCIsImhpZ2hMb2dpY2FsIiwibG93TG9naWNhbCIsImNsb3NlTG9naWNhbCIsIl9pbnRlcm5hbF9sb2dpY2FsVG9QcmljZSIsIl9pbnRlcm5hbF9vcmRlcmVkU291cmNlcyIsIl9pbnRlcm5hbF9hZGREYXRhU291cmNlIiwiX2ludGVybmFsX2ludmFsaWRhdGVTb3VyY2VzQ2FjaGUiLCJfaW50ZXJuYWxfcmVtb3ZlRGF0YVNvdXJjZSIsImZpcnN0VmFsdWVJc051bGwiLCJfaW50ZXJuYWxfZmlyc3RWYWx1ZUlzTnVsbCIsIm1hcmtzIiwiX2ludGVybmFsX29uTWFya3NDaGFuZ2VkIiwiX2ludGVybmFsX3N0YXJ0U2NhbGUiLCJfaW50ZXJuYWxfc2NhbGVUbyIsInNjYWxlQ29lZmYiLCJfaW50ZXJuYWxfZW5kU2NhbGUiLCJfaW50ZXJuYWxfc3RhcnRTY3JvbGwiLCJfaW50ZXJuYWxfc2Nyb2xsVG8iLCJwcmljZVVuaXRzUGVyUGl4ZWwiLCJwaXhlbERlbHRhIiwicHJpY2VEZWx0YSIsIl9pbnRlcm5hbF9lbmRTY3JvbGwiLCJfcHJpdmF0ZV9fZm9ybWF0UGVyY2VudGFnZSIsIl9wcml2YXRlX19mb3JtYXR0ZXJTb3VyY2UiLCJfaW50ZXJuYWxfc291cmNlc0ZvckF1dG9TY2FsZSIsIl9pbnRlcm5hbF9yZWNhbGN1bGF0ZVByaWNlUmFuZ2UiLCJmb3JtYXR0ZXJTb3VyY2UiLCJfcHJpdmF0ZV9fcmVjYWxjdWxhdGVQcmljZVJhbmdlSW1wbCIsIm1hcmdpbkFib3ZlIiwibWFyZ2luQmVsb3ciLCJhdXRvU2NhbGVJbmZvIiwic291cmNlUmFuZ2UiLCJleHRlbmRWYWx1ZSIsInJhd1JhbmdlIiwibmV3TG9nRm9ybXVsYSIsInJhd1NuYXBzaG90IiwiX3ByaXZhdGVfX2Zvcm1hdFZhbHVlIiwiZmFsbGJhY2tGb3JtYXR0ZXIiLCJwcmljZUZvcm1hdHRlciIsInBlcmNlbnRhZ2UiLCJERUZBVUxUX1NUUkVUQ0hfRkFDVE9SIiwiUGFuZSIsIl9wcml2YXRlX19vdmVybGF5U291cmNlc0J5U2NhbGVJZCIsIl9wcml2YXRlX193aWR0aCIsIl9wcml2YXRlX19zdHJldGNoRmFjdG9yIiwiX3ByaXZhdGVfX2Rlc3Ryb3llZCIsIl9wcml2YXRlX19ncmlkIiwiX3ByaXZhdGVfX2xlZnRQcmljZVNjYWxlIiwiX3ByaXZhdGVfX2NyZWF0ZVByaWNlU2NhbGUiLCJsZWZ0UHJpY2VTY2FsZSIsIl9wcml2YXRlX19yaWdodFByaWNlU2NhbGUiLCJyaWdodFByaWNlU2NhbGUiLCJfcHJpdmF0ZV9fb25QcmljZVNjYWxlTW9kZUNoYW5nZWQiLCJfaW50ZXJuYWxfYXBwbHlTY2FsZU9wdGlvbnMiLCJsb2NhbGl6YXRpb24iLCJvdmVybGF5UHJpY2VTY2FsZXMiLCJzb3VyY2VBcnJheXMiLCJfaW50ZXJuYWxfcHJpY2VTY2FsZUJ5SWQiLCJfaW50ZXJuYWxfcHJpY2VTY2FsZXNPcHRpb25zQ2hhbmdlZCIsIl9pbnRlcm5hbF9zdHJldGNoRmFjdG9yIiwiX2ludGVybmFsX3NldFN0cmV0Y2hGYWN0b3IiLCJmYWN0b3IiLCJfaW50ZXJuYWxfc2V0V2lkdGgiLCJfaW50ZXJuYWxfdXBkYXRlQWxsU291cmNlcyIsInRhcmdldFNjYWxlSWQiLCJ0YXJnZXRaT3JkZXIiLCJfcHJpdmF0ZV9fZ2V0Wk9yZGVyTWluTWF4IiwiX2ludGVybmFsX21heFpPcmRlciIsIl9wcml2YXRlX19pbnNlcnREYXRhU291cmNlIiwib3ZlcmxheVNvdXJjZXMiLCJvdmVybGF5SW5kZXgiLCJfaW50ZXJuYWxfcmVjYWxjdWxhdGVQcmljZVNjYWxlIiwiX2ludGVybmFsX2xlZnRQcmljZVNjYWxlIiwiX2ludGVybmFsX3JpZ2h0UHJpY2VTY2FsZSIsIl9pbnRlcm5hbF9zdGFydFNjYWxlUHJpY2UiLCJfaW50ZXJuYWxfc2NhbGVQcmljZVRvIiwiX2ludGVybmFsX2VuZFNjYWxlUHJpY2UiLCJfaW50ZXJuYWxfc3RhcnRTY3JvbGxQcmljZSIsIl9pbnRlcm5hbF9zY3JvbGxQcmljZVRvIiwiX2ludGVybmFsX2VuZFNjcm9sbFByaWNlIiwiX3ByaXZhdGVfX3JlY2FsY3VsYXRlUHJpY2VTY2FsZUltcGwiLCJfaW50ZXJuYWxfcmVzZXRQcmljZVNjYWxlIiwiX2ludGVybmFsX21vbWVudGFyeUF1dG9TY2FsZSIsIl9pbnRlcm5hbF9yZWNhbGN1bGF0ZSIsIl9pbnRlcm5hbF9vbkRlc3Ryb3llZCIsIl9pbnRlcm5hbF9ncmlkIiwic291cmNlRm9yQXV0b1NjYWxlIiwiX2ludGVybmFsX21pblpPcmRlciIsIm1pblpPcmRlciIsIm1heFpPcmRlciIsImoiLCJhY3R1YWxPcHRpb25zIiwiRm9ybWF0dGVkTGFiZWxzQ2FjaGUiLCJob3J6U2NhbGVCZWhhdmlvciIsIl9wcml2YXRlX19mb3JtYXQiLCJfcHJpdmF0ZV9faG9yelNjYWxlQmVoYXZpb3IiLCJfaW50ZXJuYWxfZm9ybWF0IiwidGlja01hcmsiLCJjYWNoZUtleSIsInRpY2siLCJfaW50ZXJuYWxfc3RyaW5nIiwic3RyIiwiUmFuZ2VJbXBsIiwiX3ByaXZhdGVfX2xlZnQiLCJfcHJpdmF0ZV9fcmlnaHQiLCJfaW50ZXJuYWxfY291bnQiLCJhcmVSYW5nZXNFcXVhbCIsIlRpY2tNYXJrcyIsIl9wcml2YXRlX19tYXJrc0J5V2VpZ2h0IiwiX3ByaXZhdGVfX3VuaWZvcm1EaXN0cmlidXRpb24iLCJfaW50ZXJuYWxfc2V0VW5pZm9ybURpc3RyaWJ1dGlvbiIsInZhbCIsIl9pbnRlcm5hbF9zZXRUaW1lU2NhbGVQb2ludHMiLCJuZXdQb2ludHMiLCJmaXJzdENoYW5nZWRQb2ludEluZGV4IiwiX3ByaXZhdGVfX3JlbW92ZU1hcmtzU2luY2VJbmRleCIsIm1hcmtzRm9yV2VpZ2h0IiwidGltZVdlaWdodCIsIndlaWdodCIsIl9pbnRlcm5hbF9idWlsZCIsIm1heFdpZHRoIiwibWF4SW5kZXhlc1Blck1hcmsiLCJfaW50ZXJuYWxfbWF4SW5kZXhlc1Blck1hcmsiLCJfcHJpdmF0ZV9fYnVpbGRNYXJrc0ltcGwiLCJzaW5jZUluZGV4Iiwid2VpZ2h0c1RvQ2xlYXIiLCJrZXlzIiwicHJldk1hcmtzIiwicHJldk1hcmtzTGVuZ3RoIiwicHJldk1hcmtzUG9pbnRlciIsImN1cnJlbnRXZWlnaHQiLCJjdXJyZW50V2VpZ2h0TGVuZ3RoIiwicmlnaHRJbmRleCIsImxlZnRJbmRleCIsIm1hcmsiLCJjdXJyZW50SW5kZXgiLCJsYXN0TWFyayIsIlRpbWVTY2FsZVZpc2libGVSYW5nZSIsImxvZ2ljYWxSYW5nZSIsIl9wcml2YXRlX19sb2dpY2FsUmFuZ2UiLCJfaW50ZXJuYWxfc3RyaWN0UmFuZ2UiLCJfaW50ZXJuYWxfbG9naWNhbFJhbmdlIiwiX2ludGVybmFsX2ludmFsaWQiLCJkZWZhdWx0VGlja01hcmtNYXhDaGFyYWN0ZXJMZW5ndGgiLCJtYXJrV2l0aEdyZWF0ZXJXZWlnaHQiLCJUaW1lU2NhbGUiLCJfcHJpdmF0ZV9fYmFzZUluZGV4T3JOdWxsIiwiX3ByaXZhdGVfX3BvaW50cyIsIl9wcml2YXRlX190aWNrTWFya3MiLCJfcHJpdmF0ZV9fZm9ybWF0dGVkQnlXZWlnaHQiLCJfcHJpdmF0ZV9fdmlzaWJsZVJhbmdlIiwiX3ByaXZhdGVfX3Zpc2libGVSYW5nZUludmFsaWRhdGVkIiwiX3ByaXZhdGVfX3Zpc2libGVCYXJzQ2hhbmdlZCIsIl9wcml2YXRlX19sb2dpY2FsUmFuZ2VDaGFuZ2VkIiwiX3ByaXZhdGVfX29wdGlvbnNBcHBsaWVkIiwiX3ByaXZhdGVfX2NvbW1vblRyYW5zaXRpb25TdGFydFN0YXRlIiwiX3ByaXZhdGVfX3RpbWVNYXJrc0NhY2hlIiwiX3ByaXZhdGVfX2xhYmVscyIsIl9wcml2YXRlX19yaWdodE9mZnNldCIsInJpZ2h0T2Zmc2V0IiwiX3ByaXZhdGVfX2JhclNwYWNpbmciLCJfcHJpdmF0ZV9fdXBkYXRlRGF0ZVRpbWVGb3JtYXR0ZXIiLCJ1bmlmb3JtRGlzdHJpYnV0aW9uIiwiX2ludGVybmFsX2FwcGx5TG9jYWxpemF0aW9uT3B0aW9ucyIsIl9wcml2YXRlX19pbnZhbGlkYXRlVGlja01hcmtzIiwiZml4TGVmdEVkZ2UiLCJfcHJpdmF0ZV9fZG9GaXhMZWZ0RWRnZSIsImZpeFJpZ2h0RWRnZSIsIl9wcml2YXRlX19kb0ZpeFJpZ2h0RWRnZSIsIm1pbkJhclNwYWNpbmciLCJmaW5kTmVhcmVzdCIsImtleSIsIl9wcml2YXRlX191cGRhdGVWaXNpYmxlUmFuZ2UiLCJfaW50ZXJuYWxfdmlzaWJsZUxvZ2ljYWxSYW5nZSIsIl9pbnRlcm5hbF92aXNpYmxlVGltZVJhbmdlIiwiX2ludGVybmFsX3RpbWVSYW5nZUZvckxvZ2ljYWxSYW5nZSIsIl9wcml2YXRlX19maXJzdEluZGV4IiwiX3ByaXZhdGVfX2xhc3RJbmRleCIsIl9pbnRlcm5hbF9sb2dpY2FsUmFuZ2VGb3JUaW1lUmFuZ2UiLCJuZXdXaWR0aCIsInByZXZpb3VzVmlzaWJsZVJhbmdlIiwib2xkV2lkdGgiLCJsb2NrVmlzaWJsZVRpbWVSYW5nZU9uUmVzaXplIiwibmV3QmFyU3BhY2luZyIsIl9wcml2YXRlX19jb3JyZWN0QmFyU3BhY2luZyIsIl9wcml2YXRlX19jb3JyZWN0T2Zmc2V0IiwiYmFzZUluZGV4IiwiX2ludGVybmFsX2Jhc2VJbmRleCIsImRlbHRhRnJvbVJpZ2h0IiwiaW5kZXhGcm9tIiwiaW5kZXhUbyIsIl9pbnRlcm5hbF9jb29yZGluYXRlVG9JbmRleCIsIl9wcml2YXRlX19jb29yZGluYXRlVG9GbG9hdEluZGV4IiwiX2ludGVybmFsX3JlY2FsY3VsYXRlQWxsUGFuZXMiLCJfcHJpdmF0ZV9fc2V0QmFyU3BhY2luZyIsIl9pbnRlcm5hbF9yaWdodE9mZnNldCIsInBpeGVsc1BlcjhDaGFyYWN0ZXJzIiwicGl4ZWxzUGVyQ2hhcmFjdGVyIiwibWF4TGFiZWxXaWR0aCIsInRpY2tNYXJrTWF4Q2hhcmFjdGVyTGVuZ3RoIiwiaW5kZXhQZXJMYWJlbCIsImVhcmxpZXN0SW5kZXhPZlNlY29uZExhYmVsIiwiaW5kZXhPZlNlY29uZExhc3RMYWJlbCIsImlzQWxsU2NhbGluZ0FuZFNjcm9sbGluZ0Rpc2FibGVkIiwiX3ByaXZhdGVfX2lzQWxsU2NhbGluZ0FuZFNjcm9sbGluZ0Rpc2FibGVkIiwiaXNMZWZ0RWRnZUZpeGVkIiwiaXNSaWdodEVkZ2VGaXhlZCIsImxhYmVsIiwiX3ByaXZhdGVfX2Zvcm1hdExhYmVsIiwibmVlZEFsaWduQ29vcmRpbmF0ZSIsIl9pbnRlcm5hbF9yZXN0b3JlRGVmYXVsdCIsIl9pbnRlcm5hbF9zZXRCYXNlSW5kZXgiLCJfaW50ZXJuYWxfem9vbSIsInpvb21Qb2ludCIsImZsb2F0SW5kZXhBdFpvb21Qb2ludCIsInJpZ2h0QmFyU3RheXNPblNjcm9sbCIsIl9wcml2YXRlX19zYXZlQ29tbW9uVHJhbnNpdGlvbnNTdGFydFN0YXRlIiwic3RhcnRMZW5ndGhGcm9tUmlnaHQiLCJjdXJyZW50TGVuZ3RoRnJvbVJpZ2h0IiwiX3ByaXZhdGVfX2NsZWFyQ29tbW9uVHJhbnNpdGlvbnNTdGFydFN0YXRlIiwic2hpZnRJbkxvZ2ljYWwiLCJfaW50ZXJuYWxfc2Nyb2xsVG9SZWFsVGltZSIsIl9pbnRlcm5hbF9zY3JvbGxUb09mZnNldEFuaW1hdGVkIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJSYW5nZUVycm9yIiwiYW5pbWF0aW9uU3RhcnQiLCJfaW50ZXJuYWxfZmluaXNoZWQiLCJfaW50ZXJuYWxfZ2V0UG9zaXRpb24iLCJhbmltYXRpb25Qcm9ncmVzcyIsImZpbmlzaEFuaW1hdGlvbiIsIl9pbnRlcm5hbF92aXNpYmxlQmFyc0NoYW5nZWQiLCJfaW50ZXJuYWxfbG9naWNhbFJhbmdlQ2hhbmdlZCIsIl9pbnRlcm5hbF9vcHRpb25zQXBwbGllZCIsIl9pbnRlcm5hbF9zZXRWaXNpYmxlUmFuZ2UiLCJfaW50ZXJuYWxfZml0Q29udGVudCIsImxhc3QiLCJfaW50ZXJuYWxfc2V0TG9naWNhbFJhbmdlIiwiYmFyUmFuZ2UiLCJ0aW1lU2NhbGVQb2ludCIsInRpbWVGb3JtYXR0ZXIiLCJmb3JtYXRIb3J6SXRlbSIsImhhbmRsZVNjcm9sbCIsImhhbmRsZVNjYWxlIiwiaG9yelRvdWNoRHJhZyIsIm1vdXNlV2hlZWwiLCJwcmVzc2VkTW91c2VNb3ZlIiwidmVydFRvdWNoRHJhZyIsImF4aXNEb3VibGVDbGlja1Jlc2V0IiwiYXhpc1ByZXNzZWRNb3VzZU1vdmUiLCJwaW5jaCIsIl9wcml2YXRlX19yaWdodE9mZnNldEZvckNvb3JkaW5hdGUiLCJvbGRCYXJTcGFjaW5nIiwiX3ByaXZhdGVfX3Jlc2V0VGltZU1hcmtzQ2FjaGUiLCJfcHJpdmF0ZV9fc2V0VmlzaWJsZVJhbmdlIiwibmV3QmFyc0xlbmd0aCIsInJpZ2h0Qm9yZGVyIiwibGVmdEJvcmRlciIsIl9wcml2YXRlX19taW5CYXJTcGFjaW5nIiwibWF4QmFyU3BhY2luZyIsIm1pblJpZ2h0T2Zmc2V0IiwiX3ByaXZhdGVfX21pblJpZ2h0T2Zmc2V0IiwibWF4UmlnaHRPZmZzZXQiLCJfcHJpdmF0ZV9fbWF4UmlnaHRPZmZzZXQiLCJiYXJzRXN0aW1hdGlvbiIsIl9wcml2YXRlX19mb3JtYXRMYWJlbEltcGwiLCJmb3JtYXRUaWNrbWFyayIsIm5ld1Zpc2libGVSYW5nZSIsIm9sZFZpc2libGVSYW5nZSIsInVwZGF0ZUZvcm1hdHRlciIsImxlZnRFZGdlT2Zmc2V0IiwiTWVkaWFDb29yZGluYXRlc1BhbmVSZW5kZXJlciIsIl9pbnRlcm5hbF9fZHJhd0JhY2tncm91bmRJbXBsIiwiV2F0ZXJtYXJrUmVuZGVyZXIiLCJfcHJpdmF0ZV9fbWV0cmljc0NhY2hlIiwiX2ludGVybmFsX2xpbmVzIiwiX3ByaXZhdGVfX21ldHJpY3MiLCJfaW50ZXJuYWxfbGluZUhlaWdodCIsInZlcnRPZmZzZXQiLCJfaW50ZXJuYWxfdmVydEFsaWduIiwiaG9yek9mZnNldCIsIl9pbnRlcm5hbF9ob3J6QWxpZ24iLCJfaW50ZXJuYWxfdmVydE9mZnNldCIsImZvbnRDYWNoZSIsIl9wcml2YXRlX19mb250Q2FjaGUiLCJXYXRlcm1hcmtQYW5lVmlldyIsImhvcnpBbGlnbiIsInZlcnRBbGlnbiIsImZvbnRTdHlsZSIsIldhdGVybWFyayIsIlRyYWNraW5nTW9kZUV4aXRNb2RlIiwiQ2hhcnRNb2RlbCIsImludmFsaWRhdGVIYW5kbGVyIiwiX3ByaXZhdGVfX3BhbmVzIiwiX3ByaXZhdGVfX3Nlcmllc2VzIiwiX3ByaXZhdGVfX2hvdmVyZWRTb3VyY2UiLCJfcHJpdmF0ZV9fcHJpY2VTY2FsZXNPcHRpb25zQ2hhbmdlZCIsIl9wcml2YXRlX19jcm9zc2hhaXJNb3ZlZCIsIl9wcml2YXRlX19ncmFkaWVudENvbG9yc0NhY2hlIiwiX3ByaXZhdGVfX2ludmFsaWRhdGVIYW5kbGVyIiwiX3ByaXZhdGVfX3JlbmRlcmVyT3B0aW9uc1Byb3ZpZGVyIiwiX3ByaXZhdGVfX21hZ25ldCIsIl9wcml2YXRlX193YXRlcm1hcmsiLCJ3YXRlcm1hcmsiLCJfaW50ZXJuYWxfY3JlYXRlUGFuZSIsIl9wcml2YXRlX19iYWNrZ3JvdW5kVG9wQ29sb3IiLCJfcHJpdmF0ZV9fZ2V0QmFja2dyb3VuZENvbG9yIiwiX3ByaXZhdGVfX2JhY2tncm91bmRCb3R0b21Db2xvciIsIl9wcml2YXRlX19pbnZhbGlkYXRlIiwiX3ByaXZhdGVfX2ludmFsaWRhdGlvbk1hc2tGb3JTb3VyY2UiLCJfaW50ZXJuYWxfaG92ZXJlZFNvdXJjZSIsIl9pbnRlcm5hbF9zZXRIb3ZlcmVkU291cmNlIiwicHJldlNvdXJjZSIsIl9pbnRlcm5hbF9zb3VyY2UiLCJfaW50ZXJuYWxfYXBwbHlQcmljZVNjYWxlT3B0aW9ucyIsIl9pbnRlcm5hbF9maW5kUHJpY2VTY2FsZSIsIl9pbnRlcm5hbF9wYW5lcyIsIl9pbnRlcm5hbF93YXRlcm1hcmtTb3VyY2UiLCJfaW50ZXJuYWxfY3Jvc3NoYWlyU291cmNlIiwiX2ludGVybmFsX2Nyb3NzaGFpck1vdmVkIiwiX2ludGVybmFsX3NldFBhbmVIZWlnaHQiLCJhY3R1YWxJbmRleCIsIm1hc2siLCJfcHJpdmF0ZV9fcGFuZUludmFsaWRhdGlvbk1hc2siLCJfaW50ZXJuYWxfc3RhcnRTY2FsZVRpbWUiLCJfaW50ZXJuYWxfem9vbVRpbWUiLCJwb2ludFgiLCJfaW50ZXJuYWxfc2Nyb2xsQ2hhcnQiLCJfaW50ZXJuYWxfc3RhcnRTY3JvbGxUaW1lIiwiX2ludGVybmFsX3Njcm9sbFRpbWVUbyIsIl9pbnRlcm5hbF9lbmRTY3JvbGxUaW1lIiwiX2ludGVybmFsX3NjYWxlVGltZVRvIiwiX2ludGVybmFsX2VuZFNjYWxlVGltZSIsIl9pbnRlcm5hbF9zZXRBbmRTYXZlQ3VycmVudFBvc2l0aW9uIiwiZXZlbnQiLCJza2lwRXZlbnQiLCJfaW50ZXJuYWxfc2V0QW5kU2F2ZVN5bnRoZXRpY1Bvc2l0aW9uIiwiaG9yaXpvbnRhbFBvc2l0aW9uIiwiX2ludGVybmFsX2NsZWFyQ3VycmVudFBvc2l0aW9uIiwiX2ludGVybmFsX3VwZGF0ZVRpbWVTY2FsZSIsIm5ld0Jhc2VJbmRleCIsIm9sZEZpcnN0VGltZSIsIm5ld0ZpcnN0VGltZSIsImN1cnJlbnRCYXNlSW5kZXgiLCJpc0xhc3RTZXJpZXNCYXJWaXNpYmxlIiwiaXNMZWZ0QmFyU2hpZnRUb0xlZnQiLCJpc1Nlcmllc1BvaW50c0FkZGVkIiwiaXNTZXJpZXNQb2ludHNBZGRlZFRvUmlnaHQiLCJhbGxvd1NoaWZ0V2hlblJlcGxhY2luZ1doaXRlc3BhY2UiLCJhbGxvd1NoaWZ0VmlzaWJsZVJhbmdlT25XaGl0ZXNwYWNlUmVwbGFjZW1lbnQiLCJyZXBsYWNlZEV4aXN0aW5nV2hpdGVzcGFjZSIsIm5lZWRTaGlmdFZpc2libGVSYW5nZU9uTmV3QmFyIiwic2hpZnRWaXNpYmxlUmFuZ2VPbk5ld0JhciIsImNvbXBlbnNhdGlvblNoaWZ0IiwiZmluZCIsIl9pbnRlcm5hbF9yZW5kZXJlck9wdGlvbnNQcm92aWRlciIsIl9pbnRlcm5hbF9jcmVhdGVTZXJpZXMiLCJfcHJpdmF0ZV9fY3JlYXRlU2VyaWVzIiwiX2ludGVybmFsX3JlbW92ZVNlcmllcyIsInNlcmllc0luZGV4IiwiX2ludGVybmFsX3NldFRhcmdldExvZ2ljYWxSYW5nZSIsIl9pbnRlcm5hbF9kZWZhdWx0VmlzaWJsZVByaWNlU2NhbGVJZCIsIl9pbnRlcm5hbF9iYWNrZ3JvdW5kQm90dG9tQ29sb3IiLCJfaW50ZXJuYWxfY29sb3JzIiwiY2FjaGVkVmFsdWUiLCJpbnZhbGlkYXRlVHlwZSIsInNpZGUiLCJiYWNrZ3JvdW5kIiwiZmlsbFVwRG93bkNhbmRsZXN0aWNrc0NvbG9ycyIsIkxhc3RQcmljZUFuaW1hdGlvbk1vZGUiLCJwcmVjaXNpb25CeU1pbk1vdmUiLCJmcmFjdFBhcnQiLCJQcmljZUxpbmVTb3VyY2UiLCJDb2xvclR5cGUiLCJpc0J1c2luZXNzRGF5IiwiaXNVVENUaW1lc3RhbXAiLCJUaWNrTWFya1R5cGUiLCJnZXRNb250aCIsImRhdGUiLCJnZXRVVENNb250aCIsImdldERheSIsImdldFVUQ0RhdGUiLCJnZXRZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJkZCIsIk1NTU0iLCJsb2NhbGUiLCJEYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJtb250aCIsIk1NTSIsIk1NIiwieXkiLCJ5eXl5IiwiZm9ybWF0RGF0ZSIsIkRhdGVGb3JtYXR0ZXIiLCJkYXRlRm9ybWF0IiwiX3ByaXZhdGVfX2RhdGVGb3JtYXQiLCJfcHJpdmF0ZV9fbG9jYWxlIiwiVGltZUZvcm1hdHRlciIsIl9wcml2YXRlX19mb3JtYXRTdHIiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZGVmYXVsdFBhcmFtcyIsIl9pbnRlcm5hbF9kYXRlRm9ybWF0IiwiX2ludGVybmFsX3RpbWVGb3JtYXQiLCJfaW50ZXJuYWxfZGF0ZVRpbWVTZXBhcmF0b3IiLCJfaW50ZXJuYWxfbG9jYWxlIiwiRGF0ZVRpbWVGb3JtYXR0ZXIiLCJmb3JtYXR0ZXJQYXJhbXMiLCJfcHJpdmF0ZV9fZGF0ZUZvcm1hdHRlciIsIl9wcml2YXRlX190aW1lRm9ybWF0dGVyIiwiX3ByaXZhdGVfX3NlcGFyYXRvciIsImRhdGVUaW1lIiwiZGVmYXVsdFRpY2tNYXJrRm9ybWF0dGVyIiwidGltZVBvaW50IiwidGlja01hcmtUeXBlIiwiZm9ybWF0T3B0aW9ucyIsInllYXIiLCJkYXkiLCJob3VyMTIiLCJob3VyIiwibWludXRlIiwiX2ludGVybmFsX2J1c2luZXNzRGF5IiwiX2ludGVybmFsX3RpbWVzdGFtcCIsIlVUQyIsImxvY2FsRGF0ZUZyb21VdGMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiaW50cmFkYXlXZWlnaHREaXZpc29ycyIsIl9pbnRlcm5hbF9kaXZpc29yIiwiX2ludGVybmFsX3dlaWdodCIsIndlaWdodEJ5VGltZSIsImN1cnJlbnREYXRlIiwicHJldkRhdGUiLCJnZXRUaW1lIiwiY2FzdCIsImZpbGxXZWlnaHRzRm9yUG9pbnRzIiwic29ydGVkVGltZVBvaW50cyIsInByZXZUaW1lIiwidG90YWxUaW1lRGlmZiIsImN1cnJlbnRQb2ludCIsImF2ZXJhZ2VUaW1lRGlmZiIsImFwcHJveFByZXZEYXRlIiwiYnVzaW5lc3NEYXlDb252ZXJ0ZXIiLCJidXNpbmVzc0RheSIsInN0cmluZ1RvQnVzaW5lc3NEYXkiLCJ0aW1lc3RhbXBDb252ZXJ0ZXIiLCJzZWxlY3RUaW1lQ29udmVydGVyIiwidmFsaWREYXRlUmVnZXgiLCJjb252ZXJ0VGltZSIsInRlc3QiLCJkIiwiY29udmVydFN0cmluZ1RvQnVzaW5lc3NEYXkiLCJjb252ZXJ0U3RyaW5nc1RvQnVzaW5lc3NEYXlzIiwid2VpZ2h0VG9UaWNrTWFya1R5cGUiLCJ0aW1lVmlzaWJsZSIsInNlY29uZHNWaXNpYmxlIiwiSG9yelNjYWxlQmVoYXZpb3JUaW1lIiwic2V0T3B0aW9ucyIsInByZXByb2Nlc3NEYXRhIiwiY3JlYXRlQ29udmVydGVyVG9JbnRlcm5hbE9iaiIsImNvbnZlcnRIb3J6SXRlbVRvSW50ZXJuYWwiLCJfcHJpdmF0ZV9fZGF0ZVRpbWVGb3JtYXR0ZXIiLCJ0cCIsInRpY2tNYXJrRm9ybWF0dGVyIiwidGlja01hcmtTdHJpbmciLCJtYXhUaWNrTWFya1dlaWdodCIsInRpY2tNYXJrcyIsIm1heFdlaWdodCIsIl9pbnRlcm5hbF9hcHBseURlZmF1bHRzIiwiaXNSdW5uaW5nT25DbGllbnRTaWRlIiwiaXNGRiIsIndpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzSU9TIiwicGxhdGZvcm0iLCJpc0Nocm9tZSIsImNocm9tZSIsImlzV2luZG93cyIsInVzZXJBZ2VudERhdGEiLCJpc0Nocm9taXVtQmFzZWQiLCJicmFuZHMiLCJzb21lIiwiYnJhbmQiLCJ3YXJuIiwibXNnIiwiY29uc29sZSIsInN1Z2dlc3RDaGFydFNpemUiLCJpbnRlZ2VyV2lkdGgiLCJpbnRlZ2VySGVpZ2h0Iiwic3VnZ2VzdFRpbWVTY2FsZUhlaWdodCIsIm9yaWdpbmFsSGVpZ2h0Iiwic3VnZ2VzdFByaWNlU2NhbGVXaWR0aCIsIm9yaWdpbmFsV2lkdGgiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJwb3MxIiwicG9zMiIsIl9pbnRlcm5hbF9wb3NpdGlvbiIsInNwZWVkUHhQZXJNU2VjIiwibWF4U3BlZWQiLCJzcGVlZCIsImR1cmF0aW9uTVNlYyIsImR1bXBpbmdDb2VmZiIsImxuRHVtcGluZ0NvZWZmIiwibG9nIiwiS2luZXRpY0FuaW1hdGlvbiIsIm1pblNwZWVkIiwiX3ByaXZhdGVfX3Bvc2l0aW9uMSIsIl9wcml2YXRlX19wb3NpdGlvbjIiLCJfcHJpdmF0ZV9fcG9zaXRpb24zIiwiX3ByaXZhdGVfX3Bvc2l0aW9uNCIsIl9wcml2YXRlX19hbmltYXRpb25TdGFydFBvc2l0aW9uIiwiX3ByaXZhdGVfX2R1cmF0aW9uTXNlY3MiLCJfcHJpdmF0ZV9fc3BlZWRQeFBlck1zZWMiLCJfcHJpdmF0ZV9fbWluU3BlZWQiLCJfcHJpdmF0ZV9fbWF4U3BlZWQiLCJfcHJpdmF0ZV9fZHVtcGluZ0NvZWZmIiwiX2ludGVybmFsX2FkZFBvc2l0aW9uIiwidG90YWxEaXN0YW5jZSIsInNwZWVkMSIsImRpc3RhbmNlMSIsInNwZWVkSXRlbXMiLCJkaXN0YW5jZUl0ZW1zIiwic3BlZWQyIiwiZGlzdGFuY2UyIiwic3BlZWQzIiwiZGlzdGFuY2UzIiwicmVzdWx0U3BlZWQiLCJzdGFydFBvc2l0aW9uIiwiZHVyYXRpb25Nc2VjcyIsIl9wcml2YXRlX19wcm9ncmVzc0R1cmF0aW9uIiwicHJvZ3Jlc3MiLCJzdmciLCJjc3MiLCJBdHRyaWJ1dGlvbkxvZ29XaWRnZXQiLCJjb250YWluZXIiLCJjaGFydCIsIl9wcml2YXRlX19lbGVtZW50IiwiX3ByaXZhdGVfX2Nzc0VsZW1lbnQiLCJfcHJpdmF0ZV9fdGhlbWUiLCJfcHJpdmF0ZV9fY29udGFpbmVyIiwiX3ByaXZhdGVfX2NoYXJ0IiwiX3ByaXZhdGVfX3JlbmRlciIsIl9pbnRlcm5hbF9yZW1vdmVFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJfcHJpdmF0ZV9fc2hvdWxkVXBkYXRlIiwiX3ByaXZhdGVfX3Nob3VsZEJlVmlzaWJsZSIsIl9wcml2YXRlX190aGVtZVRvVXNlIiwiYXR0cmlidXRpb25Mb2dvIiwiX3ByaXZhdGVfX2dldFVUTVNvdXJjZSIsInVybCIsIlVSTCIsImxvY2F0aW9uIiwiaHJlZiIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lclRleHQiLCJpbm5lckhUTUwiLCJ0b2dnbGVBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUJvdW5kQ2FudmFzIiwicGFyZW50RWxlbWVudCIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJjYW52YXMiLCJiaW5kaW5nIiwiYWxsb3dSZXNpemVPYnNlcnZlciIsInRyYW5zZm9ybSIsImNhbnZhc0VsZW1lbnRDbGllbnRTaXplIiwicmVzaXplQ2FudmFzRWxlbWVudCIsInJlbGVhc2VDYW52YXMiLCJnZXRDb250ZXh0IiwiZHJhd0ZvcmVncm91bmQiLCJkcmF3U291cmNlUGFuZVZpZXdzIiwicGFuZVZpZXdzR2V0dGVyIiwiZHJhd1JlbmRlcmVyRm4iLCJwcmV2ZW50U2Nyb2xsQnlXaGVlbENsaWNrIiwiZWwiLCJhZGRFdmVudExpc3RlbmVyIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJNb3VzZUV2ZW50SGFuZGxlciIsImhhbmRsZXIiLCJfcHJpdmF0ZV9fY2xpY2tDb3VudCIsIl9wcml2YXRlX19jbGlja1RpbWVvdXRJZCIsIl9wcml2YXRlX19jbGlja1Bvc2l0aW9uIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsIl9wcml2YXRlX190YXBDb3VudCIsIl9wcml2YXRlX190YXBUaW1lb3V0SWQiLCJfcHJpdmF0ZV9fdGFwUG9zaXRpb24iLCJfcHJpdmF0ZV9fbG9uZ1RhcFRpbWVvdXRJZCIsIl9wcml2YXRlX19sb25nVGFwQWN0aXZlIiwiX3ByaXZhdGVfX21vdXNlTW92ZVN0YXJ0UG9zaXRpb24iLCJfcHJpdmF0ZV9fdG91Y2hNb3ZlU3RhcnRQb3NpdGlvbiIsIl9wcml2YXRlX190b3VjaE1vdmVFeGNlZWRlZE1hbmhhdHRhbkRpc3RhbmNlIiwiX3ByaXZhdGVfX2NhbmNlbENsaWNrIiwiX3ByaXZhdGVfX2NhbmNlbFRhcCIsIl9wcml2YXRlX191bnN1YnNjcmliZU91dHNpZGVNb3VzZUV2ZW50cyIsIl9wcml2YXRlX191bnN1YnNjcmliZU91dHNpZGVUb3VjaEV2ZW50cyIsIl9wcml2YXRlX191bnN1YnNjcmliZU1vYmlsZVNhZmFyaUV2ZW50cyIsIl9wcml2YXRlX191bnN1YnNjcmliZU1vdXNlbW92ZSIsIl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RNb3VzZUV2ZW50cyIsIl9wcml2YXRlX191bnN1YnNjcmliZVJvb3RUb3VjaEV2ZW50cyIsIl9wcml2YXRlX19zdGFydFBpbmNoTWlkZGxlUG9pbnQiLCJfcHJpdmF0ZV9fc3RhcnRQaW5jaERpc3RhbmNlIiwiX3ByaXZhdGVfX3BpbmNoUHJldmVudGVkIiwiX3ByaXZhdGVfX3ByZXZlbnRUb3VjaERyYWdQcm9jZXNzIiwiX3ByaXZhdGVfX21vdXNlUHJlc3NlZCIsIl9wcml2YXRlX19sYXN0VG91Y2hFdmVudFRpbWVTdGFtcCIsIl9wcml2YXRlX19hY3RpdmVUb3VjaElkIiwiX3ByaXZhdGVfX2FjY2VwdE1vdXNlTGVhdmUiLCJfcHJpdmF0ZV9fb25GaXJlZm94T3V0c2lkZU1vdXNlVXAiLCJtb3VzZVVwRXZlbnQiLCJfcHJpdmF0ZV9fbW91c2VVcEhhbmRsZXIiLCJfcHJpdmF0ZV9fb25Nb2JpbGVTYWZhcmlEb3VibGVDbGljayIsImRibENsaWNrRXZlbnQiLCJfcHJpdmF0ZV9fZmlyZXNUb3VjaEV2ZW50cyIsImNvbXBhdEV2ZW50IiwiX3ByaXZhdGVfX21ha2VDb21wYXRFdmVudCIsIl9pbnRlcm5hbF9tYW5oYXR0YW5EaXN0YW5jZSIsIm1hbmhhdHRhbkRpc3RhbmNlIiwiX3ByaXZhdGVfX3RvdWNoTW91c2VNb3ZlV2l0aERvd25JbmZvIiwiZ2V0UG9zaXRpb24iLCJfcHJpdmF0ZV9fcHJvY2Vzc1RvdWNoRXZlbnQiLCJfcHJpdmF0ZV9faGFuZGxlciIsIl9pbnRlcm5hbF9kb3VibGVUYXBFdmVudCIsIl9wcml2YXRlX19yZXNldFRhcFRpbWVvdXQiLCJfcHJpdmF0ZV9fcHJvY2Vzc01vdXNlRXZlbnQiLCJfaW50ZXJuYWxfbW91c2VEb3VibGVDbGlja0V2ZW50IiwiX3ByaXZhdGVfX3Jlc2V0Q2xpY2tUaW1lb3V0IiwiX3ByaXZhdGVfX3RhcmdldCIsIl9wcml2YXRlX19pbml0IiwiX3ByaXZhdGVfX2NsZWFyTG9uZ1RhcFRpbWVvdXQiLCJfcHJpdmF0ZV9fbW91c2VFbnRlckhhbmRsZXIiLCJlbnRlckV2ZW50IiwiYm91bmRNb3VzZU1vdmVIYW5kbGVyIiwiX3ByaXZhdGVfX21vdXNlTW92ZUhhbmRsZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2ludGVybmFsX21vdXNlRW50ZXJFdmVudCIsIm1vdmVFdmVudCIsIl9pbnRlcm5hbF9tb3VzZU1vdmVFdmVudCIsIl9wcml2YXRlX190b3VjaE1vdmVIYW5kbGVyIiwidG91Y2giLCJ0b3VjaFdpdGhJZCIsImNoYW5nZWRUb3VjaGVzIiwiZXZlbnRUaW1lU3RhbXAiLCJtb3ZlSW5mbyIsIl9pbnRlcm5hbF94T2Zmc2V0IiwiX2ludGVybmFsX3lPZmZzZXQiLCJjb3JyZWN0ZWRYT2Zmc2V0IiwiaXNWZXJ0RHJhZyIsIl9pbnRlcm5hbF90cmVhdFZlcnRUb3VjaERyYWdBc1BhZ2VTY3JvbGwiLCJpc0hvcnpEcmFnIiwiX2ludGVybmFsX3RyZWF0SG9yelRvdWNoRHJhZ0FzUGFnZVNjcm9sbCIsIl9pbnRlcm5hbF90b3VjaE1vdmVFdmVudCIsIl9wcml2YXRlX19tb3VzZU1vdmVXaXRoRG93bkhhbmRsZXIiLCJfaW50ZXJuYWxfcHJlc3NlZE1vdXNlTW92ZUV2ZW50IiwiY3VycmVudFBvc2l0aW9uIiwiX3ByaXZhdGVfX3RvdWNoRW5kSGFuZGxlciIsInRvdWNoRW5kRXZlbnQiLCJ0b3VjaGVzIiwiX2ludGVybmFsX3RvdWNoRW5kRXZlbnQiLCJfaW50ZXJuYWxfdGFwRXZlbnQiLCJyb290RWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsIl9pbnRlcm5hbF9tb3VzZVVwRXZlbnQiLCJfaW50ZXJuYWxfbW91c2VDbGlja0V2ZW50IiwiX3ByaXZhdGVfX3RvdWNoU3RhcnRIYW5kbGVyIiwiZG93bkV2ZW50IiwiaWRlbnRpZmllciIsImJvdW5kVG91Y2hNb3ZlV2l0aERvd25IYW5kbGVyIiwiYm91bmRUb3VjaEVuZEhhbmRsZXIiLCJwYXNzaXZlIiwiX3ByaXZhdGVfX2xvbmdUYXBIYW5kbGVyIiwiX2ludGVybmFsX3RvdWNoU3RhcnRFdmVudCIsIl9wcml2YXRlX19tb3VzZURvd25IYW5kbGVyIiwiYm91bmRNb3VzZU1vdmVXaXRoRG93bkhhbmRsZXIiLCJib3VuZE1vdXNlVXBIYW5kbGVyIiwiX2ludGVybmFsX21vdXNlRG93bkV2ZW50Iiwib3V0c2lkZUhhbmRsZXIiLCJfaW50ZXJuYWxfbW91c2VEb3duT3V0c2lkZUV2ZW50IiwiY29tcG9zZWQiLCJjb250YWlucyIsImNvbXBvc2VkUGF0aCIsIl9wcml2YXRlX19tb3VzZUxlYXZlSGFuZGxlciIsIl9wcml2YXRlX19pbml0UGluY2giLCJfaW50ZXJuYWxfcGluY2hTdGFydEV2ZW50IiwiX2ludGVybmFsX3BpbmNoRXZlbnQiLCJfaW50ZXJuYWxfcGluY2hFbmRFdmVudCIsIl9wcml2YXRlX19jaGVja1BpbmNoU3RhdGUiLCJjdXJyZW50RGlzdGFuY2UiLCJnZXREaXN0YW5jZSIsIl9wcml2YXRlX19zdG9wUGluY2giLCJfcHJpdmF0ZV9fc3RhcnRQaW5jaCIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJjbGllbnRZIiwiX2ludGVybmFsX21vdXNlTGVhdmVFdmVudCIsIl9pbnRlcm5hbF9sb25nVGFwRXZlbnQiLCJzb3VyY2VDYXBhYmlsaXRpZXMiLCJmaXJlc1RvdWNoRXZlbnRzIiwiZXZlbnRMaWtlIiwicGFnZVgiLCJwYWdlWSIsInNjcmVlblgiLCJzY3JlZW5ZIiwibG9jYWxYIiwibG9jYWxZIiwiY3RybEtleSIsImFsdEtleSIsInNoaWZ0S2V5IiwibWV0YUtleSIsIl9pbnRlcm5hbF9pc1RvdWNoIiwic3RhcnRzV2l0aCIsIl9pbnRlcm5hbF9zcmNUeXBlIiwiX2ludGVybmFsX3RhcmdldCIsIl9pbnRlcm5hbF92aWV3IiwiX2ludGVybmFsX3ByZXZlbnREZWZhdWx0IiwiZWxlbWVudCIsInhEaWZmIiwieURpZmYiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiY29tcGFyZVByaW1pdGl2ZVpPcmRlciIsInJlZmVyZW5jZSIsImZpbmRCZXN0UHJpbWl0aXZlSGl0VGVzdCIsImJlc3RQcmltaXRpdmVIaXQiLCJiZXN0SGl0U291cmNlIiwicHJpbWl0aXZlSGl0UmVzdWx0cyIsImhpdFJlc3VsdCIsIl9pbnRlcm5hbF9oaXQiLCJjb252ZXJ0UHJpbWl0aXZlSGl0UmVzdWx0IiwicHJpbWl0aXZlSGl0IiwiX2ludGVybmFsX29iamVjdCIsIl9pbnRlcm5hbF9jdXJzb3JTdHlsZSIsImN1cnNvclN0eWxlIiwiaGl0VGVzdFBhbmVWaWV3IiwiaGl0VGVzdFBhbmUiLCJpc0JhY2tncm91bmQiLCJzb3VyY2VSZXN1bHQiLCJidWlsZFByaWNlQXhpc1ZpZXdzR2V0dGVyIiwicHNJZCIsInJlY2FsY3VsYXRlT3ZlcmxhcHBpbmciLCJkaXJlY3Rpb24iLCJjdXJyZW50R3JvdXBTdGFydCIsImluaXRMYWJlbEhlaWdodCIsInNwYWNlQmVmb3JlQ3VycmVudEdyb3VwIiwicHJldkZpeGVkQ29vcmRpbmF0ZSIsIm92ZXJsYXAiLCJlZGdlUG9pbnQiLCJvdXRPZlZpZXdwb3J0IiwiZGVzaXJlZEdyb3VwU2hpZnQiLCJwb3NzaWJsZVNoaWZ0IiwiayIsInByaWNlU2NhbGVDcm9zc2hhaXJMYWJlbFZpc2libGUiLCJQcmljZUF4aXNXaWRnZXQiLCJyZW5kZXJlck9wdGlvbnNQcm92aWRlciIsIl9wcml2YXRlX19zaXplIiwiX3ByaXZhdGVfX21vdXNlZG93biIsIl9wcml2YXRlX193aWR0aENhY2hlIiwiX3ByaXZhdGVfX3ByZXZPcHRpbWFsV2lkdGgiLCJfcHJpdmF0ZV9faXNTZXR0aW5nU2l6ZSIsIl9wcml2YXRlX19jYW52YXNTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZEhhbmRsZXIiLCJfaW50ZXJuYWxfY2hhcnQiLCJfcHJpdmF0ZV9fdG9wQ2FudmFzU3VnZ2VzdGVkQml0bWFwU2l6ZUNoYW5nZWRIYW5kbGVyIiwiX3ByaXZhdGVfX2lzTGVmdCIsIl9wcml2YXRlX19zb3VyY2VQYW5lVmlld3MiLCJfcHJpdmF0ZV9fc291cmNlVG9wUGFuZVZpZXdzIiwiX3ByaXZhdGVfX3NvdXJjZUJvdHRvbVBhbmVWaWV3cyIsIl9wcml2YXRlX19jZWxsIiwib3ZlcmZsb3ciLCJfcHJpdmF0ZV9fY2FudmFzQmluZGluZyIsInN1YnNjcmliZVN1Z2dlc3RlZEJpdG1hcFNpemVDaGFuZ2VkIiwiY2FudmFzRWxlbWVudCIsInpJbmRleCIsIl9wcml2YXRlX190b3BDYW52YXNCaW5kaW5nIiwidG9wQ2FudmFzIiwiX3ByaXZhdGVfX21vdXNlRG93bkV2ZW50IiwiX3ByaXZhdGVfX3ByZXNzZWRNb3VzZU1vdmVFdmVudCIsIl9wcml2YXRlX19tb3VzZURvd25PdXRzaWRlRXZlbnQiLCJfcHJpdmF0ZV9fbW91c2VVcEV2ZW50IiwiX3ByaXZhdGVfX21vdXNlRG91YmxlQ2xpY2tFdmVudCIsIl9wcml2YXRlX19tb3VzZUVudGVyRXZlbnQiLCJfcHJpdmF0ZV9fbW91c2VMZWF2ZUV2ZW50IiwiX3ByaXZhdGVfX21vdXNlRXZlbnRIYW5kbGVyIiwidW5zdWJzY3JpYmVTdWdnZXN0ZWRCaXRtYXBTaXplQ2hhbmdlZCIsImRpc3Bvc2UiLCJfaW50ZXJuYWxfZ2V0RWxlbWVudCIsIl9pbnRlcm5hbF9yZW5kZXJlck9wdGlvbnMiLCJpc0ZvbnRDaGFuZ2VkIiwiX2ludGVybmFsX29wdGltYWxXaWR0aCIsInRpY2tNYXJrTWF4V2lkdGgiLCJfcHJpdmF0ZV9fYmFzZUZvbnQiLCJfcHJpdmF0ZV9fYmFja0xhYmVscyIsInRvcFZhbHVlIiwiYm90dG9tVmFsdWUiLCJyZXN1bHRUaWNrTWFya3NNYXhXaWR0aCIsIl9pbnRlcm5hbF9zZXRTaXplIiwibmV3U2l6ZSIsIl9pbnRlcm5hbF9nZXRXaWR0aCIsIl9pbnRlcm5hbF9zdGF0ZSIsIl9pbnRlcm5hbF9wYWludCIsIl9wcml2YXRlX19hbGlnbkxhYmVscyIsImFwcGx5U3VnZ2VzdGVkQml0bWFwU2l6ZSIsIl9wcml2YXRlX19kcmF3QmFja2dyb3VuZCIsIl9pbnRlcm5hbF9kcmF3QWRkaXRpb25hbFNvdXJjZXMiLCJfcHJpdmF0ZV9fZHJhd1RpY2tNYXJrcyIsIl9wcml2YXRlX19kcmF3QmFja0xhYmVscyIsInRvcFRhcmdldCIsIl9wcml2YXRlX19kcmF3Q3Jvc3NoYWlyTGFiZWwiLCJfaW50ZXJuYWxfZ2V0Qml0bWFwU2l6ZSIsIl9pbnRlcm5hbF9kcmF3Qml0bWFwIiwiZHJhd0ltYWdlIiwiX3ByaXZhdGVfX3NldEN1cnNvciIsImFkZFZpZXdzRm9yU291cmNlcyIsImJvcmRlclNpemUiLCJwcmljZVNjYWxlT3B0aW9ucyIsInRpY2tNYXJrTGVmdFgiLCJ0aWNrSGVpZ2h0IiwidGlja0xlbmd0aCIsInJlY3QiLCJ0ZXh0TGVmdFgiLCJ5TWlkQ29ycmVjdGlvbnMiLCJvcmRlcmVkU291cmNlcyIsInBhbmVTdGF0ZSIsImlzRGVmYXVsdCIsInVwZGF0ZUZvclNvdXJjZXMiLCJzb3VyY2VWaWV3cyIsImFsaWduTGFiZWxzIiwiX3ByaXZhdGVfX2ZpeExhYmVsT3ZlcmxhcCIsImwiLCJybyIsImN1cnNvciIsInNvdXJjZUJvdHRvbVBhbmVWaWV3cyQxIiwic291cmNlUGFuZVZpZXdzJDEiLCJzb3VyY2VMYWJlbFBhbmVWaWV3cyIsInNvdXJjZVRvcFBhbmVWaWV3cyQxIiwiUGFuZVdpZGdldCIsInN0YXRlIiwiX3ByaXZhdGVfX2xlZnRQcmljZUF4aXNXaWRnZXQiLCJfcHJpdmF0ZV9fcmlnaHRQcmljZUF4aXNXaWRnZXQiLCJfcHJpdmF0ZV9fYXR0cmlidXRpb25Mb2dvV2lkZ2V0IiwiX3ByaXZhdGVfX3N0YXJ0U2Nyb2xsaW5nUG9zIiwiX3ByaXZhdGVfX2lzU2Nyb2xsaW5nIiwiX3ByaXZhdGVfX2NsaWNrZWQiLCJfcHJpdmF0ZV9fZGJsQ2xpY2tlZCIsIl9wcml2YXRlX19wcmV2UGluY2hTY2FsZSIsIl9wcml2YXRlX19sb25nVGFwIiwiX3ByaXZhdGVfX3N0YXJ0VHJhY2tQb2ludCIsIl9wcml2YXRlX19leGl0VHJhY2tpbmdNb2RlT25OZXh0VHJ5IiwiX3ByaXZhdGVfX2luaXRDcm9zc2hhaXJQb3NpdGlvbiIsIl9wcml2YXRlX19zY3JvbGxYQW5pbWF0aW9uIiwiX3ByaXZhdGVfX3N0YXRlIiwiX3ByaXZhdGVfX29uU3RhdGVEZXN0cm95ZWQiLCJfcHJpdmF0ZV9fcGFuZUNlbGwiLCJwYWRkaW5nIiwicGFuZVdyYXBwZXIiLCJfcHJpdmF0ZV9fbGVmdEF4aXNDZWxsIiwiX3ByaXZhdGVfX3JpZ2h0QXhpc0NlbGwiLCJfcHJpdmF0ZV9fcm93RWxlbWVudCIsIl9pbnRlcm5hbF91cGRhdGVQcmljZUF4aXNXaWRnZXRzU3RhdGVzIiwiX2ludGVybmFsX3NldFN0YXRlIiwiX2ludGVybmFsX3BhbmVXaWRnZXRzIiwiX3ByaXZhdGVfX3JlY3JlYXRlUHJpY2VBeGlzV2lkZ2V0cyIsIl9pbnRlcm5hbF91cGRhdGVQcmljZUF4aXNXaWRnZXRzIiwic3RyZXRjaEZhY3RvciIsIl9wcml2YXRlX19vbk1vdXNlRXZlbnQiLCJfcHJpdmF0ZV9fc2V0Q3Jvc3NoYWlyUG9zaXRpb24iLCJfcHJpdmF0ZV9fbW91c2VUb3VjaERvd25FdmVudCIsIl9pbnRlcm5hbF9zZXRDdXJzb3JTdHlsZSIsIl9wcml2YXRlX19maXJlQ2xpY2tlZERlbGVnYXRlIiwiX3ByaXZhdGVfX2ZpcmVNb3VzZUNsaWNrRGVsZWdhdGUiLCJfcHJpdmF0ZV9fcHJlc3NlZE1vdXNlVG91Y2hNb3ZlRXZlbnQiLCJfcHJpdmF0ZV9fZW5kU2Nyb2xsIiwiX3ByaXZhdGVfX3N0YXJ0VHJhY2tpbmdNb2RlIiwiX3ByaXZhdGVfX2NsZWFyQ3Jvc3NoYWlyUG9zaXRpb24iLCJfaW50ZXJuYWxfY2xpY2tlZCIsIl9pbnRlcm5hbF9kYmxDbGlja2VkIiwibWlkZGxlUG9pbnQiLCJ6b29tU2NhbGUiLCJvcmlnUG9pbnQiLCJuZXdYIiwibmV3WSIsInRyYWNraW5nTW9kZSIsImV4aXRNb2RlIiwiX3ByaXZhdGVfX3RyeUV4aXRUcmFja2luZ01vZGUiLCJfaW50ZXJuYWxfc2V0UHJpY2VBeGlzU2l6ZSIsInByaWNlQXhpc1dpZGdldCIsIl9pbnRlcm5hbF9nZXRTaXplIiwiX2ludGVybmFsX3JlY2FsY3VsYXRlUHJpY2VTY2FsZXMiLCJfcHJpdmF0ZV9fZHJhd1NvdXJjZXMiLCJfcHJpdmF0ZV9fZHJhd0dyaWQiLCJfcHJpdmF0ZV9fZHJhd1dhdGVybWFyayIsIl9wcml2YXRlX19kcmF3Q3Jvc3NoYWlyIiwiX2ludGVybmFsX2xlZnRQcmljZUF4aXNXaWRnZXQiLCJfaW50ZXJuYWxfcmlnaHRQcmljZUF4aXNXaWRnZXQiLCJkZWxlZ2F0ZSIsIl9wcml2YXRlX19kcmF3U291cmNlSW1wbCIsImRyYXdGbiIsImhvdmVyZWRTb3VyY2UiLCJvYmplY0lkIiwibGVmdEF4aXNWaXNpYmxlIiwicmlnaHRBeGlzVmlzaWJsZSIsIl9wcml2YXRlX19wcmV2ZW50U2Nyb2xsIiwiX3ByaXZhdGVfX2NvcnJlY3RYQ29vcmQiLCJfcHJpdmF0ZV9fY29ycmVjdFlDb29yZCIsInN0YXJ0VHJhY2tQb2ludCIsImNyb3NzSGFpclBvc2l0aW9uIiwic3RhcnRBbmltYXRpb25UaW1lIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJibHVyIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiY2hhcnRPcHRpb25zIiwic2Nyb2xsT3B0aW9ucyIsImtpbmV0aWNTY3JvbGxPcHRpb25zIiwia2luZXRpY1Njcm9sbCIsIl9pbnRlcm5hbF9sb2NhbFgiLCJfaW50ZXJuYWxfbG9jYWxZIiwibW91c2UiLCJQcmljZUF4aXNTdHViIiwiX3ByaXZhdGVfX2JvcmRlclZpc2libGUiLCJfcHJpdmF0ZV9fYm90dG9tQ29sb3IiLCJob3J6Qm9yZGVyU2l6ZSIsInZlcnRCb3JkZXJTaXplIiwiYnVpbGRUaW1lQXhpc1ZpZXdzR2V0dGVyIiwic291cmNlUGFuZVZpZXdzIiwic291cmNlVG9wUGFuZVZpZXdzIiwic291cmNlQm90dG9tUGFuZVZpZXdzIiwiVGltZUF4aXNXaWRnZXQiLCJjaGFydFdpZGdldCIsIl9wcml2YXRlX19sZWZ0U3R1YiIsIl9wcml2YXRlX19yaWdodFN0dWIiLCJfcHJpdmF0ZV9fbW91c2VEb3duIiwiX3ByaXZhdGVfX3NpemVDaGFuZ2VkIiwiX3ByaXZhdGVfX2xlZnRTdHViQ2VsbCIsIl9wcml2YXRlX19yaWdodFN0dWJDZWxsIiwiX3ByaXZhdGVfX2R2IiwiX3ByaXZhdGVfX3JlY3JlYXRlU3R1YnMiLCJfaW50ZXJuYWxfbGVmdFN0dWIiLCJfaW50ZXJuYWxfcmlnaHRTdHViIiwiX2ludGVybmFsX3NpemVDaGFuZ2VkIiwiX2ludGVybmFsX3NldFNpemVzIiwidGltZUF4aXNTaXplIiwibGVmdFN0dWJXaWR0aCIsInJpZ2h0U3R1YldpZHRoIiwiX2ludGVybmFsX29wdGltYWxIZWlnaHQiLCJfcHJpdmF0ZV9fZ2V0UmVuZGVyZXJPcHRpb25zIiwiX2ludGVybmFsX2xhYmVsQm90dG9tT2Zmc2V0IiwiX3ByaXZhdGVfX2RyYXdBZGRpdGlvbmFsU291cmNlcyIsIl9wcml2YXRlX19kcmF3TGFiZWxzIiwiYXhpc1ZpZXdzR2V0dGVyIiwiX3ByaXZhdGVfX2xpbmVDb2xvciIsInRpY2tMZW4iLCJfcHJpdmF0ZV9fYWxpZ25UaWNrTWFya0xhYmVsQ29vcmRpbmF0ZSIsImFsbG93Qm9sZExhYmVscyIsIl9wcml2YXRlX19iYXNlQm9sZEZvbnQiLCJsYWJlbFRleHQiLCJsZWZ0VGV4dENvb3JkaW5hdGUiLCJuZXdGb250IiwiYm9yZGVyVmlzaWJsZUdldHRlciIsImJvdHRvbUNvbG9yR2V0dGVyIiwid2luZG93c0Nocm9tZSIsIkNoYXJ0V2lkZ2V0IiwiX3ByaXZhdGVfX3BhbmVXaWRnZXRzIiwiX3ByaXZhdGVfX2RyYXdSYWZJZCIsIl9wcml2YXRlX19sZWZ0UHJpY2VBeGlzV2lkdGgiLCJfcHJpdmF0ZV9fcmlnaHRQcmljZUF4aXNXaWR0aCIsIl9wcml2YXRlX19pbnZhbGlkYXRlTWFzayIsIl9wcml2YXRlX19kcmF3UGxhbm5lZCIsIl9wcml2YXRlX19vYnNlcnZlciIsIl9wcml2YXRlX19jdXJzb3JTdHlsZU92ZXJyaWRlIiwiY2xhc3NMaXN0IiwiZGlzYWJsZVNlbGVjdGlvbiIsIl9wcml2YXRlX190YWJsZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJfcHJpdmF0ZV9fb25XaGVlbEJvdW5kIiwiX3ByaXZhdGVfX29uTW91c2V3aGVlbCIsInNob3VsZFN1YnNjcmliZU1vdXNlV2hlZWwiLCJfcHJpdmF0ZV9fc2V0TW91c2VXaGVlbEV2ZW50TGlzdGVuZXIiLCJfcHJpdmF0ZV9fb25QYW5lV2lkZ2V0Q3Jvc3NoYWlyTW92ZWQiLCJfcHJpdmF0ZV9fdGltZUF4aXNXaWRnZXQiLCJ1c2VkT2JzZXJ2ZXIiLCJhdXRvU2l6ZSIsIl9wcml2YXRlX19pbnN0YWxsT2JzZXJ2ZXIiLCJjb250YWluZXJSZWN0IiwiX2ludGVybmFsX3Jlc2l6ZSIsIl9wcml2YXRlX19zeW5jR3VpV2l0aE1vZGVsIiwiX3ByaXZhdGVfX3VwZGF0ZVRpbWVBeGlzVmlzaWJpbGl0eSIsIl9pbnRlcm5hbF90aW1lQXhpc1dpZGdldCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicGFuZVdpZGdldCIsIl9wcml2YXRlX191bmluc3RhbGxPYnNlcnZlciIsImZvcmNlUmVwYWludCIsInNpemVIaW50IiwiaGVpZ2h0U3RyIiwid2lkdGhTdHIiLCJfcHJpdmF0ZV9fZHJhd0ltcGwiLCJpbnZhbGlkYXRlTWFzayIsImN1cnJlbnRseUhhc01vdXNlV2hlZWxMaXN0ZW5lciIsInNob3VsZEhhdmVNb3VzZVdoZWVsTGlzdGVuZXIiLCJfcHJpdmF0ZV9fYXBwbHlBdXRvU2l6ZU9wdGlvbnMiLCJfaW50ZXJuYWxfdGFrZVNjcmVlbnNob3QiLCJzY3JlZXNob3RCaXRtYXBTaXplIiwiX3ByaXZhdGVfX3RyYXZlcnNlTGF5b3V0Iiwic2NyZWVuc2hvdENhbnZhcyIsIl9pbnRlcm5hbF9nZXRQcmljZUF4aXNXaWR0aCIsIl9wcml2YXRlX19pc0xlZnRBeGlzVmlzaWJsZSIsIl9wcml2YXRlX19pc1JpZ2h0QXhpc1Zpc2libGUiLCJfaW50ZXJuYWxfYXV0b1NpemVBY3RpdmUiLCJfaW50ZXJuYWxfZWxlbWVudCIsInNldFByb3BlcnR5IiwicmVtb3ZlUHJvcGVydHkiLCJfaW50ZXJuYWxfZ2V0Q3Vyc29yT3ZlcnJpZGVTdHlsZSIsIl9pbnRlcm5hbF9wYW5lU2l6ZSIsImZpcnN0UGFuZSIsImRyYXdQcmljZUF4aXNlcyIsInRhcmdldFgiLCJ0YXJnZXRZIiwibGVmdEF4aXNCaXRtYXBXaWR0aCIsImZpcnN0UGFuZUJpdG1hcFdpZHRoIiwicmlnaHRBeGlzQml0bWFwV2lkdGgiLCJkcmF3U3R1YiIsInN0dWIiLCJ0aW1lQXhpc0JpdG1hcFNpemUiLCJfcHJpdmF0ZV9fYWRqdXN0U2l6ZUltcGwiLCJ0b3RhbFN0cmV0Y2giLCJsZWZ0UHJpY2VBeGlzV2lkdGgiLCJyaWdodFByaWNlQXhpc1dpZHRoIiwibWluaW11bVdpZHRoIiwicGFuZVdpZHRoIiwic2VwYXJhdG9yc0hlaWdodCIsInRpbWVBeGlzVmlzaWJsZSIsInRpbWVBeGlzSGVpZ2h0IiwibWluaW11bUhlaWdodCIsIm90aGVyV2lkZ2V0SGVpZ2h0IiwidG90YWxQYW5lSGVpZ2h0Iiwic3RyZXRjaFBpeGVscyIsImFjY3VtdWxhdGVkSGVpZ2h0IiwicGFuZUhlaWdodCIsImNhbGN1bGF0ZVBhbmVIZWlnaHQiLCJfcHJpdmF0ZV9fZGV0ZXJtaW5lV2hlZWxTcGVlZEFkanVzdG1lbnQiLCJkZWx0YU1vZGUiLCJET01fREVMVEFfUEFHRSIsIkRPTV9ERUxUQV9MSU5FIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImRlbHRhWCIsImRlbHRhWSIsInNjcm9sbFNwZWVkQWRqdXN0bWVudCIsInNjcm9sbFBvc2l0aW9uIiwiaW52YWxpZGF0aW9uVHlwZSIsIl9wcml2YXRlX191cGRhdGVHdWkiLCJfcHJpdmF0ZV9fYXBwbHlNb21lbnRhcnlBdXRvU2NhbGUiLCJfcHJpdmF0ZV9fYXBwbHlUaW1lU2NhbGVJbnZhbGlkYXRpb25zIiwicGFuZXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0YXJnZXRQYW5lV2lkZ2V0c0NvdW50IiwiYWN0dWFsUGFuZVdpZGdldHNDb3VudCIsInBvcCIsIl9wcml2YXRlX19vblBhbmVXaWRnZXRDbGlja2VkIiwiX3ByaXZhdGVfX29uUGFuZVdpZGdldERibENsaWNrZWQiLCJpbnNlcnRCZWZvcmUiLCJfcHJpdmF0ZV9fZ2V0TW91c2VFdmVudFBhcmFtc0ltcGwiLCJjbGllbnRUaW1lIiwiaG92ZXJlZFNlcmllcyIsImhvdmVyZWRPYmplY3QiLCJfaW50ZXJuYWxfb3JpZ2luYWxUaW1lIiwiX2ludGVybmFsX3BvaW50IiwiX2ludGVybmFsX2hvdmVyZWRTZXJpZXMiLCJfaW50ZXJuYWxfc2VyaWVzRGF0YSIsIl9pbnRlcm5hbF9ob3ZlcmVkT2JqZWN0IiwiX2ludGVybmFsX3RvdWNoTW91c2VFdmVudERhdGEiLCJkaXNwbGF5IiwiUmVzaXplT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiY29udGFpbmVyRW50cnkiLCJlbnRyeSIsImNvbnRlbnRSZWN0Iiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJ1c2VyU2VsZWN0Iiwid2Via2l0VXNlclNlbGVjdCIsIm1zVXNlclNlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJ3ZWJraXRUYXBIaWdobGlnaHRDb2xvciIsIkJvb2xlYW4iLCJpc1doaXRlc3BhY2VEYXRhIiwib3BlbiIsImlzRnVsZmlsbGVkRGF0YSIsImlzRnVsZmlsbGVkQmFyRGF0YSIsImlzRnVsZmlsbGVkTGluZURhdGEiLCJfX3Jlc3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldENvbG9yZWRMaW5lQmFzZWRTZXJpZXNQbG90Um93IiwiZ2V0QXJlYVNlcmllc1Bsb3RSb3ciLCJnZXRCYXNlbGluZVNlcmllc1Bsb3RSb3ciLCJnZXRCYXJTZXJpZXNQbG90Um93IiwiY2xvc2UiLCJnZXRDYW5kbGVzdGlja1Nlcmllc1Bsb3RSb3ciLCJnZXRDdXN0b21TZXJpZXNQbG90Um93IiwiZGF0YVRvUGxvdFJvdyIsImV4Y2x1ZGVkVGltZSIsImlzU2VyaWVzUGxvdFJvdyIsIndyYXBDdXN0b21WYWx1ZXMiLCJjdXN0b21WYWx1ZXMiLCJfaW50ZXJuYWxfY3VzdG9tVmFsdWVzIiwiaXNXaGl0ZXNwYWNlRGF0YVdpdGhDdXN0b21DaGVjayIsImN1c3RvbUlzV2hpdGVzcGFjZSIsIndyYXBXaGl0ZXNwYWNlRGF0YSIsImNyZWF0ZVBsb3RSb3dGbiIsImdldFNlcmllc1Bsb3RSb3dDcmVhdG9yIiwic2VyaWVzUGxvdFJvd0ZuTWFwIiwiY3JlYXRlRW1wdHlUaW1lUG9pbnREYXRhIiwiX2ludGVybmFsX21hcHBpbmciLCJzZXJpZXNSb3dzRmlyc3RBbmRMYXN0VGltZSIsInNlcmllc1Jvd3MiLCJfaW50ZXJuYWxfZmlyc3RUaW1lIiwiX2ludGVybmFsX2xhc3RUaW1lIiwic2VyaWVzVXBkYXRlSW5mbyIsInByZXZTZXJpZXNSb3dzIiwiZmlyc3RBbmRMYXN0VGltZSIsInByZXZGaXJzdEFuZExhc3RUaW1lIiwidGltZVNjYWxlUG9pbnRUaW1lIiwibWVyZ2VkUG9pbnREYXRhIiwic2F2ZU9yaWdpbmFsVGltZSIsIkRhdGFMYXllciIsIl9wcml2YXRlX19wb2ludERhdGFCeVRpbWVQb2ludCIsIl9wcml2YXRlX19zZXJpZXNSb3dzQnlTZXJpZXMiLCJfcHJpdmF0ZV9fc2VyaWVzTGFzdFRpbWVQb2ludCIsIl9wcml2YXRlX19zb3J0ZWRUaW1lUG9pbnRzIiwiX2ludGVybmFsX3NldFNlcmllc0RhdGEiLCJuZWVkQ2xlYW51cFBvaW50cyIsImlzVGltZVNjYWxlQWZmZWN0ZWQiLCJwb2ludERhdGEiLCJvcmlnaW5hbFRpbWVzIiwidGltZUNvbnZlcnRlciIsImNyZWF0ZVBsb3RSb3ciLCJjdXN0b21XaGl0ZXNwYWNlQ2hlY2tlciIsImhvcnpJdGVtS2V5IiwidGltZVBvaW50RGF0YSIsIl9wcml2YXRlX19jbGVhbnVwUG9pbnRzRGF0YSIsIl9wcml2YXRlX19zZXRSb3dzVG9TZXJpZXMiLCJuZXdUaW1lU2NhbGVQb2ludHMiLCJ0MSIsInQyIiwiX3ByaXZhdGVfX3JlcGxhY2VUaW1lU2NhbGVQb2ludHMiLCJfcHJpdmF0ZV9fZ2V0VXBkYXRlUmVzcG9uc2UiLCJfaW50ZXJuYWxfdXBkYXRlU2VyaWVzRGF0YSIsImV4dGVuZGVkRGF0YSIsImxhc3RTZXJpZXNUaW1lIiwicG9pbnREYXRhQXRUaW1lIiwiYWZmZWN0c1RpbWVTY2FsZSIsIl9wcml2YXRlX191cGRhdGVMYXN0U2VyaWVzUm93IiwiaW5mbyIsIm5ld1BvaW50IiwiaW5zZXJ0SW5kZXgiLCJhc3NpZ25JbmRleFRvUG9pbnREYXRhIiwibGFzdFNlcmllc1JvdyIsIm5ld1RpbWVQb2ludHMiLCJvbGRQb2ludCIsIl9wcml2YXRlX19nZXRCYXNlSW5kZXgiLCJ1cGRhdGVkU2VyaWVzIiwiZGF0YVVwZGF0ZVJlc3BvbnNlIiwiX2ludGVybmFsX3NlcmllcyIsIl9pbnRlcm5hbF9pbmZvIiwiX2ludGVybmFsX3BvaW50cyIsIl9pbnRlcm5hbF9maXJzdENoYW5nZWRQb2ludEluZGV4Iiwic2VyaWVzUm93Iiwic2luZ2xlVmFsdWVEYXRhIiwibGluZURhdGEiLCJhcmVhRGF0YSIsImJhc2VsaW5lRGF0YSIsIm9obGNEYXRhIiwiYmFyRGF0YSIsImNhbmRsZXN0aWNrRGF0YSIsImdldFNlcmllc0RhdGFDcmVhdG9yIiwic2VyaWVzUGxvdFJvd1RvRGF0YU1hcCIsImN1c3RvbURhdGEiLCJjcm9zc2hhaXJPcHRpb25zRGVmYXVsdHMiLCJncmlkT3B0aW9uc0RlZmF1bHRzIiwibGF5b3V0T3B0aW9uc0RlZmF1bHRzIiwicHJpY2VTY2FsZU9wdGlvbnNEZWZhdWx0cyIsInRpbWVTY2FsZU9wdGlvbnNEZWZhdWx0cyIsIndhdGVybWFya09wdGlvbnNEZWZhdWx0cyIsImNoYXJ0T3B0aW9uc0RlZmF1bHRzIiwibGFuZ3VhZ2UiLCJQcmljZVNjYWxlQXBpIiwiX3ByaXZhdGVfX2NoYXJ0V2lkZ2V0IiwiX3ByaXZhdGVfX3ByaWNlU2NhbGVJZCIsImFwcGx5T3B0aW9ucyIsImNoZWNrUHJpY2VMaW5lT3B0aW9ucyIsImNoZWNrSXRlbXNBcmVPcmRlcmVkIiwiYWxsb3dEdXBsaWNhdGVzIiwiY2hlY2tSZXN1bHQiLCJjaGVja1Nlcmllc1ZhbHVlc1R5cGUiLCJnZXRDaGVja2VyIiwiY2hlY2tCYXJJdGVtIiwiY2hlY2tMaW5lSXRlbSIsImNoZWNrQ3VzdG9tSXRlbSIsImJhckl0ZW0iLCJsaW5lSXRlbSIsImNvbnZlcnRTZXJpZXNNYXJrZXIiLCJzbSIsIm5ld1RpbWUiLCJwcmljZUxpbmVPcHRpb25zRGVmYXVsdHMiLCJQcmljZUxpbmUiLCJfaW50ZXJuYWxfcHJpY2VMaW5lIiwiU2VyaWVzQXBpIiwiZGF0YVVwZGF0ZXNDb25zdW1lciIsInByaWNlU2NhbGVBcGlQcm92aWRlciIsImNoYXJ0QXBpIiwiX3ByaXZhdGVfX2RhdGFDaGFuZ2VkRGVsZWdhdGUiLCJfaW50ZXJuYWxfX2RhdGFVcGRhdGVzQ29uc3VtZXIiLCJfcHJpdmF0ZV9fcHJpY2VTY2FsZUFwaVByb3ZpZGVyIiwiX2ludGVybmFsX19jaGFydEFwaSIsInByaWNlVG9Db29yZGluYXRlIiwiY29vcmRpbmF0ZVRvUHJpY2UiLCJiYXJzSW5Mb2dpY2FsUmFuZ2UiLCJjb3JyZWN0ZWRSYW5nZSIsImRhdGFGaXJzdEJhckluUmFuZ2UiLCJkYXRhTGFzdEJhckluUmFuZ2UiLCJkYXRhRmlyc3RJbmRleCIsImRhdGFMYXN0SW5kZXgiLCJiYXJzQmVmb3JlIiwiYmFyc0FmdGVyIiwic2V0RGF0YSIsIl9pbnRlcm5hbF9hcHBseU5ld0RhdGEiLCJfcHJpdmF0ZV9fb25EYXRhQ2hhbmdlZCIsIl9pbnRlcm5hbF91cGRhdGVEYXRhIiwiZGF0YUJ5SW5kZXgiLCJsb2dpY2FsSW5kZXgiLCJtaXNtYXRjaERpcmVjdGlvbiIsImNyZWF0b3IiLCJzZXJpZXNDcmVhdG9yIiwicm93cyIsInN1YnNjcmliZURhdGFDaGFuZ2VkIiwidW5zdWJzY3JpYmVEYXRhQ2hhbmdlZCIsInNldE1hcmtlcnMiLCJjb252ZXJ0ZWRNYXJrZXJzIiwibWFya2VycyIsImludGVybmFsSXRlbSIsImNyZWF0ZVByaWNlTGluZSIsInN0cmljdE9wdGlvbnMiLCJyZW1vdmVQcmljZUxpbmUiLCJhdHRhY2hQcmltaXRpdmUiLCJhdHRhY2hlZCIsInJlcXVlc3RVcGRhdGUiLCJkZXRhY2hQcmltaXRpdmUiLCJkZXRhY2hlZCIsIlRpbWVTY2FsZUFwaSIsInRpbWVBeGlzV2lkZ2V0IiwiX3ByaXZhdGVfX3RpbWVSYW5nZUNoYW5nZWQiLCJfcHJpdmF0ZV9fb25WaXNpYmxlQmFyc0NoYW5nZWQiLCJfcHJpdmF0ZV9fb25WaXNpYmxlTG9naWNhbFJhbmdlQ2hhbmdlZCIsIl9wcml2YXRlX19vblNpemVDaGFuZ2VkIiwic2Nyb2xsVG9Qb3NpdGlvbiIsImFuaW1hdGVkIiwic2Nyb2xsVG9SZWFsVGltZSIsImdldFZpc2libGVSYW5nZSIsInRpbWVSYW5nZSIsInNldFZpc2libGVSYW5nZSIsImNvbnZlcnRlZFJhbmdlIiwiZ2V0VmlzaWJsZUxvZ2ljYWxSYW5nZSIsInNldFZpc2libGVMb2dpY2FsUmFuZ2UiLCJyZXNldFRpbWVTY2FsZSIsImZpdENvbnRlbnQiLCJsb2dpY2FsVG9Db29yZGluYXRlIiwiY29vcmRpbmF0ZVRvTG9naWNhbCIsInRpbWVUb0Nvb3JkaW5hdGUiLCJjb29yZGluYXRlVG9UaW1lIiwic3Vic2NyaWJlVmlzaWJsZVRpbWVSYW5nZUNoYW5nZSIsInVuc3Vic2NyaWJlVmlzaWJsZVRpbWVSYW5nZUNoYW5nZSIsInN1YnNjcmliZVZpc2libGVMb2dpY2FsUmFuZ2VDaGFuZ2UiLCJ1bnN1YnNjcmliZVZpc2libGVMb2dpY2FsUmFuZ2VDaGFuZ2UiLCJzdWJzY3JpYmVTaXplQ2hhbmdlIiwidW5zdWJzY3JpYmVTaXplQ2hhbmdlIiwicGF0Y2hQcmljZUZvcm1hdCIsInByaWNlRm9ybWF0QnVpbHRJbiIsIm1pZ3JhdGVIYW5kbGVTY2FsZVNjcm9sbE9wdGlvbnMiLCJ0b0ludGVybmFsT3B0aW9ucyIsIkNoYXJ0QXBpIiwiX3ByaXZhdGVfX3Nlcmllc01hcCIsIl9wcml2YXRlX19zZXJpZXNNYXBSZXZlcnNlZCIsIl9wcml2YXRlX19jbGlja2VkRGVsZWdhdGUiLCJfcHJpdmF0ZV9fZGJsQ2xpY2tlZERlbGVnYXRlIiwiX3ByaXZhdGVfX2Nyb3NzaGFpck1vdmVkRGVsZWdhdGUiLCJfcHJpdmF0ZV9fZGF0YUxheWVyIiwiaW50ZXJuYWxPcHRpb25zIiwicGFyYW1TdXBwbGllciIsIl9wcml2YXRlX19jb252ZXJ0TW91c2VQYXJhbXMiLCJfcHJpdmF0ZV9fdGltZVNjYWxlQXBpIiwicmVtb3ZlIiwicmVzaXplIiwiYXV0b1NpemVBY3RpdmUiLCJhZGRDdXN0b21TZXJpZXMiLCJkZWZhdWx0cyIsImRlZmF1bHRPcHRpb25zIiwiX3ByaXZhdGVfX2FkZFNlcmllc0ltcGwiLCJhZGRBcmVhU2VyaWVzIiwiYWRkQmFzZWxpbmVTZXJpZXMiLCJhZGRCYXJTZXJpZXMiLCJhZGRDYW5kbGVzdGlja1NlcmllcyIsImFkZEhpc3RvZ3JhbVNlcmllcyIsImFkZExpbmVTZXJpZXMiLCJyZW1vdmVTZXJpZXMiLCJzZXJpZXNBcGkiLCJfcHJpdmF0ZV9fc2VuZFVwZGF0ZVRvQ2hhcnQiLCJzdWJzY3JpYmVDbGljayIsInVuc3Vic2NyaWJlQ2xpY2siLCJzdWJzY3JpYmVDcm9zc2hhaXJNb3ZlIiwidW5zdWJzY3JpYmVDcm9zc2hhaXJNb3ZlIiwic3Vic2NyaWJlRGJsQ2xpY2siLCJ1bnN1YnNjcmliZURibENsaWNrIiwidGFrZVNjcmVlbnNob3QiLCJjaGFydEVsZW1lbnQiLCJwYW5lU2l6ZSIsInNldENyb3NzaGFpclBvc2l0aW9uIiwiY2xlYXJDcm9zc2hhaXJQb3NpdGlvbiIsInN0eWxlRGVmYXVsdHMiLCJfcHJpdmF0ZV9fbWFwU2VyaWVzVG9BcGkiLCJwYXJhbSIsImhvdmVyZWRPYmplY3RJZCIsInNvdXJjZUV2ZW50IiwiY3JlYXRlQ2hhcnRFeCIsImh0bWxFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVDaGFydCIsImRlZmF1bHRIb3J6U2NhbGVCZWhhdmlvciIsImN1c3RvbVNlcmllc0RlZmF1bHRPcHRpb25zIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\n");

/***/ })

};
;